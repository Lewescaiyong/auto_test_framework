# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _MicroWinExecInterface
else:
    import _MicroWinExecInterface

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SUBMODULE_ITEM_IO_ATTRIBUTES(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    API = property(_MicroWinExecInterface.SUBMODULE_ITEM_IO_ATTRIBUTES_API_get, _MicroWinExecInterface.SUBMODULE_ITEM_IO_ATTRIBUTES_API_set)
    slotNumber = property(_MicroWinExecInterface.SUBMODULE_ITEM_IO_ATTRIBUTES_slotNumber_get, _MicroWinExecInterface.SUBMODULE_ITEM_IO_ATTRIBUTES_slotNumber_set)
    subSlotNumber = property(_MicroWinExecInterface.SUBMODULE_ITEM_IO_ATTRIBUTES_subSlotNumber_get, _MicroWinExecInterface.SUBMODULE_ITEM_IO_ATTRIBUTES_subSlotNumber_set)
    ioType = property(_MicroWinExecInterface.SUBMODULE_ITEM_IO_ATTRIBUTES_ioType_get, _MicroWinExecInterface.SUBMODULE_ITEM_IO_ATTRIBUTES_ioType_set)
    inputDataLength = property(_MicroWinExecInterface.SUBMODULE_ITEM_IO_ATTRIBUTES_inputDataLength_get, _MicroWinExecInterface.SUBMODULE_ITEM_IO_ATTRIBUTES_inputDataLength_set)
    outputDataLength = property(_MicroWinExecInterface.SUBMODULE_ITEM_IO_ATTRIBUTES_outputDataLength_get, _MicroWinExecInterface.SUBMODULE_ITEM_IO_ATTRIBUTES_outputDataLength_set)
    submoduleID = property(_MicroWinExecInterface.SUBMODULE_ITEM_IO_ATTRIBUTES_submoduleID_get, _MicroWinExecInterface.SUBMODULE_ITEM_IO_ATTRIBUTES_submoduleID_set)
    SubmoduleIdentNumber = property(_MicroWinExecInterface.SUBMODULE_ITEM_IO_ATTRIBUTES_SubmoduleIdentNumber_get, _MicroWinExecInterface.SUBMODULE_ITEM_IO_ATTRIBUTES_SubmoduleIdentNumber_set)
    startPNIAddress = property(_MicroWinExecInterface.SUBMODULE_ITEM_IO_ATTRIBUTES_startPNIAddress_get, _MicroWinExecInterface.SUBMODULE_ITEM_IO_ATTRIBUTES_startPNIAddress_set)
    startPNQAddress = property(_MicroWinExecInterface.SUBMODULE_ITEM_IO_ATTRIBUTES_startPNQAddress_get, _MicroWinExecInterface.SUBMODULE_ITEM_IO_ATTRIBUTES_startPNQAddress_set)
    bIOXSRequirted = property(_MicroWinExecInterface.SUBMODULE_ITEM_IO_ATTRIBUTES_bIOXSRequirted_get, _MicroWinExecInterface.SUBMODULE_ITEM_IO_ATTRIBUTES_bIOXSRequirted_set)

    def __eq__(self, rSrc):
        return _MicroWinExecInterface.SUBMODULE_ITEM_IO_ATTRIBUTES___eq__(self, rSrc)

    def __init__(self):
        _MicroWinExecInterface.SUBMODULE_ITEM_IO_ATTRIBUTES_swiginit(self, _MicroWinExecInterface.new_SUBMODULE_ITEM_IO_ATTRIBUTES())
    __swig_destroy__ = _MicroWinExecInterface.delete_SUBMODULE_ITEM_IO_ATTRIBUTES

# Register SUBMODULE_ITEM_IO_ATTRIBUTES in _MicroWinExecInterface:
_MicroWinExecInterface.SUBMODULE_ITEM_IO_ATTRIBUTES_swigregister(SUBMODULE_ITEM_IO_ATTRIBUTES)

class SUBMODULE_ADDR(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    startPNIAddress = property(_MicroWinExecInterface.SUBMODULE_ADDR_startPNIAddress_get, _MicroWinExecInterface.SUBMODULE_ADDR_startPNIAddress_set)
    startPNQAddress = property(_MicroWinExecInterface.SUBMODULE_ADDR_startPNQAddress_get, _MicroWinExecInterface.SUBMODULE_ADDR_startPNQAddress_set)

    def __eq__(self, rSrc):
        return _MicroWinExecInterface.SUBMODULE_ADDR___eq__(self, rSrc)

    def __init__(self):
        _MicroWinExecInterface.SUBMODULE_ADDR_swiginit(self, _MicroWinExecInterface.new_SUBMODULE_ADDR())
    __swig_destroy__ = _MicroWinExecInterface.delete_SUBMODULE_ADDR

# Register SUBMODULE_ADDR in _MicroWinExecInterface:
_MicroWinExecInterface.SUBMODULE_ADDR_swigregister(SUBMODULE_ADDR)

class MODULE_ITEM(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    slotNumber = property(_MicroWinExecInterface.MODULE_ITEM_slotNumber_get, _MicroWinExecInterface.MODULE_ITEM_slotNumber_set)
    moduleID = property(_MicroWinExecInterface.MODULE_ITEM_moduleID_get, _MicroWinExecInterface.MODULE_ITEM_moduleID_set)
    moduleIdentNumber = property(_MicroWinExecInterface.MODULE_ITEM_moduleIdentNumber_get, _MicroWinExecInterface.MODULE_ITEM_moduleIdentNumber_set)
    m_SubModuleIOMap = property(_MicroWinExecInterface.MODULE_ITEM_m_SubModuleIOMap_get, _MicroWinExecInterface.MODULE_ITEM_m_SubModuleIOMap_set)

    def __eq__(self, rSrc):
        return _MicroWinExecInterface.MODULE_ITEM___eq__(self, rSrc)

    def __init__(self):
        _MicroWinExecInterface.MODULE_ITEM_swiginit(self, _MicroWinExecInterface.new_MODULE_ITEM())
    __swig_destroy__ = _MicroWinExecInterface.delete_MODULE_ITEM

# Register MODULE_ITEM in _MicroWinExecInterface:
_MicroWinExecInterface.MODULE_ITEM_swigregister(MODULE_ITEM)

class SDBPNDevice(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MicroWinExecInterface.SDBPNDevice_swiginit(self, _MicroWinExecInterface.new_SDBPNDevice(*args))
    __swig_destroy__ = _MicroWinExecInterface.delete_SDBPNDevice

    def __eq__(self, rSrc):
        return _MicroWinExecInterface.SDBPNDevice___eq__(self, rSrc)

    def Empty(self):
        return _MicroWinExecInterface.SDBPNDevice_Empty(self)

    def Store(self, rDest):
        return _MicroWinExecInterface.SDBPNDevice_Store(self, rDest)

    def Retrieve(self, *args):
        return _MicroWinExecInterface.SDBPNDevice_Retrieve(self, *args)

    def SetBlockData(self, nParamSize, ppbyParamData):
        return _MicroWinExecInterface.SDBPNDevice_SetBlockData(self, nParamSize, ppbyParamData)

    def GetBlockData(self, pnParamBytes, ppbyParamData, deviceID):
        return _MicroWinExecInterface.SDBPNDevice_GetBlockData(self, pnParamBytes, ppbyParamData, deviceID)

    def GenerateUUID(self, uuid):
        return _MicroWinExecInterface.SDBPNDevice_GenerateUUID(self, uuid)

    def UUID2ByteArray(self, uuid):
        return _MicroWinExecInterface.SDBPNDevice_UUID2ByteArray(self, uuid)

    def GuidToString(self, guid):
        return _MicroWinExecInterface.SDBPNDevice_GuidToString(self, guid)

    def isCatalogConfig(self):
        return _MicroWinExecInterface.SDBPNDevice_isCatalogConfig(self)

    def Compare(self, pDevice, nMaxErrors, pErrors):
        return _MicroWinExecInterface.SDBPNDevice_Compare(self, pDevice, nMaxErrors, pErrors)

    def ParseIMAttribute(self):
        return _MicroWinExecInterface.SDBPNDevice_ParseIMAttribute(self)
    m_IOCRData = property(_MicroWinExecInterface.SDBPNDevice_m_IOCRData_get, _MicroWinExecInterface.SDBPNDevice_m_IOCRData_set)
    m_DeviceProperties = property(_MicroWinExecInterface.SDBPNDevice_m_DeviceProperties_get, _MicroWinExecInterface.SDBPNDevice_m_DeviceProperties_set)
    m_ARcommData = property(_MicroWinExecInterface.SDBPNDevice_m_ARcommData_get, _MicroWinExecInterface.SDBPNDevice_m_ARcommData_set)
    m_ExpectedSubModuleData = property(_MicroWinExecInterface.SDBPNDevice_m_ExpectedSubModuleData_get, _MicroWinExecInterface.SDBPNDevice_m_ExpectedSubModuleData_set)
    m_ModuleMap = property(_MicroWinExecInterface.SDBPNDevice_m_ModuleMap_get, _MicroWinExecInterface.SDBPNDevice_m_ModuleMap_set)
    m_DeviceNareType = property(_MicroWinExecInterface.SDBPNDevice_m_DeviceNareType_get, _MicroWinExecInterface.SDBPNDevice_m_DeviceNareType_set)
    m_AlarmCRData = property(_MicroWinExecInterface.SDBPNDevice_m_AlarmCRData_get, _MicroWinExecInterface.SDBPNDevice_m_AlarmCRData_set)
    m_SubmoduleAddrData = property(_MicroWinExecInterface.SDBPNDevice_m_SubmoduleAddrData_get, _MicroWinExecInterface.SDBPNDevice_m_SubmoduleAddrData_set)
    m_SubmoduleIDData = property(_MicroWinExecInterface.SDBPNDevice_m_SubmoduleIDData_get, _MicroWinExecInterface.SDBPNDevice_m_SubmoduleIDData_set)
    m_ARRecordData = property(_MicroWinExecInterface.SDBPNDevice_m_ARRecordData_get, _MicroWinExecInterface.SDBPNDevice_m_ARRecordData_set)
    m_ScfAdaptionData = property(_MicroWinExecInterface.SDBPNDevice_m_ScfAdaptionData_get, _MicroWinExecInterface.SDBPNDevice_m_ScfAdaptionData_set)
    m_SlotModuleParameterMap = property(_MicroWinExecInterface.SDBPNDevice_m_SlotModuleParameterMap_get, _MicroWinExecInterface.SDBPNDevice_m_SlotModuleParameterMap_set)

    def EncodeModuleParameters(self, pDevice, interfacesOfSubnet, isScalanceDeviceCapabilitie):
        return _MicroWinExecInterface.SDBPNDevice_EncodeModuleParameters(self, pDevice, interfacesOfSubnet, isScalanceDeviceCapabilitie)

    def EncodeSubmoduleMap(self, device, controller):
        return _MicroWinExecInterface.SDBPNDevice_EncodeSubmoduleMap(self, device, controller)

    def EncodeIOCRSDB(self, device):
        return _MicroWinExecInterface.SDBPNDevice_EncodeIOCRSDB(self, device)

    def EncodeExpectedSubModuleData(self, ioController):
        return _MicroWinExecInterface.SDBPNDevice_EncodeExpectedSubModuleData(self, ioController)

    def EncodeDeviceNareData(self, pDevice, controller):
        return _MicroWinExecInterface.SDBPNDevice_EncodeDeviceNareData(self, pDevice, controller)

    def EncodeDeviceProperties(self, device, controller):
        return _MicroWinExecInterface.SDBPNDevice_EncodeDeviceProperties(self, device, controller)

    def EncodeSubmoduleAddress(self):
        return _MicroWinExecInterface.SDBPNDevice_EncodeSubmoduleAddress(self)

    def EncodeARComunicationData(self, device, controller):
        return _MicroWinExecInterface.SDBPNDevice_EncodeARComunicationData(self, device, controller)

    def EncodeSubmoduleID(self):
        return _MicroWinExecInterface.SDBPNDevice_EncodeSubmoduleID(self)

    def EncodeARRecordData(self, device):
        return _MicroWinExecInterface.SDBPNDevice_EncodeARRecordData(self, device)

    def EncodeAlarmCRData(self, device):
        return _MicroWinExecInterface.SDBPNDevice_EncodeAlarmCRData(self, device)

    def EncodeLocalSCFAdaptionData(self, device, controller):
        return _MicroWinExecInterface.SDBPNDevice_EncodeLocalSCFAdaptionData(self, device, controller)

    def GetSubmoduleIOData(self, ioDataMap):
        return _MicroWinExecInterface.SDBPNDevice_GetSubmoduleIOData(self, ioDataMap)

    def GetSubmoduleAddressMap(self, addressMap):
        return _MicroWinExecInterface.SDBPNDevice_GetSubmoduleAddressMap(self, addressMap)

    def GetSubmoduleInputOutPutAddress(self, addressMap, slotNum, subslotNubmer, startIaddr, startQaddr):
        return _MicroWinExecInterface.SDBPNDevice_GetSubmoduleInputOutPutAddress(self, addressMap, slotNum, subslotNubmer, startIaddr, startQaddr)

    def GetSubmoduleRecordDataList(self, deviceNumber, slotNum, subslotNubmer, submoduleParameterVector):
        return _MicroWinExecInterface.SDBPNDevice_GetSubmoduleRecordDataList(self, deviceNumber, slotNum, subslotNubmer, submoduleParameterVector)

    def GetPortParameter(self, portParaMap, slotNum, subslotNubmer, portPara):
        return _MicroWinExecInterface.SDBPNDevice_GetPortParameter(self, portParaMap, slotNum, subslotNubmer, portPara)

    def GetIMRecord(self, imRecordsMap, slotNum, subslotNubmer, subIM):
        return _MicroWinExecInterface.SDBPNDevice_GetIMRecord(self, imRecordsMap, slotNum, subslotNubmer, subIM)

    def GetGSDPathFromSDB(self, strGSDFullPathName, deviceNumber, isCategoryConfigIODevice):
        return _MicroWinExecInterface.SDBPNDevice_GetGSDPathFromSDB(self, strGSDFullPathName, deviceNumber, isCategoryConfigIODevice)

# Register SDBPNDevice in _MicroWinExecInterface:
_MicroWinExecInterface.SDBPNDevice_swigregister(SDBPNDevice)

class sPLCINFO_DIAGNOSTIC_ALARM(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type = property(_MicroWinExecInterface.sPLCINFO_DIAGNOSTIC_ALARM_type_get, _MicroWinExecInterface.sPLCINFO_DIAGNOSTIC_ALARM_type_set)
    channel = property(_MicroWinExecInterface.sPLCINFO_DIAGNOSTIC_ALARM_channel_get, _MicroWinExecInterface.sPLCINFO_DIAGNOSTIC_ALARM_channel_set)
    scope = property(_MicroWinExecInterface.sPLCINFO_DIAGNOSTIC_ALARM_scope_get, _MicroWinExecInterface.sPLCINFO_DIAGNOSTIC_ALARM_scope_set)
    direction = property(_MicroWinExecInterface.sPLCINFO_DIAGNOSTIC_ALARM_direction_get, _MicroWinExecInterface.sPLCINFO_DIAGNOSTIC_ALARM_direction_set)

    def __init__(self):
        _MicroWinExecInterface.sPLCINFO_DIAGNOSTIC_ALARM_swiginit(self, _MicroWinExecInterface.new_sPLCINFO_DIAGNOSTIC_ALARM())
    __swig_destroy__ = _MicroWinExecInterface.delete_sPLCINFO_DIAGNOSTIC_ALARM

# Register sPLCINFO_DIAGNOSTIC_ALARM in _MicroWinExecInterface:
_MicroWinExecInterface.sPLCINFO_DIAGNOSTIC_ALARM_swigregister(sPLCINFO_DIAGNOSTIC_ALARM)

MODULE_STATUS_GOOD = _MicroWinExecInterface.MODULE_STATUS_GOOD
MODULE_STATUS_BAD = _MicroWinExecInterface.MODULE_STATUS_BAD
MODULE_STATUS_UNKNOWN = _MicroWinExecInterface.MODULE_STATUS_UNKNOWN
IODATA_STATUS_GOOD = _MicroWinExecInterface.IODATA_STATUS_GOOD
IODATA_STATUS_BAD = _MicroWinExecInterface.IODATA_STATUS_BAD
IODATA_STATUS_UNKNOWN = _MicroWinExecInterface.IODATA_STATUS_UNKNOWN
PN_DEVICE_NOT_CONFIG = _MicroWinExecInterface.PN_DEVICE_NOT_CONFIG
PN_DEVICE_STATUS_GOOD = _MicroWinExecInterface.PN_DEVICE_STATUS_GOOD
PN_DEVICE_STATUS_NOT_AVAI = _MicroWinExecInterface.PN_DEVICE_STATUS_NOT_AVAI
PN_DEVICE_STATUS_DIAGNOSIS = _MicroWinExecInterface.PN_DEVICE_STATUS_DIAGNOSIS
PN_DEVICE_STATUS_UNKNOWN = _MicroWinExecInterface.PN_DEVICE_STATUS_UNKNOWN
class sModuleInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    strName = property(_MicroWinExecInterface.sModuleInfo_strName_get, _MicroWinExecInterface.sModuleInfo_strName_set)
    strOrderNumber = property(_MicroWinExecInterface.sModuleInfo_strOrderNumber_get, _MicroWinExecInterface.sModuleInfo_strOrderNumber_set)
    strVersion = property(_MicroWinExecInterface.sModuleInfo_strVersion_get, _MicroWinExecInterface.sModuleInfo_strVersion_set)

    def __init__(self):
        _MicroWinExecInterface.sModuleInfo_swiginit(self, _MicroWinExecInterface.new_sModuleInfo())
    __swig_destroy__ = _MicroWinExecInterface.delete_sModuleInfo

# Register sModuleInfo in _MicroWinExecInterface:
_MicroWinExecInterface.sModuleInfo_swigregister(sModuleInfo)

class sGSDAlarmInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    strContent = property(_MicroWinExecInterface.sGSDAlarmInfo_strContent_get, _MicroWinExecInterface.sGSDAlarmInfo_strContent_set)
    strHelp = property(_MicroWinExecInterface.sGSDAlarmInfo_strHelp_get, _MicroWinExecInterface.sGSDAlarmInfo_strHelp_set)

    def __init__(self):
        _MicroWinExecInterface.sGSDAlarmInfo_swiginit(self, _MicroWinExecInterface.new_sGSDAlarmInfo())
    __swig_destroy__ = _MicroWinExecInterface.delete_sGSDAlarmInfo

# Register sGSDAlarmInfo in _MicroWinExecInterface:
_MicroWinExecInterface.sGSDAlarmInfo_swigregister(sGSDAlarmInfo)

INVALID_ID = _MicroWinExecInterface.INVALID_ID
LOCAL_IP = _MicroWinExecInterface.LOCAL_IP
IDEVICE_NUMBER_SPECIFIC = _MicroWinExecInterface.IDEVICE_NUMBER_SPECIFIC
class EX_PLCInformationData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MicroWinExecInterface.EX_PLCInformationData_swiginit(self, _MicroWinExecInterface.new_EX_PLCInformationData())
    __swig_destroy__ = _MicroWinExecInterface.delete_EX_PLCInformationData

    def SetDeviceInformation(self, pInfo):
        return _MicroWinExecInterface.EX_PLCInformationData_SetDeviceInformation(self, pInfo)

    def GetPNSDBData(self):
        return _MicroWinExecInterface.EX_PLCInformationData_GetPNSDBData(self)

    def SetPNSDBData(self, Src):
        return _MicroWinExecInterface.EX_PLCInformationData_SetPNSDBData(self, Src)

    def bPNConfigUploaded(self):
        return _MicroWinExecInterface.EX_PLCInformationData_bPNConfigUploaded(self)

    def SetPNConfigUploadFlag(self, bUploaded):
        return _MicroWinExecInterface.EX_PLCInformationData_SetPNConfigUploadFlag(self, bUploaded)

    def ClearEventLogs(self):
        return _MicroWinExecInterface.EX_PLCInformationData_ClearEventLogs(self)

    def SetEventLog(self, cLog):
        return _MicroWinExecInterface.EX_PLCInformationData_SetEventLog(self, cLog)

    def SetNumEventLogs(self, nLogs):
        return _MicroWinExecInterface.EX_PLCInformationData_SetNumEventLogs(self, nLogs)

    def ClearAlarms(self):
        return _MicroWinExecInterface.EX_PLCInformationData_ClearAlarms(self)

    def SetAlarm(self, cAlarmSrc):
        return _MicroWinExecInterface.EX_PLCInformationData_SetAlarm(self, cAlarmSrc)

    def SetNumAlarms(self, nAlarms):
        return _MicroWinExecInterface.EX_PLCInformationData_SetNumAlarms(self, nAlarms)

    def SetErrorPath(self, rErrPath):
        return _MicroWinExecInterface.EX_PLCInformationData_SetErrorPath(self, rErrPath)

    def SetNonFatalError(self, wNonFatalError):
        return _MicroWinExecInterface.EX_PLCInformationData_SetNonFatalError(self, wNonFatalError)

    def GetLastScanTime(self):
        return _MicroWinExecInterface.EX_PLCInformationData_GetLastScanTime(self)

    def GetMinScanTime(self):
        return _MicroWinExecInterface.EX_PLCInformationData_GetMinScanTime(self)

    def GetMaxScanTime(self):
        return _MicroWinExecInterface.EX_PLCInformationData_GetMaxScanTime(self)

    def GetCPUType(self):
        return _MicroWinExecInterface.EX_PLCInformationData_GetCPUType(self)

    def GetCPUMode(self):
        return _MicroWinExecInterface.EX_PLCInformationData_GetCPUMode(self)

    def GetStatus(self):
        return _MicroWinExecInterface.EX_PLCInformationData_GetStatus(self)

    def GetForcedStatus(self):
        return _MicroWinExecInterface.EX_PLCInformationData_GetForcedStatus(self)

    def GetCurrentFatal(self):
        return _MicroWinExecInterface.EX_PLCInformationData_GetCurrentFatal(self)

    def GetLastFatal(self):
        return _MicroWinExecInterface.EX_PLCInformationData_GetLastFatal(self)

    def GetNonFatal(self):
        return _MicroWinExecInterface.EX_PLCInformationData_GetNonFatal(self)

    def GetNonFatalValue(self):
        return _MicroWinExecInterface.EX_PLCInformationData_GetNonFatalValue(self)

    def GetNonFatalCount(self):
        return _MicroWinExecInterface.EX_PLCInformationData_GetNonFatalCount(self)

    def GetAddressOfError(self):
        return _MicroWinExecInterface.EX_PLCInformationData_GetAddressOfError(self)

    def GetErrorPath(self):
        return _MicroWinExecInterface.EX_PLCInformationData_GetErrorPath(self)

    def GetTotalFatalCount(self):
        return _MicroWinExecInterface.EX_PLCInformationData_GetTotalFatalCount(self)

    def GetCPURole(self):
        return _MicroWinExecInterface.EX_PLCInformationData_GetCPURole(self)

    def GetCPURoleStr(self, eRole):
        return _MicroWinExecInterface.EX_PLCInformationData_GetCPURoleStr(self, eRole)

    def GetConnectedIPOfDevice(self, nDeviceNo):
        return _MicroWinExecInterface.EX_PLCInformationData_GetConnectedIPOfDevice(self, nDeviceNo)

    def GetHighlevelCtrlIP(self):
        return _MicroWinExecInterface.EX_PLCInformationData_GetHighlevelCtrlIP(self)

    def GetIDeviceStatusCode(self):
        return _MicroWinExecInterface.EX_PLCInformationData_GetIDeviceStatusCode(self)

    def GetIDeviceIOStatus(self):
        return _MicroWinExecInterface.EX_PLCInformationData_GetIDeviceIOStatus(self)

    def GetIDeviceConStatusCode(self):
        return _MicroWinExecInterface.EX_PLCInformationData_GetIDeviceConStatusCode(self)

    def GetIDeviceConStatus(self):
        return _MicroWinExecInterface.EX_PLCInformationData_GetIDeviceConStatus(self)

    def GetModuleCount(self):
        return _MicroWinExecInterface.EX_PLCInformationData_GetModuleCount(self)

    def GetModuleName(self, nIndex):
        return _MicroWinExecInterface.EX_PLCInformationData_GetModuleName(self, nIndex)

    def GetShortModuleName(self, nIndex):
        return _MicroWinExecInterface.EX_PLCInformationData_GetShortModuleName(self, nIndex)

    def GetMLFB(self, nIndex):
        return _MicroWinExecInterface.EX_PLCInformationData_GetMLFB(self, nIndex)

    def GetHardwareRevision(self, nIndex):
        return _MicroWinExecInterface.EX_PLCInformationData_GetHardwareRevision(self, nIndex)

    def GetFirmwareRevision(self, nIndex):
        return _MicroWinExecInterface.EX_PLCInformationData_GetFirmwareRevision(self, nIndex)

    def GetSerialNumber(self, nIndex):
        return _MicroWinExecInterface.EX_PLCInformationData_GetSerialNumber(self, nIndex)

    def GetIOErrors(self, nIndex):
        return _MicroWinExecInterface.EX_PLCInformationData_GetIOErrors(self, nIndex)

    def GetErrorStatus(self, nIndex):
        return _MicroWinExecInterface.EX_PLCInformationData_GetErrorStatus(self, nIndex)

    def GetVendorID(self, nIndex):
        return _MicroWinExecInterface.EX_PLCInformationData_GetVendorID(self, nIndex)

    def IsDP01(self, nIndex):
        return _MicroWinExecInterface.EX_PLCInformationData_IsDP01(self, nIndex)

    def GetDP01Info(self, m_nIndex):
        return _MicroWinExecInterface.EX_PLCInformationData_GetDP01Info(self, m_nIndex)

    def GetEventCount(self):
        return _MicroWinExecInterface.EX_PLCInformationData_GetEventCount(self)

    def GetEventDateTime(self, nIndex):
        return _MicroWinExecInterface.EX_PLCInformationData_GetEventDateTime(self, nIndex)

    def GetEventType(self, nIndex):
        return _MicroWinExecInterface.EX_PLCInformationData_GetEventType(self, nIndex)

    def GetEventTypeCode(self, nIndex):
        return _MicroWinExecInterface.EX_PLCInformationData_GetEventTypeCode(self, nIndex)

    def GetEventError(self, nIndex):
        return _MicroWinExecInterface.EX_PLCInformationData_GetEventError(self, nIndex)

    def GetEventErrorCode(self, nIndex):
        return _MicroWinExecInterface.EX_PLCInformationData_GetEventErrorCode(self, nIndex)

    def GetAlarmCount(self):
        return _MicroWinExecInterface.EX_PLCInformationData_GetAlarmCount(self)

    def GetAlarmDeviceNo(self, nIndex):
        return _MicroWinExecInterface.EX_PLCInformationData_GetAlarmDeviceNo(self, nIndex)

    def GetAlarmSlotNo(self, nIndex):
        return _MicroWinExecInterface.EX_PLCInformationData_GetAlarmSlotNo(self, nIndex)

    def GetAlarmSubslotNo(self, nIndex):
        return _MicroWinExecInterface.EX_PLCInformationData_GetAlarmSubslotNo(self, nIndex)

    def GetConfigDeviceNo(self, nIndex):
        return _MicroWinExecInterface.EX_PLCInformationData_GetConfigDeviceNo(self, nIndex)

    def GetAlarmDeviceName(self, nIndex):
        return _MicroWinExecInterface.EX_PLCInformationData_GetAlarmDeviceName(self, nIndex)

    def GetSubSlotNumber(self, nIndex):
        return _MicroWinExecInterface.EX_PLCInformationData_GetSubSlotNumber(self, nIndex)

    def GetChannelId(self, nIndex):
        return _MicroWinExecInterface.EX_PLCInformationData_GetChannelId(self, nIndex)

    def GetAlarmType(self, nIndex):
        return _MicroWinExecInterface.EX_PLCInformationData_GetAlarmType(self, nIndex)

    def GetAlarmDateTime(self, nIndex):
        return _MicroWinExecInterface.EX_PLCInformationData_GetAlarmDateTime(self, nIndex)

    def FormatAlarmType(self, wAlarmType):
        return _MicroWinExecInterface.EX_PLCInformationData_FormatAlarmType(self, wAlarmType)

    def FormatSysDefChErr(self, dwChErrType):
        return _MicroWinExecInterface.EX_PLCInformationData_FormatSysDefChErr(self, dwChErrType)

    def FormatSysDefExtChErr(self, dwChErrType, dwExtChErrType):
        return _MicroWinExecInterface.EX_PLCInformationData_FormatSysDefExtChErr(self, dwChErrType, dwExtChErrType)

    def FormatExtChErrAddVal(self, dwChErrType, dwExtChErrType, dwAddVal, wChannelNo):
        return _MicroWinExecInterface.EX_PLCInformationData_FormatExtChErrAddVal(self, dwChErrType, dwExtChErrType, dwAddVal, wChannelNo)

    def GetSeverity(self, bySeverity, dwQualifier):
        return _MicroWinExecInterface.EX_PLCInformationData_GetSeverity(self, bySeverity, dwQualifier)

    def GetChSpecifier(self, wSpecifier):
        return _MicroWinExecInterface.EX_PLCInformationData_GetChSpecifier(self, wSpecifier)

    def GetAlarmContent(self, nIndex, strAlarmContent, strAlarmHelpInfo):
        return _MicroWinExecInterface.EX_PLCInformationData_GetAlarmContent(self, nIndex, strAlarmContent, strAlarmHelpInfo)

    def FormatModuleAlarm(self, nDeviceNo, nSlotNo, strAlarm):
        return _MicroWinExecInterface.EX_PLCInformationData_FormatModuleAlarm(self, nDeviceNo, nSlotNo, strAlarm)

    def FormatSingleAlarm(self, nIndex, strAlarmContent):
        return _MicroWinExecInterface.EX_PLCInformationData_FormatSingleAlarm(self, nIndex, strAlarmContent)

    def GetModuleStatusCode(self, nDeviceNo, nIndex, eStatus):
        return _MicroWinExecInterface.EX_PLCInformationData_GetModuleStatusCode(self, nDeviceNo, nIndex, eStatus)

    def GetIODataStatusCode(self, nDeviceNo, nIndex, eStatus):
        return _MicroWinExecInterface.EX_PLCInformationData_GetIODataStatusCode(self, nDeviceNo, nIndex, eStatus)

    def GetDeviceStatusCode(self, nDeviceNo, eStatus):
        return _MicroWinExecInterface.EX_PLCInformationData_GetDeviceStatusCode(self, nDeviceNo, eStatus)

    def GetDeviceName(self, nDeviceNo):
        return _MicroWinExecInterface.EX_PLCInformationData_GetDeviceName(self, nDeviceNo)

    def GetDeviceConvertedName(self, nDeviceNo):
        return _MicroWinExecInterface.EX_PLCInformationData_GetDeviceConvertedName(self, nDeviceNo)

    def GetConfigDeviceIPAddr(self, nDeviceNo):
        return _MicroWinExecInterface.EX_PLCInformationData_GetConfigDeviceIPAddr(self, nDeviceNo)

    def GetDeviceType(self, nDeviceNo):
        return _MicroWinExecInterface.EX_PLCInformationData_GetDeviceType(self, nDeviceNo)

    def FormatModuleStatus(self, eModuleStatus, eIOstatus, strStatus):
        return _MicroWinExecInterface.EX_PLCInformationData_FormatModuleStatus(self, eModuleStatus, eIOstatus, strStatus)

    def FormatDeviceStatus(self, eStatus):
        return _MicroWinExecInterface.EX_PLCInformationData_FormatDeviceStatus(self, eStatus)

    def GetNumberofSlots(self, nDeviceNo):
        return _MicroWinExecInterface.EX_PLCInformationData_GetNumberofSlots(self, nDeviceNo)

    def GetModuleSlotNumber(self, nDeviceNo, nIndex):
        return _MicroWinExecInterface.EX_PLCInformationData_GetModuleSlotNumber(self, nDeviceNo, nIndex)

    def GetModuleNameByID(self, nDeviceNo, nSlotNo):
        return _MicroWinExecInterface.EX_PLCInformationData_GetModuleNameByID(self, nDeviceNo, nSlotNo)

    def GetConfigSubModuleInfo(self, nDeviceNo, nSlotNo, nSubslotNo, strModuleName, strOrderNo, strVersion):
        return _MicroWinExecInterface.EX_PLCInformationData_GetConfigSubModuleInfo(self, nDeviceNo, nSlotNo, nSubslotNo, strModuleName, strOrderNo, strVersion)

    def GetActualSubModuleInfo(self, nIndex, strOrderNo, strVersion):
        return _MicroWinExecInterface.EX_PLCInformationData_GetActualSubModuleInfo(self, nIndex, strOrderNo, strVersion)

    def GetConfigModuleInfo(self, nDeviceNo, nSlotNo, eType, strModuleName, strOrderNo, strVersion):
        return _MicroWinExecInterface.EX_PLCInformationData_GetConfigModuleInfo(self, nDeviceNo, nSlotNo, eType, strModuleName, strOrderNo, strVersion)

    def CompareVersion(self, strConfigureVer, strActualVer):
        return _MicroWinExecInterface.EX_PLCInformationData_CompareVersion(self, strConfigureVer, strActualVer)

# Register EX_PLCInformationData in _MicroWinExecInterface:
_MicroWinExecInterface.EX_PLCInformationData_swigregister(EX_PLCInformationData)

class COMPASS_DCP_LIFE_LIST(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MicroWinExecInterface.COMPASS_DCP_LIFE_LIST_swiginit(self, _MicroWinExecInterface.new_COMPASS_DCP_LIFE_LIST())

    def IsValidMAC(self):
        return _MicroWinExecInterface.COMPASS_DCP_LIFE_LIST_IsValidMAC(self)

    def IsEmpty(self):
        return _MicroWinExecInterface.COMPASS_DCP_LIFE_LIST_IsEmpty(self)

    def __eq__(self, rRight):
        return _MicroWinExecInterface.COMPASS_DCP_LIFE_LIST___eq__(self, rRight)
    m_lIPAddress = property(_MicroWinExecInterface.COMPASS_DCP_LIFE_LIST_m_lIPAddress_get, _MicroWinExecInterface.COMPASS_DCP_LIFE_LIST_m_lIPAddress_set)
    m_lSubnet = property(_MicroWinExecInterface.COMPASS_DCP_LIFE_LIST_m_lSubnet_get, _MicroWinExecInterface.COMPASS_DCP_LIFE_LIST_m_lSubnet_set)
    m_lGateway = property(_MicroWinExecInterface.COMPASS_DCP_LIFE_LIST_m_lGateway_get, _MicroWinExecInterface.COMPASS_DCP_LIFE_LIST_m_lGateway_set)
    m_byMACAddress = property(_MicroWinExecInterface.COMPASS_DCP_LIFE_LIST_m_byMACAddress_get, _MicroWinExecInterface.COMPASS_DCP_LIFE_LIST_m_byMACAddress_set)
    m_aszStationName = property(_MicroWinExecInterface.COMPASS_DCP_LIFE_LIST_m_aszStationName_get, _MicroWinExecInterface.COMPASS_DCP_LIFE_LIST_m_aszStationName_set)
    m_nPPIAddress = property(_MicroWinExecInterface.COMPASS_DCP_LIFE_LIST_m_nPPIAddress_get, _MicroWinExecInterface.COMPASS_DCP_LIFE_LIST_m_nPPIAddress_set)
    m_dwLTSAP = property(_MicroWinExecInterface.COMPASS_DCP_LIFE_LIST_m_dwLTSAP_get, _MicroWinExecInterface.COMPASS_DCP_LIFE_LIST_m_dwLTSAP_set)
    m_dwRTSAP = property(_MicroWinExecInterface.COMPASS_DCP_LIFE_LIST_m_dwRTSAP_get, _MicroWinExecInterface.COMPASS_DCP_LIFE_LIST_m_dwRTSAP_set)
    m_stationRole = property(_MicroWinExecInterface.COMPASS_DCP_LIFE_LIST_m_stationRole_get, _MicroWinExecInterface.COMPASS_DCP_LIFE_LIST_m_stationRole_set)
    m_typeOfStation = property(_MicroWinExecInterface.COMPASS_DCP_LIFE_LIST_m_typeOfStation_get, _MicroWinExecInterface.COMPASS_DCP_LIFE_LIST_m_typeOfStation_set)
    m_eBaudrate = property(_MicroWinExecInterface.COMPASS_DCP_LIFE_LIST_m_eBaudrate_get, _MicroWinExecInterface.COMPASS_DCP_LIFE_LIST_m_eBaudrate_set)
    m_eDeviceType = property(_MicroWinExecInterface.COMPASS_DCP_LIFE_LIST_m_eDeviceType_get, _MicroWinExecInterface.COMPASS_DCP_LIFE_LIST_m_eDeviceType_set)
    __swig_destroy__ = _MicroWinExecInterface.delete_COMPASS_DCP_LIFE_LIST

# Register COMPASS_DCP_LIFE_LIST in _MicroWinExecInterface:
_MicroWinExecInterface.COMPASS_DCP_LIFE_LIST_swigregister(COMPASS_DCP_LIFE_LIST)
cvar = _MicroWinExecInterface.cvar
MAX_BUFFER_LENGTH = cvar.MAX_BUFFER_LENGTH
MAX_STRING_SIZE = cvar.MAX_STRING_SIZE
MAC_ADDRESS_SIZE = cvar.MAC_ADDRESS_SIZE
MAX_NAME_SIZE = cvar.MAX_NAME_SIZE

Defalut = _MicroWinExecInterface.Defalut
S7OPST_NODE_ROLE_IO_DEVICE = _MicroWinExecInterface.S7OPST_NODE_ROLE_IO_DEVICE
S7OPST_NODE_ROLE_IO_CONTROLLER = _MicroWinExecInterface.S7OPST_NODE_ROLE_IO_CONTROLLER
S7OPST_NODE_ROLE_IO_MULTIDEVICE = _MicroWinExecInterface.S7OPST_NODE_ROLE_IO_MULTIDEVICE
S7OPST_NODE_ROLE_IO_SUPERVISOR = _MicroWinExecInterface.S7OPST_NODE_ROLE_IO_SUPERVISOR
class DATALOG_UPLOAD_OPTIONS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MicroWinExecInterface.DATALOG_UPLOAD_OPTIONS_swiginit(self, _MicroWinExecInterface.new_DATALOG_UPLOAD_OPTIONS())
    m_aUpload = property(_MicroWinExecInterface.DATALOG_UPLOAD_OPTIONS_m_aUpload_get, _MicroWinExecInterface.DATALOG_UPLOAD_OPTIONS_m_aUpload_set)
    __swig_destroy__ = _MicroWinExecInterface.delete_DATALOG_UPLOAD_OPTIONS

# Register DATALOG_UPLOAD_OPTIONS in _MicroWinExecInterface:
_MicroWinExecInterface.DATALOG_UPLOAD_OPTIONS_swigregister(DATALOG_UPLOAD_OPTIONS)

class DataLogOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MicroWinExecInterface.DataLogOptions_swiginit(self, _MicroWinExecInterface.new_DataLogOptions())
    __swig_destroy__ = _MicroWinExecInterface.delete_DataLogOptions

    def __eq__(self, rSrc):
        return _MicroWinExecInterface.DataLogOptions___eq__(self, rSrc)

    def Store(self, rDest):
        return _MicroWinExecInterface.DataLogOptions_Store(self, rDest)

    def Retrieve(self, *args):
        return _MicroWinExecInterface.DataLogOptions_Retrieve(self, *args)

    def SetMaxRecords(self, nMaxRecords):
        return _MicroWinExecInterface.DataLogOptions_SetMaxRecords(self, nMaxRecords)

    def GetMaxRecords(self):
        return _MicroWinExecInterface.DataLogOptions_GetMaxRecords(self)

    def SetIncludeTime(self, bIncludeTime):
        return _MicroWinExecInterface.DataLogOptions_SetIncludeTime(self, bIncludeTime)

    def IsIncludeTime(self):
        return _MicroWinExecInterface.DataLogOptions_IsIncludeTime(self)

    def SetIncludeDate(self, bIncludeDate):
        return _MicroWinExecInterface.DataLogOptions_SetIncludeDate(self, bIncludeDate)

    def IsIncludeDate(self):
        return _MicroWinExecInterface.DataLogOptions_IsIncludeDate(self)

    def SetClearOnUpload(self, bClearOnUpload):
        return _MicroWinExecInterface.DataLogOptions_SetClearOnUpload(self, bClearOnUpload)

    def IsClearOnUpload(self):
        return _MicroWinExecInterface.DataLogOptions_IsClearOnUpload(self)

    def IsDefault(self):
        return _MicroWinExecInterface.DataLogOptions_IsDefault(self)

    def GetBlockData(self, pSegment):
        return _MicroWinExecInterface.DataLogOptions_GetBlockData(self, pSegment)

# Register DataLogOptions in _MicroWinExecInterface:
_MicroWinExecInterface.DataLogOptions_swigregister(DataLogOptions)

class DataLogDefinition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MicroWinExecInterface.DataLogDefinition_swiginit(self, _MicroWinExecInterface.new_DataLogDefinition())
    __swig_destroy__ = _MicroWinExecInterface.delete_DataLogDefinition

    def __eq__(self, rSrc):
        return _MicroWinExecInterface.DataLogDefinition___eq__(self, rSrc)

    def Store(self, *args):
        return _MicroWinExecInterface.DataLogDefinition_Store(self, *args)

    def Retrieve(self, *args):
        return _MicroWinExecInterface.DataLogDefinition_Retrieve(self, *args)

    def SetName(self, strName):
        return _MicroWinExecInterface.DataLogDefinition_SetName(self, strName)

    def GetName(self):
        return _MicroWinExecInterface.DataLogDefinition_GetName(self)

    def SetDataType(self, eDataType):
        return _MicroWinExecInterface.DataLogDefinition_SetDataType(self, eDataType)

    def GetDataType(self):
        return _MicroWinExecInterface.DataLogDefinition_GetDataType(self)

    def GetDataSize(self):
        return _MicroWinExecInterface.DataLogDefinition_GetDataSize(self)

    def GetMemoryRequired(self):
        return _MicroWinExecInterface.DataLogDefinition_GetMemoryRequired(self)

    def GetNormalizedDefaultValue(self):
        return _MicroWinExecInterface.DataLogDefinition_GetNormalizedDefaultValue(self)

    def SetComment(self, strComment):
        return _MicroWinExecInterface.DataLogDefinition_SetComment(self, strComment)

    def GetComment(self):
        return _MicroWinExecInterface.DataLogDefinition_GetComment(self)

# Register DataLogDefinition in _MicroWinExecInterface:
_MicroWinExecInterface.DataLogDefinition_swigregister(DataLogDefinition)

class DataLog(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MicroWinExecInterface.DataLog_swiginit(self, _MicroWinExecInterface.new_DataLog())
    __swig_destroy__ = _MicroWinExecInterface.delete_DataLog

    def __eq__(self, rSrc):
        return _MicroWinExecInterface.DataLog___eq__(self, rSrc)

    def SetEnabled(self, bEnabled):
        return _MicroWinExecInterface.DataLog_SetEnabled(self, bEnabled)

    def IsEnabled(self):
        return _MicroWinExecInterface.DataLog_IsEnabled(self)

    def SetIndex(self, nIndex):
        return _MicroWinExecInterface.DataLog_SetIndex(self, nIndex)

    def GetIndex(self):
        return _MicroWinExecInterface.DataLog_GetIndex(self)

    def SetName(self, value):
        return _MicroWinExecInterface.DataLog_SetName(self, value)

    def GetName(self):
        return _MicroWinExecInterface.DataLog_GetName(self)

    def GetLongName(self):
        return _MicroWinExecInterface.DataLog_GetLongName(self)

    def SwapRows(self, nIndex):
        return _MicroWinExecInterface.DataLog_SwapRows(self, nIndex)

    def SetVMemoryBegin(self, nOffset):
        return _MicroWinExecInterface.DataLog_SetVMemoryBegin(self, nOffset)

    def GetVMemoryBegin(self):
        return _MicroWinExecInterface.DataLog_GetVMemoryBegin(self)

    def GetVMemoryEnd(self):
        return _MicroWinExecInterface.DataLog_GetVMemoryEnd(self)

    def GetVMemorySize(self):
        return _MicroWinExecInterface.DataLog_GetVMemorySize(self)

    def SetAddress(self, sAddress):
        return _MicroWinExecInterface.DataLog_SetAddress(self, sAddress)

    def GetAddress(self):
        return _MicroWinExecInterface.DataLog_GetAddress(self)

    def SetPreviousMemoryOffset(self, offset):
        return _MicroWinExecInterface.DataLog_SetPreviousMemoryOffset(self, offset)

    def GetPreviousMemoryOffset(self):
        return _MicroWinExecInterface.DataLog_GetPreviousMemoryOffset(self)

    def SetPreviousMemorySize(self, size):
        return _MicroWinExecInterface.DataLog_SetPreviousMemorySize(self, size)

    def GetPreviousMemorySize(self):
        return _MicroWinExecInterface.DataLog_GetPreviousMemorySize(self)

    def IsMainPageDefault(self):
        return _MicroWinExecInterface.DataLog_IsMainPageDefault(self)

    def IsOptionPageDefault(self):
        return _MicroWinExecInterface.DataLog_IsOptionPageDefault(self)

    def IsDefinitionPageDefault(self):
        return _MicroWinExecInterface.DataLog_IsDefinitionPageDefault(self)

    def IsMemoryPageDefault(self):
        return _MicroWinExecInterface.DataLog_IsMemoryPageDefault(self)

    def UserSetMemoryOffset(self, bMemoryOffsetIsUserSet):
        return _MicroWinExecInterface.DataLog_UserSetMemoryOffset(self, bMemoryOffsetIsUserSet)

    def Store(self, *args):
        return _MicroWinExecInterface.DataLog_Store(self, *args)

    def Retrieve(self, *args):
        return _MicroWinExecInterface.DataLog_Retrieve(self, *args)

    def GetSubroutineName(self):
        return _MicroWinExecInterface.DataLog_GetSubroutineName(self)

    def GetSymbolTableName(self):
        return _MicroWinExecInterface.DataLog_GetSymbolTableName(self)

    def GetDataPageName(self):
        return _MicroWinExecInterface.DataLog_GetDataPageName(self)

    def GetDefinitionSizeInBytes(self):
        return _MicroWinExecInterface.DataLog_GetDefinitionSizeInBytes(self)

    def AddDefinition(self, definition):
        return _MicroWinExecInterface.DataLog_AddDefinition(self, definition)

    def SetDataType(self, nIndex, type):
        return _MicroWinExecInterface.DataLog_SetDataType(self, nIndex, type)
    m_options = property(_MicroWinExecInterface.DataLog_m_options_get, _MicroWinExecInterface.DataLog_m_options_set)

# Register DataLog in _MicroWinExecInterface:
_MicroWinExecInterface.DataLog_swigregister(DataLog)

class EX_DataLogWizardData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MicroWinExecInterface.EX_DataLogWizardData_swiginit(self, _MicroWinExecInterface.new_EX_DataLogWizardData())
    __swig_destroy__ = _MicroWinExecInterface.delete_EX_DataLogWizardData

    def __eq__(self, rSrc):
        return _MicroWinExecInterface.EX_DataLogWizardData___eq__(self, rSrc)

    def IsDefault(self):
        return _MicroWinExecInterface.EX_DataLogWizardData_IsDefault(self)

    def IsValidConfiguration(self):
        return _MicroWinExecInterface.EX_DataLogWizardData_IsValidConfiguration(self)

    def IsEnabled(self):
        return _MicroWinExecInterface.EX_DataLogWizardData_IsEnabled(self)

    def IsVMemoryOverlapping(self):
        return _MicroWinExecInterface.EX_DataLogWizardData_IsVMemoryOverlapping(self)

    def Store(self, rDest):
        return _MicroWinExecInterface.EX_DataLogWizardData_Store(self, rDest)

    def Retrieve(self, *args):
        return _MicroWinExecInterface.EX_DataLogWizardData_Retrieve(self, *args)

    def DoesNameExist(self, strName):
        return _MicroWinExecInterface.EX_DataLogWizardData_DoesNameExist(self, strName)

    def CreateUniqueName(self, strName):
        return _MicroWinExecInterface.EX_DataLogWizardData_CreateUniqueName(self, strName)

    def GetBlockData(self, pnParamBytes, ppbyParamData, nLog):
        return _MicroWinExecInterface.EX_DataLogWizardData_GetBlockData(self, pnParamBytes, ppbyParamData, nLog)

    def SetLogDescription(self, pbyLogData, nLog):
        return _MicroWinExecInterface.EX_DataLogWizardData_SetLogDescription(self, pbyLogData, nLog)

    def CalculateRecordLength(self, nLog):
        return _MicroWinExecInterface.EX_DataLogWizardData_CalculateRecordLength(self, nLog)

    def GenerateChecksum(self, pDat, nLen):
        return _MicroWinExecInterface.EX_DataLogWizardData_GenerateChecksum(self, pDat, nLen)

    def ValidateChecksum(self, wCheckSum, pDat, nLen):
        return _MicroWinExecInterface.EX_DataLogWizardData_ValidateChecksum(self, wCheckSum, pDat, nLen)
    m_cTools = property(_MicroWinExecInterface.EX_DataLogWizardData_m_cTools_get, _MicroWinExecInterface.EX_DataLogWizardData_m_cTools_set)

# Register EX_DataLogWizardData in _MicroWinExecInterface:
_MicroWinExecInterface.EX_DataLogWizardData_swigregister(EX_DataLogWizardData)

DATA_LOG_MAX_COUNTERS = _MicroWinExecInterface.DATA_LOG_MAX_COUNTERS
DATA_LOG_MAX__DEFINITIONS = _MicroWinExecInterface.DATA_LOG_MAX__DEFINITIONS
DATA_LOG_MAX_DATALOG_BYTES = _MicroWinExecInterface.DATA_LOG_MAX_DATALOG_BYTES
DATA_LOG_VERSION = _MicroWinExecInterface.DATA_LOG_VERSION
SECONDS_PER_DAY = _MicroWinExecInterface.SECONDS_PER_DAY
SECONDS_PER_HOUR = _MicroWinExecInterface.SECONDS_PER_HOUR
MSECS_PER_DAY = _MicroWinExecInterface.MSECS_PER_DAY
eHEAD_MARKER_INVALID = _MicroWinExecInterface.eHEAD_MARKER_INVALID
eHEAD_MARKER_VALID = _MicroWinExecInterface.eHEAD_MARKER_VALID
eHEAD_MARKER_LOG_HEAD = _MicroWinExecInterface.eHEAD_MARKER_LOG_HEAD
eDATA_LOG_0 = _MicroWinExecInterface.eDATA_LOG_0
eDATA_LOG_1 = _MicroWinExecInterface.eDATA_LOG_1
eDATA_LOG_2 = _MicroWinExecInterface.eDATA_LOG_2
eDATA_LOG_3 = _MicroWinExecInterface.eDATA_LOG_3
class DATA_LOG_OPTIONS_CONFIG_SEGMENT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    time_stamping = property(_MicroWinExecInterface.DATA_LOG_OPTIONS_CONFIG_SEGMENT_time_stamping_get, _MicroWinExecInterface.DATA_LOG_OPTIONS_CONFIG_SEGMENT_time_stamping_set)
    date_stamping = property(_MicroWinExecInterface.DATA_LOG_OPTIONS_CONFIG_SEGMENT_date_stamping_get, _MicroWinExecInterface.DATA_LOG_OPTIONS_CONFIG_SEGMENT_date_stamping_set)
    auto_clear = property(_MicroWinExecInterface.DATA_LOG_OPTIONS_CONFIG_SEGMENT_auto_clear_get, _MicroWinExecInterface.DATA_LOG_OPTIONS_CONFIG_SEGMENT_auto_clear_set)
    fill = property(_MicroWinExecInterface.DATA_LOG_OPTIONS_CONFIG_SEGMENT_fill_get, _MicroWinExecInterface.DATA_LOG_OPTIONS_CONFIG_SEGMENT_fill_set)
    reserved = property(_MicroWinExecInterface.DATA_LOG_OPTIONS_CONFIG_SEGMENT_reserved_get, _MicroWinExecInterface.DATA_LOG_OPTIONS_CONFIG_SEGMENT_reserved_set)
    max_records = property(_MicroWinExecInterface.DATA_LOG_OPTIONS_CONFIG_SEGMENT_max_records_get, _MicroWinExecInterface.DATA_LOG_OPTIONS_CONFIG_SEGMENT_max_records_set)

    def __init__(self):
        _MicroWinExecInterface.DATA_LOG_OPTIONS_CONFIG_SEGMENT_swiginit(self, _MicroWinExecInterface.new_DATA_LOG_OPTIONS_CONFIG_SEGMENT())
    __swig_destroy__ = _MicroWinExecInterface.delete_DATA_LOG_OPTIONS_CONFIG_SEGMENT

# Register DATA_LOG_OPTIONS_CONFIG_SEGMENT in _MicroWinExecInterface:
_MicroWinExecInterface.DATA_LOG_OPTIONS_CONFIG_SEGMENT_swigregister(DATA_LOG_OPTIONS_CONFIG_SEGMENT)
DATA_LOG_DEF_MAX_RECORDS = cvar.DATA_LOG_DEF_MAX_RECORDS
DATA_LOG_MAX_RECORD_SIZE = cvar.DATA_LOG_MAX_RECORD_SIZE
DATA_LOG_STAMP_SIZE = cvar.DATA_LOG_STAMP_SIZE
DATA_LOG_FIRST_BLOCK = cvar.DATA_LOG_FIRST_BLOCK
DATA_LOG_OVERHEAD_SIZE = cvar.DATA_LOG_OVERHEAD_SIZE

class DATA_LOG_SDB_CONFIG_HEADER(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    paraLen = property(_MicroWinExecInterface.DATA_LOG_SDB_CONFIG_HEADER_paraLen_get, _MicroWinExecInterface.DATA_LOG_SDB_CONFIG_HEADER_paraLen_set)
    paraID = property(_MicroWinExecInterface.DATA_LOG_SDB_CONFIG_HEADER_paraID_get, _MicroWinExecInterface.DATA_LOG_SDB_CONFIG_HEADER_paraID_set)

    def __init__(self):
        _MicroWinExecInterface.DATA_LOG_SDB_CONFIG_HEADER_swiginit(self, _MicroWinExecInterface.new_DATA_LOG_SDB_CONFIG_HEADER())
    __swig_destroy__ = _MicroWinExecInterface.delete_DATA_LOG_SDB_CONFIG_HEADER

# Register DATA_LOG_SDB_CONFIG_HEADER in _MicroWinExecInterface:
_MicroWinExecInterface.DATA_LOG_SDB_CONFIG_HEADER_swigregister(DATA_LOG_SDB_CONFIG_HEADER)

class DATA_LOG_SDB_CONFIG_SEGMENT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    expLen = property(_MicroWinExecInterface.DATA_LOG_SDB_CONFIG_SEGMENT_expLen_get, _MicroWinExecInterface.DATA_LOG_SDB_CONFIG_SEGMENT_expLen_set)
    reserved = property(_MicroWinExecInterface.DATA_LOG_SDB_CONFIG_SEGMENT_reserved_get, _MicroWinExecInterface.DATA_LOG_SDB_CONFIG_SEGMENT_reserved_set)
    is_configured = property(_MicroWinExecInterface.DATA_LOG_SDB_CONFIG_SEGMENT_is_configured_get, _MicroWinExecInterface.DATA_LOG_SDB_CONFIG_SEGMENT_is_configured_set)
    options = property(_MicroWinExecInterface.DATA_LOG_SDB_CONFIG_SEGMENT_options_get, _MicroWinExecInterface.DATA_LOG_SDB_CONFIG_SEGMENT_options_set)
    record_len = property(_MicroWinExecInterface.DATA_LOG_SDB_CONFIG_SEGMENT_record_len_get, _MicroWinExecInterface.DATA_LOG_SDB_CONFIG_SEGMENT_record_len_set)

    def __init__(self):
        _MicroWinExecInterface.DATA_LOG_SDB_CONFIG_SEGMENT_swiginit(self, _MicroWinExecInterface.new_DATA_LOG_SDB_CONFIG_SEGMENT())
    __swig_destroy__ = _MicroWinExecInterface.delete_DATA_LOG_SDB_CONFIG_SEGMENT

# Register DATA_LOG_SDB_CONFIG_SEGMENT in _MicroWinExecInterface:
_MicroWinExecInterface.DATA_LOG_SDB_CONFIG_SEGMENT_swigregister(DATA_LOG_SDB_CONFIG_SEGMENT)

class DATA_LOG_SDB_UNCONFIG_SEGMENT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    paraLen = property(_MicroWinExecInterface.DATA_LOG_SDB_UNCONFIG_SEGMENT_paraLen_get, _MicroWinExecInterface.DATA_LOG_SDB_UNCONFIG_SEGMENT_paraLen_set)
    paraID = property(_MicroWinExecInterface.DATA_LOG_SDB_UNCONFIG_SEGMENT_paraID_get, _MicroWinExecInterface.DATA_LOG_SDB_UNCONFIG_SEGMENT_paraID_set)
    reserved = property(_MicroWinExecInterface.DATA_LOG_SDB_UNCONFIG_SEGMENT_reserved_get, _MicroWinExecInterface.DATA_LOG_SDB_UNCONFIG_SEGMENT_reserved_set)
    is_configured = property(_MicroWinExecInterface.DATA_LOG_SDB_UNCONFIG_SEGMENT_is_configured_get, _MicroWinExecInterface.DATA_LOG_SDB_UNCONFIG_SEGMENT_is_configured_set)

    def __init__(self):
        _MicroWinExecInterface.DATA_LOG_SDB_UNCONFIG_SEGMENT_swiginit(self, _MicroWinExecInterface.new_DATA_LOG_SDB_UNCONFIG_SEGMENT())
    __swig_destroy__ = _MicroWinExecInterface.delete_DATA_LOG_SDB_UNCONFIG_SEGMENT

# Register DATA_LOG_SDB_UNCONFIG_SEGMENT in _MicroWinExecInterface:
_MicroWinExecInterface.DATA_LOG_SDB_UNCONFIG_SEGMENT_swigregister(DATA_LOG_SDB_UNCONFIG_SEGMENT)

class DATA_LOG_PARAM_HEADER(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    version = property(_MicroWinExecInterface.DATA_LOG_PARAM_HEADER_version_get, _MicroWinExecInterface.DATA_LOG_PARAM_HEADER_version_set)
    wizType = property(_MicroWinExecInterface.DATA_LOG_PARAM_HEADER_wizType_get, _MicroWinExecInterface.DATA_LOG_PARAM_HEADER_wizType_set)
    dataLogLength = property(_MicroWinExecInterface.DATA_LOG_PARAM_HEADER_dataLogLength_get, _MicroWinExecInterface.DATA_LOG_PARAM_HEADER_dataLogLength_set)
    logNumber = property(_MicroWinExecInterface.DATA_LOG_PARAM_HEADER_logNumber_get, _MicroWinExecInterface.DATA_LOG_PARAM_HEADER_logNumber_set)

    def __init__(self):
        _MicroWinExecInterface.DATA_LOG_PARAM_HEADER_swiginit(self, _MicroWinExecInterface.new_DATA_LOG_PARAM_HEADER())
    __swig_destroy__ = _MicroWinExecInterface.delete_DATA_LOG_PARAM_HEADER

# Register DATA_LOG_PARAM_HEADER in _MicroWinExecInterface:
_MicroWinExecInterface.DATA_LOG_PARAM_HEADER_swigregister(DATA_LOG_PARAM_HEADER)

class DATA_LOG_TIME(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    hour = property(_MicroWinExecInterface.DATA_LOG_TIME_hour_get, _MicroWinExecInterface.DATA_LOG_TIME_hour_set)
    minute = property(_MicroWinExecInterface.DATA_LOG_TIME_minute_get, _MicroWinExecInterface.DATA_LOG_TIME_minute_set)
    second = property(_MicroWinExecInterface.DATA_LOG_TIME_second_get, _MicroWinExecInterface.DATA_LOG_TIME_second_set)

    def __init__(self):
        _MicroWinExecInterface.DATA_LOG_TIME_swiginit(self, _MicroWinExecInterface.new_DATA_LOG_TIME())
    __swig_destroy__ = _MicroWinExecInterface.delete_DATA_LOG_TIME

# Register DATA_LOG_TIME in _MicroWinExecInterface:
_MicroWinExecInterface.DATA_LOG_TIME_swigregister(DATA_LOG_TIME)

class DATA_LOG_DATE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    year = property(_MicroWinExecInterface.DATA_LOG_DATE_year_get, _MicroWinExecInterface.DATA_LOG_DATE_year_set)
    month = property(_MicroWinExecInterface.DATA_LOG_DATE_month_get, _MicroWinExecInterface.DATA_LOG_DATE_month_set)
    day = property(_MicroWinExecInterface.DATA_LOG_DATE_day_get, _MicroWinExecInterface.DATA_LOG_DATE_day_set)

    def __init__(self):
        _MicroWinExecInterface.DATA_LOG_DATE_swiginit(self, _MicroWinExecInterface.new_DATA_LOG_DATE())
    __swig_destroy__ = _MicroWinExecInterface.delete_DATA_LOG_DATE

# Register DATA_LOG_DATE in _MicroWinExecInterface:
_MicroWinExecInterface.DATA_LOG_DATE_swigregister(DATA_LOG_DATE)

class TIME_DATE_STAMP(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timeStamp = property(_MicroWinExecInterface.TIME_DATE_STAMP_timeStamp_get, _MicroWinExecInterface.TIME_DATE_STAMP_timeStamp_set)

    def __init__(self):
        _MicroWinExecInterface.TIME_DATE_STAMP_swiginit(self, _MicroWinExecInterface.new_TIME_DATE_STAMP())
    __swig_destroy__ = _MicroWinExecInterface.delete_TIME_DATE_STAMP

# Register TIME_DATE_STAMP in _MicroWinExecInterface:
_MicroWinExecInterface.TIME_DATE_STAMP_swigregister(TIME_DATE_STAMP)

class DATA_LOG_HEADER(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    syncPattern = property(_MicroWinExecInterface.DATA_LOG_HEADER_syncPattern_get, _MicroWinExecInterface.DATA_LOG_HEADER_syncPattern_set)
    blockFormat = property(_MicroWinExecInterface.DATA_LOG_HEADER_blockFormat_get, _MicroWinExecInterface.DATA_LOG_HEADER_blockFormat_set)
    attribute = property(_MicroWinExecInterface.DATA_LOG_HEADER_attribute_get, _MicroWinExecInterface.DATA_LOG_HEADER_attribute_set)
    PGMLanguage = property(_MicroWinExecInterface.DATA_LOG_HEADER_PGMLanguage_get, _MicroWinExecInterface.DATA_LOG_HEADER_PGMLanguage_set)
    blockType = property(_MicroWinExecInterface.DATA_LOG_HEADER_blockType_get, _MicroWinExecInterface.DATA_LOG_HEADER_blockType_set)
    blockNumber = property(_MicroWinExecInterface.DATA_LOG_HEADER_blockNumber_get, _MicroWinExecInterface.DATA_LOG_HEADER_blockNumber_set)
    blockLength = property(_MicroWinExecInterface.DATA_LOG_HEADER_blockLength_get, _MicroWinExecInterface.DATA_LOG_HEADER_blockLength_set)
    notUsed = property(_MicroWinExecInterface.DATA_LOG_HEADER_notUsed_get, _MicroWinExecInterface.DATA_LOG_HEADER_notUsed_set)
    modifyTime = property(_MicroWinExecInterface.DATA_LOG_HEADER_modifyTime_get, _MicroWinExecInterface.DATA_LOG_HEADER_modifyTime_set)
    createTime = property(_MicroWinExecInterface.DATA_LOG_HEADER_createTime_get, _MicroWinExecInterface.DATA_LOG_HEADER_createTime_set)
    section3Length = property(_MicroWinExecInterface.DATA_LOG_HEADER_section3Length_get, _MicroWinExecInterface.DATA_LOG_HEADER_section3Length_set)
    section1Length = property(_MicroWinExecInterface.DATA_LOG_HEADER_section1Length_get, _MicroWinExecInterface.DATA_LOG_HEADER_section1Length_set)

    def __init__(self):
        _MicroWinExecInterface.DATA_LOG_HEADER_swiginit(self, _MicroWinExecInterface.new_DATA_LOG_HEADER())
    __swig_destroy__ = _MicroWinExecInterface.delete_DATA_LOG_HEADER

# Register DATA_LOG_HEADER in _MicroWinExecInterface:
_MicroWinExecInterface.DATA_LOG_HEADER_swigregister(DATA_LOG_HEADER)

class DataLogTools(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MicroWinExecInterface.DataLogTools_swiginit(self, _MicroWinExecInterface.new_DataLogTools())
    __swig_destroy__ = _MicroWinExecInterface.delete_DataLogTools

    def __eq__(self, rSrc):
        return _MicroWinExecInterface.DataLogTools___eq__(self, rSrc)

    def FormatTimeStamp(self, time):
        return _MicroWinExecInterface.DataLogTools_FormatTimeStamp(self, time)

    def FormatDateStamp(self, date):
        return _MicroWinExecInterface.DataLogTools_FormatDateStamp(self, date)

# Register DataLogTools in _MicroWinExecInterface:
_MicroWinExecInterface.DataLogTools_swigregister(DataLogTools)

ID_NONE = _MicroWinExecInterface.ID_NONE
POU_BASE = _MicroWinExecInterface.POU_BASE
POU_MAIN = _MicroWinExecInterface.POU_MAIN
POU_SBR = _MicroWinExecInterface.POU_SBR
POU_INT = _MicroWinExecInterface.POU_INT
POU_ALL = _MicroWinExecInterface.POU_ALL
POU_VIEW = _MicroWinExecInterface.POU_VIEW
LIB_BASE = _MicroWinExecInterface.LIB_BASE
SYM_BASE = _MicroWinExecInterface.SYM_BASE
SYM_USER = _MicroWinExecInterface.SYM_USER
SYM_SYS = _MicroWinExecInterface.SYM_SYS
SYM_LIB = _MicroWinExecInterface.SYM_LIB
SYM_ALL = _MicroWinExecInterface.SYM_ALL
CHT_BASE = _MicroWinExecInterface.CHT_BASE
CHT_USER = _MicroWinExecInterface.CHT_USER
CHT_TRD = _MicroWinExecInterface.CHT_TRD
CHT_ALL = _MicroWinExecInterface.CHT_ALL
DB_BASE = _MicroWinExecInterface.DB_BASE
DB_USER = _MicroWinExecInterface.DB_USER
DB_ALL = _MicroWinExecInterface.DB_ALL
DB_VIEW = _MicroWinExecInterface.DB_VIEW
SDB_BASE = _MicroWinExecInterface.SDB_BASE
SDB_SYS = _MicroWinExecInterface.SDB_SYS
SDB_ALL = _MicroWinExecInterface.SDB_ALL
WIZ_BASE = _MicroWinExecInterface.WIZ_BASE
WIZ_ASI = _MicroWinExecInterface.WIZ_ASI
WIZ_MOTION = _MicroWinExecInterface.WIZ_MOTION
WIZ_EM241 = _MicroWinExecInterface.WIZ_EM241
WIZ_ETH = _MicroWinExecInterface.WIZ_ETH
WIZ_INT = _MicroWinExecInterface.WIZ_INT
WIZ_PID = _MicroWinExecInterface.WIZ_PID
WIZ_PTO = _MicroWinExecInterface.WIZ_PTO
WIZ_RCP = _MicroWinExecInterface.WIZ_RCP
WIZ_RMOD = _MicroWinExecInterface.WIZ_RMOD
WIZ_HMI = _MicroWinExecInterface.WIZ_HMI
WIZ_HSC = _MicroWinExecInterface.WIZ_HSC
WIZ_DATA = _MicroWinExecInterface.WIZ_DATA
WIZ_NET = _MicroWinExecInterface.WIZ_NET
WIZ_PAGE = _MicroWinExecInterface.WIZ_PAGE
WIZ_PN = _MicroWinExecInterface.WIZ_PN
WIZ_ALL = _MicroWinExecInterface.WIZ_ALL
XREF_BASE = _MicroWinExecInterface.XREF_BASE
XREF_SYS = _MicroWinExecInterface.XREF_SYS
XREF_ALL = _MicroWinExecInterface.XREF_ALL
CMD_BASE = _MicroWinExecInterface.CMD_BASE
CMD_SYS = _MicroWinExecInterface.CMD_SYS
CMD_ALL = _MicroWinExecInterface.CMD_ALL
COMM_BASE = _MicroWinExecInterface.COMM_BASE
COMM_SYS = _MicroWinExecInterface.COMM_SYS
COMM_ALL = _MicroWinExecInterface.COMM_ALL
TOOL_BASE = _MicroWinExecInterface.TOOL_BASE
TOOL_SYS = _MicroWinExecInterface.TOOL_SYS
TOOL_ALL = _MicroWinExecInterface.TOOL_ALL
NXT_BASE = _MicroWinExecInterface.NXT_BASE
UNKNOWN_PROTECTION = _MicroWinExecInterface.UNKNOWN_PROTECTION
USER_NO_PROTECTION = _MicroWinExecInterface.USER_NO_PROTECTION
LIB_NO_PROTECTION = _MicroWinExecInterface.LIB_NO_PROTECTION
WIZ_NO_PROTECTION = _MicroWinExecInterface.WIZ_NO_PROTECTION
SYS_NO_PROTECTION = _MicroWinExecInterface.SYS_NO_PROTECTION
USER_WRITE_PROTECTION = _MicroWinExecInterface.USER_WRITE_PROTECTION
LIB_WRITE_PROTECTION = _MicroWinExecInterface.LIB_WRITE_PROTECTION
WIZ_WRITE_PROTECTION = _MicroWinExecInterface.WIZ_WRITE_PROTECTION
SYS_WRITE_PROTECTION = _MicroWinExecInterface.SYS_WRITE_PROTECTION
USER_READ_WRITE_PROTECTION = _MicroWinExecInterface.USER_READ_WRITE_PROTECTION
LIB_READ_WRITE_PROTECTION = _MicroWinExecInterface.LIB_READ_WRITE_PROTECTION
WIZ_READ_WRITE_PROTECTION = _MicroWinExecInterface.WIZ_READ_WRITE_PROTECTION
SYS_READ_WRITE_PROTECTION = _MicroWinExecInterface.SYS_READ_WRITE_PROTECTION
ABS_NO_PROTECTION = _MicroWinExecInterface.ABS_NO_PROTECTION
ABS_WRITE_PROTECTION = _MicroWinExecInterface.ABS_WRITE_PROTECTION
ABS_READ_WRITE_PROTECTION = _MicroWinExecInterface.ABS_READ_WRITE_PROTECTION
USER_PROTECTION = _MicroWinExecInterface.USER_PROTECTION
LIB_PROTECTION = _MicroWinExecInterface.LIB_PROTECTION
WIZ_PROTECTION = _MicroWinExecInterface.WIZ_PROTECTION
SYS_PROTECTION = _MicroWinExecInterface.SYS_PROTECTION
class MW_ID_OLD(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_dwNoIdeaButNeeded = property(_MicroWinExecInterface.MW_ID_OLD_m_dwNoIdeaButNeeded_get, _MicroWinExecInterface.MW_ID_OLD_m_dwNoIdeaButNeeded_set)
    m_eType = property(_MicroWinExecInterface.MW_ID_OLD_m_eType_get, _MicroWinExecInterface.MW_ID_OLD_m_eType_set)
    m_wOffset = property(_MicroWinExecInterface.MW_ID_OLD_m_wOffset_get, _MicroWinExecInterface.MW_ID_OLD_m_wOffset_set)
    m_eProt = property(_MicroWinExecInterface.MW_ID_OLD_m_eProt_get, _MicroWinExecInterface.MW_ID_OLD_m_eProt_set)
    m_sGuid = property(_MicroWinExecInterface.MW_ID_OLD_m_sGuid_get, _MicroWinExecInterface.MW_ID_OLD_m_sGuid_set)

    def __init__(self):
        _MicroWinExecInterface.MW_ID_OLD_swiginit(self, _MicroWinExecInterface.new_MW_ID_OLD())
    __swig_destroy__ = _MicroWinExecInterface.delete_MW_ID_OLD

# Register MW_ID_OLD in _MicroWinExecInterface:
_MicroWinExecInterface.MW_ID_OLD_swigregister(MW_ID_OLD)
g_cStdPrjID = cvar.g_cStdPrjID

class MW_ID(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MicroWinExecInterface.MW_ID_swiginit(self, _MicroWinExecInterface.new_MW_ID(*args))

    def __eq__(self, rRight):
        return _MicroWinExecInterface.MW_ID___eq__(self, rRight)

    def __lt__(self, rRight):
        return _MicroWinExecInterface.MW_ID___lt__(self, rRight)

    def __le__(self, rRight):
        return _MicroWinExecInterface.MW_ID___le__(self, rRight)

    def __gt__(self, rRight):
        return _MicroWinExecInterface.MW_ID___gt__(self, rRight)

    def __ge__(self, rRight):
        return _MicroWinExecInterface.MW_ID___ge__(self, rRight)

    def __ne__(self, rRight):
        return _MicroWinExecInterface.MW_ID___ne__(self, rRight)

    @staticmethod
    def Compare(rLeft, rRight):
        return _MicroWinExecInterface.MW_ID_Compare(rLeft, rRight)

    def GetType(self):
        return _MicroWinExecInterface.MW_ID_GetType(self)

    def SetType(self, eType):
        return _MicroWinExecInterface.MW_ID_SetType(self, eType)

    def GetOffset(self):
        return _MicroWinExecInterface.MW_ID_GetOffset(self)

    def SetOffset(self, wOffset):
        return _MicroWinExecInterface.MW_ID_SetOffset(self, wOffset)

    def GetProtection(self):
        return _MicroWinExecInterface.MW_ID_GetProtection(self)

    def SetProtection(self, eProt):
        return _MicroWinExecInterface.MW_ID_SetProtection(self, eProt)

    def GetPreviousProtection(self):
        return _MicroWinExecInterface.MW_ID_GetPreviousProtection(self)

    def SetPreviousProtection(self, ePrevProt):
        return _MicroWinExecInterface.MW_ID_SetPreviousProtection(self, ePrevProt)

    def GetGuid(self):
        return _MicroWinExecInterface.MW_ID_GetGuid(self)

    def SetGuid(self, rGuid):
        return _MicroWinExecInterface.MW_ID_SetGuid(self, rGuid)

    def IsVisible(self):
        return _MicroWinExecInterface.MW_ID_IsVisible(self)

    def SetVisible(self, bVisible):
        return _MicroWinExecInterface.MW_ID_SetVisible(self, bVisible)

    def IsTempAuth(self):
        return _MicroWinExecInterface.MW_ID_IsTempAuth(self)

    def SetTempAuth(self, bTempAuth):
        return _MicroWinExecInterface.MW_ID_SetTempAuth(self, bTempAuth)

    def RevertTempAuth(self):
        return _MicroWinExecInterface.MW_ID_RevertTempAuth(self)

    def IsPOU(self):
        return _MicroWinExecInterface.MW_ID_IsPOU(self)

    def IsSYM(self):
        return _MicroWinExecInterface.MW_ID_IsSYM(self)

    def IsCHT(self):
        return _MicroWinExecInterface.MW_ID_IsCHT(self)

    def IsDB(self):
        return _MicroWinExecInterface.MW_ID_IsDB(self)

    def IsWIZ(self):
        return _MicroWinExecInterface.MW_ID_IsWIZ(self)

    def IsSDB(self):
        return _MicroWinExecInterface.MW_ID_IsSDB(self)

    def IsXREF(self):
        return _MicroWinExecInterface.MW_ID_IsXREF(self)

    def IsCOMM(self):
        return _MicroWinExecInterface.MW_ID_IsCOMM(self)

    def IsTOOL(self):
        return _MicroWinExecInterface.MW_ID_IsTOOL(self)

    def IsValidType(self):
        return _MicroWinExecInterface.MW_ID_IsValidType(self)

    def GetAllType(self):
        return _MicroWinExecInterface.MW_ID_GetAllType(self)

    def IsOB(self):
        return _MicroWinExecInterface.MW_ID_IsOB(self)

    def IsSBR(self):
        return _MicroWinExecInterface.MW_ID_IsSBR(self)

    def IsINT(self):
        return _MicroWinExecInterface.MW_ID_IsINT(self)

    def IsLSBR(self):
        return _MicroWinExecInterface.MW_ID_IsLSBR(self)

    def IsCMD(self):
        return _MicroWinExecInterface.MW_ID_IsCMD(self)

    def IsINST(self):
        return _MicroWinExecInterface.MW_ID_IsINST(self)

    def GetInstID(self):
        return _MicroWinExecInterface.MW_ID_GetInstID(self)

    def GetSubID(self):
        return _MicroWinExecInterface.MW_ID_GetSubID(self)

    def IsSYMUser(self):
        return _MicroWinExecInterface.MW_ID_IsSYMUser(self)

    def IsSYMLibrary(self):
        return _MicroWinExecInterface.MW_ID_IsSYMLibrary(self)

    def IsSYMSystem(self):
        return _MicroWinExecInterface.MW_ID_IsSYMSystem(self)

    def IsSYMIOTable(self):
        return _MicroWinExecInterface.MW_ID_IsSYMIOTable(self)

    def IsProtected(self):
        return _MicroWinExecInterface.MW_ID_IsProtected(self)

    def IsUnProtected(self):
        return _MicroWinExecInterface.MW_ID_IsUnProtected(self)

    def IsWriteProtected(self):
        return _MicroWinExecInterface.MW_ID_IsWriteProtected(self)

    def IsReadWriteProtected(self):
        return _MicroWinExecInterface.MW_ID_IsReadWriteProtected(self)

    def IsTempAuthWriteProtected(self):
        return _MicroWinExecInterface.MW_ID_IsTempAuthWriteProtected(self)

    def IsTempAuthReadWriteProtected(self):
        return _MicroWinExecInterface.MW_ID_IsTempAuthReadWriteProtected(self)

    def IsUserProtected(self):
        return _MicroWinExecInterface.MW_ID_IsUserProtected(self)

    def IsLibProtected(self):
        return _MicroWinExecInterface.MW_ID_IsLibProtected(self)

    def IsWizProtected(self):
        return _MicroWinExecInterface.MW_ID_IsWizProtected(self)

    def IsSysProtected(self):
        return _MicroWinExecInterface.MW_ID_IsSysProtected(self)

    def Store(self, rDest):
        return _MicroWinExecInterface.MW_ID_Store(self, rDest)

    def Retrieve(self, rSrc, byVer=0xFF, eType=ID_NONE):
        return _MicroWinExecInterface.MW_ID_Retrieve(self, rSrc, byVer, eType)

    def CopyOld(self, sID):
        return _MicroWinExecInterface.MW_ID_CopyOld(self, sID)
    __swig_destroy__ = _MicroWinExecInterface.delete_MW_ID

# Register MW_ID in _MicroWinExecInterface:
_MicroWinExecInterface.MW_ID_swigregister(MW_ID)

def MW_ID_Compare(rLeft, rRight):
    return _MicroWinExecInterface.MW_ID_Compare(rLeft, rRight)

MAX_GRID_ROWS = _MicroWinExecInterface.MAX_GRID_ROWS
MAX_GRID_COLS = _MicroWinExecInterface.MAX_GRID_COLS
SELECT_COLUMN = _MicroWinExecInterface.SELECT_COLUMN
OVERLAPPING_COLUMN = _MicroWinExecInterface.OVERLAPPING_COLUMN
UNUSED_COLUMN = _MicroWinExecInterface.UNUSED_COLUMN
SYMBOL_COLUMN = _MicroWinExecInterface.SYMBOL_COLUMN
ADDRESS_COLUMN = _MicroWinExecInterface.ADDRESS_COLUMN
COMMENT_COLUMN = _MicroWinExecInterface.COMMENT_COLUMN
SYM_MAX_COLUMN = _MicroWinExecInterface.SYM_MAX_COLUMN
TYPE_COLUMN = _MicroWinExecInterface.TYPE_COLUMN
SYM_NO_VALUE = _MicroWinExecInterface.SYM_NO_VALUE
SYM_UNDEF_NAME = _MicroWinExecInterface.SYM_UNDEF_NAME
SYM_UNDEF_VALUE = _MicroWinExecInterface.SYM_UNDEF_VALUE
SYM_ILL_USE_NAME = _MicroWinExecInterface.SYM_ILL_USE_NAME
SYM_ILL_USE_VALUE = _MicroWinExecInterface.SYM_ILL_USE_VALUE
SYM_ILL_SYN_NAME = _MicroWinExecInterface.SYM_ILL_SYN_NAME
SYM_ILL_SYN_VALUE = _MicroWinExecInterface.SYM_ILL_SYN_VALUE
SYM_SYM_OVERLAPPED = _MicroWinExecInterface.SYM_SYM_OVERLAPPED
SYM_SYM_UNUSED = _MicroWinExecInterface.SYM_SYM_UNUSED
class SYM_ELEMENT_FLAGS_MASK(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MicroWinExecInterface.SYM_ELEMENT_FLAGS_MASK_swiginit(self, _MicroWinExecInterface.new_SYM_ELEMENT_FLAGS_MASK(*args))

    def __eq__(self, *args):
        return _MicroWinExecInterface.SYM_ELEMENT_FLAGS_MASK___eq__(self, *args)
    m_bUndefinedName = property(_MicroWinExecInterface.SYM_ELEMENT_FLAGS_MASK_m_bUndefinedName_get, _MicroWinExecInterface.SYM_ELEMENT_FLAGS_MASK_m_bUndefinedName_set)
    m_bUndefinedValue = property(_MicroWinExecInterface.SYM_ELEMENT_FLAGS_MASK_m_bUndefinedValue_get, _MicroWinExecInterface.SYM_ELEMENT_FLAGS_MASK_m_bUndefinedValue_set)
    m_bUndefinedType = property(_MicroWinExecInterface.SYM_ELEMENT_FLAGS_MASK_m_bUndefinedType_get, _MicroWinExecInterface.SYM_ELEMENT_FLAGS_MASK_m_bUndefinedType_set)
    m_bIllegalUseName = property(_MicroWinExecInterface.SYM_ELEMENT_FLAGS_MASK_m_bIllegalUseName_get, _MicroWinExecInterface.SYM_ELEMENT_FLAGS_MASK_m_bIllegalUseName_set)
    m_bIllegalUseValue = property(_MicroWinExecInterface.SYM_ELEMENT_FLAGS_MASK_m_bIllegalUseValue_get, _MicroWinExecInterface.SYM_ELEMENT_FLAGS_MASK_m_bIllegalUseValue_set)
    m_bIllegalUseType = property(_MicroWinExecInterface.SYM_ELEMENT_FLAGS_MASK_m_bIllegalUseType_get, _MicroWinExecInterface.SYM_ELEMENT_FLAGS_MASK_m_bIllegalUseType_set)
    m_bIllegalSyntaxName = property(_MicroWinExecInterface.SYM_ELEMENT_FLAGS_MASK_m_bIllegalSyntaxName_get, _MicroWinExecInterface.SYM_ELEMENT_FLAGS_MASK_m_bIllegalSyntaxName_set)
    m_bIllegalSyntaxValue = property(_MicroWinExecInterface.SYM_ELEMENT_FLAGS_MASK_m_bIllegalSyntaxValue_get, _MicroWinExecInterface.SYM_ELEMENT_FLAGS_MASK_m_bIllegalSyntaxValue_set)
    m_bIllegalSyntaxType = property(_MicroWinExecInterface.SYM_ELEMENT_FLAGS_MASK_m_bIllegalSyntaxType_get, _MicroWinExecInterface.SYM_ELEMENT_FLAGS_MASK_m_bIllegalSyntaxType_set)
    m_bSymbolOverlapped = property(_MicroWinExecInterface.SYM_ELEMENT_FLAGS_MASK_m_bSymbolOverlapped_get, _MicroWinExecInterface.SYM_ELEMENT_FLAGS_MASK_m_bSymbolOverlapped_set)
    m_bSymbolUnused = property(_MicroWinExecInterface.SYM_ELEMENT_FLAGS_MASK_m_bSymbolUnused_get, _MicroWinExecInterface.SYM_ELEMENT_FLAGS_MASK_m_bSymbolUnused_set)
    m_bIsAddress = property(_MicroWinExecInterface.SYM_ELEMENT_FLAGS_MASK_m_bIsAddress_get, _MicroWinExecInterface.SYM_ELEMENT_FLAGS_MASK_m_bIsAddress_set)
    m_bIsConstant = property(_MicroWinExecInterface.SYM_ELEMENT_FLAGS_MASK_m_bIsConstant_get, _MicroWinExecInterface.SYM_ELEMENT_FLAGS_MASK_m_bIsConstant_set)
    m_bIsAlias = property(_MicroWinExecInterface.SYM_ELEMENT_FLAGS_MASK_m_bIsAlias_get, _MicroWinExecInterface.SYM_ELEMENT_FLAGS_MASK_m_bIsAlias_set)
    m_showDefineSymbol = property(_MicroWinExecInterface.SYM_ELEMENT_FLAGS_MASK_m_showDefineSymbol_get, _MicroWinExecInterface.SYM_ELEMENT_FLAGS_MASK_m_showDefineSymbol_set)
    m_showEditSymbol = property(_MicroWinExecInterface.SYM_ELEMENT_FLAGS_MASK_m_showEditSymbol_get, _MicroWinExecInterface.SYM_ELEMENT_FLAGS_MASK_m_showEditSymbol_set)
    m_showSelectSymbol = property(_MicroWinExecInterface.SYM_ELEMENT_FLAGS_MASK_m_showSelectSymbol_get, _MicroWinExecInterface.SYM_ELEMENT_FLAGS_MASK_m_showSelectSymbol_set)
    m_wEmpty = property(_MicroWinExecInterface.SYM_ELEMENT_FLAGS_MASK_m_wEmpty_get, _MicroWinExecInterface.SYM_ELEMENT_FLAGS_MASK_m_wEmpty_set)
    __swig_destroy__ = _MicroWinExecInterface.delete_SYM_ELEMENT_FLAGS_MASK

# Register SYM_ELEMENT_FLAGS_MASK in _MicroWinExecInterface:
_MicroWinExecInterface.SYM_ELEMENT_FLAGS_MASK_swigregister(SYM_ELEMENT_FLAGS_MASK)
MAX_NUMBER_OF_SYSTEM_TABLES = cvar.MAX_NUMBER_OF_SYSTEM_TABLES
MAX_NUMBER_OF_USER_TABLES = cvar.MAX_NUMBER_OF_USER_TABLES
MAX_NUMBER_OF_LIB_TABLES = cvar.MAX_NUMBER_OF_LIB_TABLES

class SYM_ELEMENT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_strSymbol = property(_MicroWinExecInterface.SYM_ELEMENT_m_strSymbol_get, _MicroWinExecInterface.SYM_ELEMENT_m_strSymbol_set)
    m_strAddress = property(_MicroWinExecInterface.SYM_ELEMENT_m_strAddress_get, _MicroWinExecInterface.SYM_ELEMENT_m_strAddress_set)
    m_strDataType = property(_MicroWinExecInterface.SYM_ELEMENT_m_strDataType_get, _MicroWinExecInterface.SYM_ELEMENT_m_strDataType_set)
    m_strComment = property(_MicroWinExecInterface.SYM_ELEMENT_m_strComment_get, _MicroWinExecInterface.SYM_ELEMENT_m_strComment_set)
    m_strTable = property(_MicroWinExecInterface.SYM_ELEMENT_m_strTable_get, _MicroWinExecInterface.SYM_ELEMENT_m_strTable_set)
    m_mskFlags = property(_MicroWinExecInterface.SYM_ELEMENT_m_mskFlags_get, _MicroWinExecInterface.SYM_ELEMENT_m_mskFlags_set)

    def __init__(self, *args):
        _MicroWinExecInterface.SYM_ELEMENT_swiginit(self, _MicroWinExecInterface.new_SYM_ELEMENT(*args))
    __swig_destroy__ = _MicroWinExecInterface.delete_SYM_ELEMENT

    def __eq__(self, rRight):
        return _MicroWinExecInterface.SYM_ELEMENT___eq__(self, rRight)

    def __ne__(self, rRight):
        return _MicroWinExecInterface.SYM_ELEMENT___ne__(self, rRight)

    def __le__(self, rRight):
        return _MicroWinExecInterface.SYM_ELEMENT___le__(self, rRight)

    def __lt__(self, rRight):
        return _MicroWinExecInterface.SYM_ELEMENT___lt__(self, rRight)

    def __ge__(self, rRight):
        return _MicroWinExecInterface.SYM_ELEMENT___ge__(self, rRight)

    def __gt__(self, rRight):
        return _MicroWinExecInterface.SYM_ELEMENT___gt__(self, rRight)

    def Store(self, rDest):
        return _MicroWinExecInterface.SYM_ELEMENT_Store(self, rDest)

    def Retrieve(self, rSrc):
        return _MicroWinExecInterface.SYM_ELEMENT_Retrieve(self, rSrc)

    def Empty(self):
        return _MicroWinExecInterface.SYM_ELEMENT_Empty(self)

# Register SYM_ELEMENT in _MicroWinExecInterface:
_MicroWinExecInterface.SYM_ELEMENT_swigregister(SYM_ELEMENT)

class SYM_RECTANGLE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_eTopLeftCol = property(_MicroWinExecInterface.SYM_RECTANGLE_m_eTopLeftCol_get, _MicroWinExecInterface.SYM_RECTANGLE_m_eTopLeftCol_set)
    m_wTopLeftIndex = property(_MicroWinExecInterface.SYM_RECTANGLE_m_wTopLeftIndex_get, _MicroWinExecInterface.SYM_RECTANGLE_m_wTopLeftIndex_set)
    m_eBottomRightCol = property(_MicroWinExecInterface.SYM_RECTANGLE_m_eBottomRightCol_get, _MicroWinExecInterface.SYM_RECTANGLE_m_eBottomRightCol_set)
    m_wBottomRightIndex = property(_MicroWinExecInterface.SYM_RECTANGLE_m_wBottomRightIndex_get, _MicroWinExecInterface.SYM_RECTANGLE_m_wBottomRightIndex_set)
    m_wRowsAdded = property(_MicroWinExecInterface.SYM_RECTANGLE_m_wRowsAdded_get, _MicroWinExecInterface.SYM_RECTANGLE_m_wRowsAdded_set)

    def __init__(self):
        _MicroWinExecInterface.SYM_RECTANGLE_swiginit(self, _MicroWinExecInterface.new_SYM_RECTANGLE())
    __swig_destroy__ = _MicroWinExecInterface.delete_SYM_RECTANGLE

# Register SYM_RECTANGLE in _MicroWinExecInterface:
_MicroWinExecInterface.SYM_RECTANGLE_swigregister(SYM_RECTANGLE)

class SYM_PATH(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_sID = property(_MicroWinExecInterface.SYM_PATH_m_sID_get, _MicroWinExecInterface.SYM_PATH_m_sID_set)
    m_sPosition = property(_MicroWinExecInterface.SYM_PATH_m_sPosition_get, _MicroWinExecInterface.SYM_PATH_m_sPosition_set)

    def __init__(self):
        _MicroWinExecInterface.SYM_PATH_swiginit(self, _MicroWinExecInterface.new_SYM_PATH())
    __swig_destroy__ = _MicroWinExecInterface.delete_SYM_PATH

# Register SYM_PATH in _MicroWinExecInterface:
_MicroWinExecInterface.SYM_PATH_swigregister(SYM_PATH)

SYM_SET_SYMBOL = _MicroWinExecInterface.SYM_SET_SYMBOL
SYM_SET_VALUE = _MicroWinExecInterface.SYM_SET_VALUE
SYM_SET_TYPE = _MicroWinExecInterface.SYM_SET_TYPE
SYM_SET_COMMENT = _MicroWinExecInterface.SYM_SET_COMMENT
SYM_CLEAR_RECT = _MicroWinExecInterface.SYM_CLEAR_RECT
SYM_INSERT_ROW = _MicroWinExecInterface.SYM_INSERT_ROW
SYM_DELETE_ROW = _MicroWinExecInterface.SYM_DELETE_ROW
SYM_DELETE_RECT = _MicroWinExecInterface.SYM_DELETE_RECT
SYM_SORT = _MicroWinExecInterface.SYM_SORT
SYM_PASTE_RECT = _MicroWinExecInterface.SYM_PASTE_RECT
class SYM_FIND_LOCATION(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_symId = property(_MicroWinExecInterface.SYM_FIND_LOCATION_m_symId_get, _MicroWinExecInterface.SYM_FIND_LOCATION_m_symId_set)
    m_wRow = property(_MicroWinExecInterface.SYM_FIND_LOCATION_m_wRow_get, _MicroWinExecInterface.SYM_FIND_LOCATION_m_wRow_set)
    m_wCol = property(_MicroWinExecInterface.SYM_FIND_LOCATION_m_wCol_get, _MicroWinExecInterface.SYM_FIND_LOCATION_m_wCol_set)

    def __init__(self):
        _MicroWinExecInterface.SYM_FIND_LOCATION_swiginit(self, _MicroWinExecInterface.new_SYM_FIND_LOCATION())
    __swig_destroy__ = _MicroWinExecInterface.delete_SYM_FIND_LOCATION

# Register SYM_FIND_LOCATION in _MicroWinExecInterface:
_MicroWinExecInterface.SYM_FIND_LOCATION_swigregister(SYM_FIND_LOCATION)

TWIPS_PER_INCH = _MicroWinExecInterface.TWIPS_PER_INCH
TWIPS_PER_CM = _MicroWinExecInterface.TWIPS_PER_CM
TWIPS_PER_2CM = _MicroWinExecInterface.TWIPS_PER_2CM

def CHECK_ERROR(scode):
    return _MicroWinExecInterface.CHECK_ERROR(scode)
CLIP_NONE = _MicroWinExecInterface.CLIP_NONE
CLIP_ELEM = _MicroWinExecInterface.CLIP_ELEM
CLIP_NET = _MicroWinExecInterface.CLIP_NET
CLIP_POU = _MicroWinExecInterface.CLIP_POU
CLIP_DB = _MicroWinExecInterface.CLIP_DB
EDT_ACT_NONE = _MicroWinExecInterface.EDT_ACT_NONE
EDT_INS_NET = _MicroWinExecInterface.EDT_INS_NET
EDT_DEL_NET = _MicroWinExecInterface.EDT_DEL_NET
EDT_INS_ROW = _MicroWinExecInterface.EDT_INS_ROW
EDT_DEL_ROW = _MicroWinExecInterface.EDT_DEL_ROW
EDT_INS_COL = _MicroWinExecInterface.EDT_INS_COL
EDT_DEL_COL = _MicroWinExecInterface.EDT_DEL_COL
EDT_SET_ELEM = _MicroWinExecInterface.EDT_SET_ELEM
EDT_DEL_ELEM = _MicroWinExecInterface.EDT_DEL_ELEM
EDT_SET_VERTICAL = _MicroWinExecInterface.EDT_SET_VERTICAL
EDT_DEL_VERTICAL = _MicroWinExecInterface.EDT_DEL_VERTICAL
EDT_SET_OPERAND = _MicroWinExecInterface.EDT_SET_OPERAND
EDT_DEL_OPERAND = _MicroWinExecInterface.EDT_DEL_OPERAND
EDT_SET_CHAR_NORM = _MicroWinExecInterface.EDT_SET_CHAR_NORM
EDT_SET_CHAR_WHITE = _MicroWinExecInterface.EDT_SET_CHAR_WHITE
EDT_SET_WORD = _MicroWinExecInterface.EDT_SET_WORD
EDT_SET_LINE = _MicroWinExecInterface.EDT_SET_LINE
EDT_NONE = _MicroWinExecInterface.EDT_NONE
EDT_POU_COMMENT = _MicroWinExecInterface.EDT_POU_COMMENT
EDT_NET_TITLE = _MicroWinExecInterface.EDT_NET_TITLE
EDT_NET_COMMENT = _MicroWinExecInterface.EDT_NET_COMMENT
EDT_NET = _MicroWinExecInterface.EDT_NET
EDT_NET_SIT = _MicroWinExecInterface.EDT_NET_SIT
EDT_CMP_NONE = _MicroWinExecInterface.EDT_CMP_NONE
EDT_CMP_POU = _MicroWinExecInterface.EDT_CMP_POU
EDT_CMP_NET = _MicroWinExecInterface.EDT_CMP_NET
EDT_CMP_REG = _MicroWinExecInterface.EDT_CMP_REG
EDT_CMP_X = _MicroWinExecInterface.EDT_CMP_X
EDT_CMP_Y = _MicroWinExecInterface.EDT_CMP_Y
EDT_CMP_OP = _MicroWinExecInterface.EDT_CMP_OP
SORT_ASCENDING_ALPHA = _MicroWinExecInterface.SORT_ASCENDING_ALPHA
SORT_DESCENDING_ALPHA = _MicroWinExecInterface.SORT_DESCENDING_ALPHA
SORT_ASCENDING_NUM = _MicroWinExecInterface.SORT_ASCENDING_NUM
SORT_DESCENDING_NUM = _MicroWinExecInterface.SORT_DESCENDING_NUM
class OBJECT_PROPERTIES(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MicroWinExecInterface.OBJECT_PROPERTIES_swiginit(self, _MicroWinExecInterface.new_OBJECT_PROPERTIES())
    aName = property(_MicroWinExecInterface.OBJECT_PROPERTIES_aName_get, _MicroWinExecInterface.OBJECT_PROPERTIES_aName_set)
    aAuthor = property(_MicroWinExecInterface.OBJECT_PROPERTIES_aAuthor_get, _MicroWinExecInterface.OBJECT_PROPERTIES_aAuthor_set)
    timeCreated = property(_MicroWinExecInterface.OBJECT_PROPERTIES_timeCreated_get, _MicroWinExecInterface.OBJECT_PROPERTIES_timeCreated_set)
    timeLastModified = property(_MicroWinExecInterface.OBJECT_PROPERTIES_timeLastModified_get, _MicroWinExecInterface.OBJECT_PROPERTIES_timeLastModified_set)
    aComment = property(_MicroWinExecInterface.OBJECT_PROPERTIES_aComment_get, _MicroWinExecInterface.OBJECT_PROPERTIES_aComment_set)
    guid = property(_MicroWinExecInterface.OBJECT_PROPERTIES_guid_get, _MicroWinExecInterface.OBJECT_PROPERTIES_guid_set)
    standardLibrary = property(_MicroWinExecInterface.OBJECT_PROPERTIES_standardLibrary_get, _MicroWinExecInterface.OBJECT_PROPERTIES_standardLibrary_set)
    __swig_destroy__ = _MicroWinExecInterface.delete_OBJECT_PROPERTIES

# Register OBJECT_PROPERTIES in _MicroWinExecInterface:
_MicroWinExecInterface.OBJECT_PROPERTIES_swigregister(OBJECT_PROPERTIES)
MAX_OPERAND_LENGTH = cvar.MAX_OPERAND_LENGTH
MAX_OPERAND_INPUT_LENGTH = cvar.MAX_OPERAND_INPUT_LENGTH
STANDARD_STRONG_PASSWORD_LENGTH = cvar.STANDARD_STRONG_PASSWORD_LENGTH
GLOBAL_MAX_PASSWORD_LENGTH = cvar.GLOBAL_MAX_PASSWORD_LENGTH
POU_PASSWORD_LEN = cvar.POU_PASSWORD_LEN
PRJ_PASSWORD_LEN = cvar.PRJ_PASSWORD_LEN
OLD_POU_PASSWORD_LEN = cvar.OLD_POU_PASSWORD_LEN
OLD_PRJ_PASSWORD_LEN = cvar.OLD_PRJ_PASSWORD_LEN
MAX_POU_NAME_LENGTH = cvar.MAX_POU_NAME_LENGTH
MAX_CONSTANT_ADDRESS_LENGTH = cvar.MAX_CONSTANT_ADDRESS_LENGTH
MAX_MNEMONIC_LENGTH = cvar.MAX_MNEMONIC_LENGTH
OBJ_AUTHOR_BUF_LENGTH = cvar.OBJ_AUTHOR_BUF_LENGTH
OBJ_COMMENT_BUF_LENGTH = cvar.OBJ_COMMENT_BUF_LENGTH
MAX_UNDO_COUNT = cvar.MAX_UNDO_COUNT
MAX_VARSYMBOL_LENGTH = cvar.MAX_VARSYMBOL_LENGTH
MAX_COMMENT_LENGTH = cvar.MAX_COMMENT_LENGTH
MAX_PROJECT_TITLE_LENGTH = cvar.MAX_PROJECT_TITLE_LENGTH
MAX_MENU_NAME_LEN = cvar.MAX_MENU_NAME_LEN
MAX_MENU_DESC_LEN = cvar.MAX_MENU_DESC_LEN
MAX_NUM_EDGES = cvar.MAX_NUM_EDGES
UNKNOWN_BIT_OPERAND_STRING = cvar.UNKNOWN_BIT_OPERAND_STRING
UNKNOWN_NONBIT_OPERAND_STRING = cvar.UNKNOWN_NONBIT_OPERAND_STRING
GENERIC_INSTRUCTION_MNEMONIC = cvar.GENERIC_INSTRUCTION_MNEMONIC
CONTACT_MNEMONIC_PREFIX = cvar.CONTACT_MNEMONIC_PREFIX
CONTACT_MNEMONIC_SUFFIX = cvar.CONTACT_MNEMONIC_SUFFIX
COIL_MNEMONIC_PREFIX = cvar.COIL_MNEMONIC_PREFIX
COIL_MNEMONIC_SUFFIX = cvar.COIL_MNEMONIC_SUFFIX
MW_SHORTEN_STRING_SUFFIX = cvar.MW_SHORTEN_STRING_SUFFIX
MW_SYMBOL_ADDRESS_DELIMETER = cvar.MW_SYMBOL_ADDRESS_DELIMETER
MW_STATUS_DELIMETER = cvar.MW_STATUS_DELIMETER

SIMATIC_MODE = _MicroWinExecInterface.SIMATIC_MODE
IEC1131_MODE = _MicroWinExecInterface.IEC1131_MODE
NO_MODE = _MicroWinExecInterface.NO_MODE
MAX_MODE = _MicroWinExecInterface.MAX_MODE
SYMBOLIC_ADDRESS_MODE = _MicroWinExecInterface.SYMBOLIC_ADDRESS_MODE
ABSOLUTE_ADDRESS_MODE = _MicroWinExecInterface.ABSOLUTE_ADDRESS_MODE
MAX_ADDRESS_MODE = _MicroWinExecInterface.MAX_ADDRESS_MODE
DOWNLOADABLE_PROJECT = _MicroWinExecInterface.DOWNLOADABLE_PROJECT
INSTRUCTION_LIBRARY = _MicroWinExecInterface.INSTRUCTION_LIBRARY
SYMBOL_ONLY = _MicroWinExecInterface.SYMBOL_ONLY
SYMBOL_THEN_ABSOLUTE = _MicroWinExecInterface.SYMBOL_THEN_ABSOLUTE
DISPLAY_OPERAND_ONLY = _MicroWinExecInterface.DISPLAY_OPERAND_ONLY
DISPLAY_OPERAND_AND_VALUE = _MicroWinExecInterface.DISPLAY_OPERAND_AND_VALUE
OPERANDS_INSIDE_BOX = _MicroWinExecInterface.OPERANDS_INSIDE_BOX
OPERANDS_OUTSIDE_BOX = _MicroWinExecInterface.OPERANDS_OUTSIDE_BOX
VALUE_ONLY = _MicroWinExecInterface.VALUE_ONLY
SIMATIC_MNEMONIC = _MicroWinExecInterface.SIMATIC_MNEMONIC
INTL_MNEMONIC = _MicroWinExecInterface.INTL_MNEMONIC
MAX_MNEMONIC = _MicroWinExecInterface.MAX_MNEMONIC
NONE = _MicroWinExecInterface.NONE
FBD = _MicroWinExecInterface.FBD
LAD = _MicroWinExecInterface.LAD
ST = _MicroWinExecInterface.ST
IL = _MicroWinExecInterface.IL
SFC = _MicroWinExecInterface.SFC
STL = _MicroWinExecInterface.STL
IN_SCAN_MODE = _MicroWinExecInterface.IN_SCAN_MODE
END_SCAN_MODE = _MicroWinExecInterface.END_SCAN_MODE
BLOCK_TYPE_INVALID = _MicroWinExecInterface.BLOCK_TYPE_INVALID
BLOCK_TYPE_OB = _MicroWinExecInterface.BLOCK_TYPE_OB
BLOCK_TYPE_DB = _MicroWinExecInterface.BLOCK_TYPE_DB
BLOCK_TYPE_SDB = _MicroWinExecInterface.BLOCK_TYPE_SDB
BLOCK_TYPE_ALL = _MicroWinExecInterface.BLOCK_TYPE_ALL
LOAD_TYPE_INVALID = _MicroWinExecInterface.LOAD_TYPE_INVALID
LOAD_TYPE_UPLOAD = _MicroWinExecInterface.LOAD_TYPE_UPLOAD
LOAD_TYPE_DOWNLOAD = _MicroWinExecInterface.LOAD_TYPE_DOWNLOAD
LOAD_TYPE_CLEAR = _MicroWinExecInterface.LOAD_TYPE_CLEAR
class COMPONENT_APPLICATION_RESOURCES(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    exeStr = property(_MicroWinExecInterface.COMPONENT_APPLICATION_RESOURCES_exeStr_get, _MicroWinExecInterface.COMPONENT_APPLICATION_RESOURCES_exeStr_set)
    menuStr = property(_MicroWinExecInterface.COMPONENT_APPLICATION_RESOURCES_menuStr_get, _MicroWinExecInterface.COMPONENT_APPLICATION_RESOURCES_menuStr_set)
    menuDesc = property(_MicroWinExecInterface.COMPONENT_APPLICATION_RESOURCES_menuDesc_get, _MicroWinExecInterface.COMPONENT_APPLICATION_RESOURCES_menuDesc_set)
    groupBarStr = property(_MicroWinExecInterface.COMPONENT_APPLICATION_RESOURCES_groupBarStr_get, _MicroWinExecInterface.COMPONENT_APPLICATION_RESOURCES_groupBarStr_set)
    groupBarBmpLg = property(_MicroWinExecInterface.COMPONENT_APPLICATION_RESOURCES_groupBarBmpLg_get, _MicroWinExecInterface.COMPONENT_APPLICATION_RESOURCES_groupBarBmpLg_set)
    groupBarBmpSml = property(_MicroWinExecInterface.COMPONENT_APPLICATION_RESOURCES_groupBarBmpSml_get, _MicroWinExecInterface.COMPONENT_APPLICATION_RESOURCES_groupBarBmpSml_set)

    def __init__(self):
        _MicroWinExecInterface.COMPONENT_APPLICATION_RESOURCES_swiginit(self, _MicroWinExecInterface.new_COMPONENT_APPLICATION_RESOURCES())
    __swig_destroy__ = _MicroWinExecInterface.delete_COMPONENT_APPLICATION_RESOURCES

# Register COMPONENT_APPLICATION_RESOURCES in _MicroWinExecInterface:
_MicroWinExecInterface.COMPONENT_APPLICATION_RESOURCES_swigregister(COMPONENT_APPLICATION_RESOURCES)
MW_LIB_GUID_USSPROTOCOL = cvar.MW_LIB_GUID_USSPROTOCOL
MW_LIB_GUID_MODBUSMASTER = cvar.MW_LIB_GUID_MODBUSMASTER
MW_LIB_GUID_MODBUSSLAVE = cvar.MW_LIB_GUID_MODBUSSLAVE
MW_LIB_GUID_MODBUSMASTER2 = cvar.MW_LIB_GUID_MODBUSMASTER2
MW_LIB_GUID_TCPCLIENT = cvar.MW_LIB_GUID_TCPCLIENT
MW_LIB_GUID_TCPSERVER = cvar.MW_LIB_GUID_TCPSERVER
MW_LIB_GUID_OUC = cvar.MW_LIB_GUID_OUC
MW_LIB_GUID_SINAMICS_CONTROL = cvar.MW_LIB_GUID_SINAMICS_CONTROL
MW_LIB_GUID_SINAMICS_PARAMETER = cvar.MW_LIB_GUID_SINAMICS_PARAMETER
MW_LIB_GUID_SINAMICS_PNRDWRRECORD = cvar.MW_LIB_GUID_SINAMICS_PNRDWRRECORD
MAX_COMPONENT_PROGRAMS = cvar.MAX_COMPONENT_PROGRAMS
MAX_COMPONENT_LIBRARIES = cvar.MAX_COMPONENT_LIBRARIES

DISPLAY_NORMAL = _MicroWinExecInterface.DISPLAY_NORMAL
DISPLAY_READONLY = _MicroWinExecInterface.DISPLAY_READONLY
DISPLAY_INVISIBLE = _MicroWinExecInterface.DISPLAY_INVISIBLE
DISPLAY_WIZARD = _MicroWinExecInterface.DISPLAY_WIZARD
class VERSION_TAG(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    majorRevision = property(_MicroWinExecInterface.VERSION_TAG_majorRevision_get, _MicroWinExecInterface.VERSION_TAG_majorRevision_set)
    minorRevision = property(_MicroWinExecInterface.VERSION_TAG_minorRevision_get, _MicroWinExecInterface.VERSION_TAG_minorRevision_set)

    def __init__(self, *args):
        _MicroWinExecInterface.VERSION_TAG_swiginit(self, _MicroWinExecInterface.new_VERSION_TAG(*args))

    def SetVersion(self, major, minor):
        return _MicroWinExecInterface.VERSION_TAG_SetVersion(self, major, minor)

    def __eq__(self, rRight):
        return _MicroWinExecInterface.VERSION_TAG___eq__(self, rRight)

    def __ne__(self, rRight):
        return _MicroWinExecInterface.VERSION_TAG___ne__(self, rRight)

    def __gt__(self, rRight):
        return _MicroWinExecInterface.VERSION_TAG___gt__(self, rRight)

    def BuildVersionString(self):
        return _MicroWinExecInterface.VERSION_TAG_BuildVersionString(self)
    __swig_destroy__ = _MicroWinExecInterface.delete_VERSION_TAG

# Register VERSION_TAG in _MicroWinExecInterface:
_MicroWinExecInterface.VERSION_TAG_swigregister(VERSION_TAG)

FIND_UP = _MicroWinExecInterface.FIND_UP
FIND_DOWN = _MicroWinExecInterface.FIND_DOWN
FIND_ALL = _MicroWinExecInterface.FIND_ALL
FIND_NONE = _MicroWinExecInterface.FIND_NONE
FIND_PROGRAM_EDITOR = _MicroWinExecInterface.FIND_PROGRAM_EDITOR
FIND_VARIABLE_TABLE = _MicroWinExecInterface.FIND_VARIABLE_TABLE
FIND_SYMBOL_TABLE = _MicroWinExecInterface.FIND_SYMBOL_TABLE
FIND_STATUS_CHART = _MicroWinExecInterface.FIND_STATUS_CHART
FIND_DATA_BLOCK = _MicroWinExecInterface.FIND_DATA_BLOCK
FIND_OUTPUT_WINDOW = _MicroWinExecInterface.FIND_OUTPUT_WINDOW
FIND_XREF = _MicroWinExecInterface.FIND_XREF
FIND_USAGE_BYTE = _MicroWinExecInterface.FIND_USAGE_BYTE
FIND_USAGE_BIT = _MicroWinExecInterface.FIND_USAGE_BIT
FIND_USAGE_EDGE = _MicroWinExecInterface.FIND_USAGE_EDGE
class FIND_REPLACE_OPTIONS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MicroWinExecInterface.FIND_REPLACE_OPTIONS_swiginit(self, _MicroWinExecInterface.new_FIND_REPLACE_OPTIONS())

    def Initialize(self):
        return _MicroWinExecInterface.FIND_REPLACE_OPTIONS_Initialize(self)
    strFindString = property(_MicroWinExecInterface.FIND_REPLACE_OPTIONS_strFindString_get, _MicroWinExecInterface.FIND_REPLACE_OPTIONS_strFindString_set)
    strReplaceString = property(_MicroWinExecInterface.FIND_REPLACE_OPTIONS_strReplaceString_get, _MicroWinExecInterface.FIND_REPLACE_OPTIONS_strReplaceString_set)
    nFindLen = property(_MicroWinExecInterface.FIND_REPLACE_OPTIONS_nFindLen_get, _MicroWinExecInterface.FIND_REPLACE_OPTIONS_nFindLen_set)
    direction = property(_MicroWinExecInterface.FIND_REPLACE_OPTIONS_direction_get, _MicroWinExecInterface.FIND_REPLACE_OPTIONS_direction_set)
    bMatchCase = property(_MicroWinExecInterface.FIND_REPLACE_OPTIONS_bMatchCase_get, _MicroWinExecInterface.FIND_REPLACE_OPTIONS_bMatchCase_set)
    bWholeWord = property(_MicroWinExecInterface.FIND_REPLACE_OPTIONS_bWholeWord_get, _MicroWinExecInterface.FIND_REPLACE_OPTIONS_bWholeWord_set)
    bSpanTabs = property(_MicroWinExecInterface.FIND_REPLACE_OPTIONS_bSpanTabs_get, _MicroWinExecInterface.FIND_REPLACE_OPTIONS_bSpanTabs_set)
    bFindInPOUComment = property(_MicroWinExecInterface.FIND_REPLACE_OPTIONS_bFindInPOUComment_get, _MicroWinExecInterface.FIND_REPLACE_OPTIONS_bFindInPOUComment_set)
    bFindInNetworkTitle = property(_MicroWinExecInterface.FIND_REPLACE_OPTIONS_bFindInNetworkTitle_get, _MicroWinExecInterface.FIND_REPLACE_OPTIONS_bFindInNetworkTitle_set)
    bFindInNetworkComment = property(_MicroWinExecInterface.FIND_REPLACE_OPTIONS_bFindInNetworkComment_get, _MicroWinExecInterface.FIND_REPLACE_OPTIONS_bFindInNetworkComment_set)
    bFindInProgramCode = property(_MicroWinExecInterface.FIND_REPLACE_OPTIONS_bFindInProgramCode_get, _MicroWinExecInterface.FIND_REPLACE_OPTIONS_bFindInProgramCode_set)
    bRange = property(_MicroWinExecInterface.FIND_REPLACE_OPTIONS_bRange_get, _MicroWinExecInterface.FIND_REPLACE_OPTIONS_bRange_set)
    wReplaceBegin = property(_MicroWinExecInterface.FIND_REPLACE_OPTIONS_wReplaceBegin_get, _MicroWinExecInterface.FIND_REPLACE_OPTIONS_wReplaceBegin_set)
    wReplaceEnd = property(_MicroWinExecInterface.FIND_REPLACE_OPTIONS_wReplaceEnd_get, _MicroWinExecInterface.FIND_REPLACE_OPTIONS_wReplaceEnd_set)
    wTextIndex = property(_MicroWinExecInterface.FIND_REPLACE_OPTIONS_wTextIndex_get, _MicroWinExecInterface.FIND_REPLACE_OPTIONS_wTextIndex_set)
    startPouIndex = property(_MicroWinExecInterface.FIND_REPLACE_OPTIONS_startPouIndex_get, _MicroWinExecInterface.FIND_REPLACE_OPTIONS_startPouIndex_set)
    startNetwork = property(_MicroWinExecInterface.FIND_REPLACE_OPTIONS_startNetwork_get, _MicroWinExecInterface.FIND_REPLACE_OPTIONS_startNetwork_set)
    bTitle = property(_MicroWinExecInterface.FIND_REPLACE_OPTIONS_bTitle_get, _MicroWinExecInterface.FIND_REPLACE_OPTIONS_bTitle_set)
    startRow = property(_MicroWinExecInterface.FIND_REPLACE_OPTIONS_startRow_get, _MicroWinExecInterface.FIND_REPLACE_OPTIONS_startRow_set)
    startCol = property(_MicroWinExecInterface.FIND_REPLACE_OPTIONS_startCol_get, _MicroWinExecInterface.FIND_REPLACE_OPTIONS_startCol_set)
    bWrapped = property(_MicroWinExecInterface.FIND_REPLACE_OPTIONS_bWrapped_get, _MicroWinExecInterface.FIND_REPLACE_OPTIONS_bWrapped_set)
    bSearchedTitleAfterWrap = property(_MicroWinExecInterface.FIND_REPLACE_OPTIONS_bSearchedTitleAfterWrap_get, _MicroWinExecInterface.FIND_REPLACE_OPTIONS_bSearchedTitleAfterWrap_set)
    bFirstCall = property(_MicroWinExecInterface.FIND_REPLACE_OPTIONS_bFirstCall_get, _MicroWinExecInterface.FIND_REPLACE_OPTIONS_bFirstCall_set)
    bIsLad = property(_MicroWinExecInterface.FIND_REPLACE_OPTIONS_bIsLad_get, _MicroWinExecInterface.FIND_REPLACE_OPTIONS_bIsLad_set)
    bIsFbd = property(_MicroWinExecInterface.FIND_REPLACE_OPTIONS_bIsFbd_get, _MicroWinExecInterface.FIND_REPLACE_OPTIONS_bIsFbd_set)
    bIsStl = property(_MicroWinExecInterface.FIND_REPLACE_OPTIONS_bIsStl_get, _MicroWinExecInterface.FIND_REPLACE_OPTIONS_bIsStl_set)
    bSearchUp = property(_MicroWinExecInterface.FIND_REPLACE_OPTIONS_bSearchUp_get, _MicroWinExecInterface.FIND_REPLACE_OPTIONS_bSearchUp_set)
    m_nMinRange = property(_MicroWinExecInterface.FIND_REPLACE_OPTIONS_m_nMinRange_get, _MicroWinExecInterface.FIND_REPLACE_OPTIONS_m_nMinRange_set)
    m_nMaxRange = property(_MicroWinExecInterface.FIND_REPLACE_OPTIONS_m_nMaxRange_get, _MicroWinExecInterface.FIND_REPLACE_OPTIONS_m_nMaxRange_set)
    bFindFirst = property(_MicroWinExecInterface.FIND_REPLACE_OPTIONS_bFindFirst_get, _MicroWinExecInterface.FIND_REPLACE_OPTIONS_bFindFirst_set)
    wItemsReplaced = property(_MicroWinExecInterface.FIND_REPLACE_OPTIONS_wItemsReplaced_get, _MicroWinExecInterface.FIND_REPLACE_OPTIONS_wItemsReplaced_set)
    bIgnoreFocus = property(_MicroWinExecInterface.FIND_REPLACE_OPTIONS_bIgnoreFocus_get, _MicroWinExecInterface.FIND_REPLACE_OPTIONS_bIgnoreFocus_set)
    __swig_destroy__ = _MicroWinExecInterface.delete_FIND_REPLACE_OPTIONS

# Register FIND_REPLACE_OPTIONS in _MicroWinExecInterface:
_MicroWinExecInterface.FIND_REPLACE_OPTIONS_swigregister(FIND_REPLACE_OPTIONS)

class OPERAND_FLAGS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    initial = property(_MicroWinExecInterface.OPERAND_FLAGS_initial_get, _MicroWinExecInterface.OPERAND_FLAGS_initial_set)
    varScope = property(_MicroWinExecInterface.OPERAND_FLAGS_varScope_get, _MicroWinExecInterface.OPERAND_FLAGS_varScope_set)
    undefined = property(_MicroWinExecInterface.OPERAND_FLAGS_undefined_get, _MicroWinExecInterface.OPERAND_FLAGS_undefined_set)
    illegalUse = property(_MicroWinExecInterface.OPERAND_FLAGS_illegalUse_get, _MicroWinExecInterface.OPERAND_FLAGS_illegalUse_set)
    illegalSyntax = property(_MicroWinExecInterface.OPERAND_FLAGS_illegalSyntax_get, _MicroWinExecInterface.OPERAND_FLAGS_illegalSyntax_set)
    actuallyForced = property(_MicroWinExecInterface.OPERAND_FLAGS_actuallyForced_get, _MicroWinExecInterface.OPERAND_FLAGS_actuallyForced_set)
    indirectlyForced = property(_MicroWinExecInterface.OPERAND_FLAGS_indirectlyForced_get, _MicroWinExecInterface.OPERAND_FLAGS_indirectlyForced_set)
    partiallyForced = property(_MicroWinExecInterface.OPERAND_FLAGS_partiallyForced_get, _MicroWinExecInterface.OPERAND_FLAGS_partiallyForced_set)
    isAddress = property(_MicroWinExecInterface.OPERAND_FLAGS_isAddress_get, _MicroWinExecInterface.OPERAND_FLAGS_isAddress_set)
    isConstant = property(_MicroWinExecInterface.OPERAND_FLAGS_isConstant_get, _MicroWinExecInterface.OPERAND_FLAGS_isConstant_set)
    isVariable = property(_MicroWinExecInterface.OPERAND_FLAGS_isVariable_get, _MicroWinExecInterface.OPERAND_FLAGS_isVariable_set)
    alignment = property(_MicroWinExecInterface.OPERAND_FLAGS_alignment_get, _MicroWinExecInterface.OPERAND_FLAGS_alignment_set)
    eno = property(_MicroWinExecInterface.OPERAND_FLAGS_eno_get, _MicroWinExecInterface.OPERAND_FLAGS_eno_set)
    isForceable = property(_MicroWinExecInterface.OPERAND_FLAGS_isForceable_get, _MicroWinExecInterface.OPERAND_FLAGS_isForceable_set)
    isValueOn = property(_MicroWinExecInterface.OPERAND_FLAGS_isValueOn_get, _MicroWinExecInterface.OPERAND_FLAGS_isValueOn_set)
    invalidInsideBox = property(_MicroWinExecInterface.OPERAND_FLAGS_invalidInsideBox_get, _MicroWinExecInterface.OPERAND_FLAGS_invalidInsideBox_set)
    showDefineSymbol = property(_MicroWinExecInterface.OPERAND_FLAGS_showDefineSymbol_get, _MicroWinExecInterface.OPERAND_FLAGS_showDefineSymbol_set)
    showEditSymbol = property(_MicroWinExecInterface.OPERAND_FLAGS_showEditSymbol_get, _MicroWinExecInterface.OPERAND_FLAGS_showEditSymbol_set)
    showSelectSymbol = property(_MicroWinExecInterface.OPERAND_FLAGS_showSelectSymbol_get, _MicroWinExecInterface.OPERAND_FLAGS_showSelectSymbol_set)
    isWriteable = property(_MicroWinExecInterface.OPERAND_FLAGS_isWriteable_get, _MicroWinExecInterface.OPERAND_FLAGS_isWriteable_set)
    unscanned = property(_MicroWinExecInterface.OPERAND_FLAGS_unscanned_get, _MicroWinExecInterface.OPERAND_FLAGS_unscanned_set)
    boxerror = property(_MicroWinExecInterface.OPERAND_FLAGS_boxerror_get, _MicroWinExecInterface.OPERAND_FLAGS_boxerror_set)
    isEdgeOperand = property(_MicroWinExecInterface.OPERAND_FLAGS_isEdgeOperand_get, _MicroWinExecInterface.OPERAND_FLAGS_isEdgeOperand_set)
    reserved = property(_MicroWinExecInterface.OPERAND_FLAGS_reserved_get, _MicroWinExecInterface.OPERAND_FLAGS_reserved_set)

    def __eq__(self, *args):
        return _MicroWinExecInterface.OPERAND_FLAGS___eq__(self, *args)

    def __init__(self):
        _MicroWinExecInterface.OPERAND_FLAGS_swiginit(self, _MicroWinExecInterface.new_OPERAND_FLAGS())
    __swig_destroy__ = _MicroWinExecInterface.delete_OPERAND_FLAGS

# Register OPERAND_FLAGS in _MicroWinExecInterface:
_MicroWinExecInterface.OPERAND_FLAGS_swigregister(OPERAND_FLAGS)

class OPERAND_ELEMENT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_strSymbol = property(_MicroWinExecInterface.OPERAND_ELEMENT_m_strSymbol_get, _MicroWinExecInterface.OPERAND_ELEMENT_m_strSymbol_set)
    m_strAddress = property(_MicroWinExecInterface.OPERAND_ELEMENT_m_strAddress_get, _MicroWinExecInterface.OPERAND_ELEMENT_m_strAddress_set)
    m_strValue = property(_MicroWinExecInterface.OPERAND_ELEMENT_m_strValue_get, _MicroWinExecInterface.OPERAND_ELEMENT_m_strValue_set)
    m_sFlags = property(_MicroWinExecInterface.OPERAND_ELEMENT_m_sFlags_get, _MicroWinExecInterface.OPERAND_ELEMENT_m_sFlags_set)

    def __init__(self):
        _MicroWinExecInterface.OPERAND_ELEMENT_swiginit(self, _MicroWinExecInterface.new_OPERAND_ELEMENT())

    def Empty(self):
        return _MicroWinExecInterface.OPERAND_ELEMENT_Empty(self)
    __swig_destroy__ = _MicroWinExecInterface.delete_OPERAND_ELEMENT

# Register OPERAND_ELEMENT in _MicroWinExecInterface:
_MicroWinExecInterface.OPERAND_ELEMENT_swigregister(OPERAND_ELEMENT)

PARAM_USER = _MicroWinExecInterface.PARAM_USER
PARAM_PID_WIZARD = _MicroWinExecInterface.PARAM_PID_WIZARD
PARAM_AIF_WIZARD = _MicroWinExecInterface.PARAM_AIF_WIZARD
PARAM_NETRW_WIZARD = _MicroWinExecInterface.PARAM_NETRW_WIZARD
PARAM_HSC_WIZARD = _MicroWinExecInterface.PARAM_HSC_WIZARD
PARAM_HMI_WIZARD = _MicroWinExecInterface.PARAM_HMI_WIZARD
POU_STATUS = _MicroWinExecInterface.POU_STATUS
CHART_STATUS = _MicroWinExecInterface.CHART_STATUS
SIGNED_STATUS = _MicroWinExecInterface.SIGNED_STATUS
UNSIGNED_STATUS = _MicroWinExecInterface.UNSIGNED_STATUS
HEXADECIMAL_STATUS = _MicroWinExecInterface.HEXADECIMAL_STATUS
BINARY_STATUS = _MicroWinExecInterface.BINARY_STATUS
FLOATING_POINT_STATUS = _MicroWinExecInterface.FLOATING_POINT_STATUS
ASCII_STATUS = _MicroWinExecInterface.ASCII_STATUS
STRING_STATUS = _MicroWinExecInterface.STRING_STATUS
TIME_STATUS = _MicroWinExecInterface.TIME_STATUS
BIT_STATUS = _MicroWinExecInterface.BIT_STATUS
NO_FORMAT_STATUS = _MicroWinExecInterface.NO_FORMAT_STATUS
class CPU_TYPE_MASK(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MicroWinExecInterface.CPU_TYPE_MASK_swiginit(self, _MicroWinExecInterface.new_CPU_TYPE_MASK(*args))

    def __eq__(self, right):
        return _MicroWinExecInterface.CPU_TYPE_MASK___eq__(self, right)
    CPU_210 = property(_MicroWinExecInterface.CPU_TYPE_MASK_CPU_210_get, _MicroWinExecInterface.CPU_TYPE_MASK_CPU_210_set)
    CPU_212 = property(_MicroWinExecInterface.CPU_TYPE_MASK_CPU_212_get, _MicroWinExecInterface.CPU_TYPE_MASK_CPU_212_set)
    CPU_214 = property(_MicroWinExecInterface.CPU_TYPE_MASK_CPU_214_get, _MicroWinExecInterface.CPU_TYPE_MASK_CPU_214_set)
    CPU_215 = property(_MicroWinExecInterface.CPU_TYPE_MASK_CPU_215_get, _MicroWinExecInterface.CPU_TYPE_MASK_CPU_215_set)
    CPU_216 = property(_MicroWinExecInterface.CPU_TYPE_MASK_CPU_216_get, _MicroWinExecInterface.CPU_TYPE_MASK_CPU_216_set)
    CPU_221 = property(_MicroWinExecInterface.CPU_TYPE_MASK_CPU_221_get, _MicroWinExecInterface.CPU_TYPE_MASK_CPU_221_set)
    CPU_222 = property(_MicroWinExecInterface.CPU_TYPE_MASK_CPU_222_get, _MicroWinExecInterface.CPU_TYPE_MASK_CPU_222_set)
    CPU_224 = property(_MicroWinExecInterface.CPU_TYPE_MASK_CPU_224_get, _MicroWinExecInterface.CPU_TYPE_MASK_CPU_224_set)
    CPU_226 = property(_MicroWinExecInterface.CPU_TYPE_MASK_CPU_226_get, _MicroWinExecInterface.CPU_TYPE_MASK_CPU_226_set)
    CPU_226XM = property(_MicroWinExecInterface.CPU_TYPE_MASK_CPU_226XM_get, _MicroWinExecInterface.CPU_TYPE_MASK_CPU_226XM_set)
    CPU_226XP = property(_MicroWinExecInterface.CPU_TYPE_MASK_CPU_226XP_get, _MicroWinExecInterface.CPU_TYPE_MASK_CPU_226XP_set)
    reserved = property(_MicroWinExecInterface.CPU_TYPE_MASK_reserved_get, _MicroWinExecInterface.CPU_TYPE_MASK_reserved_set)
    __swig_destroy__ = _MicroWinExecInterface.delete_CPU_TYPE_MASK

# Register CPU_TYPE_MASK in _MicroWinExecInterface:
_MicroWinExecInterface.CPU_TYPE_MASK_swigregister(CPU_TYPE_MASK)
CPU_INVALID = cvar.CPU_INVALID
CPU_210_ONLY = cvar.CPU_210_ONLY
CPU_212_ONLY = cvar.CPU_212_ONLY
CPU_214_ONLY = cvar.CPU_214_ONLY
CPU_215_ONLY = cvar.CPU_215_ONLY
CPU_216_ONLY = cvar.CPU_216_ONLY
CPU_221_ONLY = cvar.CPU_221_ONLY
CPU_222_ONLY = cvar.CPU_222_ONLY
CPU_224_ONLY = cvar.CPU_224_ONLY
CPU_226_ONLY = cvar.CPU_226_ONLY
CPU_226XM_ONLY = cvar.CPU_226XM_ONLY
CPU_224XP_ONLY = cvar.CPU_224XP_ONLY

ePLC_Filter_None = _MicroWinExecInterface.ePLC_Filter_None
ePLC_Filter_IntelligentModules = _MicroWinExecInterface.ePLC_Filter_IntelligentModules
ePLC_Filter_LinearPTO = _MicroWinExecInterface.ePLC_Filter_LinearPTO
ePLC_Filter_PWM = _MicroWinExecInterface.ePLC_Filter_PWM
ePLC_Filter_Recipes = _MicroWinExecInterface.ePLC_Filter_Recipes
ePLC_Filter_DataLogs = _MicroWinExecInterface.ePLC_Filter_DataLogs
ePLC_Filter_NETR = _MicroWinExecInterface.ePLC_Filter_NETR
ePLC_Filter_PID = _MicroWinExecInterface.ePLC_Filter_PID
ePLC_Filter_PIDTuning = _MicroWinExecInterface.ePLC_Filter_PIDTuning
START_LINE_WORD = _MicroWinExecInterface.START_LINE_WORD
OTHER_WORD = _MicroWinExecInterface.OTHER_WORD
class STL_PATH(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pouId = property(_MicroWinExecInterface.STL_PATH_pouId_get, _MicroWinExecInterface.STL_PATH_pouId_set)
    lineNumber = property(_MicroWinExecInterface.STL_PATH_lineNumber_get, _MicroWinExecInterface.STL_PATH_lineNumber_set)

    def __init__(self):
        _MicroWinExecInterface.STL_PATH_swiginit(self, _MicroWinExecInterface.new_STL_PATH())
    __swig_destroy__ = _MicroWinExecInterface.delete_STL_PATH

# Register STL_PATH in _MicroWinExecInterface:
_MicroWinExecInterface.STL_PATH_swigregister(STL_PATH)

MAX_NETWORK_TITLE_LENGTH = _MicroWinExecInterface.MAX_NETWORK_TITLE_LENGTH
MAX_NETWORK_COMMENT_LENGTH = _MicroWinExecInterface.MAX_NETWORK_COMMENT_LENGTH
INSERT_MODE = _MicroWinExecInterface.INSERT_MODE
OVERSTRIKE_MODE = _MicroWinExecInterface.OVERSTRIKE_MODE
SYS_NORMAL_REFRESH = _MicroWinExecInterface.SYS_NORMAL_REFRESH
SYS_COMPILE = _MicroWinExecInterface.SYS_COMPILE
SYS_UPLOAD = _MicroWinExecInterface.SYS_UPLOAD
SYS_DOWNLOAD = _MicroWinExecInterface.SYS_DOWNLOAD
SYS_EDITOR_CHANGE = _MicroWinExecInterface.SYS_EDITOR_CHANGE
SYS_TAB_CHANGE = _MicroWinExecInterface.SYS_TAB_CHANGE
SYS_INITIAL_TAB = _MicroWinExecInterface.SYS_INITIAL_TAB
SYS_IMPORT = _MicroWinExecInterface.SYS_IMPORT
SYS_EXPORT = _MicroWinExecInterface.SYS_EXPORT
SYS_OPEN_PROJECT = _MicroWinExecInterface.SYS_OPEN_PROJECT
SYS_NEW_PROJECT = _MicroWinExecInterface.SYS_NEW_PROJECT
SYS_CLOSE_PROJECT = _MicroWinExecInterface.SYS_CLOSE_PROJECT
SYS_RENAME_TAB = _MicroWinExecInterface.SYS_RENAME_TAB
SYS_DELETE_TAB = _MicroWinExecInterface.SYS_DELETE_TAB
SYS_DELETE_TAB_FOCUS_ONLY = _MicroWinExecInterface.SYS_DELETE_TAB_FOCUS_ONLY
SYS_REFRESH_TABLE = _MicroWinExecInterface.SYS_REFRESH_TABLE
SYS_REFRESH_TAB_ORDER = _MicroWinExecInterface.SYS_REFRESH_TAB_ORDER
SYS_COLOR_AND_FONT_CHANGE = _MicroWinExecInterface.SYS_COLOR_AND_FONT_CHANGE
SYS_NO_REDRAW = _MicroWinExecInterface.SYS_NO_REDRAW
SYS_RESIZE_ROWS_FIT = _MicroWinExecInterface.SYS_RESIZE_ROWS_FIT
SYS_UNFORCE_ALL = _MicroWinExecInterface.SYS_UNFORCE_ALL
TRD_TIMEBASE_NONE = _MicroWinExecInterface.TRD_TIMEBASE_NONE
TRD_TIMEBASE_0_25_SECOND = _MicroWinExecInterface.TRD_TIMEBASE_0_25_SECOND
TRD_TIMEBASE_0_50_SECOND = _MicroWinExecInterface.TRD_TIMEBASE_0_50_SECOND
TRD_TIMEBASE_1_SECOND = _MicroWinExecInterface.TRD_TIMEBASE_1_SECOND
TRD_TIMEBASE_5_SECONDS = _MicroWinExecInterface.TRD_TIMEBASE_5_SECONDS
TRD_TIMEBASE_1_MINUTE = _MicroWinExecInterface.TRD_TIMEBASE_1_MINUTE
TRD_TIMEBASE_5_MINUTES = _MicroWinExecInterface.TRD_TIMEBASE_5_MINUTES
CURSOR_TYPE_NORMAL = _MicroWinExecInterface.CURSOR_TYPE_NORMAL
CURSOR_TYPE_RME = _MicroWinExecInterface.CURSOR_TYPE_RME
NULL_VERSION = _MicroWinExecInterface.NULL_VERSION
MW_PRE_4_0 = _MicroWinExecInterface.MW_PRE_4_0
MW_VER_4_0 = _MicroWinExecInterface.MW_VER_4_0
SM_VER_1_0 = _MicroWinExecInterface.SM_VER_1_0
SM_VER_2_0 = _MicroWinExecInterface.SM_VER_2_0
SM_VER_2_1 = _MicroWinExecInterface.SM_VER_2_1
SM_VER_2_2 = _MicroWinExecInterface.SM_VER_2_2
SM_VER_2_3 = _MicroWinExecInterface.SM_VER_2_3
SM_VER_2_4 = _MicroWinExecInterface.SM_VER_2_4
VERSION_UNDEFINED = _MicroWinExecInterface.VERSION_UNDEFINED
BLOCK_NUMBER_GPB = _MicroWinExecInterface.BLOCK_NUMBER_GPB
BLOCK_NUMBER_RECIPE0 = _MicroWinExecInterface.BLOCK_NUMBER_RECIPE0
BLOCK_NUMBER_RECIPE1 = _MicroWinExecInterface.BLOCK_NUMBER_RECIPE1
BLOCK_NUMBER_RECIPE2 = _MicroWinExecInterface.BLOCK_NUMBER_RECIPE2
BLOCK_NUMBER_RECIPE3 = _MicroWinExecInterface.BLOCK_NUMBER_RECIPE3
BLOCK_NUMBER_DATALOG0 = _MicroWinExecInterface.BLOCK_NUMBER_DATALOG0
BLOCK_NUMBER_DATALOG1 = _MicroWinExecInterface.BLOCK_NUMBER_DATALOG1
BLOCK_NUMBER_DATALOG2 = _MicroWinExecInterface.BLOCK_NUMBER_DATALOG2
BLOCK_NUMBER_DATALOG3 = _MicroWinExecInterface.BLOCK_NUMBER_DATALOG3
MAX_RECIPES = _MicroWinExecInterface.MAX_RECIPES
MAX_DATA_LOGS = _MicroWinExecInterface.MAX_DATA_LOGS
MAX_RESOURCE_STRING_SIZE = _MicroWinExecInterface.MAX_RESOURCE_STRING_SIZE
class REGIONAL_SETTINGS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    measurementSystem = property(_MicroWinExecInterface.REGIONAL_SETTINGS_measurementSystem_get, _MicroWinExecInterface.REGIONAL_SETTINGS_measurementSystem_set)
    decimalChar = property(_MicroWinExecInterface.REGIONAL_SETTINGS_decimalChar_get, _MicroWinExecInterface.REGIONAL_SETTINGS_decimalChar_set)
    timeFormat = property(_MicroWinExecInterface.REGIONAL_SETTINGS_timeFormat_get, _MicroWinExecInterface.REGIONAL_SETTINGS_timeFormat_set)
    dateFormat = property(_MicroWinExecInterface.REGIONAL_SETTINGS_dateFormat_get, _MicroWinExecInterface.REGIONAL_SETTINGS_dateFormat_set)

    def __init__(self):
        _MicroWinExecInterface.REGIONAL_SETTINGS_swiginit(self, _MicroWinExecInterface.new_REGIONAL_SETTINGS())
    __swig_destroy__ = _MicroWinExecInterface.delete_REGIONAL_SETTINGS

# Register REGIONAL_SETTINGS in _MicroWinExecInterface:
_MicroWinExecInterface.REGIONAL_SETTINGS_swigregister(REGIONAL_SETTINGS)
COMPILE_ERROR_CLASS1 = cvar.COMPILE_ERROR_CLASS1
COMPILE_ERROR_CLASS2 = cvar.COMPILE_ERROR_CLASS2
COMPILE_ERROR_CLASS3 = cvar.COMPILE_ERROR_CLASS3
COMPILE_ERROR_CLASS4 = cvar.COMPILE_ERROR_CLASS4
NUM_TRAILING_NETS = cvar.NUM_TRAILING_NETS
BEGINNING_NUMBER_OF_NETS_MAIN = cvar.BEGINNING_NUMBER_OF_NETS_MAIN
BEGINNING_NUMBER_OF_NETS_SBR = cvar.BEGINNING_NUMBER_OF_NETS_SBR
BEGINNING_NUMBER_OF_NETS_INT = cvar.BEGINNING_NUMBER_OF_NETS_INT
BEGINNING_NUMBER_OF_NETS_STL = cvar.BEGINNING_NUMBER_OF_NETS_STL
COMPONENT_RESERVED_STRING_BEGIN = cvar.COMPONENT_RESERVED_STRING_BEGIN
IDS_APP_GROUP_CAPTION = cvar.IDS_APP_GROUP_CAPTION

class COMPONENT_INFO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MicroWinExecInterface.COMPONENT_INFO_swiginit(self, _MicroWinExecInterface.new_COMPONENT_INFO())

    def GetHelpPath(self, rStrHelp):
        return _MicroWinExecInterface.COMPONENT_INFO_GetHelpPath(self, rStrHelp)

    def GetHelpOffset(self, rOffset):
        return _MicroWinExecInterface.COMPONENT_INFO_GetHelpOffset(self, rOffset)

    def GetResourceDLL(self, rStrResource):
        return _MicroWinExecInterface.COMPONENT_INFO_GetResourceDLL(self, rStrResource)

    def GetVersionString(self, rStrVersion):
        return _MicroWinExecInterface.COMPONENT_INFO_GetVersionString(self, rStrVersion)

    def GetVersion(self, rVersion):
        return _MicroWinExecInterface.COMPONENT_INFO_GetVersion(self, rVersion)

    def SetHelpPath(self, rStrHelp):
        return _MicroWinExecInterface.COMPONENT_INFO_SetHelpPath(self, rStrHelp)

    def SetHelpOffset(self, rOffset):
        return _MicroWinExecInterface.COMPONENT_INFO_SetHelpOffset(self, rOffset)

    def SetResourceDLL(self, rStrResource):
        return _MicroWinExecInterface.COMPONENT_INFO_SetResourceDLL(self, rStrResource)

    def SetVersionString(self, rStrVersion):
        return _MicroWinExecInterface.COMPONENT_INFO_SetVersionString(self, rStrVersion)
    tHelp = property(_MicroWinExecInterface.COMPONENT_INFO_tHelp_get, _MicroWinExecInterface.COMPONENT_INFO_tHelp_set)
    dwHelpOffset = property(_MicroWinExecInterface.COMPONENT_INFO_dwHelpOffset_get, _MicroWinExecInterface.COMPONENT_INFO_dwHelpOffset_set)
    tResourceDLLPath = property(_MicroWinExecInterface.COMPONENT_INFO_tResourceDLLPath_get, _MicroWinExecInterface.COMPONENT_INFO_tResourceDLLPath_set)
    tVersionString = property(_MicroWinExecInterface.COMPONENT_INFO_tVersionString_get, _MicroWinExecInterface.COMPONENT_INFO_tVersionString_set)
    __swig_destroy__ = _MicroWinExecInterface.delete_COMPONENT_INFO

# Register COMPONENT_INFO in _MicroWinExecInterface:
_MicroWinExecInterface.COMPONENT_INFO_swigregister(COMPONENT_INFO)

class LIBRARY_COMPONENT_INFO(COMPONENT_INFO):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MicroWinExecInterface.LIBRARY_COMPONENT_INFO_swiginit(self, _MicroWinExecInterface.new_LIBRARY_COMPONENT_INFO())

    def GetBinPath(self, rBinPath):
        return _MicroWinExecInterface.LIBRARY_COMPONENT_INFO_GetBinPath(self, rBinPath)

    def GetSignaturePath(self, rStrSignaturePath):
        return _MicroWinExecInterface.LIBRARY_COMPONENT_INFO_GetSignaturePath(self, rStrSignaturePath)

    def GetSymbolPath(self, rStrSymbolPath):
        return _MicroWinExecInterface.LIBRARY_COMPONENT_INFO_GetSymbolPath(self, rStrSymbolPath)

    def SetBinPath(self, rBinPath):
        return _MicroWinExecInterface.LIBRARY_COMPONENT_INFO_SetBinPath(self, rBinPath)

    def SetSignaturePath(self, rStrSignaturePath):
        return _MicroWinExecInterface.LIBRARY_COMPONENT_INFO_SetSignaturePath(self, rStrSignaturePath)

    def SetSymbolPath(self, rStrSymbolPath):
        return _MicroWinExecInterface.LIBRARY_COMPONENT_INFO_SetSymbolPath(self, rStrSymbolPath)
    tBinPath = property(_MicroWinExecInterface.LIBRARY_COMPONENT_INFO_tBinPath_get, _MicroWinExecInterface.LIBRARY_COMPONENT_INFO_tBinPath_set)
    tSignatures = property(_MicroWinExecInterface.LIBRARY_COMPONENT_INFO_tSignatures_get, _MicroWinExecInterface.LIBRARY_COMPONENT_INFO_tSignatures_set)
    tSymbols = property(_MicroWinExecInterface.LIBRARY_COMPONENT_INFO_tSymbols_get, _MicroWinExecInterface.LIBRARY_COMPONENT_INFO_tSymbols_set)
    __swig_destroy__ = _MicroWinExecInterface.delete_LIBRARY_COMPONENT_INFO

# Register LIBRARY_COMPONENT_INFO in _MicroWinExecInterface:
_MicroWinExecInterface.LIBRARY_COMPONENT_INFO_swigregister(LIBRARY_COMPONENT_INFO)

WIN32 = _MicroWinExecInterface.WIN32

def create_pWORD(value):
    return _MicroWinExecInterface.create_pWORD(value)

def print_pWORDValue(pValue):
    return _MicroWinExecInterface.print_pWORDValue(pValue)

def get_pWORDValue(pValue):
    return _MicroWinExecInterface.get_pWORDValue(pValue)

def destroy_pWORD(pValue):
    return _MicroWinExecInterface.destroy_pWORD(pValue)

def create_puint(value):
    return _MicroWinExecInterface.create_puint(value)

def print_puintValue(pValue):
    return _MicroWinExecInterface.print_puintValue(pValue)

def get_puintValueS(pValue):
    return _MicroWinExecInterface.get_puintValueS(pValue)

def get_puintValueU(pValue):
    return _MicroWinExecInterface.get_puintValueU(pValue)

def destroy_puint(pValue):
    return _MicroWinExecInterface.destroy_puint(pValue)

def create_pint(value):
    return _MicroWinExecInterface.create_pint(value)

def print_pintValue(pValue):
    return _MicroWinExecInterface.print_pintValue(pValue)

def get_pintValue(pValue):
    return _MicroWinExecInterface.get_pintValue(pValue)

def destroy_pint(pValue):
    return _MicroWinExecInterface.destroy_pint(pValue)

def create_pBOOL(value):
    return _MicroWinExecInterface.create_pBOOL(value)

def print_pBOOL(pValue):
    return _MicroWinExecInterface.print_pBOOL(pValue)

def get_pBOOLValue(pValue):
    return _MicroWinExecInterface.get_pBOOLValue(pValue)

def destroy_pBOOL(pValue):
    return _MicroWinExecInterface.destroy_pBOOL(pValue)

def print_CString(value):
    return _MicroWinExecInterface.print_CString(value)

def compare_CString1(value1, value2):
    return _MicroWinExecInterface.compare_CString1(value1, value2)

def compare_CString2(value1, value2):
    return _MicroWinExecInterface.compare_CString2(value1, value2)

def compare_CString3(value1, value2):
    return _MicroWinExecInterface.compare_CString3(value1, value2)

def compare_CString4(src, dst, nLen):
    return _MicroWinExecInterface.compare_CString4(src, dst, nLen)

def get_pByteBYTE(pValue):
    return _MicroWinExecInterface.get_pByteBYTE(pValue)

def get_pByteWord(pValue):
    return _MicroWinExecInterface.get_pByteWord(pValue)

def get_pByteDWORD(pValue):
    return _MicroWinExecInterface.get_pByteDWORD(pValue)

def create_pByte(value, nType):
    return _MicroWinExecInterface.create_pByte(value, nType)

def destroy_pByte(pValue):
    return _MicroWinExecInterface.destroy_pByte(pValue)

def UpdateFW(strFilePath):
    return _MicroWinExecInterface.UpdateFW(strFilePath)

def get_defaultHWND():
    return _MicroWinExecInterface.get_defaultHWND()
NO_ERROR = _MicroWinExecInterface.NO_ERROR
ENO_NOT_SUPPORTED = _MicroWinExecInterface.ENO_NOT_SUPPORTED
DIRECT_ADDRESS_PARTIAL_OVERLAP = _MicroWinExecInterface.DIRECT_ADDRESS_PARTIAL_OVERLAP
IN2_OUT_INDIRECTION_OVERLAP = _MicroWinExecInterface.IN2_OUT_INDIRECTION_OVERLAP
ACCUM_INDIRECTION_OVERLAP = _MicroWinExecInterface.ACCUM_INDIRECTION_OVERLAP
IN2_OUT_DIRECT_OVERLAP = _MicroWinExecInterface.IN2_OUT_DIRECT_OVERLAP
IN2_OVERLAPS_LSW_OUT = _MicroWinExecInterface.IN2_OVERLAPS_LSW_OUT
IN1_OUT_INDIRECTION_OVERLAP = _MicroWinExecInterface.IN1_OUT_INDIRECTION_OVERLAP
INDIRECT_ADDRESS_PARTIAL_OVERLAP = _MicroWinExecInterface.INDIRECT_ADDRESS_PARTIAL_OVERLAP
SAME_ACCUM_USED_IN1_AND_OUT = _MicroWinExecInterface.SAME_ACCUM_USED_IN1_AND_OUT
SAME_ACCUM_USED_IN2_AND_OUT = _MicroWinExecInterface.SAME_ACCUM_USED_IN2_AND_OUT
INSTRUCTION_NOT_SUPPORTED = _MicroWinExecInterface.INSTRUCTION_NOT_SUPPORTED
PCALL_NOT_SUPPORTED = _MicroWinExecInterface.PCALL_NOT_SUPPORTED
CEND_NOT_SUPPORTED = _MicroWinExecInterface.CEND_NOT_SUPPORTED
SBR_NOT_SUPPORTED = _MicroWinExecInterface.SBR_NOT_SUPPORTED
CANNOT_RESOLVE_OVERLOAD = _MicroWinExecInterface.CANNOT_RESOLVE_OVERLOAD
OVERLOADED_OPERAND_SIZE_MISMATCH = _MicroWinExecInterface.OVERLOADED_OPERAND_SIZE_MISMATCH
HIDE_NOT_SUPPORTED = _MicroWinExecInterface.HIDE_NOT_SUPPORTED
NO_LIB_MEMORY_ALLOCATION = _MicroWinExecInterface.NO_LIB_MEMORY_ALLOCATION
OVERLAP_LIB_MEMORY_ALLOCATION = _MicroWinExecInterface.OVERLAP_LIB_MEMORY_ALLOCATION
CONTACT_MUST_PROCEED_BOX = _MicroWinExecInterface.CONTACT_MUST_PROCEED_BOX
ILLEGAL_SYNTAX_FOR_OPERAND = _MicroWinExecInterface.ILLEGAL_SYNTAX_FOR_OPERAND
UNDEFINED_SYMBOL_FOR_OPERAND = _MicroWinExecInterface.UNDEFINED_SYMBOL_FOR_OPERAND
INVALID_ADDRESS_MODE_FOR_OPERAND = _MicroWinExecInterface.INVALID_ADDRESS_MODE_FOR_OPERAND
INVALID_MEMORY_AREA_FOR_OPERAND = _MicroWinExecInterface.INVALID_MEMORY_AREA_FOR_OPERAND
INVALID_SIZE_OR_TYPE_FOR_OPERAND = _MicroWinExecInterface.INVALID_SIZE_OR_TYPE_FOR_OPERAND
ADDRESS_OUT_OF_RANGE_FOR_OPERAND = _MicroWinExecInterface.ADDRESS_OUT_OF_RANGE_FOR_OPERAND
UNDEFINED_GENERIC_INSTRUCTION = _MicroWinExecInterface.UNDEFINED_GENERIC_INSTRUCTION
CALL_WITHOUT_SBR = _MicroWinExecInterface.CALL_WITHOUT_SBR
DUPLICATE_EDGE_USAGE = _MicroWinExecInterface.DUPLICATE_EDGE_USAGE
INVALID_INDIRECT_MEM_AREA = _MicroWinExecInterface.INVALID_INDIRECT_MEM_AREA
INVALID_ANALOG_IO_ADDRESS = _MicroWinExecInterface.INVALID_ANALOG_IO_ADDRESS
OPEN_CIRCUIT = _MicroWinExecInterface.OPEN_CIRCUIT
SHORT_CIRCUIT = _MicroWinExecInterface.SHORT_CIRCUIT
REVERSE_POWER_FLOW = _MicroWinExecInterface.REVERSE_POWER_FLOW
INVALID_NETWORK = _MicroWinExecInterface.INVALID_NETWORK
EDGEUP_EDGEDOWN_NOT_FALSE = _MicroWinExecInterface.EDGEUP_EDGEDOWN_NOT_FALSE
CTU_NET_WITH_LPS = _MicroWinExecInterface.CTU_NET_WITH_LPS
UNKNOWN_COMPILE_ERROR = _MicroWinExecInterface.UNKNOWN_COMPILE_ERROR
INST_MUST_BE_BY_ITSELF = _MicroWinExecInterface.INST_MUST_BE_BY_ITSELF
CONTACT_MUST_PROCEED_OUTPUT = _MicroWinExecInterface.CONTACT_MUST_PROCEED_OUTPUT
INST_CAN_ONLY_BE_CONDITIONAL = _MicroWinExecInterface.INST_CAN_ONLY_BE_CONDITIONAL
MISSING_OUTPUT = _MicroWinExecInterface.MISSING_OUTPUT
ILLEGAL_LITERAL_OPERAND = _MicroWinExecInterface.ILLEGAL_LITERAL_OPERAND
LITERAL_OUT_OF_RANGE_FOR_OPERAND = _MicroWinExecInterface.LITERAL_OUT_OF_RANGE_FOR_OPERAND
ILLEGAL_LITERAL_TYPE_FOR_OPERAND = _MicroWinExecInterface.ILLEGAL_LITERAL_TYPE_FOR_OPERAND
INTERCONNECTIONS_NOT_ALLOWED = _MicroWinExecInterface.INTERCONNECTIONS_NOT_ALLOWED
OTHER_OUTPUTS_NOT_ALLOWED_WITH_NULTI_POWER_INSTRUCTIONS = _MicroWinExecInterface.OTHER_OUTPUTS_NOT_ALLOWED_WITH_NULTI_POWER_INSTRUCTIONS
TWO_OR_MORE_POWERFLOWS_INTO_VERTICAL = _MicroWinExecInterface.TWO_OR_MORE_POWERFLOWS_INTO_VERTICAL
TBRANCH_RECOMBINATION = _MicroWinExecInterface.TBRANCH_RECOMBINATION
DUPLICATE_EDGEUP_USAGE = _MicroWinExecInterface.DUPLICATE_EDGEUP_USAGE
DUPLICATE_EDGEDOWN_USAGE = _MicroWinExecInterface.DUPLICATE_EDGEDOWN_USAGE
ENO_NOT_IN_SIGNATURE = _MicroWinExecInterface.ENO_NOT_IN_SIGNATURE
NO_POWER_FLOW_OUT_OF_COIL = _MicroWinExecInterface.NO_POWER_FLOW_OUT_OF_COIL
ILLEGAL_STD_INSTRUCTION = _MicroWinExecInterface.ILLEGAL_STD_INSTRUCTION
OPERANDS_DO_NOT_MATCH_SIG = _MicroWinExecInterface.OPERANDS_DO_NOT_MATCH_SIG
ADDRESS_TYPE_NOT_SUPPORTED_FOR_LIB = _MicroWinExecInterface.ADDRESS_TYPE_NOT_SUPPORTED_FOR_LIB
NO_ABSOLUTE_V_IN_LIB = _MicroWinExecInterface.NO_ABSOLUTE_V_IN_LIB
ERR_INST_BIN_TOO_LARGE = _MicroWinExecInterface.ERR_INST_BIN_TOO_LARGE
ERR_LOADING_LIBRARY = _MicroWinExecInterface.ERR_LOADING_LIBRARY
MEMORY_ALLOCATION_ERROR = _MicroWinExecInterface.MEMORY_ALLOCATION_ERROR
REGISTRY_ERROR = _MicroWinExecInterface.REGISTRY_ERROR
UNKNOWN_COMM_ERROR = _MicroWinExecInterface.UNKNOWN_COMM_ERROR
INVALID_SWITCH_POS = _MicroWinExecInterface.INVALID_SWITCH_POS
PDU_STRUCTURE_ERROR = _MicroWinExecInterface.PDU_STRUCTURE_ERROR
UPLOAD_SEQ_ERROR = _MicroWinExecInterface.UPLOAD_SEQ_ERROR
BUSY_ERROR = _MicroWinExecInterface.BUSY_ERROR
PDU_LENGTH_ERROR = _MicroWinExecInterface.PDU_LENGTH_ERROR
PASSWORD_VIOLATION = _MicroWinExecInterface.PASSWORD_VIOLATION
SYNTAX_NAME_STRING_ERR = _MicroWinExecInterface.SYNTAX_NAME_STRING_ERR
COMPILE_ERROR = _MicroWinExecInterface.COMPILE_ERROR
UNKNOWN_BLOCK_TYPE = _MicroWinExecInterface.UNKNOWN_BLOCK_TYPE
BLOCK_IN_EEPROM = _MicroWinExecInterface.BLOCK_IN_EEPROM
BLOCK_NOT_FOUND = _MicroWinExecInterface.BLOCK_NOT_FOUND
SDB_PARAMETER_ERROR = _MicroWinExecInterface.SDB_PARAMETER_ERROR
MAX_BLOCK_SIZE_EXCEDED = _MicroWinExecInterface.MAX_BLOCK_SIZE_EXCEDED
LENGTH_FIELD_ERROR = _MicroWinExecInterface.LENGTH_FIELD_ERROR
COORD_RULES_VIOLATED = _MicroWinExecInterface.COORD_RULES_VIOLATED
PROTECTION_ERROR = _MicroWinExecInterface.PROTECTION_ERROR
SYNTAX_ERROR_PASS = _MicroWinExecInterface.SYNTAX_ERROR_PASS
INCORRECT_PASSWORD = _MicroWinExecInterface.INCORRECT_PASSWORD
LINK_ALREADY_LEGITIMIZED = _MicroWinExecInterface.LINK_ALREADY_LEGITIMIZED
LINK_ALREADY_RELEASED = _MicroWinExecInterface.LINK_ALREADY_RELEASED
NO_PASSWORD_IN_PLC = _MicroWinExecInterface.NO_PASSWORD_IN_PLC
TOD_CLOCK_ERROR = _MicroWinExecInterface.TOD_CLOCK_ERROR
INVALID_BAUD_RATE = _MicroWinExecInterface.INVALID_BAUD_RATE
INVALID_PORT_NUMBER = _MicroWinExecInterface.INVALID_PORT_NUMBER
OPEN_PORT_FAILED = _MicroWinExecInterface.OPEN_PORT_FAILED
CLOSE_PORT_FAILED = _MicroWinExecInterface.CLOSE_PORT_FAILED
TRANSMIT_FAILED = _MicroWinExecInterface.TRANSMIT_FAILED
RECEIVED_FAILED = _MicroWinExecInterface.RECEIVED_FAILED
COMM_TIMEOUT = _MicroWinExecInterface.COMM_TIMEOUT
INVALID_NETWORK_ADDRESS = _MicroWinExecInterface.INVALID_NETWORK_ADDRESS
PLC_CLOCK_NOT_SET = _MicroWinExecInterface.PLC_CLOCK_NOT_SET
READ_HARDWARE_FAULT = _MicroWinExecInterface.READ_HARDWARE_FAULT
READ_ILL_OBJ_ACCESS = _MicroWinExecInterface.READ_ILL_OBJ_ACCESS
READ_INV_ADDRESS = _MicroWinExecInterface.READ_INV_ADDRESS
READ_DATA_TYPE_NOT_SUP = _MicroWinExecInterface.READ_DATA_TYPE_NOT_SUP
READ_OBJ_NOT_EXIST = _MicroWinExecInterface.READ_OBJ_NOT_EXIST
SPARE1 = _MicroWinExecInterface.SPARE1
SPARE2 = _MicroWinExecInterface.SPARE2
INVALID_WHILE_PORT_OPEN = _MicroWinExecInterface.INVALID_WHILE_PORT_OPEN
INVALID_COMM_REQUEST = _MicroWinExecInterface.INVALID_COMM_REQUEST
INVALID_PROTOCOL = _MicroWinExecInterface.INVALID_PROTOCOL
MPI_DEVICE_NOT_FOUND = _MicroWinExecInterface.MPI_DEVICE_NOT_FOUND
DEVICE_INTERRUPT_BUSY = _MicroWinExecInterface.DEVICE_INTERRUPT_BUSY
PARAM_CHANGE_UNSUPPORTED = _MicroWinExecInterface.PARAM_CHANGE_UNSUPPORTED
NT_PPI_WARNING = _MicroWinExecInterface.NT_PPI_WARNING
ALREADY_IN_MODE = _MicroWinExecInterface.ALREADY_IN_MODE
STATUSLOOP_PROGRAM_DATE_MISMATCH = _MicroWinExecInterface.STATUSLOOP_PROGRAM_DATE_MISMATCH
UPLOAD_BINARY_CORRUPTION = _MicroWinExecInterface.UPLOAD_BINARY_CORRUPTION
UNABLE_TO_WRITE_IN_STOP = _MicroWinExecInterface.UNABLE_TO_WRITE_IN_STOP
BAUD_NOT_CHANGED = _MicroWinExecInterface.BAUD_NOT_CHANGED
INVALID_EDIT_TYPE_MODE = _MicroWinExecInterface.INVALID_EDIT_TYPE_MODE
RUN_MODE_EDIT_ABORTED_BY_CONNECTION = _MicroWinExecInterface.RUN_MODE_EDIT_ABORTED_BY_CONNECTION
ERROR_WRITING_BIT_LOCATION = _MicroWinExecInterface.ERROR_WRITING_BIT_LOCATION
ERROR_SWITCH_MODE_WARNING = _MicroWinExecInterface.ERROR_SWITCH_MODE_WARNING
MODEM_TRANSMIT_FAILED = _MicroWinExecInterface.MODEM_TRANSMIT_FAILED
MODEM_RECEIVE_ERROR = _MicroWinExecInterface.MODEM_RECEIVE_ERROR
MODEM_HANGUP_ERROR = _MicroWinExecInterface.MODEM_HANGUP_ERROR
MODEM_CONNECT_ERROR = _MicroWinExecInterface.MODEM_CONNECT_ERROR
MODEM_TEST_ERROR = _MicroWinExecInterface.MODEM_TEST_ERROR
MODEM_NOT_ONLINE_ERROR = _MicroWinExecInterface.MODEM_NOT_ONLINE_ERROR
MODEM_BUSY_ERROR = _MicroWinExecInterface.MODEM_BUSY_ERROR
MODEM_LOCAL_NOT_SELECTED = _MicroWinExecInterface.MODEM_LOCAL_NOT_SELECTED
MODEM_REMOTE_NOT_SELECTED = _MicroWinExecInterface.MODEM_REMOTE_NOT_SELECTED
MODEM_TEST_VALID_ERROR = _MicroWinExecInterface.MODEM_TEST_VALID_ERROR
TAPI_NOT_INITIALIZED = _MicroWinExecInterface.TAPI_NOT_INITIALIZED
VIEW_ERR_TREE_RENAME_DUP = _MicroWinExecInterface.VIEW_ERR_TREE_RENAME_DUP
VIEW_ERR_TREE_EMPTY_NAME = _MicroWinExecInterface.VIEW_ERR_TREE_EMPTY_NAME
VIEW_ERR_TREE_DUP_FAVORITE = _MicroWinExecInterface.VIEW_ERR_TREE_DUP_FAVORITE
FBD_CANNOT_PLACE_HORIZONTAL_IN_FIRST_COLUMN = _MicroWinExecInterface.FBD_CANNOT_PLACE_HORIZONTAL_IN_FIRST_COLUMN
FBD_CANNOT_PLACE_HORIZONTAL_IN_LAST_COLUMN = _MicroWinExecInterface.FBD_CANNOT_PLACE_HORIZONTAL_IN_LAST_COLUMN
FBD_CANNOT_PLACE_HORIZONTAL_ON_BLOCKED_CELL = _MicroWinExecInterface.FBD_CANNOT_PLACE_HORIZONTAL_ON_BLOCKED_CELL
FBD_EDIT_ILLEGAL_IN_STATUS_MODE = _MicroWinExecInterface.FBD_EDIT_ILLEGAL_IN_STATUS_MODE
FBD_CANNOT_PLACE_HORIZONTAL_ON_IMMEDIATE_TICK = _MicroWinExecInterface.FBD_CANNOT_PLACE_HORIZONTAL_ON_IMMEDIATE_TICK
FBD_CANNOT_PLACE_IMMEDIATE_TICK_ON_HORIZONTAL = _MicroWinExecInterface.FBD_CANNOT_PLACE_IMMEDIATE_TICK_ON_HORIZONTAL
FBD_CANNOT_PLACE_NEG_TICK_ON_OUTPUT_PARAMETER = _MicroWinExecInterface.FBD_CANNOT_PLACE_NEG_TICK_ON_OUTPUT_PARAMETER
FBD_CANNOT_TOGGLE_TICK_ON_NON_POWERFLOW = _MicroWinExecInterface.FBD_CANNOT_TOGGLE_TICK_ON_NON_POWERFLOW
FBD_BOX_FULLY_EXPANDED = _MicroWinExecInterface.FBD_BOX_FULLY_EXPANDED
FBD_BOX_FULLY_CONTRACTED = _MicroWinExecInterface.FBD_BOX_FULLY_CONTRACTED
FBD_BOX_MUST_HAVE_EN_TO_BE_PLACED = _MicroWinExecInterface.FBD_BOX_MUST_HAVE_EN_TO_BE_PLACED
FBD_CANNOT_DELETE_ROW = _MicroWinExecInterface.FBD_CANNOT_DELETE_ROW
FBD_CANNOT_PLACE_BOX_IN_FIRST_COLUMN = _MicroWinExecInterface.FBD_CANNOT_PLACE_BOX_IN_FIRST_COLUMN
FBD_CANNOT_PLACE_VERTICAL_ON_BLOCKED_CELL_ABOVE_FUNCTION_BLOCK = _MicroWinExecInterface.FBD_CANNOT_PLACE_VERTICAL_ON_BLOCKED_CELL_ABOVE_FUNCTION_BLOCK
FBD_CANNOT_PLACE_BOX_ON_BLOCKED_CELL_ABOVE_FUNCTION_BLOCK = _MicroWinExecInterface.FBD_CANNOT_PLACE_BOX_ON_BLOCKED_CELL_ABOVE_FUNCTION_BLOCK
FBD_TICK_OF_ILLEGAL_POU = _MicroWinExecInterface.FBD_TICK_OF_ILLEGAL_POU
FBD_CANNOT_PLACE_VERTICAL_IN_FIRST_COLUMN = _MicroWinExecInterface.FBD_CANNOT_PLACE_VERTICAL_IN_FIRST_COLUMN
FBD_CANNOT_PLACE_DUE_TO_IMMEDIATE_TICK = _MicroWinExecInterface.FBD_CANNOT_PLACE_DUE_TO_IMMEDIATE_TICK
FBD_CANNOT_PLACE_BOX_IN_FIRST_ROW = _MicroWinExecInterface.FBD_CANNOT_PLACE_BOX_IN_FIRST_ROW
FBD_CANNOT_COPY_INST_DUE_TO_IMMEDIATE_TICK = _MicroWinExecInterface.FBD_CANNOT_COPY_INST_DUE_TO_IMMEDIATE_TICK
CANNOT_PLACE_VERTICAL_ON_COIL = _MicroWinExecInterface.CANNOT_PLACE_VERTICAL_ON_COIL
CANNOT_PLACE_VERTICAL_ON_BOX = _MicroWinExecInterface.CANNOT_PLACE_VERTICAL_ON_BOX
CANNOT_PLACE_UP_VERTICAL_IN_FIRST_ROW = _MicroWinExecInterface.CANNOT_PLACE_UP_VERTICAL_IN_FIRST_ROW
CANNOT_PLACE_DOWN_VERTICAL_IN_LAST_ROW = _MicroWinExecInterface.CANNOT_PLACE_DOWN_VERTICAL_IN_LAST_ROW
CANNOT_PLACE_VERTICAL_IN_LAST_COLUMN = _MicroWinExecInterface.CANNOT_PLACE_VERTICAL_IN_LAST_COLUMN
CANNOT_PLACE_CONTACT_IN_LAST_COLUMN = _MicroWinExecInterface.CANNOT_PLACE_CONTACT_IN_LAST_COLUMN
CANNOT_PLACE_CONTACT_ON_BLOCKED_CELL = _MicroWinExecInterface.CANNOT_PLACE_CONTACT_ON_BLOCKED_CELL
CANNOT_PLACE_COIL_ON_VERTICAL = _MicroWinExecInterface.CANNOT_PLACE_COIL_ON_VERTICAL
CANNOT_PLACE_COIL_WHEN_LOGIC_IS_ATTACHED = _MicroWinExecInterface.CANNOT_PLACE_COIL_WHEN_LOGIC_IS_ATTACHED
CANNOT_PLACE_COIL_ON_BLOCKED_CELL = _MicroWinExecInterface.CANNOT_PLACE_COIL_ON_BLOCKED_CELL
CANNOT_PLACE_BOX_IN_LAST_COLUMN = _MicroWinExecInterface.CANNOT_PLACE_BOX_IN_LAST_COLUMN
CANNOT_PLACE_BOX_IN_LAST_ROW = _MicroWinExecInterface.CANNOT_PLACE_BOX_IN_LAST_ROW
CANNOT_PLACE_BOX_DUE_TO_LACK_OF_ROWS = _MicroWinExecInterface.CANNOT_PLACE_BOX_DUE_TO_LACK_OF_ROWS
CANNOT_PLACE_BOX_IN_FIRST_COLUMN = _MicroWinExecInterface.CANNOT_PLACE_BOX_IN_FIRST_COLUMN
INVALID_SIG_CANNOT_DRAW_INST = _MicroWinExecInterface.INVALID_SIG_CANNOT_DRAW_INST
CANNOT_PLACE_BOX_ON_BLOCKED_CELL = _MicroWinExecInterface.CANNOT_PLACE_BOX_ON_BLOCKED_CELL
BOX_MUST_HAVE_ENO_TO_BE_PLACED = _MicroWinExecInterface.BOX_MUST_HAVE_ENO_TO_BE_PLACED
LAST_REMAINING_OPERAND = _MicroWinExecInterface.LAST_REMAINING_OPERAND
LAD_EDIT_ILLEGAL_IN_STATUS_MODE = _MicroWinExecInterface.LAD_EDIT_ILLEGAL_IN_STATUS_MODE
INVALID_ELEMENT_LOCATION = _MicroWinExecInterface.INVALID_ELEMENT_LOCATION
ITEM_NOT_FOUND = _MicroWinExecInterface.ITEM_NOT_FOUND
LAD_MATRIX_ELEMENT_NOT_FOUND = _MicroWinExecInterface.LAD_MATRIX_ELEMENT_NOT_FOUND
ATTEMPT_TO_EXCEED_MAX_COLUMNS = _MicroWinExecInterface.ATTEMPT_TO_EXCEED_MAX_COLUMNS
ATTEMPT_TO_EXCEED_MAX_ROWS = _MicroWinExecInterface.ATTEMPT_TO_EXCEED_MAX_ROWS
CANNOT_DELETE_COLUMN = _MicroWinExecInterface.CANNOT_DELETE_COLUMN
CANNOT_DELETE_POWERFLOW = _MicroWinExecInterface.CANNOT_DELETE_POWERFLOW
RECURSIVE_POU_CALL = _MicroWinExecInterface.RECURSIVE_POU_CALL
MISMATCH_WITH_GENERIC_INST = _MicroWinExecInterface.MISMATCH_WITH_GENERIC_INST
ILLEGAL_POU_CALL = _MicroWinExecInterface.ILLEGAL_POU_CALL
OPERAND_OF_ILLEGAL_POU = _MicroWinExecInterface.OPERAND_OF_ILLEGAL_POU
CANNOT_COPY_ILLEGAL_POU = _MicroWinExecInterface.CANNOT_COPY_ILLEGAL_POU
DELETED_POU_CALL = _MicroWinExecInterface.DELETED_POU_CALL
CANNOT_PERFORM_OPERATION = _MicroWinExecInterface.CANNOT_PERFORM_OPERATION
CANNOT_PERFORM_OPERATION_DUE_TO_ILLEGAL_POU = _MicroWinExecInterface.CANNOT_PERFORM_OPERATION_DUE_TO_ILLEGAL_POU
CANNOT_SET_SUBBRANCH_AT_LOCATION = _MicroWinExecInterface.CANNOT_SET_SUBBRANCH_AT_LOCATION
CANNOT_CONNECT_HOTSPOTS = _MicroWinExecInterface.CANNOT_CONNECT_HOTSPOTS
MULTI_ELEMENT_SELECTION_TOO_COMPLEX_TO_PASTE = _MicroWinExecInterface.MULTI_ELEMENT_SELECTION_TOO_COMPLEX_TO_PASTE
INVALID_PLC_TYPE = _MicroWinExecInterface.INVALID_PLC_TYPE
INVALID_READ_REQUEST = _MicroWinExecInterface.INVALID_READ_REQUEST
INVALID_RR_MEMORY_AREA = _MicroWinExecInterface.INVALID_RR_MEMORY_AREA
PROGRAM_MC_WITH_IO_FORCED = _MicroWinExecInterface.PROGRAM_MC_WITH_IO_FORCED
PLC_TYPE_NO_FEATURE_SUPPORT = _MicroWinExecInterface.PLC_TYPE_NO_FEATURE_SUPPORT
INVALID_NULL_IP_ADDRESS = _MicroWinExecInterface.INVALID_NULL_IP_ADDRESS
UNKNOWN_PROGRAM_VERSION = _MicroWinExecInterface.UNKNOWN_PROGRAM_VERSION
CANNOT_UPLOAD_SIMATIC = _MicroWinExecInterface.CANNOT_UPLOAD_SIMATIC
DOWNLOAD_22X_21X_MISMATCH = _MicroWinExecInterface.DOWNLOAD_22X_21X_MISMATCH
DOWNLOAD_COMPILE_TIME_ERROR = _MicroWinExecInterface.DOWNLOAD_COMPILE_TIME_ERROR
UPLOAD_RME_POU_ORDER_ERROR = _MicroWinExecInterface.UPLOAD_RME_POU_ORDER_ERROR
UPLOAD_RME_POU_ORDER_ERROR2 = _MicroWinExecInterface.UPLOAD_RME_POU_ORDER_ERROR2
UPLOAD_RME_POU_ORDER_ERROR3 = _MicroWinExecInterface.UPLOAD_RME_POU_ORDER_ERROR3
UDM_FTP_LOGIN_ERROR = _MicroWinExecInterface.UDM_FTP_LOGIN_ERROR
UDM_FTP_WRITE_ERROR = _MicroWinExecInterface.UDM_FTP_WRITE_ERROR
UDM_FTP_READ_ERROR = _MicroWinExecInterface.UDM_FTP_READ_ERROR
UDM_RECONFIG_ERROR = _MicroWinExecInterface.UDM_RECONFIG_ERROR
DOWNLOAD_MISMATCH = _MicroWinExecInterface.DOWNLOAD_MISMATCH
RESTRICTED_UPLOAD = _MicroWinExecInterface.RESTRICTED_UPLOAD
RESTRICTED_DOWNLOAD = _MicroWinExecInterface.RESTRICTED_DOWNLOAD
RESTRICTED_CLEAR = _MicroWinExecInterface.RESTRICTED_CLEAR
DOWNLOAD_V1_EXP = _MicroWinExecInterface.DOWNLOAD_V1_EXP
DOWNLOAD_V1_BATTERY = _MicroWinExecInterface.DOWNLOAD_V1_BATTERY
DOWNLOAD_V1_DATALOG_WIZ = _MicroWinExecInterface.DOWNLOAD_V1_DATALOG_WIZ
DOWNLOAD_V1_NETWORK_WIZ = _MicroWinExecInterface.DOWNLOAD_V1_NETWORK_WIZ
DOWNLOAD_V1_MOTION_ABS = _MicroWinExecInterface.DOWNLOAD_V1_MOTION_ABS
DOWNLOAD_TOO_MANY_PWM = _MicroWinExecInterface.DOWNLOAD_TOO_MANY_PWM
DOWNLOAD_RME_COMPILE_ERROR = _MicroWinExecInterface.DOWNLOAD_RME_COMPILE_ERROR
DOWNLOAD_TOO_MANY_MOTION_AXES = _MicroWinExecInterface.DOWNLOAD_TOO_MANY_MOTION_AXES
DOWNLOAD_INVALID_HSC_MODE = _MicroWinExecInterface.DOWNLOAD_INVALID_HSC_MODE
OB1_SECTION1_TOO_LARGE = _MicroWinExecInterface.OB1_SECTION1_TOO_LARGE
OB1_SECTION3_TOO_LARGE = _MicroWinExecInterface.OB1_SECTION3_TOO_LARGE
DB1_SECTION1_TOO_LARGE = _MicroWinExecInterface.DB1_SECTION1_TOO_LARGE
DB1_SECTION3_TOO_LARGE = _MicroWinExecInterface.DB1_SECTION3_TOO_LARGE
ERROR_GENERIC = _MicroWinExecInterface.ERROR_GENERIC
ERROR_FILE_NOT_FOUND = _MicroWinExecInterface.ERROR_FILE_NOT_FOUND
ERROR_BAD_PATH = _MicroWinExecInterface.ERROR_BAD_PATH
ERROR_TOO_MANY_OPEN_FILES = _MicroWinExecInterface.ERROR_TOO_MANY_OPEN_FILES
ERROR_ACCESS_DENIED = _MicroWinExecInterface.ERROR_ACCESS_DENIED
ERROR_INVALID_FILE = _MicroWinExecInterface.ERROR_INVALID_FILE
ERROR_REMOVE_CURRENT_DIRECTORY = _MicroWinExecInterface.ERROR_REMOVE_CURRENT_DIRECTORY
ERROR_DIRECTORY_FULL = _MicroWinExecInterface.ERROR_DIRECTORY_FULL
ERROR_BAD_SEEK = _MicroWinExecInterface.ERROR_BAD_SEEK
ERROR_HARD_IO = _MicroWinExecInterface.ERROR_HARD_IO
ERROR_SHARING_VIOLATION = _MicroWinExecInterface.ERROR_SHARING_VIOLATION
ERROR_LOCK_VIOLATION = _MicroWinExecInterface.ERROR_LOCK_VIOLATION
ERROR_DISK_FULL = _MicroWinExecInterface.ERROR_DISK_FULL
ERROR_END_OF_FILE = _MicroWinExecInterface.ERROR_END_OF_FILE
INVALID_MWP_FILE = _MicroWinExecInterface.INVALID_MWP_FILE
PROJECT_TIMESTAMP_MISMATCH = _MicroWinExecInterface.PROJECT_TIMESTAMP_MISMATCH
CANNOT_OPEN_IEC1131_PROJECT = _MicroWinExecInterface.CANNOT_OPEN_IEC1131_PROJECT
CANNOT_OPEN_SIMATIC_PROJECT = _MicroWinExecInterface.CANNOT_OPEN_SIMATIC_PROJECT
ERROR_OPENING_MW2X_PROJECT = _MicroWinExecInterface.ERROR_OPENING_MW2X_PROJECT
NEWER_PROJECT_FILE = _MicroWinExecInterface.NEWER_PROJECT_FILE
ERROR_PRE_MW_40 = _MicroWinExecInterface.ERROR_PRE_MW_40
XR_ELEM_NOT_FOUND = _MicroWinExecInterface.XR_ELEM_NOT_FOUND
XR_REF_NOT_FOUND = _MicroWinExecInterface.XR_REF_NOT_FOUND
COULD_NOT_OPEN_CLIPBOARD = _MicroWinExecInterface.COULD_NOT_OPEN_CLIPBOARD
COULD_NOT_REGISTER_WITH_CLIPBOARD = _MicroWinExecInterface.COULD_NOT_REGISTER_WITH_CLIPBOARD
CLIPBOARD_FORMAT_NOT_REGISTERED = _MicroWinExecInterface.CLIPBOARD_FORMAT_NOT_REGISTERED
COULD_NOT_CUT_TO_THE_CLIPBOARD = _MicroWinExecInterface.COULD_NOT_CUT_TO_THE_CLIPBOARD
COULD_NOT_COPY_TO_THE_CLIPBOARD = _MicroWinExecInterface.COULD_NOT_COPY_TO_THE_CLIPBOARD
COULD_NOT_PASTE_FROM_THE_CLIPBOARD = _MicroWinExecInterface.COULD_NOT_PASTE_FROM_THE_CLIPBOARD
WIZARD_CODE_GEN_ERROR = _MicroWinExecInterface.WIZARD_CODE_GEN_ERROR
WIZARD_MUST_NAME_POU = _MicroWinExecInterface.WIZARD_MUST_NAME_POU
WIZARD_POU_NAME_OVERLAP = _MicroWinExecInterface.WIZARD_POU_NAME_OVERLAP
WIZARD_OPERAND_EMPTY = _MicroWinExecInterface.WIZARD_OPERAND_EMPTY
WIZARD_ILLEGAL_OPERAND = _MicroWinExecInterface.WIZARD_ILLEGAL_OPERAND
WIZARD_INVALID_OPERAND = _MicroWinExecInterface.WIZARD_INVALID_OPERAND
WIZARD_ADDRESS_OVERLAP = _MicroWinExecInterface.WIZARD_ADDRESS_OVERLAP
WIZARD_SYMBOL_NOT_ALLOWED = _MicroWinExecInterface.WIZARD_SYMBOL_NOT_ALLOWED
WIZARD_TEXT_NOT_GSYM = _MicroWinExecInterface.WIZARD_TEXT_NOT_GSYM
WIZARD_HMI_WIZ_ERR01 = _MicroWinExecInterface.WIZARD_HMI_WIZ_ERR01
WIZARD_ILLEGAL_POU_NAME = _MicroWinExecInterface.WIZARD_ILLEGAL_POU_NAME
WIZARD_NO_PID_TIMERS = _MicroWinExecInterface.WIZARD_NO_PID_TIMERS
WIZARD_HMI_OVERLAP = _MicroWinExecInterface.WIZARD_HMI_OVERLAP
WIZARD_EM241_DECODE_ERROR = _MicroWinExecInterface.WIZARD_EM241_DECODE_ERROR
WIZARD_EM241_UNRECOGNIZED_CONFIG = _MicroWinExecInterface.WIZARD_EM241_UNRECOGNIZED_CONFIG
WIZ_MOTION_UNRECOGNIZED_CONFIG_VERSION = _MicroWinExecInterface.WIZ_MOTION_UNRECOGNIZED_CONFIG_VERSION
WIZARD_SUGGEST_ADDRESS_FAILED = _MicroWinExecInterface.WIZARD_SUGGEST_ADDRESS_FAILED
WIZARD_MOTION_DECODE_ERROR = _MicroWinExecInterface.WIZARD_MOTION_DECODE_ERROR
WIZARD_PID_DECODE_ERROR = _MicroWinExecInterface.WIZARD_PID_DECODE_ERROR
WIZ_EM243_UNRECOGNIZED_CONFIG_VERSION = _MicroWinExecInterface.WIZ_EM243_UNRECOGNIZED_CONFIG_VERSION
WIZARD_EM243_DECODE_ERROR = _MicroWinExecInterface.WIZARD_EM243_DECODE_ERROR
WIZARD_NO_CP_RESPONSE = _MicroWinExecInterface.WIZARD_NO_CP_RESPONSE
WIZARD_CONFIG_TOO_LARGE = _MicroWinExecInterface.WIZARD_CONFIG_TOO_LARGE
WIZARD_INVALID_IB = _MicroWinExecInterface.WIZARD_INVALID_IB
WIZARD_INVALID_QB = _MicroWinExecInterface.WIZARD_INVALID_QB
WIZARD_INVALID_AIW = _MicroWinExecInterface.WIZARD_INVALID_AIW
WIZARD_INVALID_AQW = _MicroWinExecInterface.WIZARD_INVALID_AQW
WIZARD_ASI_NO_MASTER = _MicroWinExecInterface.WIZARD_ASI_NO_MASTER
WIZARD_ASI_ERROR_VERSION = _MicroWinExecInterface.WIZARD_ASI_ERROR_VERSION
WIZARD_IM_POSITION_OVERLAP = _MicroWinExecInterface.WIZARD_IM_POSITION_OVERLAP
WIZARD_IM_COMMAND_BYTE_OVERLAP = _MicroWinExecInterface.WIZARD_IM_COMMAND_BYTE_OVERLAP
WIZARD_UNRECOGNIZED_SERIALIZATION_VERSION = _MicroWinExecInterface.WIZARD_UNRECOGNIZED_SERIALIZATION_VERSION
WIZARD_IT_CONFIG_FILE_ERROR_GENERIC = _MicroWinExecInterface.WIZARD_IT_CONFIG_FILE_ERROR_GENERIC
WIZARD_IT_CONFIG_FILE_UNRECOGNIZED_VERSION = _MicroWinExecInterface.WIZARD_IT_CONFIG_FILE_UNRECOGNIZED_VERSION
WIZARD_EMPTY_NAME = _MicroWinExecInterface.WIZARD_EMPTY_NAME
WIZARD_NAME_TOO_LONG = _MicroWinExecInterface.WIZARD_NAME_TOO_LONG
WIZARD_NAME_DUPLICATE = _MicroWinExecInterface.WIZARD_NAME_DUPLICATE
WIZARD_DB_NAME_OVERLAP = _MicroWinExecInterface.WIZARD_DB_NAME_OVERLAP
WIZARD_ILLEGAL_DB_NAME = _MicroWinExecInterface.WIZARD_ILLEGAL_DB_NAME
WIZARD_MUST_NAME_DB = _MicroWinExecInterface.WIZARD_MUST_NAME_DB
WIZARD_CANNOT_OPEN_TD400 = _MicroWinExecInterface.WIZARD_CANNOT_OPEN_TD400
WIZARD_VMEM_OVERLAP = _MicroWinExecInterface.WIZARD_VMEM_OVERLAP
WIZARD_INVALID_STARTSTOP_SPEED = _MicroWinExecInterface.WIZARD_INVALID_STARTSTOP_SPEED
WIZARD_USER_NOT_CONTINUE = _MicroWinExecInterface.WIZARD_USER_NOT_CONTINUE
PN_GSD_FILE_CORRUPTED = _MicroWinExecInterface.PN_GSD_FILE_CORRUPTED
PN_GSD_FILE_DELETED = _MicroWinExecInterface.PN_GSD_FILE_DELETED
PN_GSD_FILE_MISSING = _MicroWinExecInterface.PN_GSD_FILE_MISSING
PN_MODULE_EXCEED_64 = _MicroWinExecInterface.PN_MODULE_EXCEED_64
PN_INPUT_LENGTH_EXCEED_128 = _MicroWinExecInterface.PN_INPUT_LENGTH_EXCEED_128
PN_OUTPUT_LENGTH_EXCEED_128 = _MicroWinExecInterface.PN_OUTPUT_LENGTH_EXCEED_128
PN_GSD_PARSER_ENCOUNTER_ERROR = _MicroWinExecInterface.PN_GSD_PARSER_ENCOUNTER_ERROR
PN_SLOT_NOT_EXIST_ERROR = _MicroWinExecInterface.PN_SLOT_NOT_EXIST_ERROR
PN_SUBSLOT_NOT_EXIST_ERROR = _MicroWinExecInterface.PN_SUBSLOT_NOT_EXIST_ERROR
PN_ADDRESS_OUTSIDE_RANGE = _MicroWinExecInterface.PN_ADDRESS_OUTSIDE_RANGE
PN_ADDRESS_BEING_USED = _MicroWinExecInterface.PN_ADDRESS_BEING_USED
PN_DEVICE_NOT_EXIST = _MicroWinExecInterface.PN_DEVICE_NOT_EXIST
PN_MODULE_NOT_EXIST = _MicroWinExecInterface.PN_MODULE_NOT_EXIST
PN_SUBMODULE_NOT_EXIST = _MicroWinExecInterface.PN_SUBMODULE_NOT_EXIST
PN_SUBMODULE_RECORDDATAITEM_EXIST = _MicroWinExecInterface.PN_SUBMODULE_RECORDDATAITEM_EXIST
PN_GSD_PARSE_DAP_ERROR = _MicroWinExecInterface.PN_GSD_PARSE_DAP_ERROR
PN_GSD_PARSE_MODILE_ERROR = _MicroWinExecInterface.PN_GSD_PARSE_MODILE_ERROR
PN_GSD_PARSE_SUBMODILE_ERROR = _MicroWinExecInterface.PN_GSD_PARSE_SUBMODILE_ERROR
PN_CONSISTENCY_DIFFERENTSLOTMODELS = _MicroWinExecInterface.PN_CONSISTENCY_DIFFERENTSLOTMODELS
PN_CONSISTENCY_MODULEWITHOUTSUBMODULE = _MicroWinExecInterface.PN_CONSISTENCY_MODULEWITHOUTSUBMODULE
PN_CONSISTENCY_INPUTGROSSFRAMELENGTHEXCEEDED = _MicroWinExecInterface.PN_CONSISTENCY_INPUTGROSSFRAMELENGTHEXCEEDED
PN_CONSISTENCY_OUTPUTGROSSFRAMELENGTHEXCEEDED = _MicroWinExecInterface.PN_CONSISTENCY_OUTPUTGROSSFRAMELENGTHEXCEEDED
PN_CONSISTENCY_TOTALGROSSFRAMELENGTHEXCEEDED = _MicroWinExecInterface.PN_CONSISTENCY_TOTALGROSSFRAMELENGTHEXCEEDED
PN_CONSISTENCY_INPUTNETFRAMELENGTHEXCEEDED = _MicroWinExecInterface.PN_CONSISTENCY_INPUTNETFRAMELENGTHEXCEEDED
PN_CONSISTENCY_OUTPUTNETFRAMELENGTHEXCEEDED = _MicroWinExecInterface.PN_CONSISTENCY_OUTPUTNETFRAMELENGTHEXCEEDED
PN_CONSISTENCY_TOTALNETFRAMELENGTHEXCEEDED = _MicroWinExecInterface.PN_CONSISTENCY_TOTALNETFRAMELENGTHEXCEEDED
PN_CONSISTENCY_IP_ADDRESSDIFFERENTSUBNET = _MicroWinExecInterface.PN_CONSISTENCY_IP_ADDRESSDIFFERENTSUBNET
PN_CONSISTENCY_IP_DEVICESADDRESSDIFFERENTSUBNET = _MicroWinExecInterface.PN_CONSISTENCY_IP_DEVICESADDRESSDIFFERENTSUBNET
PN_CONSISTENCY_IP_WRONGADDRESS = _MicroWinExecInterface.PN_CONSISTENCY_IP_WRONGADDRESS
PN_CONSISTENCY_IP_EMPTYADDRESS = _MicroWinExecInterface.PN_CONSISTENCY_IP_EMPTYADDRESS
PN_CONSISTENCY_IP_LOOPBACKADDRESS = _MicroWinExecInterface.PN_CONSISTENCY_IP_LOOPBACKADDRESS
PN_CONSISTENCY_IP_DEFAULTROUTERSAMEASADDRESS = _MicroWinExecInterface.PN_CONSISTENCY_IP_DEFAULTROUTERSAMEASADDRESS
PN_CONSISTENCY_OBCONTROLLERAPPCYCLETOOHIGH = _MicroWinExecInterface.PN_CONSISTENCY_OBCONTROLLERAPPCYCLETOOHIGH
PN_CONSISTENCY_OBCONTROLLERAPPCYCLETOOLOW = _MicroWinExecInterface.PN_CONSISTENCY_OBCONTROLLERAPPCYCLETOOLOW
PN_CONSISTENCY_CONTROLLERSTARTUPTIMEHIGH = _MicroWinExecInterface.PN_CONSISTENCY_CONTROLLERSTARTUPTIMEHIGH
PN_CONSISTENCY_IP_WRONGSUBNETMASK = _MicroWinExecInterface.PN_CONSISTENCY_IP_WRONGSUBNETMASK
PN_CONSISTENCY_IP_NOTALLOWEDADDRESSRANGE = _MicroWinExecInterface.PN_CONSISTENCY_IP_NOTALLOWEDADDRESSRANGE
PN_CONSISTENCY_IP_ADDRESSCLASSINVALID = _MicroWinExecInterface.PN_CONSISTENCY_IP_ADDRESSCLASSINVALID
PN_CONSISTENCY_IP_BROADCASTADDRESS = _MicroWinExecInterface.PN_CONSISTENCY_IP_BROADCASTADDRESS
PN_CONSISTENCY_IP_DEFAULTROUTEADDRESS = _MicroWinExecInterface.PN_CONSISTENCY_IP_DEFAULTROUTEADDRESS
PN_CONSISTENCY_IP_ADDRESSNOTUNIQUE = _MicroWinExecInterface.PN_CONSISTENCY_IP_ADDRESSNOTUNIQUE
PN_CONSISTENCY_IP_NETADDRESSNULL = _MicroWinExecInterface.PN_CONSISTENCY_IP_NETADDRESSNULL
PN_CONSISTENCY_IP_HOSTADRESSENULL = _MicroWinExecInterface.PN_CONSISTENCY_IP_HOSTADRESSENULL
PN_CONSISTENCY_STATIONNAMELENGTHERROR = _MicroWinExecInterface.PN_CONSISTENCY_STATIONNAMELENGTHERROR
PN_CONSISTENCY_STATIONNAMEDUPLICATED = _MicroWinExecInterface.PN_CONSISTENCY_STATIONNAMEDUPLICATED
PN_CONSISTENCY_STATIONNAMECONVERTERERROR = _MicroWinExecInterface.PN_CONSISTENCY_STATIONNAMECONVERTERERROR
PN_CONSISTENCY_NOCOMMONSTARTUPFOUND = _MicroWinExecInterface.PN_CONSISTENCY_NOCOMMONSTARTUPFOUND
PN_CONSISTENCY_FASTSTARTUPMAXCOUNTEXCEEDED = _MicroWinExecInterface.PN_CONSISTENCY_FASTSTARTUPMAXCOUNTEXCEEDED
PN_CONSISTENCY_INTERFACESUBMODULEPORTSDEACTIVATED = _MicroWinExecInterface.PN_CONSISTENCY_INTERFACESUBMODULEPORTSDEACTIVATED
PN_CONSISTENCY_PORTMAUNOTSETORAUTONEGOTIATIONACTIVATED = _MicroWinExecInterface.PN_CONSISTENCY_PORTMAUNOTSETORAUTONEGOTIATIONACTIVATED
PN_CONSISTENCY_DEVICEEXCHANGEWITHOUTMMC = _MicroWinExecInterface.PN_CONSISTENCY_DEVICEEXCHANGEWITHOUTMMC
PN_CONSISTENCY_ERRORTOOMANYSUBMODULES = _MicroWinExecInterface.PN_CONSISTENCY_ERRORTOOMANYSUBMODULES
PN_CONSISTENCY_PORTDEACTIVATIONNOTVALID = _MicroWinExecInterface.PN_CONSISTENCY_PORTDEACTIVATIONNOTVALID
PN_CONSISTENCY_CONTROLLERERRORMAXSUBMODULECOUNT = _MicroWinExecInterface.PN_CONSISTENCY_CONTROLLERERRORMAXSUBMODULECOUNT
PN_CONSISTENCY_CONTROLLERERRORMAXSUBMODULEDATALENGTH = _MicroWinExecInterface.PN_CONSISTENCY_CONTROLLERERRORMAXSUBMODULEDATALENGTH
PN_CONSISTENCY_CONTROLLERDEVICESTATIONNAMEDUPLICATED = _MicroWinExecInterface.PN_CONSISTENCY_CONTROLLERDEVICESTATIONNAMEDUPLICATED
PN_CONSISTENCY_INPUTADDRESS_MUST_ASSIGNED = _MicroWinExecInterface.PN_CONSISTENCY_INPUTADDRESS_MUST_ASSIGNED
PN_CONSISTENCY_OUTPUTADDRESS_MUST_ASSIGNED = _MicroWinExecInterface.PN_CONSISTENCY_OUTPUTADDRESS_MUST_ASSIGNED
PN_CONSISTENCY_INPUTADDRESS_INVALID = _MicroWinExecInterface.PN_CONSISTENCY_INPUTADDRESS_INVALID
PN_CONSISTENCY_OUTPUTADDRESS_INVALID = _MicroWinExecInterface.PN_CONSISTENCY_OUTPUTADDRESS_INVALID
PN_CONSISTENCY_CONTROLLERSTATIONNAMEEMPTY = _MicroWinExecInterface.PN_CONSISTENCY_CONTROLLERSTATIONNAMEEMPTY
PN_CONSISTENCY_GENERATEPNPLANNERINPUTERROR = _MicroWinExecInterface.PN_CONSISTENCY_GENERATEPNPLANNERINPUTERROR
PN_CONSISTENCY_PARSEPNPLANNEROUTPUTERROR = _MicroWinExecInterface.PN_CONSISTENCY_PARSEPNPLANNEROUTPUTERROR
PN_CONSISTENCY_PNPLANNERRETURNEDERROR = _MicroWinExecInterface.PN_CONSISTENCY_PNPLANNERRETURNEDERROR
PN_CONSISTENCY_PARSEPNPLANNERLOGERROR = _MicroWinExecInterface.PN_CONSISTENCY_PARSEPNPLANNERLOGERROR
PN_CONSISTENCY_PNPLANNERINTERNALERROR = _MicroWinExecInterface.PN_CONSISTENCY_PNPLANNERINTERNALERROR
PN_CONSISTENCY_PNPLANNERREDUCTIONRATIOCALCULATIONERROR = _MicroWinExecInterface.PN_CONSISTENCY_PNPLANNERREDUCTIONRATIOCALCULATIONERROR
PN_CONSISTENCY_PNPLANNERPOSSIBLEREDUCTIONRATIOCALCULATIONERROR = _MicroWinExecInterface.PN_CONSISTENCY_PNPLANNERPOSSIBLEREDUCTIONRATIOCALCULATIONERROR
PN_CONSISTENCY_PNPLANNEREXCEEDSMAXIMUMFRAMESORIODATABYTEERROR = _MicroWinExecInterface.PN_CONSISTENCY_PNPLANNEREXCEEDSMAXIMUMFRAMESORIODATABYTEERROR
PN_CONSISTENCY_PNPLANNEREXCEEDSCYCLICBANDWIDTHDISTRIBUTIONERROR = _MicroWinExecInterface.PN_CONSISTENCY_PNPLANNEREXCEEDSCYCLICBANDWIDTHDISTRIBUTIONERROR
PN_CONSISTENCY_PNPLANNERUNASSIGNEDPHASEERROR = _MicroWinExecInterface.PN_CONSISTENCY_PNPLANNERUNASSIGNEDPHASEERROR
PN_CONSISTENCY_PNPLANNERUNABLETOADJUSTREDUCTIONSFORFRAMEDISTRIBUTIONERROR = _MicroWinExecInterface.PN_CONSISTENCY_PNPLANNERUNABLETOADJUSTREDUCTIONSFORFRAMEDISTRIBUTIONERROR
PN_CONSISTENCY_PNPLANNERSENDCLOCKBANDWIDTHCHECKERROR = _MicroWinExecInterface.PN_CONSISTENCY_PNPLANNERSENDCLOCKBANDWIDTHCHECKERROR
PN_CONSISTENCY_PNPLANNERSENDCLOCKFACTORNOTSUPPORTEDERROR = _MicroWinExecInterface.PN_CONSISTENCY_PNPLANNERSENDCLOCKFACTORNOTSUPPORTEDERROR
PN_CONSISTENCY_UPDATETIMENOTAPPLICABLE = _MicroWinExecInterface.PN_CONSISTENCY_UPDATETIMENOTAPPLICABLE
PN_CONSISTENCY_NOUPDATETIME = _MicroWinExecInterface.PN_CONSISTENCY_NOUPDATETIME
PN_CONSISTENCY_CULCULATEDUPDATETIMEERROR = _MicroWinExecInterface.PN_CONSISTENCY_CULCULATEDUPDATETIMEERROR
PN_CONSISTENCY_PORTMEDIUMDIFFERENT = _MicroWinExecInterface.PN_CONSISTENCY_PORTMEDIUMDIFFERENT
PN_CONSISTENCY_PORTTRANSFERRATEISDIFFERENT = _MicroWinExecInterface.PN_CONSISTENCY_PORTTRANSFERRATEISDIFFERENT
PN_CONSISTENCY_INTERCONNECTEDPORTDEACTIVATED = _MicroWinExecInterface.PN_CONSISTENCY_INTERCONNECTEDPORTDEACTIVATED
PN_CONSISTENCY_PORTDIFFERENTAUTONEGOTIATION = _MicroWinExecInterface.PN_CONSISTENCY_PORTDIFFERENTAUTONEGOTIATION
PN_CONSISTENCY_MAXALLOWEDWATCHDOGTIME = _MicroWinExecInterface.PN_CONSISTENCY_MAXALLOWEDWATCHDOGTIME
PN_CONSISTENCY_INVALIDWATCHDOGFACTOR = _MicroWinExecInterface.PN_CONSISTENCY_INVALIDWATCHDOGFACTOR
PN_CONSISTENCY_UPDATETIMESHOULDBIGGERTHANSENDCLOCK = _MicroWinExecInterface.PN_CONSISTENCY_UPDATETIMESHOULDBIGGERTHANSENDCLOCK
PN_CONSISTENCY_UPDATETIMEINTEGERSHOULDMULTIPLESOFSENDCLOCK = _MicroWinExecInterface.PN_CONSISTENCY_UPDATETIMEINTEGERSHOULDMULTIPLESOFSENDCLOCK
PN_CONSISTENCY_UPDATETIME_LESS_MIN_UPDATETIME = _MicroWinExecInterface.PN_CONSISTENCY_UPDATETIME_LESS_MIN_UPDATETIME
PN_CONSISTENCY_IP_DUPLICATED_WITH_CONTROLLER = _MicroWinExecInterface.PN_CONSISTENCY_IP_DUPLICATED_WITH_CONTROLLER
PN_CONSISTENCY_MISSING_GSD = _MicroWinExecInterface.PN_CONSISTENCY_MISSING_GSD
PN_CONSISTENCY_INVALID_CONFIGURATION = _MicroWinExecInterface.PN_CONSISTENCY_INVALID_CONFIGURATION
PN_CONSISTENCY_FIXED_CONTROLLER_IP_NAME_MISS = _MicroWinExecInterface.PN_CONSISTENCY_FIXED_CONTROLLER_IP_NAME_MISS
PN_CONSISTENCY_PORTALLDELETED = _MicroWinExecInterface.PN_CONSISTENCY_PORTALLDELETED
PN_CONSISTENCY_CPU_CHANGE_NEED_REGENRATE = _MicroWinExecInterface.PN_CONSISTENCY_CPU_CHANGE_NEED_REGENRATE
PN_CONSISTENCY_CPU_TYPE_AND_ACTUAL_DEVICETYPE_MISMATCH = _MicroWinExecInterface.PN_CONSISTENCY_CPU_TYPE_AND_ACTUAL_DEVICETYPE_MISMATCH
PN_PHYSICAL_SDB_DOWNLOAD_ERROR = _MicroWinExecInterface.PN_PHYSICAL_SDB_DOWNLOAD_ERROR
PN_CONTROLLER_SDB_DOWNLOAD_ERROR = _MicroWinExecInterface.PN_CONTROLLER_SDB_DOWNLOAD_ERROR
PN_DEVICE1_DOWNLOAD_Error = _MicroWinExecInterface.PN_DEVICE1_DOWNLOAD_Error
PN_DEVICE2_DOWNLOAD_Error = _MicroWinExecInterface.PN_DEVICE2_DOWNLOAD_Error
PN_DEVICE3_DOWNLOAD_Error = _MicroWinExecInterface.PN_DEVICE3_DOWNLOAD_Error
PN_DEVICE4_DOWNLOAD_Error = _MicroWinExecInterface.PN_DEVICE4_DOWNLOAD_Error
PN_DEVICE5_DOWNLOAD_Error = _MicroWinExecInterface.PN_DEVICE5_DOWNLOAD_Error
PN_DEVICE6_DOWNLOAD_Error = _MicroWinExecInterface.PN_DEVICE6_DOWNLOAD_Error
PN_DEVICE7_DOWNLOAD_Error = _MicroWinExecInterface.PN_DEVICE7_DOWNLOAD_Error
PN_DEVICE8_DOWNLOAD_Error = _MicroWinExecInterface.PN_DEVICE8_DOWNLOAD_Error
PN_CPU_NOT_SUPPORT_PROFINET = _MicroWinExecInterface.PN_CPU_NOT_SUPPORT_PROFINET
PN_CPU_NOT_SUPPORT_PROFINET_IDEVICE = _MicroWinExecInterface.PN_CPU_NOT_SUPPORT_PROFINET_IDEVICE
PN_CFG_SYSDATA_NOT_SUPPORT_PN = _MicroWinExecInterface.PN_CFG_SYSDATA_NOT_SUPPORT_PN
PN_CFG_SYSDATA_NOT_SUPPORT_PN_IDEVICE = _MicroWinExecInterface.PN_CFG_SYSDATA_NOT_SUPPORT_PN_IDEVICE
PN_PHYSICAL_SDB_UPLOAD_ERROR = _MicroWinExecInterface.PN_PHYSICAL_SDB_UPLOAD_ERROR
PN_CONTROLLER_SDB_UPLOAD_ERROR = _MicroWinExecInterface.PN_CONTROLLER_SDB_UPLOAD_ERROR
PN_IDEVICE_DATA_UPLOAD_ERROR = _MicroWinExecInterface.PN_IDEVICE_DATA_UPLOAD_ERROR
PN_DEVICE1_UPLOAD_ERROR = _MicroWinExecInterface.PN_DEVICE1_UPLOAD_ERROR
PN_DEVICE2_UPLOAD_ERROR = _MicroWinExecInterface.PN_DEVICE2_UPLOAD_ERROR
PN_DEVICE3_UPLOAD_ERROR = _MicroWinExecInterface.PN_DEVICE3_UPLOAD_ERROR
PN_DEVICE4_UPLOAD_ERROR = _MicroWinExecInterface.PN_DEVICE4_UPLOAD_ERROR
PN_DEVICE5_UPLOAD_ERROR = _MicroWinExecInterface.PN_DEVICE5_UPLOAD_ERROR
PN_DEVICE6_UPLOAD_ERROR = _MicroWinExecInterface.PN_DEVICE6_UPLOAD_ERROR
PN_DEVICE7_UPLOAD_ERROR = _MicroWinExecInterface.PN_DEVICE7_UPLOAD_ERROR
PN_DEVICE8_UPLOAD_ERROR = _MicroWinExecInterface.PN_DEVICE8_UPLOAD_ERROR
PN_CONSISTENCY_IP_PNCONTROLLER_DCP_NAME_EMPTY = _MicroWinExecInterface.PN_CONSISTENCY_IP_PNCONTROLLER_DCP_NAME_EMPTY
PN_CONSISTENCY_CONTROLLERNAME_EXCED_TOTAL_63 = _MicroWinExecInterface.PN_CONSISTENCY_CONTROLLERNAME_EXCED_TOTAL_63
PN_CONSISTENCY_CONTROLLERNAME_BEGIN_INVALID = _MicroWinExecInterface.PN_CONSISTENCY_CONTROLLERNAME_BEGIN_INVALID
PN_CONSISTENCY_CONTROLLERNAME_INVALID_END = _MicroWinExecInterface.PN_CONSISTENCY_CONTROLLERNAME_INVALID_END
PN_CONSISTENCY_CONTROLLERNAME_EMPTY_WITHDOT = _MicroWinExecInterface.PN_CONSISTENCY_CONTROLLERNAME_EMPTY_WITHDOT
PN_CONSISTENCY_CONTROLLERNAME_INPUT_INVALID = _MicroWinExecInterface.PN_CONSISTENCY_CONTROLLERNAME_INPUT_INVALID
PN_CONSISTENCY_CONTROLLER_GATEWAY_IP_ADDRESSDIFFERENTSUBNET = _MicroWinExecInterface.PN_CONSISTENCY_CONTROLLER_GATEWAY_IP_ADDRESSDIFFERENTSUBNET
PN_CONSISTENCY_CONTROLLERDONOTSUPPORTFMODULE = _MicroWinExecInterface.PN_CONSISTENCY_CONTROLLERDONOTSUPPORTFMODULE
PN_CONSISTENCY_CONTROLLER_NO_LOWER_IOSYSTEM = _MicroWinExecInterface.PN_CONSISTENCY_CONTROLLER_NO_LOWER_IOSYSTEM
PN_IDEV_TRANS_AREA_EMPTY = _MicroWinExecInterface.PN_IDEV_TRANS_AREA_EMPTY
PN_IDEV_TRANS_AREA_TOO_MANY = _MicroWinExecInterface.PN_IDEV_TRANS_AREA_TOO_MANY
PN_IDEV_TRANS_AREA_NAME_EMPTY = _MicroWinExecInterface.PN_IDEV_TRANS_AREA_NAME_EMPTY
PN_IDEV_TRANS_AREA_NAME_TOO_LONG = _MicroWinExecInterface.PN_IDEV_TRANS_AREA_NAME_TOO_LONG
PN_IDEV_TRANS_AREA_NAME_DUPLICATED = _MicroWinExecInterface.PN_IDEV_TRANS_AREA_NAME_DUPLICATED
PN_IDEV_TRANS_AREA_SUBSLOT_OUT_OF_RANGE = _MicroWinExecInterface.PN_IDEV_TRANS_AREA_SUBSLOT_OUT_OF_RANGE
PN_IDEV_TRANS_AREA_SUBSLOT_DUPLICATED = _MicroWinExecInterface.PN_IDEV_TRANS_AREA_SUBSLOT_DUPLICATED
PN_IDEV_TRANS_AREA_ADDR_TYPE_INVALID = _MicroWinExecInterface.PN_IDEV_TRANS_AREA_ADDR_TYPE_INVALID
PN_IDEV_TRANS_AREA_ADDR_OUT_OF_RANGE = _MicroWinExecInterface.PN_IDEV_TRANS_AREA_ADDR_OUT_OF_RANGE
PN_IDEV_TRANS_ARAE_ADDR_OVERLAP = _MicroWinExecInterface.PN_IDEV_TRANS_ARAE_ADDR_OVERLAP
PN_CONSISTENCY_CATEGORY_IODEVICE_NO_TRANSFER_SUBMODULE = _MicroWinExecInterface.PN_CONSISTENCY_CATEGORY_IODEVICE_NO_TRANSFER_SUBMODULE
OMGR_INVALID_PARM_VALUE = _MicroWinExecInterface.OMGR_INVALID_PARM_VALUE
OMGR_POU_PROTECTED = _MicroWinExecInterface.OMGR_POU_PROTECTED
OMGR_POU_DOES_NOT_EXIST = _MicroWinExecInterface.OMGR_POU_DOES_NOT_EXIST
OMGR_NET_DOES_NOT_EXIST = _MicroWinExecInterface.OMGR_NET_DOES_NOT_EXIST
OMGR_CELL_DOES_NOT_EXIST = _MicroWinExecInterface.OMGR_CELL_DOES_NOT_EXIST
OMGR_LINE_DOES_NOT_EXIST = _MicroWinExecInterface.OMGR_LINE_DOES_NOT_EXIST
OMGR_PARM_DOES_NOT_EXIST = _MicroWinExecInterface.OMGR_PARM_DOES_NOT_EXIST
OMGR_SYM_DOES_NOT_EXIST = _MicroWinExecInterface.OMGR_SYM_DOES_NOT_EXIST
OMGR_VAR_DOES_NOT_EXIST = _MicroWinExecInterface.OMGR_VAR_DOES_NOT_EXIST
OMGR_POU_NOT_INSERTED = _MicroWinExecInterface.OMGR_POU_NOT_INSERTED
OMGR_SYM_TABLE_DOES_NOT_EXIST = _MicroWinExecInterface.OMGR_SYM_TABLE_DOES_NOT_EXIST
OMGR_STATUS_CHART_DOES_NOT_EXIST = _MicroWinExecInterface.OMGR_STATUS_CHART_DOES_NOT_EXIST
OMGR_DATA_BLOCK_DOES_NOT_EXIST = _MicroWinExecInterface.OMGR_DATA_BLOCK_DOES_NOT_EXIST
OMGR_ILLEGAL_NETWORK_LANGUAGE = _MicroWinExecInterface.OMGR_ILLEGAL_NETWORK_LANGUAGE
OMGR_PROJECT_NOT_OPEN = _MicroWinExecInterface.OMGR_PROJECT_NOT_OPEN
SIGNATURE_NOT_FOUND = _MicroWinExecInterface.SIGNATURE_NOT_FOUND
SIGNATURE_FILE_IO_ERROR = _MicroWinExecInterface.SIGNATURE_FILE_IO_ERROR
INVALID_SIG_REQUEST = _MicroWinExecInterface.INVALID_SIG_REQUEST
LIB_LOAD_ERROR = _MicroWinExecInterface.LIB_LOAD_ERROR
LIB_RESOURCE_ERROR = _MicroWinExecInterface.LIB_RESOURCE_ERROR
LIB_INST_ERR_DUP_NAME = _MicroWinExecInterface.LIB_INST_ERR_DUP_NAME
LIB_INST_ERR_VERSION_CONFLICT = _MicroWinExecInterface.LIB_INST_ERR_VERSION_CONFLICT
APP_LOAD_ERROR = _MicroWinExecInterface.APP_LOAD_ERROR
APP_RESOURCE_ERROR = _MicroWinExecInterface.APP_RESOURCE_ERROR
LIB_REFRESH_NEEDED = _MicroWinExecInterface.LIB_REFRESH_NEEDED
LIB_NOT_ENOUGH_POUS = _MicroWinExecInterface.LIB_NOT_ENOUGH_POUS
LIB_FILE_IO_ERROR = _MicroWinExecInterface.LIB_FILE_IO_ERROR
LIB_CREATION_ERROR = _MicroWinExecInterface.LIB_CREATION_ERROR
LIB_NOT_ENOUGH_MEMORY = _MicroWinExecInterface.LIB_NOT_ENOUGH_MEMORY
LIB_ADDR_OUT_OF_RANGE = _MicroWinExecInterface.LIB_ADDR_OUT_OF_RANGE
LIB_NEW_REFRESH_NEEDED = _MicroWinExecInterface.LIB_NEW_REFRESH_NEEDED
LIB_LOAD_DUPLICATE_ERROR = _MicroWinExecInterface.LIB_LOAD_DUPLICATE_ERROR
LIB_LOAD_SOURCE_IS_OPEN = _MicroWinExecInterface.LIB_LOAD_SOURCE_IS_OPEN
LIB_INVALID_USER_LIB = _MicroWinExecInterface.LIB_INVALID_USER_LIB
LIB_BAD_PATH = _MicroWinExecInterface.LIB_BAD_PATH
LIB_REWIRE_ERROR = _MicroWinExecInterface.LIB_REWIRE_ERROR
LIB_NO_LONGER_USED = _MicroWinExecInterface.LIB_NO_LONGER_USED
LIB_CANNOT_BE_DELETED = _MicroWinExecInterface.LIB_CANNOT_BE_DELETED
ILLEGAL_POU_NUMBER = _MicroWinExecInterface.ILLEGAL_POU_NUMBER
ILLEGAL_POU_TYPE = _MicroWinExecInterface.ILLEGAL_POU_TYPE
INVALID_POU_REQUEST = _MicroWinExecInterface.INVALID_POU_REQUEST
DUPLICATE_POU_NUMBER = _MicroWinExecInterface.DUPLICATE_POU_NUMBER
CMP_POU_ORDER_ERROR = _MicroWinExecInterface.CMP_POU_ORDER_ERROR
CMP_POU_ORDER_ERROR2 = _MicroWinExecInterface.CMP_POU_ORDER_ERROR2
CMP_POU_ORDER_ERROR3 = _MicroWinExecInterface.CMP_POU_ORDER_ERROR3
ILLEGAL_SYM_TABLE_NUMBER = _MicroWinExecInterface.ILLEGAL_SYM_TABLE_NUMBER
ILLEGAL_SYM_TABLE_TYPE = _MicroWinExecInterface.ILLEGAL_SYM_TABLE_TYPE
SYM_ERROR_NAME_LENGTH = _MicroWinExecInterface.SYM_ERROR_NAME_LENGTH
SYM_ERROR_ADDRESS_LENGTH = _MicroWinExecInterface.SYM_ERROR_ADDRESS_LENGTH
SYM_ERROR_TYPE_LENGTH = _MicroWinExecInterface.SYM_ERROR_TYPE_LENGTH
SYM_ERROR_COMMENT_LENGTH = _MicroWinExecInterface.SYM_ERROR_COMMENT_LENGTH
SYM_ERROR_MAX_ROWS_REACHED = _MicroWinExecInterface.SYM_ERROR_MAX_ROWS_REACHED
SYM_ERROR_INVALID_NAME = _MicroWinExecInterface.SYM_ERROR_INVALID_NAME
SYM_ERROR_INVALID_ADDRESS = _MicroWinExecInterface.SYM_ERROR_INVALID_ADDRESS
SYM_ERROR_INVALID_DATA_TYPE = _MicroWinExecInterface.SYM_ERROR_INVALID_DATA_TYPE
SYM_SYMBOL_NOT_FOUND = _MicroWinExecInterface.SYM_SYMBOL_NOT_FOUND
SYM_DUPLICATE_SYMBOL_NAME = _MicroWinExecInterface.SYM_DUPLICATE_SYMBOL_NAME
SYM_DUPLICATE_ADDRESS = _MicroWinExecInterface.SYM_DUPLICATE_ADDRESS
SYM_ERROR_INVALID_ROW = _MicroWinExecInterface.SYM_ERROR_INVALID_ROW
SYM_DATA_TYPE_NOT_COMPATIBLE = _MicroWinExecInterface.SYM_DATA_TYPE_NOT_COMPATIBLE
PASTE_SHAPE_SIZE_MISMATCH = _MicroWinExecInterface.PASTE_SHAPE_SIZE_MISMATCH
PASTE_SHAPE_SIZE_MISMATCH2 = _MicroWinExecInterface.PASTE_SHAPE_SIZE_MISMATCH2
FND_READ_ONLY_MESSAGE = _MicroWinExecInterface.FND_READ_ONLY_MESSAGE
SYM_ILLEGAL_TABLE = _MicroWinExecInterface.SYM_ILLEGAL_TABLE
SYM_NO_UNDEFINED_SYMBOLS = _MicroWinExecInterface.SYM_NO_UNDEFINED_SYMBOLS
ILLEGAL_STATUS_CHART_NUMBER = _MicroWinExecInterface.ILLEGAL_STATUS_CHART_NUMBER
ILLEGAL_STATUS_CHART_TYPE = _MicroWinExecInterface.ILLEGAL_STATUS_CHART_TYPE
CHT_ERROR_INVALID_NAME = _MicroWinExecInterface.CHT_ERROR_INVALID_NAME
CHT_ERROR_INVALID_ADDRESS = _MicroWinExecInterface.CHT_ERROR_INVALID_ADDRESS
CHT_ERROR_INVALID_DATA_TYPE = _MicroWinExecInterface.CHT_ERROR_INVALID_DATA_TYPE
CHT_ERROR_MAX_ROWS_REACHED = _MicroWinExecInterface.CHT_ERROR_MAX_ROWS_REACHED
CHT_ERROR_ELEMENT_NEEDED = _MicroWinExecInterface.CHT_ERROR_ELEMENT_NEEDED
CHT_INVALID_WRITE_VALUE = _MicroWinExecInterface.CHT_INVALID_WRITE_VALUE
CHT_ERROR_PASTE_TO_LARGE = _MicroWinExecInterface.CHT_ERROR_PASTE_TO_LARGE
CHT_INVALID_FORCE_ADDRESS = _MicroWinExecInterface.CHT_INVALID_FORCE_ADDRESS
CHT_INVALID_UNFORCE_ADDRESS = _MicroWinExecInterface.CHT_INVALID_UNFORCE_ADDRESS
CHT_MAX_ELEMENTS_FORCED = _MicroWinExecInterface.CHT_MAX_ELEMENTS_FORCED
CHT_INVALID_SELECTION = _MicroWinExecInterface.CHT_INVALID_SELECTION
CHT_ERROR_SELECT_TO_LARGE = _MicroWinExecInterface.CHT_ERROR_SELECT_TO_LARGE
CHT_ERROR_FORCING_OVERLAPS = _MicroWinExecInterface.CHT_ERROR_FORCING_OVERLAPS
CHT_INVALID_UNFORCE_OVERLAP = _MicroWinExecInterface.CHT_INVALID_UNFORCE_OVERLAP
CHT_ADDRESS_NOT_FORCED = _MicroWinExecInterface.CHT_ADDRESS_NOT_FORCED
CHT_ERROR_INVALID_ROW = _MicroWinExecInterface.CHT_ERROR_INVALID_ROW
CHT_INVALID_ADDRESS_INCREMENT = _MicroWinExecInterface.CHT_INVALID_ADDRESS_INCREMENT
CHT_INVALID_WRITE = _MicroWinExecInterface.CHT_INVALID_WRITE
CHT_INVALID_FORCE = _MicroWinExecInterface.CHT_INVALID_FORCE
CHT_NO_ELEMENTS = _MicroWinExecInterface.CHT_NO_ELEMENTS
CHT_INVALID_NETWORK = _MicroWinExecInterface.CHT_INVALID_NETWORK
CHT_CANNOT_FORCE_STRING = _MicroWinExecInterface.CHT_CANNOT_FORCE_STRING
CHT_TREND_INVALID_LOW_VALUE = _MicroWinExecInterface.CHT_TREND_INVALID_LOW_VALUE
CHT_TREND_INVALID_HIGH_VALUE = _MicroWinExecInterface.CHT_TREND_INVALID_HIGH_VALUE
VAR_NON_EDITABLE_ROW = _MicroWinExecInterface.VAR_NON_EDITABLE_ROW
ILLEGAL_SEARCH_ROW = _MicroWinExecInterface.ILLEGAL_SEARCH_ROW
ILLEGAL_SEARCH_COL = _MicroWinExecInterface.ILLEGAL_SEARCH_COL
ILLEGAL_SEARCH_NETWORK = _MicroWinExecInterface.ILLEGAL_SEARCH_NETWORK
FOUND_BUT_NO_REPLACE = _MicroWinExecInterface.FOUND_BUT_NO_REPLACE
FND_TOP_OF_PAGE_REACHED = _MicroWinExecInterface.FND_TOP_OF_PAGE_REACHED
FND_BOTTOM_OF_PAGE_REACHED = _MicroWinExecInterface.FND_BOTTOM_OF_PAGE_REACHED
FND_SPAN_TOP_OF_PAGE_REACHED = _MicroWinExecInterface.FND_SPAN_TOP_OF_PAGE_REACHED
FND_SPAN_BOTTOM_OF_PAGE_REACHED = _MicroWinExecInterface.FND_SPAN_BOTTOM_OF_PAGE_REACHED
FND_SEARCH_FINISHED = _MicroWinExecInterface.FND_SEARCH_FINISHED
FND_EMPTY_FIND = _MicroWinExecInterface.FND_EMPTY_FIND
FND_INVALID_PASTE_COLUMN = _MicroWinExecInterface.FND_INVALID_PASTE_COLUMN
FND_ITEM_NOT_IN_LIST = _MicroWinExecInterface.FND_ITEM_NOT_IN_LIST
STAT_GATHER_BUFFER_EXCEEDED = _MicroWinExecInterface.STAT_GATHER_BUFFER_EXCEEDED
STAT_NO_GATHER_BUFFER_AVAILABLE = _MicroWinExecInterface.STAT_NO_GATHER_BUFFER_AVAILABLE
STAT_CROSSES_ENTITY_BOUNDARY = _MicroWinExecInterface.STAT_CROSSES_ENTITY_BOUNDARY
STAT_MISMATCHED_LINE_NUMBERS = _MicroWinExecInterface.STAT_MISMATCHED_LINE_NUMBERS
STAT_PROGRAM_MISMATCH = _MicroWinExecInterface.STAT_PROGRAM_MISMATCH
STAT_MISMATCHED_OPERAND_COUNT = _MicroWinExecInterface.STAT_MISMATCHED_OPERAND_COUNT
STAT_MISMATCHED_OPERAND_LENGTH = _MicroWinExecInterface.STAT_MISMATCHED_OPERAND_LENGTH
STAT_INVALID_OPERAND_TYPE = _MicroWinExecInterface.STAT_INVALID_OPERAND_TYPE
STAT_ILLEGAL_LINE_NUMBER_ERROR = _MicroWinExecInterface.STAT_ILLEGAL_LINE_NUMBER_ERROR
STAT_EXE_NOT_SUPPORTED = _MicroWinExecInterface.STAT_EXE_NOT_SUPPORTED
STAT_CANNOT_START_THREAD = _MicroWinExecInterface.STAT_CANNOT_START_THREAD
STAT_NO_AREA_DEFINED = _MicroWinExecInterface.STAT_NO_AREA_DEFINED
STAT_STILL_COMPILING = _MicroWinExecInterface.STAT_STILL_COMPILING
STAT_FAILED_COMPILING = _MicroWinExecInterface.STAT_FAILED_COMPILING
STLMGR_ILLEGAL_LINE_NUMBER = _MicroWinExecInterface.STLMGR_ILLEGAL_LINE_NUMBER
STLMGR_ILLEGAL_POU_ID = _MicroWinExecInterface.STLMGR_ILLEGAL_POU_ID
STLMGR_MEMORY_ALLOCATION_ERROR = _MicroWinExecInterface.STLMGR_MEMORY_ALLOCATION_ERROR
STLMGR_IMPORT_FAILURE_ERROR = _MicroWinExecInterface.STLMGR_IMPORT_FAILURE_ERROR
STLMGR_EXPORT_COMPILE_ERROR = _MicroWinExecInterface.STLMGR_EXPORT_COMPILE_ERROR
STLMGR_EXCEEDED_TOKEN_TEXT_ERROR = _MicroWinExecInterface.STLMGR_EXCEEDED_TOKEN_TEXT_ERROR
STLMGR_CANNOT_EXPORT_HIDDEN_POU = _MicroWinExecInterface.STLMGR_CANNOT_EXPORT_HIDDEN_POU
STLMGR_CANNOT_EXPORT_HIDDEN_PRJ = _MicroWinExecInterface.STLMGR_CANNOT_EXPORT_HIDDEN_PRJ
STLMGR_CANNOT_IMPORT_OVER_HIDDEN_POU = _MicroWinExecInterface.STLMGR_CANNOT_IMPORT_OVER_HIDDEN_POU
STLMGR_CANNOT_IMPORT_OVER_HIDDEN_PRJ = _MicroWinExecInterface.STLMGR_CANNOT_IMPORT_OVER_HIDDEN_PRJ
STLMGR_SYMBOLIC_CONVERSION = _MicroWinExecInterface.STLMGR_SYMBOLIC_CONVERSION
STL_IMPORT_ERRORS = _MicroWinExecInterface.STL_IMPORT_ERRORS
SDB_NO_PORT1_SUPPORT = _MicroWinExecInterface.SDB_NO_PORT1_SUPPORT
SDB_NO_AI_FILTER_SUPPORT = _MicroWinExecInterface.SDB_NO_AI_FILTER_SUPPORT
SDB_NO_PULSE_BITS_SUPPORT = _MicroWinExecInterface.SDB_NO_PULSE_BITS_SUPPORT
SDB_NO_OUT_TABLE_SUPPORT = _MicroWinExecInterface.SDB_NO_OUT_TABLE_SUPPORT
SDB_NO_HIGH_OUTTABLE_SUPPORT = _MicroWinExecInterface.SDB_NO_HIGH_OUTTABLE_SUPPORT
SDB_ILLEGAL_BAUD_RATE = _MicroWinExecInterface.SDB_ILLEGAL_BAUD_RATE
SDB_ILLEGAL_RET_RANGE = _MicroWinExecInterface.SDB_ILLEGAL_RET_RANGE
SDB_NO_COM_BKGROUND_SUPPORT = _MicroWinExecInterface.SDB_NO_COM_BKGROUND_SUPPORT
SDB_NO_L4_PASSWORD_SUPPORT = _MicroWinExecInterface.SDB_NO_L4_PASSWORD_SUPPORT
SDB_ILLEGAL_DATAWRITE_RANGE = _MicroWinExecInterface.SDB_ILLEGAL_DATAWRITE_RANGE
SDB_EXCEEDED_TOTAL_RENTENTIVE_BYTES = _MicroWinExecInterface.SDB_EXCEEDED_TOTAL_RENTENTIVE_BYTES
DB_ADDRESS_OVERLAP = _MicroWinExecInterface.DB_ADDRESS_OVERLAP
DB_ADDRESS_OUT_OF_RANGE = _MicroWinExecInterface.DB_ADDRESS_OUT_OF_RANGE
DB_ILLEGAL_SYNTAX = _MicroWinExecInterface.DB_ILLEGAL_SYNTAX
DB_VALUE_TOO_LARGE = _MicroWinExecInterface.DB_VALUE_TOO_LARGE
DB_EXCEEDED_TOKEN_TEXT_ERROR = _MicroWinExecInterface.DB_EXCEEDED_TOKEN_TEXT_ERROR
DB_ILLEGAL_LINE_NUMBER = _MicroWinExecInterface.DB_ILLEGAL_LINE_NUMBER
DB_INVALID_INCREMENT = _MicroWinExecInterface.DB_INVALID_INCREMENT
DB_ILLEGAL_NUMBER = _MicroWinExecInterface.DB_ILLEGAL_NUMBER
DB_CANNOT_IMPORT_OVER_HIDDEN_DB = _MicroWinExecInterface.DB_CANNOT_IMPORT_OVER_HIDDEN_DB
DB_UNDEFINED_SYMBOL = _MicroWinExecInterface.DB_UNDEFINED_SYMBOL
GEN_PASSWORD_REQUIRED = _MicroWinExecInterface.GEN_PASSWORD_REQUIRED
GEN_CONVERT_PASSWORD = _MicroWinExecInterface.GEN_CONVERT_PASSWORD
SYSERR_INCOMPATIBLE_DATA = _MicroWinExecInterface.SYSERR_INCOMPATIBLE_DATA
SYSERR_NULL_OPERAND_RECEIVED = _MicroWinExecInterface.SYSERR_NULL_OPERAND_RECEIVED
SYSERR_ENUM_OUT_OF_RANGE = _MicroWinExecInterface.SYSERR_ENUM_OUT_OF_RANGE
SYSERR_INVALID_LAD_REQUEST = _MicroWinExecInterface.SYSERR_INVALID_LAD_REQUEST
SYSERR_INVALID_STL_REQUEST = _MicroWinExecInterface.SYSERR_INVALID_STL_REQUEST
SYSERR_INVALID_FBD_REQUEST = _MicroWinExecInterface.SYSERR_INVALID_FBD_REQUEST
SYSERR_INVALID_DB_REQUEST = _MicroWinExecInterface.SYSERR_INVALID_DB_REQUEST
SYSERR_INVALID_GSYM_REQUEST = _MicroWinExecInterface.SYSERR_INVALID_GSYM_REQUEST
SYSERR_INVALID_LVAR_REQUEST = _MicroWinExecInterface.SYSERR_INVALID_LVAR_REQUEST
SYSERR_INVALID_STAT_REQUEST = _MicroWinExecInterface.SYSERR_INVALID_STAT_REQUEST
SYSERR_INVALID_SIG_REQUEST = _MicroWinExecInterface.SYSERR_INVALID_SIG_REQUEST
SYSERR_INVALID_COMM_REQUEST = _MicroWinExecInterface.SYSERR_INVALID_COMM_REQUEST
SYSERR_INVALID_REG_REQUEST = _MicroWinExecInterface.SYSERR_INVALID_REG_REQUEST
SYSERR_INVALID_RES_REQUEST = _MicroWinExecInterface.SYSERR_INVALID_RES_REQUEST
SYSERR_INVALID_POU_REQUEST = _MicroWinExecInterface.SYSERR_INVALID_POU_REQUEST
SYSERR_INVALID_PRJ_REQUEST = _MicroWinExecInterface.SYSERR_INVALID_PRJ_REQUEST
SYSERR_INVALID_DLG_REQUEST = _MicroWinExecInterface.SYSERR_INVALID_DLG_REQUEST
SYSERR_OMGR_INTERNAL_ERROR = _MicroWinExecInterface.SYSERR_OMGR_INTERNAL_ERROR
SYSERR_RECORDING = _MicroWinExecInterface.SYSERR_RECORDING
SYSERR_NOT_RECORDING = _MicroWinExecInterface.SYSERR_NOT_RECORDING
SYSERR_NO_RECORDING = _MicroWinExecInterface.SYSERR_NO_RECORDING
SYSERR_SMART_MODULE_DATA_NOT_FOUND = _MicroWinExecInterface.SYSERR_SMART_MODULE_DATA_NOT_FOUND
SYSERR_END_OF_SYSTEM_ERRORS = _MicroWinExecInterface.SYSERR_END_OF_SYSTEM_ERRORS
CPU_FATAL_ERR_NONE = _MicroWinExecInterface.CPU_FATAL_ERR_NONE
CPU_FATAL_ERR_01 = _MicroWinExecInterface.CPU_FATAL_ERR_01
CPU_FATAL_ERR_02 = _MicroWinExecInterface.CPU_FATAL_ERR_02
CPU_FATAL_ERR_03 = _MicroWinExecInterface.CPU_FATAL_ERR_03
CPU_FATAL_ERR_04 = _MicroWinExecInterface.CPU_FATAL_ERR_04
CPU_FATAL_ERR_05 = _MicroWinExecInterface.CPU_FATAL_ERR_05
CPU_FATAL_ERR_06 = _MicroWinExecInterface.CPU_FATAL_ERR_06
CPU_FATAL_ERR_07 = _MicroWinExecInterface.CPU_FATAL_ERR_07
CPU_FATAL_ERR_08 = _MicroWinExecInterface.CPU_FATAL_ERR_08
CPU_FATAL_ERR_09 = _MicroWinExecInterface.CPU_FATAL_ERR_09
CPU_FATAL_ERR_0A = _MicroWinExecInterface.CPU_FATAL_ERR_0A
CPU_FATAL_ERR_0B = _MicroWinExecInterface.CPU_FATAL_ERR_0B
CPU_FATAL_ERR_0C = _MicroWinExecInterface.CPU_FATAL_ERR_0C
CPU_FATAL_ERR_0D = _MicroWinExecInterface.CPU_FATAL_ERR_0D
CPU_FATAL_ERR_0E = _MicroWinExecInterface.CPU_FATAL_ERR_0E
CPU_FATAL_ERR_0F = _MicroWinExecInterface.CPU_FATAL_ERR_0F
CPU_FATAL_ERR_10 = _MicroWinExecInterface.CPU_FATAL_ERR_10
CPU_FATAL_ERR_11 = _MicroWinExecInterface.CPU_FATAL_ERR_11
CPU_FATAL_ERR_12 = _MicroWinExecInterface.CPU_FATAL_ERR_12
CPU_FATAL_ERR_13 = _MicroWinExecInterface.CPU_FATAL_ERR_13
CPU_FATAL_ERR_14 = _MicroWinExecInterface.CPU_FATAL_ERR_14
CPU_FATAL_ERR_15 = _MicroWinExecInterface.CPU_FATAL_ERR_15
CPU_FATAL_ERR_16 = _MicroWinExecInterface.CPU_FATAL_ERR_16
CPU_FATAL_ERR_17 = _MicroWinExecInterface.CPU_FATAL_ERR_17
CPU_FATAL_ERR_18 = _MicroWinExecInterface.CPU_FATAL_ERR_18
CPU_FATAL_ERR_19 = _MicroWinExecInterface.CPU_FATAL_ERR_19
CPU_RTIME_ERR_NONE = _MicroWinExecInterface.CPU_RTIME_ERR_NONE
CPU_RTIME_ERR_01 = _MicroWinExecInterface.CPU_RTIME_ERR_01
CPU_RTIME_ERR_02 = _MicroWinExecInterface.CPU_RTIME_ERR_02
CPU_RTIME_ERR_03 = _MicroWinExecInterface.CPU_RTIME_ERR_03
CPU_RTIME_ERR_04 = _MicroWinExecInterface.CPU_RTIME_ERR_04
CPU_RTIME_ERR_05 = _MicroWinExecInterface.CPU_RTIME_ERR_05
CPU_RTIME_ERR_06 = _MicroWinExecInterface.CPU_RTIME_ERR_06
CPU_RTIME_ERR_07 = _MicroWinExecInterface.CPU_RTIME_ERR_07
CPU_RTIME_ERR_08 = _MicroWinExecInterface.CPU_RTIME_ERR_08
CPU_RTIME_ERR_09 = _MicroWinExecInterface.CPU_RTIME_ERR_09
CPU_RTIME_ERR_0A = _MicroWinExecInterface.CPU_RTIME_ERR_0A
CPU_RTIME_ERR_0B = _MicroWinExecInterface.CPU_RTIME_ERR_0B
CPU_RTIME_ERR_0C = _MicroWinExecInterface.CPU_RTIME_ERR_0C
CPU_RTIME_ERR_0D = _MicroWinExecInterface.CPU_RTIME_ERR_0D
CPU_RTIME_ERR_0E = _MicroWinExecInterface.CPU_RTIME_ERR_0E
CPU_RTIME_ERR_0F = _MicroWinExecInterface.CPU_RTIME_ERR_0F
CPU_RTIME_ERR_10 = _MicroWinExecInterface.CPU_RTIME_ERR_10
CPU_RTIME_ERR_11 = _MicroWinExecInterface.CPU_RTIME_ERR_11
CPU_RTIME_ERR_12 = _MicroWinExecInterface.CPU_RTIME_ERR_12
CPU_RTIME_ERR_13 = _MicroWinExecInterface.CPU_RTIME_ERR_13
CPU_RTIME_ERR_14 = _MicroWinExecInterface.CPU_RTIME_ERR_14
CPU_RTIME_ERR_15 = _MicroWinExecInterface.CPU_RTIME_ERR_15
CPU_RTIME_ERR_16 = _MicroWinExecInterface.CPU_RTIME_ERR_16
CPU_RTIME_ERR_17 = _MicroWinExecInterface.CPU_RTIME_ERR_17
CPU_RTIME_ERR_18 = _MicroWinExecInterface.CPU_RTIME_ERR_18
CPU_RTIME_ERR_19 = _MicroWinExecInterface.CPU_RTIME_ERR_19
CPU_RTIME_ERR_1A = _MicroWinExecInterface.CPU_RTIME_ERR_1A
CPU_RTIME_ERR_1B = _MicroWinExecInterface.CPU_RTIME_ERR_1B
CPU_RTIME_ERR_1C = _MicroWinExecInterface.CPU_RTIME_ERR_1C
CPU_COMP_ERR_80 = _MicroWinExecInterface.CPU_COMP_ERR_80
CPU_COMP_ERR_81 = _MicroWinExecInterface.CPU_COMP_ERR_81
CPU_COMP_ERR_82 = _MicroWinExecInterface.CPU_COMP_ERR_82
CPU_COMP_ERR_83 = _MicroWinExecInterface.CPU_COMP_ERR_83
CPU_COMP_ERR_84 = _MicroWinExecInterface.CPU_COMP_ERR_84
CPU_COMP_ERR_85 = _MicroWinExecInterface.CPU_COMP_ERR_85
CPU_COMP_ERR_86 = _MicroWinExecInterface.CPU_COMP_ERR_86
CPU_COMP_ERR_87 = _MicroWinExecInterface.CPU_COMP_ERR_87
CPU_COMP_ERR_88 = _MicroWinExecInterface.CPU_COMP_ERR_88
CPU_COMP_ERR_89 = _MicroWinExecInterface.CPU_COMP_ERR_89
CPU_COMP_ERR_8A = _MicroWinExecInterface.CPU_COMP_ERR_8A
CPU_COMP_ERR_8B = _MicroWinExecInterface.CPU_COMP_ERR_8B
CPU_COMP_ERR_8C = _MicroWinExecInterface.CPU_COMP_ERR_8C
CPU_COMP_ERR_8D = _MicroWinExecInterface.CPU_COMP_ERR_8D
CPU_COMP_ERR_8E = _MicroWinExecInterface.CPU_COMP_ERR_8E
CPU_COMP_ERR_8F = _MicroWinExecInterface.CPU_COMP_ERR_8F
CPU_COMP_ERR_90 = _MicroWinExecInterface.CPU_COMP_ERR_90
CPU_COMP_ERR_91 = _MicroWinExecInterface.CPU_COMP_ERR_91
CPU_COMP_ERR_92 = _MicroWinExecInterface.CPU_COMP_ERR_92
CPU_COMP_ERR_93 = _MicroWinExecInterface.CPU_COMP_ERR_93
CPU_COMP_ERR_94 = _MicroWinExecInterface.CPU_COMP_ERR_94
CPU_COMP_ERR_95 = _MicroWinExecInterface.CPU_COMP_ERR_95
CPU_COMP_ERR_96 = _MicroWinExecInterface.CPU_COMP_ERR_96
CPU_COMP_ERR_97 = _MicroWinExecInterface.CPU_COMP_ERR_97
CPU_COMP_ERR_98 = _MicroWinExecInterface.CPU_COMP_ERR_98
CPU_COMP_ERR_99 = _MicroWinExecInterface.CPU_COMP_ERR_99
CPU_COMP_ERR_9A = _MicroWinExecInterface.CPU_COMP_ERR_9A
CPU_COMP_ERR_9B = _MicroWinExecInterface.CPU_COMP_ERR_9B
CPU_COMP_ERR_9C = _MicroWinExecInterface.CPU_COMP_ERR_9C
CPU_COMP_ERR_9D = _MicroWinExecInterface.CPU_COMP_ERR_9D
CPU_COMP_ERR_9E = _MicroWinExecInterface.CPU_COMP_ERR_9E
CPU_COMP_ERR_9F = _MicroWinExecInterface.CPU_COMP_ERR_9F
DCP_NIC_NOT_FOUND = _MicroWinExecInterface.DCP_NIC_NOT_FOUND
DCP_COMMAND_ERROR = _MicroWinExecInterface.DCP_COMMAND_ERROR
DCP_COMMAND_TIMEOUT = _MicroWinExecInterface.DCP_COMMAND_TIMEOUT
DCP_COMMAND_CANCEL = _MicroWinExecInterface.DCP_COMMAND_CANCEL
DCP_COMMAND_UNKNOWN_SET_DATA = _MicroWinExecInterface.DCP_COMMAND_UNKNOWN_SET_DATA
DCP_COMMAND_SEQUENCE_ERROR = _MicroWinExecInterface.DCP_COMMAND_SEQUENCE_ERROR
DCP_COMMAND_WRONG_PARAM = _MicroWinExecInterface.DCP_COMMAND_WRONG_PARAM
DCP_NETWORK_WRONG_MAC_RESPONSE = _MicroWinExecInterface.DCP_NETWORK_WRONG_MAC_RESPONSE
DCP_NETWORK_ERROR = _MicroWinExecInterface.DCP_NETWORK_ERROR
DCP_NETWORK_TIMEOUT = _MicroWinExecInterface.DCP_NETWORK_TIMEOUT
DCP_NETWORK_WRONG_CARD = _MicroWinExecInterface.DCP_NETWORK_WRONG_CARD
DCP_NETWORK_UNKNOWN_CARD = _MicroWinExecInterface.DCP_NETWORK_UNKNOWN_CARD
DCP_NETWORK_CHANGED = _MicroWinExecInterface.DCP_NETWORK_CHANGED
DCP_NETWORK_BUFFER_TO_SMALL = _MicroWinExecInterface.DCP_NETWORK_BUFFER_TO_SMALL
DCP_NETWORK_BUFFER_FILLED = _MicroWinExecInterface.DCP_NETWORK_BUFFER_FILLED
DCP_NETWORK_WRONG_SEQUENCE = _MicroWinExecInterface.DCP_NETWORK_WRONG_SEQUENCE
DCP_NETWORK_PROTOCOL_ERROR = _MicroWinExecInterface.DCP_NETWORK_PROTOCOL_ERROR
DCP_NETWORK_DLC_NOT_INSTALL = _MicroWinExecInterface.DCP_NETWORK_DLC_NOT_INSTALL
DCP_NETWORK_BC_MC_NOT_ALLOW = _MicroWinExecInterface.DCP_NETWORK_BC_MC_NOT_ALLOW
DCP_NETWORK_WRONG_DATABASE = _MicroWinExecInterface.DCP_NETWORK_WRONG_DATABASE
DCP_NETWORK_WRONG_DATASET = _MicroWinExecInterface.DCP_NETWORK_WRONG_DATASET
DCP_NETWORK_ERROR_GET = _MicroWinExecInterface.DCP_NETWORK_ERROR_GET
DCP_NETWORK_ERROR_SET = _MicroWinExecInterface.DCP_NETWORK_ERROR_SET
DCP_DLL_DLC_RESTART = _MicroWinExecInterface.DCP_DLL_DLC_RESTART
DCP_DLL_DLC_ERR = _MicroWinExecInterface.DCP_DLL_DLC_ERR
DCP_DLL_NOT_LOAD = _MicroWinExecInterface.DCP_DLL_NOT_LOAD
DCP_DLL_MUTEX_ERROR = _MicroWinExecInterface.DCP_DLL_MUTEX_ERROR
DCP_DLL_NOT_INIT = _MicroWinExecInterface.DCP_DLL_NOT_INIT
DCP_DLL_USED = _MicroWinExecInterface.DCP_DLL_USED
DCP_COMMAND_UNKNOWN_ERROR = _MicroWinExecInterface.DCP_COMMAND_UNKNOWN_ERROR
STEP7_REINSTALL_MICROWIN_ERROR = _MicroWinExecInterface.STEP7_REINSTALL_MICROWIN_ERROR
MULTI_MASTER_ERROR = _MicroWinExecInterface.MULTI_MASTER_ERROR
MAX_REGIONS_PER_CELL = _MicroWinExecInterface.MAX_REGIONS_PER_CELL
MAX_HOTSPOTS_PER_CELL = _MicroWinExecInterface.MAX_HOTSPOTS_PER_CELL
DEFAULT_VARTABLE_HEIGHT = _MicroWinExecInterface.DEFAULT_VARTABLE_HEIGHT
GRID_CELL_NONE = _MicroWinExecInterface.GRID_CELL_NONE
GRID_CELL_REGION1 = _MicroWinExecInterface.GRID_CELL_REGION1
GRID_CELL_REGION2 = _MicroWinExecInterface.GRID_CELL_REGION2
GRID_CELL_REGION3 = _MicroWinExecInterface.GRID_CELL_REGION3
BRK_NONE = _MicroWinExecInterface.BRK_NONE
BRK_LEFT_TOP = _MicroWinExecInterface.BRK_LEFT_TOP
BRK_LEFT_VERT = _MicroWinExecInterface.BRK_LEFT_VERT
BRK_LEFT_BOTTOM = _MicroWinExecInterface.BRK_LEFT_BOTTOM
BRK_RIGHT_TOP = _MicroWinExecInterface.BRK_RIGHT_TOP
BRK_RIGHT_VERT = _MicroWinExecInterface.BRK_RIGHT_VERT
BRK_RIGHT_BOTTOM = _MicroWinExecInterface.BRK_RIGHT_BOTTOM
NO_ELEMENT = _MicroWinExecInterface.NO_ELEMENT
BOX_POWER = _MicroWinExecInterface.BOX_POWER
BOX_NO_POWER = _MicroWinExecInterface.BOX_NO_POWER
CONTACT = _MicroWinExecInterface.CONTACT
COIL = _MicroWinExecInterface.COIL
HORIZONTAL = _MicroWinExecInterface.HORIZONTAL
POWER_FLOW_REQUIRED = _MicroWinExecInterface.POWER_FLOW_REQUIRED
POWER_FLOW_OPTIONAL = _MicroWinExecInterface.POWER_FLOW_OPTIONAL
PRINT_BRACKET = _MicroWinExecInterface.PRINT_BRACKET
NO_POWER_FLOW = _MicroWinExecInterface.NO_POWER_FLOW
POWER_FLOW = _MicroWinExecInterface.POWER_FLOW
RUNNING_FLOW = _MicroWinExecInterface.RUNNING_FLOW
ERROR_FLOW = _MicroWinExecInterface.ERROR_FLOW
EXECUTION_FLOW = _MicroWinExecInterface.EXECUTION_FLOW
RIGHT_FLOW = _MicroWinExecInterface.RIGHT_FLOW
LEFT_FLOW = _MicroWinExecInterface.LEFT_FLOW
UP_FLOW = _MicroWinExecInterface.UP_FLOW
DOWN_FLOW = _MicroWinExecInterface.DOWN_FLOW
UPDOWN_FLOW = _MicroWinExecInterface.UPDOWN_FLOW
ALL_FLOW = _MicroWinExecInterface.ALL_FLOW
NO_TICK = _MicroWinExecInterface.NO_TICK
NEG_TICK = _MicroWinExecInterface.NEG_TICK
NORMAL_TICK = _MicroWinExecInterface.NORMAL_TICK
IMMEDIATE_TICK = _MicroWinExecInterface.IMMEDIATE_TICK
NEG_IMMEDIATE_TICK = _MicroWinExecInterface.NEG_IMMEDIATE_TICK
LEFT_JUSTIFIED = _MicroWinExecInterface.LEFT_JUSTIFIED
CENTER_JUSTIFIED = _MicroWinExecInterface.CENTER_JUSTIFIED
RIGHT_JUSTIFIED = _MicroWinExecInterface.RIGHT_JUSTIFIED
NONE_JUSTIFIED = _MicroWinExecInterface.NONE_JUSTIFIED
NO_VERT = _MicroWinExecInterface.NO_VERT
UP_VERT = _MicroWinExecInterface.UP_VERT
DOWN_VERT = _MicroWinExecInterface.DOWN_VERT
UPDOWN_VERT = _MicroWinExecInterface.UPDOWN_VERT
CELL_LINE_NONE = _MicroWinExecInterface.CELL_LINE_NONE
CELL_LINE1 = _MicroWinExecInterface.CELL_LINE1
CELL_LINE2 = _MicroWinExecInterface.CELL_LINE2
CELL_LINE3 = _MicroWinExecInterface.CELL_LINE3
CELL_LINE4 = _MicroWinExecInterface.CELL_LINE4
CELL_LINE5 = _MicroWinExecInterface.CELL_LINE5
CELL_LINE6 = _MicroWinExecInterface.CELL_LINE6
CELL_LINE7 = _MicroWinExecInterface.CELL_LINE7
CELL_LINE8 = _MicroWinExecInterface.CELL_LINE8
CELL_LINE9 = _MicroWinExecInterface.CELL_LINE9
CELL_LINE10 = _MicroWinExecInterface.CELL_LINE10
WALK_UP = _MicroWinExecInterface.WALK_UP
WALK_DOWN = _MicroWinExecInterface.WALK_DOWN
WALK_RIGHT = _MicroWinExecInterface.WALK_RIGHT
WALK_NOT_POSSIBLE = _MicroWinExecInterface.WALK_NOT_POSSIBLE
VERTICAL_FIRST = _MicroWinExecInterface.VERTICAL_FIRST
HORIZONTAL_FIRST = _MicroWinExecInterface.HORIZONTAL_FIRST
VERTICAL_FIRST_STAIRSTEP = _MicroWinExecInterface.VERTICAL_FIRST_STAIRSTEP
HORIZONTAL_FIRST_STAIRSTEP = _MicroWinExecInterface.HORIZONTAL_FIRST_STAIRSTEP
class EDT_PATH(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MicroWinExecInterface.EDT_PATH_swiginit(self, _MicroWinExecInterface.new_EDT_PATH(*args))

    def Compare(self, sRight):
        return _MicroWinExecInterface.EDT_PATH_Compare(self, sRight)
    m_sPouId = property(_MicroWinExecInterface.EDT_PATH_m_sPouId_get, _MicroWinExecInterface.EDT_PATH_m_sPouId_set)
    m_nNetIdx = property(_MicroWinExecInterface.EDT_PATH_m_nNetIdx_get, _MicroWinExecInterface.EDT_PATH_m_nNetIdx_set)
    m_eRegion = property(_MicroWinExecInterface.EDT_PATH_m_eRegion_get, _MicroWinExecInterface.EDT_PATH_m_eRegion_set)
    m_eOpRegion = property(_MicroWinExecInterface.EDT_PATH_m_eOpRegion_get, _MicroWinExecInterface.EDT_PATH_m_eOpRegion_set)
    m_nCol = property(_MicroWinExecInterface.EDT_PATH_m_nCol_get, _MicroWinExecInterface.EDT_PATH_m_nCol_set)
    m_nRow = property(_MicroWinExecInterface.EDT_PATH_m_nRow_get, _MicroWinExecInterface.EDT_PATH_m_nRow_set)
    m_nLowerRightCol = property(_MicroWinExecInterface.EDT_PATH_m_nLowerRightCol_get, _MicroWinExecInterface.EDT_PATH_m_nLowerRightCol_set)
    m_nLowerRightRow = property(_MicroWinExecInterface.EDT_PATH_m_nLowerRightRow_get, _MicroWinExecInterface.EDT_PATH_m_nLowerRightRow_set)
    m_nOpIdx = property(_MicroWinExecInterface.EDT_PATH_m_nOpIdx_get, _MicroWinExecInterface.EDT_PATH_m_nOpIdx_set)
    m_nCount = property(_MicroWinExecInterface.EDT_PATH_m_nCount_get, _MicroWinExecInterface.EDT_PATH_m_nCount_set)
    __swig_destroy__ = _MicroWinExecInterface.delete_EDT_PATH

# Register EDT_PATH in _MicroWinExecInterface:
_MicroWinExecInterface.EDT_PATH_swigregister(EDT_PATH)
STANDARDLIBPASSWORD = cvar.STANDARDLIBPASSWORD
SYSTEM_ERROR_BEGIN = cvar.SYSTEM_ERROR_BEGIN

class GRID_CELL_LOCATION(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MicroWinExecInterface.GRID_CELL_LOCATION_swiginit(self, _MicroWinExecInterface.new_GRID_CELL_LOCATION(*args))
    m_row = property(_MicroWinExecInterface.GRID_CELL_LOCATION_m_row_get, _MicroWinExecInterface.GRID_CELL_LOCATION_m_row_set)
    m_col = property(_MicroWinExecInterface.GRID_CELL_LOCATION_m_col_get, _MicroWinExecInterface.GRID_CELL_LOCATION_m_col_set)

    def __eq__(self, rRight):
        return _MicroWinExecInterface.GRID_CELL_LOCATION___eq__(self, rRight)

    def __ne__(self, rRight):
        return _MicroWinExecInterface.GRID_CELL_LOCATION___ne__(self, rRight)

    def __le__(self, rRight):
        return _MicroWinExecInterface.GRID_CELL_LOCATION___le__(self, rRight)

    def __lt__(self, rRight):
        return _MicroWinExecInterface.GRID_CELL_LOCATION___lt__(self, rRight)

    def __ge__(self, rRight):
        return _MicroWinExecInterface.GRID_CELL_LOCATION___ge__(self, rRight)

    def __gt__(self, rRight):
        return _MicroWinExecInterface.GRID_CELL_LOCATION___gt__(self, rRight)
    __swig_destroy__ = _MicroWinExecInterface.delete_GRID_CELL_LOCATION

# Register GRID_CELL_LOCATION in _MicroWinExecInterface:
_MicroWinExecInterface.GRID_CELL_LOCATION_swigregister(GRID_CELL_LOCATION)

class GRID_OPERAND_LOCATION(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MicroWinExecInterface.GRID_OPERAND_LOCATION_swiginit(self, _MicroWinExecInterface.new_GRID_OPERAND_LOCATION(*args))
    m_cellLoc = property(_MicroWinExecInterface.GRID_OPERAND_LOCATION_m_cellLoc_get, _MicroWinExecInterface.GRID_OPERAND_LOCATION_m_cellLoc_set)
    m_cellRegion = property(_MicroWinExecInterface.GRID_OPERAND_LOCATION_m_cellRegion_get, _MicroWinExecInterface.GRID_OPERAND_LOCATION_m_cellRegion_set)

    def __eq__(self, rRight):
        return _MicroWinExecInterface.GRID_OPERAND_LOCATION___eq__(self, rRight)
    __swig_destroy__ = _MicroWinExecInterface.delete_GRID_OPERAND_LOCATION

# Register GRID_OPERAND_LOCATION in _MicroWinExecInterface:
_MicroWinExecInterface.GRID_OPERAND_LOCATION_swigregister(GRID_OPERAND_LOCATION)

class GRID_FIND_LOCATION_POSITION(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MicroWinExecInterface.GRID_FIND_LOCATION_POSITION_swiginit(self, _MicroWinExecInterface.new_GRID_FIND_LOCATION_POSITION())

    def __eq__(self, rRight):
        return _MicroWinExecInterface.GRID_FIND_LOCATION_POSITION___eq__(self, rRight)

    def __ne__(self, rRight):
        return _MicroWinExecInterface.GRID_FIND_LOCATION_POSITION___ne__(self, rRight)

    def __gt__(self, rRight):
        return _MicroWinExecInterface.GRID_FIND_LOCATION_POSITION___gt__(self, rRight)

    def __lt__(self, rRight):
        return _MicroWinExecInterface.GRID_FIND_LOCATION_POSITION___lt__(self, rRight)

    def Initialize(self):
        return _MicroWinExecInterface.GRID_FIND_LOCATION_POSITION_Initialize(self)
    sPouId = property(_MicroWinExecInterface.GRID_FIND_LOCATION_POSITION_sPouId_get, _MicroWinExecInterface.GRID_FIND_LOCATION_POSITION_sPouId_set)
    nPouIndex = property(_MicroWinExecInterface.GRID_FIND_LOCATION_POSITION_nPouIndex_get, _MicroWinExecInterface.GRID_FIND_LOCATION_POSITION_nPouIndex_set)
    nNetNumber = property(_MicroWinExecInterface.GRID_FIND_LOCATION_POSITION_nNetNumber_get, _MicroWinExecInterface.GRID_FIND_LOCATION_POSITION_nNetNumber_set)
    eEdtRegion = property(_MicroWinExecInterface.GRID_FIND_LOCATION_POSITION_eEdtRegion_get, _MicroWinExecInterface.GRID_FIND_LOCATION_POSITION_eEdtRegion_set)
    eOpRegion = property(_MicroWinExecInterface.GRID_FIND_LOCATION_POSITION_eOpRegion_get, _MicroWinExecInterface.GRID_FIND_LOCATION_POSITION_eOpRegion_set)
    nX = property(_MicroWinExecInterface.GRID_FIND_LOCATION_POSITION_nX_get, _MicroWinExecInterface.GRID_FIND_LOCATION_POSITION_nX_set)
    nY = property(_MicroWinExecInterface.GRID_FIND_LOCATION_POSITION_nY_get, _MicroWinExecInterface.GRID_FIND_LOCATION_POSITION_nY_set)
    nOpX = property(_MicroWinExecInterface.GRID_FIND_LOCATION_POSITION_nOpX_get, _MicroWinExecInterface.GRID_FIND_LOCATION_POSITION_nOpX_set)
    nOpY = property(_MicroWinExecInterface.GRID_FIND_LOCATION_POSITION_nOpY_get, _MicroWinExecInterface.GRID_FIND_LOCATION_POSITION_nOpY_set)
    nOpIndex = property(_MicroWinExecInterface.GRID_FIND_LOCATION_POSITION_nOpIndex_get, _MicroWinExecInterface.GRID_FIND_LOCATION_POSITION_nOpIndex_set)
    nStringOffset = property(_MicroWinExecInterface.GRID_FIND_LOCATION_POSITION_nStringOffset_get, _MicroWinExecInterface.GRID_FIND_LOCATION_POSITION_nStringOffset_set)
    nUpStringOffset = property(_MicroWinExecInterface.GRID_FIND_LOCATION_POSITION_nUpStringOffset_get, _MicroWinExecInterface.GRID_FIND_LOCATION_POSITION_nUpStringOffset_set)
    nReplaceCount = property(_MicroWinExecInterface.GRID_FIND_LOCATION_POSITION_nReplaceCount_get, _MicroWinExecInterface.GRID_FIND_LOCATION_POSITION_nReplaceCount_set)
    nFindCount = property(_MicroWinExecInterface.GRID_FIND_LOCATION_POSITION_nFindCount_get, _MicroWinExecInterface.GRID_FIND_LOCATION_POSITION_nFindCount_set)
    bUpStringInit = property(_MicroWinExecInterface.GRID_FIND_LOCATION_POSITION_bUpStringInit_get, _MicroWinExecInterface.GRID_FIND_LOCATION_POSITION_bUpStringInit_set)
    bIsSTL = property(_MicroWinExecInterface.GRID_FIND_LOCATION_POSITION_bIsSTL_get, _MicroWinExecInterface.GRID_FIND_LOCATION_POSITION_bIsSTL_set)
    bSearchUp = property(_MicroWinExecInterface.GRID_FIND_LOCATION_POSITION_bSearchUp_get, _MicroWinExecInterface.GRID_FIND_LOCATION_POSITION_bSearchUp_set)
    __swig_destroy__ = _MicroWinExecInterface.delete_GRID_FIND_LOCATION_POSITION

# Register GRID_FIND_LOCATION_POSITION in _MicroWinExecInterface:
_MicroWinExecInterface.GRID_FIND_LOCATION_POSITION_swigregister(GRID_FIND_LOCATION_POSITION)

class DB_FIND_LOCATION(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dbStartId = property(_MicroWinExecInterface.DB_FIND_LOCATION_dbStartId_get, _MicroWinExecInterface.DB_FIND_LOCATION_dbStartId_set)
    dbId = property(_MicroWinExecInterface.DB_FIND_LOCATION_dbId_get, _MicroWinExecInterface.DB_FIND_LOCATION_dbId_set)
    nStartLine = property(_MicroWinExecInterface.DB_FIND_LOCATION_nStartLine_get, _MicroWinExecInterface.DB_FIND_LOCATION_nStartLine_set)
    nStartCol = property(_MicroWinExecInterface.DB_FIND_LOCATION_nStartCol_get, _MicroWinExecInterface.DB_FIND_LOCATION_nStartCol_set)
    nLine = property(_MicroWinExecInterface.DB_FIND_LOCATION_nLine_get, _MicroWinExecInterface.DB_FIND_LOCATION_nLine_set)
    nCol = property(_MicroWinExecInterface.DB_FIND_LOCATION_nCol_get, _MicroWinExecInterface.DB_FIND_LOCATION_nCol_set)
    nCount = property(_MicroWinExecInterface.DB_FIND_LOCATION_nCount_get, _MicroWinExecInterface.DB_FIND_LOCATION_nCount_set)
    eStartEdtRegion = property(_MicroWinExecInterface.DB_FIND_LOCATION_eStartEdtRegion_get, _MicroWinExecInterface.DB_FIND_LOCATION_eStartEdtRegion_set)
    eEdtRegion = property(_MicroWinExecInterface.DB_FIND_LOCATION_eEdtRegion_get, _MicroWinExecInterface.DB_FIND_LOCATION_eEdtRegion_set)
    bFirstPass = property(_MicroWinExecInterface.DB_FIND_LOCATION_bFirstPass_get, _MicroWinExecInterface.DB_FIND_LOCATION_bFirstPass_set)
    bWrapAround = property(_MicroWinExecInterface.DB_FIND_LOCATION_bWrapAround_get, _MicroWinExecInterface.DB_FIND_LOCATION_bWrapAround_set)
    bNewItem = property(_MicroWinExecInterface.DB_FIND_LOCATION_bNewItem_get, _MicroWinExecInterface.DB_FIND_LOCATION_bNewItem_set)
    bFoundInString = property(_MicroWinExecInterface.DB_FIND_LOCATION_bFoundInString_get, _MicroWinExecInterface.DB_FIND_LOCATION_bFoundInString_set)

    def Initialize(self):
        return _MicroWinExecInterface.DB_FIND_LOCATION_Initialize(self)

    def __init__(self):
        _MicroWinExecInterface.DB_FIND_LOCATION_swiginit(self, _MicroWinExecInterface.new_DB_FIND_LOCATION())
    __swig_destroy__ = _MicroWinExecInterface.delete_DB_FIND_LOCATION

# Register DB_FIND_LOCATION in _MicroWinExecInterface:
_MicroWinExecInterface.DB_FIND_LOCATION_swigregister(DB_FIND_LOCATION)

class GRID_FIND_LOCATION(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def IsValidOperandIndex(self):
        return _MicroWinExecInterface.GRID_FIND_LOCATION_IsValidOperandIndex(self)

    def __init__(self, *args):
        _MicroWinExecInterface.GRID_FIND_LOCATION_swiginit(self, _MicroWinExecInterface.new_GRID_FIND_LOCATION(*args))

    def Initialize(self):
        return _MicroWinExecInterface.GRID_FIND_LOCATION_Initialize(self)
    bFirstPass = property(_MicroWinExecInterface.GRID_FIND_LOCATION_bFirstPass_get, _MicroWinExecInterface.GRID_FIND_LOCATION_bFirstPass_set)
    bInclusive = property(_MicroWinExecInterface.GRID_FIND_LOCATION_bInclusive_get, _MicroWinExecInterface.GRID_FIND_LOCATION_bInclusive_set)
    bWrapAround = property(_MicroWinExecInterface.GRID_FIND_LOCATION_bWrapAround_get, _MicroWinExecInterface.GRID_FIND_LOCATION_bWrapAround_set)
    bNewItem = property(_MicroWinExecInterface.GRID_FIND_LOCATION_bNewItem_get, _MicroWinExecInterface.GRID_FIND_LOCATION_bNewItem_set)
    sCurPos = property(_MicroWinExecInterface.GRID_FIND_LOCATION_sCurPos_get, _MicroWinExecInterface.GRID_FIND_LOCATION_sCurPos_set)
    sStartPos = property(_MicroWinExecInterface.GRID_FIND_LOCATION_sStartPos_get, _MicroWinExecInterface.GRID_FIND_LOCATION_sStartPos_set)
    nInstId = property(_MicroWinExecInterface.GRID_FIND_LOCATION_nInstId_get, _MicroWinExecInterface.GRID_FIND_LOCATION_nInstId_set)
    nSubId = property(_MicroWinExecInterface.GRID_FIND_LOCATION_nSubId_get, _MicroWinExecInterface.GRID_FIND_LOCATION_nSubId_set)
    nCount = property(_MicroWinExecInterface.GRID_FIND_LOCATION_nCount_get, _MicroWinExecInterface.GRID_FIND_LOCATION_nCount_set)
    nNetCount = property(_MicroWinExecInterface.GRID_FIND_LOCATION_nNetCount_get, _MicroWinExecInterface.GRID_FIND_LOCATION_nNetCount_set)
    nElementCount = property(_MicroWinExecInterface.GRID_FIND_LOCATION_nElementCount_get, _MicroWinExecInterface.GRID_FIND_LOCATION_nElementCount_set)
    nOpCount = property(_MicroWinExecInterface.GRID_FIND_LOCATION_nOpCount_get, _MicroWinExecInterface.GRID_FIND_LOCATION_nOpCount_set)
    pCellElementMap = property(_MicroWinExecInterface.GRID_FIND_LOCATION_pCellElementMap_get, _MicroWinExecInterface.GRID_FIND_LOCATION_pCellElementMap_set)
    pCellElement = property(_MicroWinExecInterface.GRID_FIND_LOCATION_pCellElement_get, _MicroWinExecInterface.GRID_FIND_LOCATION_pCellElement_set)
    pCellNetwork = property(_MicroWinExecInterface.GRID_FIND_LOCATION_pCellNetwork_get, _MicroWinExecInterface.GRID_FIND_LOCATION_pCellNetwork_set)
    pLineNetwork = property(_MicroWinExecInterface.GRID_FIND_LOCATION_pLineNetwork_get, _MicroWinExecInterface.GRID_FIND_LOCATION_pLineNetwork_set)
    pNetwork = property(_MicroWinExecInterface.GRID_FIND_LOCATION_pNetwork_get, _MicroWinExecInterface.GRID_FIND_LOCATION_pNetwork_set)
    pCellOperand = property(_MicroWinExecInterface.GRID_FIND_LOCATION_pCellOperand_get, _MicroWinExecInterface.GRID_FIND_LOCATION_pCellOperand_set)
    aPous = property(_MicroWinExecInterface.GRID_FIND_LOCATION_aPous_get)
    aWrapAroundPous = property(_MicroWinExecInterface.GRID_FIND_LOCATION_aWrapAroundPous_get)
    eLanguage = property(_MicroWinExecInterface.GRID_FIND_LOCATION_eLanguage_get, _MicroWinExecInterface.GRID_FIND_LOCATION_eLanguage_set)
    bReplacing = property(_MicroWinExecInterface.GRID_FIND_LOCATION_bReplacing_get, _MicroWinExecInterface.GRID_FIND_LOCATION_bReplacing_set)
    bFoundInString = property(_MicroWinExecInterface.GRID_FIND_LOCATION_bFoundInString_get, _MicroWinExecInterface.GRID_FIND_LOCATION_bFoundInString_set)
    bLastOp = property(_MicroWinExecInterface.GRID_FIND_LOCATION_bLastOp_get, _MicroWinExecInterface.GRID_FIND_LOCATION_bLastOp_set)
    nLastOpRow = property(_MicroWinExecInterface.GRID_FIND_LOCATION_nLastOpRow_get, _MicroWinExecInterface.GRID_FIND_LOCATION_nLastOpRow_set)
    nLastOpCol = property(_MicroWinExecInterface.GRID_FIND_LOCATION_nLastOpCol_get, _MicroWinExecInterface.GRID_FIND_LOCATION_nLastOpCol_set)
    __swig_destroy__ = _MicroWinExecInterface.delete_GRID_FIND_LOCATION

# Register GRID_FIND_LOCATION in _MicroWinExecInterface:
_MicroWinExecInterface.GRID_FIND_LOCATION_swigregister(GRID_FIND_LOCATION)

class GRID_RECTANGLE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MicroWinExecInterface.GRID_RECTANGLE_swiginit(self, _MicroWinExecInterface.new_GRID_RECTANGLE())
    topLeftNetNum = property(_MicroWinExecInterface.GRID_RECTANGLE_topLeftNetNum_get, _MicroWinExecInterface.GRID_RECTANGLE_topLeftNetNum_set)
    topLeftScreenRegion = property(_MicroWinExecInterface.GRID_RECTANGLE_topLeftScreenRegion_get, _MicroWinExecInterface.GRID_RECTANGLE_topLeftScreenRegion_set)
    topLeftOperandLoc = property(_MicroWinExecInterface.GRID_RECTANGLE_topLeftOperandLoc_get, _MicroWinExecInterface.GRID_RECTANGLE_topLeftOperandLoc_set)
    bottomRightNetNum = property(_MicroWinExecInterface.GRID_RECTANGLE_bottomRightNetNum_get, _MicroWinExecInterface.GRID_RECTANGLE_bottomRightNetNum_set)
    bottomRightScreenRegion = property(_MicroWinExecInterface.GRID_RECTANGLE_bottomRightScreenRegion_get, _MicroWinExecInterface.GRID_RECTANGLE_bottomRightScreenRegion_set)
    bottomRightOperandLoc = property(_MicroWinExecInterface.GRID_RECTANGLE_bottomRightOperandLoc_get, _MicroWinExecInterface.GRID_RECTANGLE_bottomRightOperandLoc_set)

    def __eq__(self, rRight):
        return _MicroWinExecInterface.GRID_RECTANGLE___eq__(self, rRight)
    __swig_destroy__ = _MicroWinExecInterface.delete_GRID_RECTANGLE

# Register GRID_RECTANGLE in _MicroWinExecInterface:
_MicroWinExecInterface.GRID_RECTANGLE_swigregister(GRID_RECTANGLE)

class GRID_SELECTION(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MicroWinExecInterface.GRID_SELECTION_swiginit(self, _MicroWinExecInterface.new_GRID_SELECTION(*args))

    def IsMultiSelection(self):
        return _MicroWinExecInterface.GRID_SELECTION_IsMultiSelection(self)

    def __eq__(self, rRight):
        return _MicroWinExecInterface.GRID_SELECTION___eq__(self, rRight)

    def __ne__(self, rRight):
        return _MicroWinExecInterface.GRID_SELECTION___ne__(self, rRight)
    m_sPouId = property(_MicroWinExecInterface.GRID_SELECTION_m_sPouId_get, _MicroWinExecInterface.GRID_SELECTION_m_sPouId_set)
    m_netNumber = property(_MicroWinExecInterface.GRID_SELECTION_m_netNumber_get, _MicroWinExecInterface.GRID_SELECTION_m_netNumber_set)
    m_upperLeftCell = property(_MicroWinExecInterface.GRID_SELECTION_m_upperLeftCell_get, _MicroWinExecInterface.GRID_SELECTION_m_upperLeftCell_set)
    m_lowerRightCell = property(_MicroWinExecInterface.GRID_SELECTION_m_lowerRightCell_get, _MicroWinExecInterface.GRID_SELECTION_m_lowerRightCell_set)
    __swig_destroy__ = _MicroWinExecInterface.delete_GRID_SELECTION

# Register GRID_SELECTION in _MicroWinExecInterface:
_MicroWinExecInterface.GRID_SELECTION_swigregister(GRID_SELECTION)

class GRID_HOTSPOT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MicroWinExecInterface.GRID_HOTSPOT_swiginit(self, _MicroWinExecInterface.new_GRID_HOTSPOT(*args))

    def IsDefault(self):
        return _MicroWinExecInterface.GRID_HOTSPOT_IsDefault(self)

    def IsValid(self):
        return _MicroWinExecInterface.GRID_HOTSPOT_IsValid(self)

    def IsInput(self):
        return _MicroWinExecInterface.GRID_HOTSPOT_IsInput(self)

    def IsOutput(self):
        return _MicroWinExecInterface.GRID_HOTSPOT_IsOutput(self)

    def __eq__(self, rRight):
        return _MicroWinExecInterface.GRID_HOTSPOT___eq__(self, rRight)

    def __ne__(self, rRight):
        return _MicroWinExecInterface.GRID_HOTSPOT___ne__(self, rRight)
    m_loc = property(_MicroWinExecInterface.GRID_HOTSPOT_m_loc_get, _MicroWinExecInterface.GRID_HOTSPOT_m_loc_set)
    m_eAlign = property(_MicroWinExecInterface.GRID_HOTSPOT_m_eAlign_get, _MicroWinExecInterface.GRID_HOTSPOT_m_eAlign_set)
    __swig_destroy__ = _MicroWinExecInterface.delete_GRID_HOTSPOT

# Register GRID_HOTSPOT in _MicroWinExecInterface:
_MicroWinExecInterface.GRID_HOTSPOT_swigregister(GRID_HOTSPOT)

class SELECTION_CLIP_INFO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_numRows = property(_MicroWinExecInterface.SELECTION_CLIP_INFO_m_numRows_get, _MicroWinExecInterface.SELECTION_CLIP_INFO_m_numRows_set)
    m_numCols = property(_MicroWinExecInterface.SELECTION_CLIP_INFO_m_numCols_get, _MicroWinExecInterface.SELECTION_CLIP_INFO_m_numCols_set)
    m_numOriginalRows = property(_MicroWinExecInterface.SELECTION_CLIP_INFO_m_numOriginalRows_get, _MicroWinExecInterface.SELECTION_CLIP_INFO_m_numOriginalRows_set)
    m_numElements = property(_MicroWinExecInterface.SELECTION_CLIP_INFO_m_numElements_get, _MicroWinExecInterface.SELECTION_CLIP_INFO_m_numElements_set)
    m_bBoxInLeftColumn = property(_MicroWinExecInterface.SELECTION_CLIP_INFO_m_bBoxInLeftColumn_get, _MicroWinExecInterface.SELECTION_CLIP_INFO_m_bBoxInLeftColumn_set)
    m_bBoxInRightColumn = property(_MicroWinExecInterface.SELECTION_CLIP_INFO_m_bBoxInRightColumn_get, _MicroWinExecInterface.SELECTION_CLIP_INFO_m_bBoxInRightColumn_set)

    def __init__(self, *args):
        _MicroWinExecInterface.SELECTION_CLIP_INFO_swiginit(self, _MicroWinExecInterface.new_SELECTION_CLIP_INFO(*args))
    __swig_destroy__ = _MicroWinExecInterface.delete_SELECTION_CLIP_INFO

# Register SELECTION_CLIP_INFO in _MicroWinExecInterface:
_MicroWinExecInterface.SELECTION_CLIP_INFO_swigregister(SELECTION_CLIP_INFO)

ENO_NO_POWER_FLOW = _MicroWinExecInterface.ENO_NO_POWER_FLOW
ENO_POWER_FLOW = _MicroWinExecInterface.ENO_POWER_FLOW
ENO_ALWAYS_ON = _MicroWinExecInterface.ENO_ALWAYS_ON
ENO_ERROR = _MicroWinExecInterface.ENO_ERROR
class GRID_BIT_LOGIC_STATUS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bError = property(_MicroWinExecInterface.GRID_BIT_LOGIC_STATUS_bError_get, _MicroWinExecInterface.GRID_BIT_LOGIC_STATUS_bError_set)
    bInFlow = property(_MicroWinExecInterface.GRID_BIT_LOGIC_STATUS_bInFlow_get, _MicroWinExecInterface.GRID_BIT_LOGIC_STATUS_bInFlow_set)
    bOutFlow = property(_MicroWinExecInterface.GRID_BIT_LOGIC_STATUS_bOutFlow_get, _MicroWinExecInterface.GRID_BIT_LOGIC_STATUS_bOutFlow_set)
    bUnused = property(_MicroWinExecInterface.GRID_BIT_LOGIC_STATUS_bUnused_get, _MicroWinExecInterface.GRID_BIT_LOGIC_STATUS_bUnused_set)
    bElementStatus = property(_MicroWinExecInterface.GRID_BIT_LOGIC_STATUS_bElementStatus_get, _MicroWinExecInterface.GRID_BIT_LOGIC_STATUS_bElementStatus_set)

    def __init__(self):
        _MicroWinExecInterface.GRID_BIT_LOGIC_STATUS_swiginit(self, _MicroWinExecInterface.new_GRID_BIT_LOGIC_STATUS())
    __swig_destroy__ = _MicroWinExecInterface.delete_GRID_BIT_LOGIC_STATUS

# Register GRID_BIT_LOGIC_STATUS in _MicroWinExecInterface:
_MicroWinExecInterface.GRID_BIT_LOGIC_STATUS_swigregister(GRID_BIT_LOGIC_STATUS)

class GRID_BOX_STATUS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bError = property(_MicroWinExecInterface.GRID_BOX_STATUS_bError_get, _MicroWinExecInterface.GRID_BOX_STATUS_bError_set)
    bAlwaysOn = property(_MicroWinExecInterface.GRID_BOX_STATUS_bAlwaysOn_get, _MicroWinExecInterface.GRID_BOX_STATUS_bAlwaysOn_set)
    bFlow = property(_MicroWinExecInterface.GRID_BOX_STATUS_bFlow_get, _MicroWinExecInterface.GRID_BOX_STATUS_bFlow_set)
    bUnused = property(_MicroWinExecInterface.GRID_BOX_STATUS_bUnused_get, _MicroWinExecInterface.GRID_BOX_STATUS_bUnused_set)

    def __init__(self):
        _MicroWinExecInterface.GRID_BOX_STATUS_swiginit(self, _MicroWinExecInterface.new_GRID_BOX_STATUS())
    __swig_destroy__ = _MicroWinExecInterface.delete_GRID_BOX_STATUS

# Register GRID_BOX_STATUS in _MicroWinExecInterface:
_MicroWinExecInterface.GRID_BOX_STATUS_swigregister(GRID_BOX_STATUS)

class GRID_OTHER_STATUS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bFlow = property(_MicroWinExecInterface.GRID_OTHER_STATUS_bFlow_get, _MicroWinExecInterface.GRID_OTHER_STATUS_bFlow_set)
    bUnused = property(_MicroWinExecInterface.GRID_OTHER_STATUS_bUnused_get, _MicroWinExecInterface.GRID_OTHER_STATUS_bUnused_set)

    def __init__(self):
        _MicroWinExecInterface.GRID_OTHER_STATUS_swiginit(self, _MicroWinExecInterface.new_GRID_OTHER_STATUS())
    __swig_destroy__ = _MicroWinExecInterface.delete_GRID_OTHER_STATUS

# Register GRID_OTHER_STATUS in _MicroWinExecInterface:
_MicroWinExecInterface.GRID_OTHER_STATUS_swigregister(GRID_OTHER_STATUS)

class GRID_VERTICAL_STATUS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bUpFlow = property(_MicroWinExecInterface.GRID_VERTICAL_STATUS_bUpFlow_get, _MicroWinExecInterface.GRID_VERTICAL_STATUS_bUpFlow_set)
    bDownFlow = property(_MicroWinExecInterface.GRID_VERTICAL_STATUS_bDownFlow_get, _MicroWinExecInterface.GRID_VERTICAL_STATUS_bDownFlow_set)
    bUnused = property(_MicroWinExecInterface.GRID_VERTICAL_STATUS_bUnused_get, _MicroWinExecInterface.GRID_VERTICAL_STATUS_bUnused_set)

    def __init__(self):
        _MicroWinExecInterface.GRID_VERTICAL_STATUS_swiginit(self, _MicroWinExecInterface.new_GRID_VERTICAL_STATUS())
    __swig_destroy__ = _MicroWinExecInterface.delete_GRID_VERTICAL_STATUS

# Register GRID_VERTICAL_STATUS in _MicroWinExecInterface:
_MicroWinExecInterface.GRID_VERTICAL_STATUS_swigregister(GRID_VERTICAL_STATUS)

class GRID_STATUS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MicroWinExecInterface.GRID_STATUS_swiginit(self, _MicroWinExecInterface.new_GRID_STATUS())
    bExecutionStatus = property(_MicroWinExecInterface.GRID_STATUS_bExecutionStatus_get, _MicroWinExecInterface.GRID_STATUS_bExecutionStatus_set)
    bScanned = property(_MicroWinExecInterface.GRID_STATUS_bScanned_get, _MicroWinExecInterface.GRID_STATUS_bScanned_set)
    bUnused = property(_MicroWinExecInterface.GRID_STATUS_bUnused_get, _MicroWinExecInterface.GRID_STATUS_bUnused_set)
    sContactCoilStatus = property(_MicroWinExecInterface.GRID_STATUS_sContactCoilStatus_get, _MicroWinExecInterface.GRID_STATUS_sContactCoilStatus_set)
    sBoxStatus = property(_MicroWinExecInterface.GRID_STATUS_sBoxStatus_get, _MicroWinExecInterface.GRID_STATUS_sBoxStatus_set)
    sOtherStatus = property(_MicroWinExecInterface.GRID_STATUS_sOtherStatus_get, _MicroWinExecInterface.GRID_STATUS_sOtherStatus_set)
    sVerticalStatus = property(_MicroWinExecInterface.GRID_STATUS_sVerticalStatus_get, _MicroWinExecInterface.GRID_STATUS_sVerticalStatus_set)
    __swig_destroy__ = _MicroWinExecInterface.delete_GRID_STATUS

# Register GRID_STATUS in _MicroWinExecInterface:
_MicroWinExecInterface.GRID_STATUS_swigregister(GRID_STATUS)

class GRID_REGION(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MicroWinExecInterface.GRID_REGION_swiginit(self, _MicroWinExecInterface.new_GRID_REGION())
    str1 = property(_MicroWinExecInterface.GRID_REGION_str1_get, _MicroWinExecInterface.GRID_REGION_str1_set)
    align1 = property(_MicroWinExecInterface.GRID_REGION_align1_get, _MicroWinExecInterface.GRID_REGION_align1_set)
    tick1 = property(_MicroWinExecInterface.GRID_REGION_tick1_get, _MicroWinExecInterface.GRID_REGION_tick1_set)
    bStatusValue1 = property(_MicroWinExecInterface.GRID_REGION_bStatusValue1_get, _MicroWinExecInterface.GRID_REGION_bStatusValue1_set)
    str2 = property(_MicroWinExecInterface.GRID_REGION_str2_get, _MicroWinExecInterface.GRID_REGION_str2_set)
    align2 = property(_MicroWinExecInterface.GRID_REGION_align2_get, _MicroWinExecInterface.GRID_REGION_align2_set)
    tick2 = property(_MicroWinExecInterface.GRID_REGION_tick2_get, _MicroWinExecInterface.GRID_REGION_tick2_set)
    bStatusValue2 = property(_MicroWinExecInterface.GRID_REGION_bStatusValue2_get, _MicroWinExecInterface.GRID_REGION_bStatusValue2_set)
    eBracketType = property(_MicroWinExecInterface.GRID_REGION_eBracketType_get, _MicroWinExecInterface.GRID_REGION_eBracketType_set)

    def Store(self, rDest):
        return _MicroWinExecInterface.GRID_REGION_Store(self, rDest)

    def Retrieve(self, rSrc):
        return _MicroWinExecInterface.GRID_REGION_Retrieve(self, rSrc)
    __swig_destroy__ = _MicroWinExecInterface.delete_GRID_REGION

# Register GRID_REGION in _MicroWinExecInterface:
_MicroWinExecInterface.GRID_REGION_swigregister(GRID_REGION)

class GRID_MATRIX_ELEMENT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MicroWinExecInterface.GRID_MATRIX_ELEMENT_swiginit(self, _MicroWinExecInterface.new_GRID_MATRIX_ELEMENT())
    wInstId = property(_MicroWinExecInterface.GRID_MATRIX_ELEMENT_wInstId_get, _MicroWinExecInterface.GRID_MATRIX_ELEMENT_wInstId_set)
    wSubId = property(_MicroWinExecInterface.GRID_MATRIX_ELEMENT_wSubId_get, _MicroWinExecInterface.GRID_MATRIX_ELEMENT_wSubId_set)
    elementType = property(_MicroWinExecInterface.GRID_MATRIX_ELEMENT_elementType_get, _MicroWinExecInterface.GRID_MATRIX_ELEMENT_elementType_set)
    verticalType = property(_MicroWinExecInterface.GRID_MATRIX_ELEMENT_verticalType_get, _MicroWinExecInterface.GRID_MATRIX_ELEMENT_verticalType_set)
    boxTopPoint = property(_MicroWinExecInterface.GRID_MATRIX_ELEMENT_boxTopPoint_get, _MicroWinExecInterface.GRID_MATRIX_ELEMENT_boxTopPoint_set)
    boxBottomPoint = property(_MicroWinExecInterface.GRID_MATRIX_ELEMENT_boxBottomPoint_get, _MicroWinExecInterface.GRID_MATRIX_ELEMENT_boxBottomPoint_set)
    aRegions = property(_MicroWinExecInterface.GRID_MATRIX_ELEMENT_aRegions_get, _MicroWinExecInterface.GRID_MATRIX_ELEMENT_aRegions_set)
    sStatus = property(_MicroWinExecInterface.GRID_MATRIX_ELEMENT_sStatus_get, _MicroWinExecInterface.GRID_MATRIX_ELEMENT_sStatus_set)
    bBreakPoint = property(_MicroWinExecInterface.GRID_MATRIX_ELEMENT_bBreakPoint_get, _MicroWinExecInterface.GRID_MATRIX_ELEMENT_bBreakPoint_set)
    cellLoc = property(_MicroWinExecInterface.GRID_MATRIX_ELEMENT_cellLoc_get, _MicroWinExecInterface.GRID_MATRIX_ELEMENT_cellLoc_set)
    aHotSpots = property(_MicroWinExecInterface.GRID_MATRIX_ELEMENT_aHotSpots_get, _MicroWinExecInterface.GRID_MATRIX_ELEMENT_aHotSpots_set)
    __swig_destroy__ = _MicroWinExecInterface.delete_GRID_MATRIX_ELEMENT

# Register GRID_MATRIX_ELEMENT in _MicroWinExecInterface:
_MicroWinExecInterface.GRID_MATRIX_ELEMENT_swigregister(GRID_MATRIX_ELEMENT)

VAR_IN = _MicroWinExecInterface.VAR_IN
VAR_IN_OUT = _MicroWinExecInterface.VAR_IN_OUT
VAR_OUT = _MicroWinExecInterface.VAR_OUT
VAR = _MicroWinExecInterface.VAR
VAR_EXTERN = _MicroWinExecInterface.VAR_EXTERN
BOOL_LITERAL = _MicroWinExecInterface.BOOL_LITERAL
UNSIGNED_LITERAL = _MicroWinExecInterface.UNSIGNED_LITERAL
SIGNED_LITERAL = _MicroWinExecInterface.SIGNED_LITERAL
TIME_LITERAL = _MicroWinExecInterface.TIME_LITERAL
HEXADECIMAL_LITERAL = _MicroWinExecInterface.HEXADECIMAL_LITERAL
BINARY_LITERAL = _MicroWinExecInterface.BINARY_LITERAL
ASCII_LITERAL = _MicroWinExecInterface.ASCII_LITERAL
REAL_LITERAL = _MicroWinExecInterface.REAL_LITERAL
STRING_LITERAL = _MicroWinExecInterface.STRING_LITERAL
UNDEFINED_LITERAL = _MicroWinExecInterface.UNDEFINED_LITERAL
MW_NONE = _MicroWinExecInterface.MW_NONE
MW_ANY_BIT = _MicroWinExecInterface.MW_ANY_BIT
MW_BOOL = _MicroWinExecInterface.MW_BOOL
MW_BYTE = _MicroWinExecInterface.MW_BYTE
MW_WORD = _MicroWinExecInterface.MW_WORD
MW_DWORD = _MicroWinExecInterface.MW_DWORD
MW_ANY_INT = _MicroWinExecInterface.MW_ANY_INT
MW_INT = _MicroWinExecInterface.MW_INT
MW_DINT = _MicroWinExecInterface.MW_DINT
MW_USINT = _MicroWinExecInterface.MW_USINT
MW_UINT = _MicroWinExecInterface.MW_UINT
MW_UDINT = _MicroWinExecInterface.MW_UDINT
MW_ANY_REAL = _MicroWinExecInterface.MW_ANY_REAL
MW_REAL = _MicroWinExecInterface.MW_REAL
MW_ANY_TIME = _MicroWinExecInterface.MW_ANY_TIME
MW_TIME = _MicroWinExecInterface.MW_TIME
MW_SUBROUTINE_TYPE = _MicroWinExecInterface.MW_SUBROUTINE_TYPE
MW_INTERRUPT_TYPE = _MicroWinExecInterface.MW_INTERRUPT_TYPE
MW_ORGANIZATION_TYPE = _MicroWinExecInterface.MW_ORGANIZATION_TYPE
MW_CHAR = _MicroWinExecInterface.MW_CHAR
MW_ANY_STRING = _MicroWinExecInterface.MW_ANY_STRING
MW_STRING = _MicroWinExecInterface.MW_STRING
MW_NETR_STRUCT = _MicroWinExecInterface.MW_NETR_STRUCT
MW_PID_STRUCT = _MicroWinExecInterface.MW_PID_STRUCT
MW_TON = _MicroWinExecInterface.MW_TON
MW_TOF = _MicroWinExecInterface.MW_TOF
MW_TP = _MicroWinExecInterface.MW_TP
MW_CTU = _MicroWinExecInterface.MW_CTU
MW_CTD = _MicroWinExecInterface.MW_CTD
MW_CTUD = _MicroWinExecInterface.MW_CTUD
MW_RS = _MicroWinExecInterface.MW_RS
MW_SR = _MicroWinExecInterface.MW_SR
MW_POWER_FLOW = _MicroWinExecInterface.MW_POWER_FLOW
MW_ANY_POU = _MicroWinExecInterface.MW_ANY_POU
MW_ANY_CTR = _MicroWinExecInterface.MW_ANY_CTR
MW_ANY_TMR = _MicroWinExecInterface.MW_ANY_TMR
MW_LATCHES = _MicroWinExecInterface.MW_LATCHES
MW_ANY_BOOL = _MicroWinExecInterface.MW_ANY_BOOL
MW_ANY_BYTE = _MicroWinExecInterface.MW_ANY_BYTE
MW_ANY_WORD = _MicroWinExecInterface.MW_ANY_WORD
MW_ANY_DWORD = _MicroWinExecInterface.MW_ANY_DWORD
MW_BOOLS = _MicroWinExecInterface.MW_BOOLS
MW_BYTES = _MicroWinExecInterface.MW_BYTES
MW_WORDS = _MicroWinExecInterface.MW_WORDS
MW_DWORDS = _MicroWinExecInterface.MW_DWORDS
class DATA_TYPE_MASK(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MicroWinExecInterface.DATA_TYPE_MASK_swiginit(self, _MicroWinExecInterface.new_DATA_TYPE_MASK(*args))

    def __eq__(self, *args):
        return _MicroWinExecInterface.DATA_TYPE_MASK___eq__(self, *args)
    ANY_BIT = property(_MicroWinExecInterface.DATA_TYPE_MASK_ANY_BIT_get, _MicroWinExecInterface.DATA_TYPE_MASK_ANY_BIT_set)
    BOOL = property(_MicroWinExecInterface.DATA_TYPE_MASK_BOOL_get, _MicroWinExecInterface.DATA_TYPE_MASK_BOOL_set)
    BYTE = property(_MicroWinExecInterface.DATA_TYPE_MASK_BYTE_get, _MicroWinExecInterface.DATA_TYPE_MASK_BYTE_set)
    WORD = property(_MicroWinExecInterface.DATA_TYPE_MASK_WORD_get, _MicroWinExecInterface.DATA_TYPE_MASK_WORD_set)
    DWORD = property(_MicroWinExecInterface.DATA_TYPE_MASK_DWORD_get, _MicroWinExecInterface.DATA_TYPE_MASK_DWORD_set)
    ANY_INT = property(_MicroWinExecInterface.DATA_TYPE_MASK_ANY_INT_get, _MicroWinExecInterface.DATA_TYPE_MASK_ANY_INT_set)
    INT = property(_MicroWinExecInterface.DATA_TYPE_MASK_INT_get, _MicroWinExecInterface.DATA_TYPE_MASK_INT_set)
    DINT = property(_MicroWinExecInterface.DATA_TYPE_MASK_DINT_get, _MicroWinExecInterface.DATA_TYPE_MASK_DINT_set)
    USINT = property(_MicroWinExecInterface.DATA_TYPE_MASK_USINT_get, _MicroWinExecInterface.DATA_TYPE_MASK_USINT_set)
    UINT = property(_MicroWinExecInterface.DATA_TYPE_MASK_UINT_get, _MicroWinExecInterface.DATA_TYPE_MASK_UINT_set)
    UDINT = property(_MicroWinExecInterface.DATA_TYPE_MASK_UDINT_get, _MicroWinExecInterface.DATA_TYPE_MASK_UDINT_set)
    ANY_REAL = property(_MicroWinExecInterface.DATA_TYPE_MASK_ANY_REAL_get, _MicroWinExecInterface.DATA_TYPE_MASK_ANY_REAL_set)
    REAL = property(_MicroWinExecInterface.DATA_TYPE_MASK_REAL_get, _MicroWinExecInterface.DATA_TYPE_MASK_REAL_set)
    ANY_TIME = property(_MicroWinExecInterface.DATA_TYPE_MASK_ANY_TIME_get, _MicroWinExecInterface.DATA_TYPE_MASK_ANY_TIME_set)
    TIME = property(_MicroWinExecInterface.DATA_TYPE_MASK_TIME_get, _MicroWinExecInterface.DATA_TYPE_MASK_TIME_set)
    SUBROUTINE = property(_MicroWinExecInterface.DATA_TYPE_MASK_SUBROUTINE_get, _MicroWinExecInterface.DATA_TYPE_MASK_SUBROUTINE_set)
    INTERRUPT = property(_MicroWinExecInterface.DATA_TYPE_MASK_INTERRUPT_get, _MicroWinExecInterface.DATA_TYPE_MASK_INTERRUPT_set)
    ORGANIZATION = property(_MicroWinExecInterface.DATA_TYPE_MASK_ORGANIZATION_get, _MicroWinExecInterface.DATA_TYPE_MASK_ORGANIZATION_set)
    CHAR = property(_MicroWinExecInterface.DATA_TYPE_MASK_CHAR_get, _MicroWinExecInterface.DATA_TYPE_MASK_CHAR_set)
    ANY_STRING = property(_MicroWinExecInterface.DATA_TYPE_MASK_ANY_STRING_get, _MicroWinExecInterface.DATA_TYPE_MASK_ANY_STRING_set)
    STRING = property(_MicroWinExecInterface.DATA_TYPE_MASK_STRING_get, _MicroWinExecInterface.DATA_TYPE_MASK_STRING_set)
    NETR_STRUCT = property(_MicroWinExecInterface.DATA_TYPE_MASK_NETR_STRUCT_get, _MicroWinExecInterface.DATA_TYPE_MASK_NETR_STRUCT_set)
    PID_STRUCT = property(_MicroWinExecInterface.DATA_TYPE_MASK_PID_STRUCT_get, _MicroWinExecInterface.DATA_TYPE_MASK_PID_STRUCT_set)
    TON = property(_MicroWinExecInterface.DATA_TYPE_MASK_TON_get, _MicroWinExecInterface.DATA_TYPE_MASK_TON_set)
    TOF = property(_MicroWinExecInterface.DATA_TYPE_MASK_TOF_get, _MicroWinExecInterface.DATA_TYPE_MASK_TOF_set)
    TP = property(_MicroWinExecInterface.DATA_TYPE_MASK_TP_get, _MicroWinExecInterface.DATA_TYPE_MASK_TP_set)
    CTU = property(_MicroWinExecInterface.DATA_TYPE_MASK_CTU_get, _MicroWinExecInterface.DATA_TYPE_MASK_CTU_set)
    CTD = property(_MicroWinExecInterface.DATA_TYPE_MASK_CTD_get, _MicroWinExecInterface.DATA_TYPE_MASK_CTD_set)
    CTUD = property(_MicroWinExecInterface.DATA_TYPE_MASK_CTUD_get, _MicroWinExecInterface.DATA_TYPE_MASK_CTUD_set)
    RS = property(_MicroWinExecInterface.DATA_TYPE_MASK_RS_get, _MicroWinExecInterface.DATA_TYPE_MASK_RS_set)
    SR = property(_MicroWinExecInterface.DATA_TYPE_MASK_SR_get, _MicroWinExecInterface.DATA_TYPE_MASK_SR_set)
    POWER_FLOW = property(_MicroWinExecInterface.DATA_TYPE_MASK_POWER_FLOW_get, _MicroWinExecInterface.DATA_TYPE_MASK_POWER_FLOW_set)
    __swig_destroy__ = _MicroWinExecInterface.delete_DATA_TYPE_MASK

# Register DATA_TYPE_MASK in _MicroWinExecInterface:
_MicroWinExecInterface.DATA_TYPE_MASK_swigregister(DATA_TYPE_MASK)

S7_LAD = _MicroWinExecInterface.S7_LAD
S7_STL = _MicroWinExecInterface.S7_STL
S7_FBD = _MicroWinExecInterface.S7_FBD
IEC_LD = _MicroWinExecInterface.IEC_LD
IEC_FBD = _MicroWinExecInterface.IEC_FBD
S7_NONE = _MicroWinExecInterface.S7_NONE
MAX_EDITOR = _MicroWinExecInterface.MAX_EDITOR
IEC_STL = _MicroWinExecInterface.IEC_STL
NO_MEM_ONLY = _MicroWinExecInterface.NO_MEM_ONLY
I_MEM_ONLY = _MicroWinExecInterface.I_MEM_ONLY
Q_MEM_ONLY = _MicroWinExecInterface.Q_MEM_ONLY
AI_MEM_ONLY = _MicroWinExecInterface.AI_MEM_ONLY
AQ_MEM_ONLY = _MicroWinExecInterface.AQ_MEM_ONLY
V_MEM_ONLY = _MicroWinExecInterface.V_MEM_ONLY
M_MEM_ONLY = _MicroWinExecInterface.M_MEM_ONLY
T_MEM_ONLY = _MicroWinExecInterface.T_MEM_ONLY
C_MEM_ONLY = _MicroWinExecInterface.C_MEM_ONLY
HC_MEM_ONLY = _MicroWinExecInterface.HC_MEM_ONLY
SM_MEM_ONLY = _MicroWinExecInterface.SM_MEM_ONLY
SCR_MEM_ONLY = _MicroWinExecInterface.SCR_MEM_ONLY
SD_MEM_ONLY = _MicroWinExecInterface.SD_MEM_ONLY
AC_MEM_ONLY = _MicroWinExecInterface.AC_MEM_ONLY
L_MEM_ONLY = _MicroWinExecInterface.L_MEM_ONLY
INDIRECT_MOD = _MicroWinExecInterface.INDIRECT_MOD
ADDRESSOF_MOD = _MicroWinExecInterface.ADDRESSOF_MOD
LITERAL_ONLY = _MicroWinExecInterface.LITERAL_ONLY
SBR_MEM_ONLY = _MicroWinExecInterface.SBR_MEM_ONLY
INT_MEM_ONLY = _MicroWinExecInterface.INT_MEM_ONLY
OB_MEM_ONLY = _MicroWinExecInterface.OB_MEM_ONLY
POU_MEM_ONLY = _MicroWinExecInterface.POU_MEM_ONLY
class MEMORY_AREA_MASK(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MicroWinExecInterface.MEMORY_AREA_MASK_swiginit(self, _MicroWinExecInterface.new_MEMORY_AREA_MASK(*args))

    def __eq__(self, *args):
        return _MicroWinExecInterface.MEMORY_AREA_MASK___eq__(self, *args)
    discreteInputMask = property(_MicroWinExecInterface.MEMORY_AREA_MASK_discreteInputMask_get, _MicroWinExecInterface.MEMORY_AREA_MASK_discreteInputMask_set)
    discreteOutputMask = property(_MicroWinExecInterface.MEMORY_AREA_MASK_discreteOutputMask_get, _MicroWinExecInterface.MEMORY_AREA_MASK_discreteOutputMask_set)
    analogInputMask = property(_MicroWinExecInterface.MEMORY_AREA_MASK_analogInputMask_get, _MicroWinExecInterface.MEMORY_AREA_MASK_analogInputMask_set)
    analogOutputMask = property(_MicroWinExecInterface.MEMORY_AREA_MASK_analogOutputMask_get, _MicroWinExecInterface.MEMORY_AREA_MASK_analogOutputMask_set)
    dataMask = property(_MicroWinExecInterface.MEMORY_AREA_MASK_dataMask_get, _MicroWinExecInterface.MEMORY_AREA_MASK_dataMask_set)
    flagMask = property(_MicroWinExecInterface.MEMORY_AREA_MASK_flagMask_get, _MicroWinExecInterface.MEMORY_AREA_MASK_flagMask_set)
    timerMask = property(_MicroWinExecInterface.MEMORY_AREA_MASK_timerMask_get, _MicroWinExecInterface.MEMORY_AREA_MASK_timerMask_set)
    counterMask = property(_MicroWinExecInterface.MEMORY_AREA_MASK_counterMask_get, _MicroWinExecInterface.MEMORY_AREA_MASK_counterMask_set)
    highSpeedCounterMask = property(_MicroWinExecInterface.MEMORY_AREA_MASK_highSpeedCounterMask_get, _MicroWinExecInterface.MEMORY_AREA_MASK_highSpeedCounterMask_set)
    systemMask = property(_MicroWinExecInterface.MEMORY_AREA_MASK_systemMask_get, _MicroWinExecInterface.MEMORY_AREA_MASK_systemMask_set)
    stageMask = property(_MicroWinExecInterface.MEMORY_AREA_MASK_stageMask_get, _MicroWinExecInterface.MEMORY_AREA_MASK_stageMask_set)
    systemDataMask = property(_MicroWinExecInterface.MEMORY_AREA_MASK_systemDataMask_get, _MicroWinExecInterface.MEMORY_AREA_MASK_systemDataMask_set)
    accumulatorMask = property(_MicroWinExecInterface.MEMORY_AREA_MASK_accumulatorMask_get, _MicroWinExecInterface.MEMORY_AREA_MASK_accumulatorMask_set)
    localMask = property(_MicroWinExecInterface.MEMORY_AREA_MASK_localMask_get, _MicroWinExecInterface.MEMORY_AREA_MASK_localMask_set)
    indirectAddressingMask = property(_MicroWinExecInterface.MEMORY_AREA_MASK_indirectAddressingMask_get, _MicroWinExecInterface.MEMORY_AREA_MASK_indirectAddressingMask_set)
    addressOfMask = property(_MicroWinExecInterface.MEMORY_AREA_MASK_addressOfMask_get, _MicroWinExecInterface.MEMORY_AREA_MASK_addressOfMask_set)
    literalMask = property(_MicroWinExecInterface.MEMORY_AREA_MASK_literalMask_get, _MicroWinExecInterface.MEMORY_AREA_MASK_literalMask_set)
    subroutine = property(_MicroWinExecInterface.MEMORY_AREA_MASK_subroutine_get, _MicroWinExecInterface.MEMORY_AREA_MASK_subroutine_set)
    interrupt = property(_MicroWinExecInterface.MEMORY_AREA_MASK_interrupt_get, _MicroWinExecInterface.MEMORY_AREA_MASK_interrupt_set)
    organization = property(_MicroWinExecInterface.MEMORY_AREA_MASK_organization_get, _MicroWinExecInterface.MEMORY_AREA_MASK_organization_set)
    unused = property(_MicroWinExecInterface.MEMORY_AREA_MASK_unused_get, _MicroWinExecInterface.MEMORY_AREA_MASK_unused_set)
    __swig_destroy__ = _MicroWinExecInterface.delete_MEMORY_AREA_MASK

# Register MEMORY_AREA_MASK in _MicroWinExecInterface:
_MicroWinExecInterface.MEMORY_AREA_MASK_swigregister(MEMORY_AREA_MASK)

NO_SIZE = _MicroWinExecInterface.NO_SIZE
BIT_SIZE = _MicroWinExecInterface.BIT_SIZE
BYTE_SIZE = _MicroWinExecInterface.BYTE_SIZE
WORD_SIZE = _MicroWinExecInterface.WORD_SIZE
DWORD_SIZE = _MicroWinExecInterface.DWORD_SIZE
STRING_SIZE = _MicroWinExecInterface.STRING_SIZE
UNUSED = _MicroWinExecInterface.UNUSED
UNDEFINED = _MicroWinExecInterface.UNDEFINED
class OPERAND_SIZE_MASK(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MicroWinExecInterface.OPERAND_SIZE_MASK_swiginit(self, _MicroWinExecInterface.new_OPERAND_SIZE_MASK(*args))

    def __eq__(self, *args):
        return _MicroWinExecInterface.OPERAND_SIZE_MASK___eq__(self, *args)

    def __and__(self, *args):
        return _MicroWinExecInterface.OPERAND_SIZE_MASK___and__(self, *args)

    def __or__(self, *args):
        return _MicroWinExecInterface.OPERAND_SIZE_MASK___or__(self, *args)
    BIT_SIZE = property(_MicroWinExecInterface.OPERAND_SIZE_MASK_BIT_SIZE_get, _MicroWinExecInterface.OPERAND_SIZE_MASK_BIT_SIZE_set)
    BYTE_SIZE = property(_MicroWinExecInterface.OPERAND_SIZE_MASK_BYTE_SIZE_get, _MicroWinExecInterface.OPERAND_SIZE_MASK_BYTE_SIZE_set)
    WORD_SIZE = property(_MicroWinExecInterface.OPERAND_SIZE_MASK_WORD_SIZE_get, _MicroWinExecInterface.OPERAND_SIZE_MASK_WORD_SIZE_set)
    DWORD_SIZE = property(_MicroWinExecInterface.OPERAND_SIZE_MASK_DWORD_SIZE_get, _MicroWinExecInterface.OPERAND_SIZE_MASK_DWORD_SIZE_set)
    STRING_SIZE = property(_MicroWinExecInterface.OPERAND_SIZE_MASK_STRING_SIZE_get, _MicroWinExecInterface.OPERAND_SIZE_MASK_STRING_SIZE_set)
    UNUSED = property(_MicroWinExecInterface.OPERAND_SIZE_MASK_UNUSED_get, _MicroWinExecInterface.OPERAND_SIZE_MASK_UNUSED_set)
    __swig_destroy__ = _MicroWinExecInterface.delete_OPERAND_SIZE_MASK

# Register OPERAND_SIZE_MASK in _MicroWinExecInterface:
_MicroWinExecInterface.OPERAND_SIZE_MASK_swigregister(OPERAND_SIZE_MASK)

DIRECT_ADDRESS = _MicroWinExecInterface.DIRECT_ADDRESS
ADDRESS_OF = _MicroWinExecInterface.ADDRESS_OF
INDIRECT_ADDRESS = _MicroWinExecInterface.INDIRECT_ADDRESS
INVALID_MODE = _MicroWinExecInterface.INVALID_MODE
class LITERAL_DATA(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_dwData = property(_MicroWinExecInterface.LITERAL_DATA_m_dwData_get, _MicroWinExecInterface.LITERAL_DATA_m_dwData_set)
    m_strData = property(_MicroWinExecInterface.LITERAL_DATA_m_strData_get, _MicroWinExecInterface.LITERAL_DATA_m_strData_set)

    def __init__(self, *args):
        _MicroWinExecInterface.LITERAL_DATA_swiginit(self, _MicroWinExecInterface.new_LITERAL_DATA(*args))
    __swig_destroy__ = _MicroWinExecInterface.delete_LITERAL_DATA

    def __eq__(self, *args):
        return _MicroWinExecInterface.LITERAL_DATA___eq__(self, *args)

    def __ne__(self, *args):
        return _MicroWinExecInterface.LITERAL_DATA___ne__(self, *args)

    def __le__(self, *args):
        return _MicroWinExecInterface.LITERAL_DATA___le__(self, *args)

    def __lt__(self, *args):
        return _MicroWinExecInterface.LITERAL_DATA___lt__(self, *args)

    def __ge__(self, *args):
        return _MicroWinExecInterface.LITERAL_DATA___ge__(self, *args)

    def __gt__(self, *args):
        return _MicroWinExecInterface.LITERAL_DATA___gt__(self, *args)

    def GetLength(self):
        return _MicroWinExecInterface.LITERAL_DATA_GetLength(self)

    def Store(self, rDest):
        return _MicroWinExecInterface.LITERAL_DATA_Store(self, rDest)

    def Retrieve(self, *args):
        return _MicroWinExecInterface.LITERAL_DATA_Retrieve(self, *args)

# Register LITERAL_DATA in _MicroWinExecInterface:
_MicroWinExecInterface.LITERAL_DATA_swigregister(LITERAL_DATA)

class LITERAL_STRUCT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type = property(_MicroWinExecInterface.LITERAL_STRUCT_type_get, _MicroWinExecInterface.LITERAL_STRUCT_type_set)
    size = property(_MicroWinExecInterface.LITERAL_STRUCT_size_get, _MicroWinExecInterface.LITERAL_STRUCT_size_set)
    m_sData = property(_MicroWinExecInterface.LITERAL_STRUCT_m_sData_get, _MicroWinExecInterface.LITERAL_STRUCT_m_sData_set)

    def __init__(self, *args):
        _MicroWinExecInterface.LITERAL_STRUCT_swiginit(self, _MicroWinExecInterface.new_LITERAL_STRUCT(*args))
    __swig_destroy__ = _MicroWinExecInterface.delete_LITERAL_STRUCT

    def __eq__(self, rRight):
        return _MicroWinExecInterface.LITERAL_STRUCT___eq__(self, rRight)

    def __ne__(self, rRight):
        return _MicroWinExecInterface.LITERAL_STRUCT___ne__(self, rRight)

    def __le__(self, rRight):
        return _MicroWinExecInterface.LITERAL_STRUCT___le__(self, rRight)

    def __lt__(self, rRight):
        return _MicroWinExecInterface.LITERAL_STRUCT___lt__(self, rRight)

    def __ge__(self, rRight):
        return _MicroWinExecInterface.LITERAL_STRUCT___ge__(self, rRight)

    def __gt__(self, rRight):
        return _MicroWinExecInterface.LITERAL_STRUCT___gt__(self, rRight)

    def Store(self, rDest):
        return _MicroWinExecInterface.LITERAL_STRUCT_Store(self, rDest)

    def Retrieve(self, rSrc):
        return _MicroWinExecInterface.LITERAL_STRUCT_Retrieve(self, rSrc)

# Register LITERAL_STRUCT in _MicroWinExecInterface:
_MicroWinExecInterface.LITERAL_STRUCT_swigregister(LITERAL_STRUCT)

class ADDRESS_STRUCT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mode = property(_MicroWinExecInterface.ADDRESS_STRUCT_mode_get, _MicroWinExecInterface.ADDRESS_STRUCT_mode_set)
    size = property(_MicroWinExecInterface.ADDRESS_STRUCT_size_get, _MicroWinExecInterface.ADDRESS_STRUCT_size_set)
    memoryArea = property(_MicroWinExecInterface.ADDRESS_STRUCT_memoryArea_get, _MicroWinExecInterface.ADDRESS_STRUCT_memoryArea_set)
    offset = property(_MicroWinExecInterface.ADDRESS_STRUCT_offset_get, _MicroWinExecInterface.ADDRESS_STRUCT_offset_set)

    def __init__(self, *args):
        _MicroWinExecInterface.ADDRESS_STRUCT_swiginit(self, _MicroWinExecInterface.new_ADDRESS_STRUCT(*args))
    __swig_destroy__ = _MicroWinExecInterface.delete_ADDRESS_STRUCT

    def __eq__(self, rRight):
        return _MicroWinExecInterface.ADDRESS_STRUCT___eq__(self, rRight)

    def __ne__(self, rRight):
        return _MicroWinExecInterface.ADDRESS_STRUCT___ne__(self, rRight)

    def __le__(self, rRight):
        return _MicroWinExecInterface.ADDRESS_STRUCT___le__(self, rRight)

    def __lt__(self, rRight):
        return _MicroWinExecInterface.ADDRESS_STRUCT___lt__(self, rRight)

    def __ge__(self, rRight):
        return _MicroWinExecInterface.ADDRESS_STRUCT___ge__(self, rRight)

    def __gt__(self, rRight):
        return _MicroWinExecInterface.ADDRESS_STRUCT___gt__(self, rRight)

    def IsLocal(self):
        return _MicroWinExecInterface.ADDRESS_STRUCT_IsLocal(self)

    def IsGlobal(self):
        return _MicroWinExecInterface.ADDRESS_STRUCT_IsGlobal(self)

    def IsContant(self):
        return _MicroWinExecInterface.ADDRESS_STRUCT_IsContant(self)

    def Store(self, rDest):
        return _MicroWinExecInterface.ADDRESS_STRUCT_Store(self, rDest)

    def Retrieve(self, rSrc):
        return _MicroWinExecInterface.ADDRESS_STRUCT_Retrieve(self, rSrc)

# Register ADDRESS_STRUCT in _MicroWinExecInterface:
_MicroWinExecInterface.ADDRESS_STRUCT_swigregister(ADDRESS_STRUCT)

NO_SCOPE = _MicroWinExecInterface.NO_SCOPE
GLOBAL_SCOPE = _MicroWinExecInterface.GLOBAL_SCOPE
LOCAL_SCOPE = _MicroWinExecInterface.LOCAL_SCOPE
class VAR_SCOPE_MASK(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MicroWinExecInterface.VAR_SCOPE_MASK_swiginit(self, _MicroWinExecInterface.new_VAR_SCOPE_MASK(*args))

    def __eq__(self, *args):
        return _MicroWinExecInterface.VAR_SCOPE_MASK___eq__(self, *args)
    m_wGlobal = property(_MicroWinExecInterface.VAR_SCOPE_MASK_m_wGlobal_get, _MicroWinExecInterface.VAR_SCOPE_MASK_m_wGlobal_set)
    m_wLocal = property(_MicroWinExecInterface.VAR_SCOPE_MASK_m_wLocal_get, _MicroWinExecInterface.VAR_SCOPE_MASK_m_wLocal_set)
    unused = property(_MicroWinExecInterface.VAR_SCOPE_MASK_unused_get, _MicroWinExecInterface.VAR_SCOPE_MASK_unused_set)
    __swig_destroy__ = _MicroWinExecInterface.delete_VAR_SCOPE_MASK

# Register VAR_SCOPE_MASK in _MicroWinExecInterface:
_MicroWinExecInterface.VAR_SCOPE_MASK_swigregister(VAR_SCOPE_MASK)

class VARIABLE_STRUCT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_eMode = property(_MicroWinExecInterface.VARIABLE_STRUCT_m_eMode_get, _MicroWinExecInterface.VARIABLE_STRUCT_m_eMode_set)
    m_mskScope = property(_MicroWinExecInterface.VARIABLE_STRUCT_m_mskScope_get, _MicroWinExecInterface.VARIABLE_STRUCT_m_mskScope_set)
    m_strSymName = property(_MicroWinExecInterface.VARIABLE_STRUCT_m_strSymName_get, _MicroWinExecInterface.VARIABLE_STRUCT_m_strSymName_set)

    def __init__(self, *args):
        _MicroWinExecInterface.VARIABLE_STRUCT_swiginit(self, _MicroWinExecInterface.new_VARIABLE_STRUCT(*args))
    __swig_destroy__ = _MicroWinExecInterface.delete_VARIABLE_STRUCT

    def __eq__(self, rRight):
        return _MicroWinExecInterface.VARIABLE_STRUCT___eq__(self, rRight)

    def __ne__(self, rRight):
        return _MicroWinExecInterface.VARIABLE_STRUCT___ne__(self, rRight)

    def __le__(self, rRight):
        return _MicroWinExecInterface.VARIABLE_STRUCT___le__(self, rRight)

    def __lt__(self, rRight):
        return _MicroWinExecInterface.VARIABLE_STRUCT___lt__(self, rRight)

    def __ge__(self, rRight):
        return _MicroWinExecInterface.VARIABLE_STRUCT___ge__(self, rRight)

    def __gt__(self, rRight):
        return _MicroWinExecInterface.VARIABLE_STRUCT___gt__(self, rRight)

    def IsLocal(self):
        return _MicroWinExecInterface.VARIABLE_STRUCT_IsLocal(self)

    def IsGlobal(self):
        return _MicroWinExecInterface.VARIABLE_STRUCT_IsGlobal(self)

    def Store(self, rDest):
        return _MicroWinExecInterface.VARIABLE_STRUCT_Store(self, rDest)

    def Retrieve(self, rSrc):
        return _MicroWinExecInterface.VARIABLE_STRUCT_Retrieve(self, rSrc)

# Register VARIABLE_STRUCT in _MicroWinExecInterface:
_MicroWinExecInterface.VARIABLE_STRUCT_swigregister(VARIABLE_STRUCT)

LITERAL_OPERAND = _MicroWinExecInterface.LITERAL_OPERAND
ADDRESS_OPERAND = _MicroWinExecInterface.ADDRESS_OPERAND
VARIABLE_OPERAND = _MicroWinExecInterface.VARIABLE_OPERAND
NULL_OPERAND = _MicroWinExecInterface.NULL_OPERAND
class DATA_FLAGS_MASK(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    illegalSyntax = property(_MicroWinExecInterface.DATA_FLAGS_MASK_illegalSyntax_get, _MicroWinExecInterface.DATA_FLAGS_MASK_illegalSyntax_set)
    initial = property(_MicroWinExecInterface.DATA_FLAGS_MASK_initial_get, _MicroWinExecInterface.DATA_FLAGS_MASK_initial_set)
    OldScope = property(_MicroWinExecInterface.DATA_FLAGS_MASK_OldScope_get, _MicroWinExecInterface.DATA_FLAGS_MASK_OldScope_set)
    actuallyForced = property(_MicroWinExecInterface.DATA_FLAGS_MASK_actuallyForced_get, _MicroWinExecInterface.DATA_FLAGS_MASK_actuallyForced_set)
    partiallyForced = property(_MicroWinExecInterface.DATA_FLAGS_MASK_partiallyForced_get, _MicroWinExecInterface.DATA_FLAGS_MASK_partiallyForced_set)
    indirectlyForced = property(_MicroWinExecInterface.DATA_FLAGS_MASK_indirectlyForced_get, _MicroWinExecInterface.DATA_FLAGS_MASK_indirectlyForced_set)
    ignoreInXref = property(_MicroWinExecInterface.DATA_FLAGS_MASK_ignoreInXref_get, _MicroWinExecInterface.DATA_FLAGS_MASK_ignoreInXref_set)
    reserved = property(_MicroWinExecInterface.DATA_FLAGS_MASK_reserved_get, _MicroWinExecInterface.DATA_FLAGS_MASK_reserved_set)

    def __eq__(self, *args):
        return _MicroWinExecInterface.DATA_FLAGS_MASK___eq__(self, *args)

    def __init__(self):
        _MicroWinExecInterface.DATA_FLAGS_MASK_swiginit(self, _MicroWinExecInterface.new_DATA_FLAGS_MASK())
    __swig_destroy__ = _MicroWinExecInterface.delete_DATA_FLAGS_MASK

# Register DATA_FLAGS_MASK in _MicroWinExecInterface:
_MicroWinExecInterface.DATA_FLAGS_MASK_swigregister(DATA_FLAGS_MASK)

class COperand(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_eType = property(_MicroWinExecInterface.COperand_m_eType_get, _MicroWinExecInterface.COperand_m_eType_set)
    m_sLiteral = property(_MicroWinExecInterface.COperand_m_sLiteral_get, _MicroWinExecInterface.COperand_m_sLiteral_set)
    m_sAddress = property(_MicroWinExecInterface.COperand_m_sAddress_get, _MicroWinExecInterface.COperand_m_sAddress_set)
    m_sVariable = property(_MicroWinExecInterface.COperand_m_sVariable_get, _MicroWinExecInterface.COperand_m_sVariable_set)
    m_mskFlags = property(_MicroWinExecInterface.COperand_m_mskFlags_get, _MicroWinExecInterface.COperand_m_mskFlags_set)
    m_bUnscanned = property(_MicroWinExecInterface.COperand_m_bUnscanned_get, _MicroWinExecInterface.COperand_m_bUnscanned_set)
    m_bBoxError = property(_MicroWinExecInterface.COperand_m_bBoxError_get, _MicroWinExecInterface.COperand_m_bBoxError_set)

    def __init__(self, *args):
        _MicroWinExecInterface.COperand_swiginit(self, _MicroWinExecInterface.new_COperand(*args))
    __swig_destroy__ = _MicroWinExecInterface.delete_COperand

    def __eq__(self, rRight):
        return _MicroWinExecInterface.COperand___eq__(self, rRight)

    def __ne__(self, rRight):
        return _MicroWinExecInterface.COperand___ne__(self, rRight)

    def __le__(self, rRight):
        return _MicroWinExecInterface.COperand___le__(self, rRight)

    def __lt__(self, rRight):
        return _MicroWinExecInterface.COperand___lt__(self, rRight)

    def __ge__(self, rRight):
        return _MicroWinExecInterface.COperand___ge__(self, rRight)

    def __gt__(self, rRight):
        return _MicroWinExecInterface.COperand___gt__(self, rRight)

    def IsLiteral(self):
        return _MicroWinExecInterface.COperand_IsLiteral(self)

    def IsAddress(self):
        return _MicroWinExecInterface.COperand_IsAddress(self)

    def IsVariable(self):
        return _MicroWinExecInterface.COperand_IsVariable(self)

    def Store(self, rDest):
        return _MicroWinExecInterface.COperand_Store(self, rDest)

    def Retrieve(self, rSrc):
        return _MicroWinExecInterface.COperand_Retrieve(self, rSrc)

    def Empty(self):
        return _MicroWinExecInterface.COperand_Empty(self)

# Register COperand in _MicroWinExecInterface:
_MicroWinExecInterface.COperand_swigregister(COperand)

class __POSITION(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MicroWinExecInterface.__POSITION_swiginit(self, _MicroWinExecInterface.new___POSITION())
    __swig_destroy__ = _MicroWinExecInterface.delete___POSITION

# Register __POSITION in _MicroWinExecInterface:
_MicroWinExecInterface.__POSITION_swigregister(__POSITION)

KEY_EXECUTION_STATUS = _MicroWinExecInterface.KEY_EXECUTION_STATUS
class STAT_RECTANGLE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MicroWinExecInterface.STAT_RECTANGLE_swiginit(self, _MicroWinExecInterface.new_STAT_RECTANGLE(*args))

    def __eq__(self, rRight):
        return _MicroWinExecInterface.STAT_RECTANGLE___eq__(self, rRight)
    m_nTopNet = property(_MicroWinExecInterface.STAT_RECTANGLE_m_nTopNet_get, _MicroWinExecInterface.STAT_RECTANGLE_m_nTopNet_set)
    m_nTopLine = property(_MicroWinExecInterface.STAT_RECTANGLE_m_nTopLine_get, _MicroWinExecInterface.STAT_RECTANGLE_m_nTopLine_set)
    m_nBotNet = property(_MicroWinExecInterface.STAT_RECTANGLE_m_nBotNet_get, _MicroWinExecInterface.STAT_RECTANGLE_m_nBotNet_set)
    m_nBotLine = property(_MicroWinExecInterface.STAT_RECTANGLE_m_nBotLine_get, _MicroWinExecInterface.STAT_RECTANGLE_m_nBotLine_set)
    __swig_destroy__ = _MicroWinExecInterface.delete_STAT_RECTANGLE

# Register STAT_RECTANGLE in _MicroWinExecInterface:
_MicroWinExecInterface.STAT_RECTANGLE_swigregister(STAT_RECTANGLE)

class SYSTEMTIME(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    wYear = property(_MicroWinExecInterface.SYSTEMTIME_wYear_get, _MicroWinExecInterface.SYSTEMTIME_wYear_set)
    wMonth = property(_MicroWinExecInterface.SYSTEMTIME_wMonth_get, _MicroWinExecInterface.SYSTEMTIME_wMonth_set)
    wDayOfWeek = property(_MicroWinExecInterface.SYSTEMTIME_wDayOfWeek_get, _MicroWinExecInterface.SYSTEMTIME_wDayOfWeek_set)
    wDay = property(_MicroWinExecInterface.SYSTEMTIME_wDay_get, _MicroWinExecInterface.SYSTEMTIME_wDay_set)
    wHour = property(_MicroWinExecInterface.SYSTEMTIME_wHour_get, _MicroWinExecInterface.SYSTEMTIME_wHour_set)
    wMinute = property(_MicroWinExecInterface.SYSTEMTIME_wMinute_get, _MicroWinExecInterface.SYSTEMTIME_wMinute_set)
    wSecond = property(_MicroWinExecInterface.SYSTEMTIME_wSecond_get, _MicroWinExecInterface.SYSTEMTIME_wSecond_set)
    wMilliseconds = property(_MicroWinExecInterface.SYSTEMTIME_wMilliseconds_get, _MicroWinExecInterface.SYSTEMTIME_wMilliseconds_set)

    def __init__(self):
        _MicroWinExecInterface.SYSTEMTIME_swiginit(self, _MicroWinExecInterface.new_SYSTEMTIME())
    __swig_destroy__ = _MicroWinExecInterface.delete_SYSTEMTIME

# Register SYSTEMTIME in _MicroWinExecInterface:
_MicroWinExecInterface.SYSTEMTIME_swigregister(SYSTEMTIME)

eSIGNAL_TYPE_MODULE = _MicroWinExecInterface.eSIGNAL_TYPE_MODULE
eSIGNAL_TYPE_MOTION = _MicroWinExecInterface.eSIGNAL_TYPE_MOTION
eSIGNAL_TYPE_DATA_LOG = _MicroWinExecInterface.eSIGNAL_TYPE_DATA_LOG
class SDBData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MicroWinExecInterface.SDBData_swiginit(self, _MicroWinExecInterface.new_SDBData(*args))
    __swig_destroy__ = _MicroWinExecInterface.delete_SDBData

    def __eq__(self, rSrc):
        return _MicroWinExecInterface.SDBData___eq__(self, rSrc)

    def SetPLCFeaturesAccess(self, pIProProfile, pIComm, cMWNetInfo):
        return _MicroWinExecInterface.SDBData_SetPLCFeaturesAccess(self, pIProProfile, pIComm, cMWNetInfo)

    def SetTargetAddr(self, cMWNetInfo):
        return _MicroWinExecInterface.SDBData_SetTargetAddr(self, cMWNetInfo)

    def SetPLCDefault(self, rstrType, rstrVer):
        return _MicroWinExecInterface.SDBData_SetPLCDefault(self, rstrType, rstrVer)

    def GetParamID(self, eType, nSlot):
        return _MicroWinExecInterface.SDBData_GetParamID(self, eType, nSlot)

    def IsSmartModuleDataFileFound(self):
        return _MicroWinExecInterface.SDBData_IsSmartModuleDataFileFound(self)

    def SetBlockData(self, nParamSize, ppbyParamData):
        return _MicroWinExecInterface.SDBData_SetBlockData(self, nParamSize, ppbyParamData)

    def GetBlockData(self, pnParamBytes, pbyParamData, rDLData):
        return _MicroWinExecInterface.SDBData_GetBlockData(self, pnParamBytes, pbyParamData, rDLData)

    def Dump(self, dc, eBlock):
        return _MicroWinExecInterface.SDBData_Dump(self, dc, eBlock)

    def GetClsId(self):
        return _MicroWinExecInterface.SDBData_GetClsId(self)

    def QueryBase(self, rBaseId):
        return _MicroWinExecInterface.SDBData_QueryBase(self, rBaseId)

    def Clone(self):
        return _MicroWinExecInterface.SDBData_Clone(self)

    @staticmethod
    def Factory():
        return _MicroWinExecInterface.SDBData_Factory()

    def Empty(self, *args):
        return _MicroWinExecInterface.SDBData_Empty(self, *args)

    def ValidateConfiguration(self):
        return _MicroWinExecInterface.SDBData_ValidateConfiguration(self)

    def GetNumModules(self, *args):
        return _MicroWinExecInterface.SDBData_GetNumModules(self, *args)

    def VerifyExpansionModules(self):
        return _MicroWinExecInterface.SDBData_VerifyExpansionModules(self)

    def IsSignalBoardValid(self):
        return _MicroWinExecInterface.SDBData_IsSignalBoardValid(self)
    m_common = property(_MicroWinExecInterface.SDBData_m_common_get, _MicroWinExecInterface.SDBData_m_common_set)
    m_cpu = property(_MicroWinExecInterface.SDBData_m_cpu_get, _MicroWinExecInterface.SDBData_m_cpu_set)
    m_signalBoard = property(_MicroWinExecInterface.SDBData_m_signalBoard_get, _MicroWinExecInterface.SDBData_m_signalBoard_set)

# Register SDBData in _MicroWinExecInterface:
_MicroWinExecInterface.SDBData_swigregister(SDBData)

def SDBData_Factory():
    return _MicroWinExecInterface.SDBData_Factory()

__REQUIRED_RPCNDR_H_VERSION__ = _MicroWinExecInterface.__REQUIRED_RPCNDR_H_VERSION__
MONIKER_NAME = _MicroWinExecInterface.MONIKER_NAME
cCOMMCOMPASS_HIGHEST_STATION_ADDRESS = _MicroWinExecInterface.cCOMMCOMPASS_HIGHEST_STATION_ADDRESS
cCOMMCOMPASS_MAX_AP_NAME_SIZE = _MicroWinExecInterface.cCOMMCOMPASS_MAX_AP_NAME_SIZE
cCOMMCOMPASS_MAX_PLC_PASSWORD_SIZE = _MicroWinExecInterface.cCOMMCOMPASS_MAX_PLC_PASSWORD_SIZE
cCOMMCOMPASS_MAX_PASSWORD_HASH_SIZE = _MicroWinExecInterface.cCOMMCOMPASS_MAX_PASSWORD_HASH_SIZE
cCOMMCOMPASS_MAX_PASSWORD_SALT_SIZE = _MicroWinExecInterface.cCOMMCOMPASS_MAX_PASSWORD_SALT_SIZE
cCOMMCOMPASS_MAX_PHONE_SIZE = _MicroWinExecInterface.cCOMMCOMPASS_MAX_PHONE_SIZE
cCOMMCOMPASS_MAX_DIALABLE_SIZE = _MicroWinExecInterface.cCOMMCOMPASS_MAX_DIALABLE_SIZE
cCOMMCOMPASS_MAX_DEVICE_NAME = _MicroWinExecInterface.cCOMMCOMPASS_MAX_DEVICE_NAME
cCOMMCOMPASS_MAX_DEVICE_VERSION = _MicroWinExecInterface.cCOMMCOMPASS_MAX_DEVICE_VERSION
cCOMMCOMPASS_MAX_PLC_STATIONS = _MicroWinExecInterface.cCOMMCOMPASS_MAX_PLC_STATIONS
cCOMMCOMPASS_DEVICE_TYPE_SIZE = _MicroWinExecInterface.cCOMMCOMPASS_DEVICE_TYPE_SIZE
cCOMMCOMPASS_DEVICE_VERSION_SIZE = _MicroWinExecInterface.cCOMMCOMPASS_DEVICE_VERSION_SIZE
cCOMMCOMPASS_INVALID_IP_ADDRESS = _MicroWinExecInterface.cCOMMCOMPASS_INVALID_IP_ADDRESS
cCOMMCOMPASS_INVALID_PROFIBUS_ADDRESS = _MicroWinExecInterface.cCOMMCOMPASS_INVALID_PROFIBUS_ADDRESS
cCOMMCOMPASS_DEFAULT_PROFIBUS_ADDRESS = _MicroWinExecInterface.cCOMMCOMPASS_DEFAULT_PROFIBUS_ADDRESS
cCOMMCOMPASS_MAX_IP_BYTE_REP = _MicroWinExecInterface.cCOMMCOMPASS_MAX_IP_BYTE_REP
cCOMMCOMPASS_MAX_TSAP_LEN = _MicroWinExecInterface.cCOMMCOMPASS_MAX_TSAP_LEN
cCOMMCOMPASS_MAX_MODULE_PER_DEVICE = _MicroWinExecInterface.cCOMMCOMPASS_MAX_MODULE_PER_DEVICE
cCOMMCOMPASS_MAX_PNIO_FORCE_LOCATIONS = _MicroWinExecInterface.cCOMMCOMPASS_MAX_PNIO_FORCE_LOCATIONS
cCOMMCOMPASS_SEV_MASK = _MicroWinExecInterface.cCOMMCOMPASS_SEV_MASK
cCOMMCOMPASS_SEV_PLC = _MicroWinExecInterface.cCOMMCOMPASS_SEV_PLC
cCOMMCOMPASS_SEV_COMM = _MicroWinExecInterface.cCOMMCOMPASS_SEV_COMM
cCOMMCOMPASS_CLOSE_MODEM_ONLY = _MicroWinExecInterface.cCOMMCOMPASS_CLOSE_MODEM_ONLY
cCOMMCOMPASS_WND_MSG_ADVISE = _MicroWinExecInterface.cCOMMCOMPASS_WND_MSG_ADVISE
eCOMMCOMPASS_WPARAM_STATION_DATA = _MicroWinExecInterface.eCOMMCOMPASS_WPARAM_STATION_DATA
eCOMMCOMPASS_WPARAM_UPDATE_ADDRESS = _MicroWinExecInterface.eCOMMCOMPASS_WPARAM_UPDATE_ADDRESS
eCOMMCOMPASS_WPARAM_IP_STATION_DATA = _MicroWinExecInterface.eCOMMCOMPASS_WPARAM_IP_STATION_DATA
eCOMMCOMPASS_WPARAM_UPDATE_IP_ADDRESS = _MicroWinExecInterface.eCOMMCOMPASS_WPARAM_UPDATE_IP_ADDRESS
eCOMMCOMPASS_WPARAM_ADVISE_TRANSFER_MAX = _MicroWinExecInterface.eCOMMCOMPASS_WPARAM_ADVISE_TRANSFER_MAX
eCOMMCOMPASS_WPARAM_ADVISE_TRANSFERRED_SO_FAR = _MicroWinExecInterface.eCOMMCOMPASS_WPARAM_ADVISE_TRANSFERRED_SO_FAR
eCOMMCOMPASS_WPARAM_ADVISE_INSERTING = _MicroWinExecInterface.eCOMMCOMPASS_WPARAM_ADVISE_INSERTING
cCOMMCOMPASS_WND_MSG_SUCCESS = _MicroWinExecInterface.cCOMMCOMPASS_WND_MSG_SUCCESS
cCOMMCOMPASS_WND_MSG_FAILURE = _MicroWinExecInterface.cCOMMCOMPASS_WND_MSG_FAILURE
eCOMMCOMPASS_MODEM_WPARAM_LOG_STRING = _MicroWinExecInterface.eCOMMCOMPASS_MODEM_WPARAM_LOG_STRING
eCOMMCOMPASS_MODEM_WPARAM_LOG_VALUE = _MicroWinExecInterface.eCOMMCOMPASS_MODEM_WPARAM_LOG_VALUE
eCOMMCOMPASS_MODEM_WPARAM_ACTION = _MicroWinExecInterface.eCOMMCOMPASS_MODEM_WPARAM_ACTION
eCOMMCOMPASS_MODEM_WPARAM_NO_ACTION = _MicroWinExecInterface.eCOMMCOMPASS_MODEM_WPARAM_NO_ACTION
eCOMMCOMPASS_MODEM_WPARAM_VALID = _MicroWinExecInterface.eCOMMCOMPASS_MODEM_WPARAM_VALID
eCOMMCOMPASS_MODEM_WPARAM_INVALID = _MicroWinExecInterface.eCOMMCOMPASS_MODEM_WPARAM_INVALID
eCOMMCOMPASS_MODEM_WPARAM_ABORT = _MicroWinExecInterface.eCOMMCOMPASS_MODEM_WPARAM_ABORT
eCOMMCOMPASS_MODEM_LPARAM_PIN_SUCCESSFUL = _MicroWinExecInterface.eCOMMCOMPASS_MODEM_LPARAM_PIN_SUCCESSFUL
cCOMMCOMPASS_MODEM_MAX_PERFORMANCE = _MicroWinExecInterface.cCOMMCOMPASS_MODEM_MAX_PERFORMANCE
cCOMMCOMPASS_MODEM_MAX_WAIT_FOR_HANGUP = _MicroWinExecInterface.cCOMMCOMPASS_MODEM_MAX_WAIT_FOR_HANGUP
eCOMMCOMPASS_WM_MODEM_LOG_STATUS = _MicroWinExecInterface.eCOMMCOMPASS_WM_MODEM_LOG_STATUS
eCOMMCOMPASS_WM_MODEM_CONNECTED = _MicroWinExecInterface.eCOMMCOMPASS_WM_MODEM_CONNECTED
eCOMMCOMPASS_WM_MODEM_DISCONNECTED = _MicroWinExecInterface.eCOMMCOMPASS_WM_MODEM_DISCONNECTED
eCOMMCOMPASS_WM_MODEM_PASSWORD = _MicroWinExecInterface.eCOMMCOMPASS_WM_MODEM_PASSWORD
eCOMMCOMPASS_WM_MODEM_CALLBACK = _MicroWinExecInterface.eCOMMCOMPASS_WM_MODEM_CALLBACK
eCOMMCOMPASS_WM_MODEM_PIN = _MicroWinExecInterface.eCOMMCOMPASS_WM_MODEM_PIN
eCOMMCOMPASS_WM_MAKECALL = _MicroWinExecInterface.eCOMMCOMPASS_WM_MAKECALL
eCOMMCOMPASS_WM_SENDPIN = _MicroWinExecInterface.eCOMMCOMPASS_WM_SENDPIN
eCOMMCOMPASS_WM_MODEM_PREMATURE_DISCONNECT = _MicroWinExecInterface.eCOMMCOMPASS_WM_MODEM_PREMATURE_DISCONNECT
eCOMMCOMPASS_WM_MODEM_SILENT_CONNECT = _MicroWinExecInterface.eCOMMCOMPASS_WM_MODEM_SILENT_CONNECT
eCOMMCOMPASS_RETAIN_IP_ADDRESS = _MicroWinExecInterface.eCOMMCOMPASS_RETAIN_IP_ADDRESS
eCOMMCOMPASS_DO_NOT_RETAIN_IP_ADDRESS = _MicroWinExecInterface.eCOMMCOMPASS_DO_NOT_RETAIN_IP_ADDRESS
eCOMMCOMPASS_RESTART_COLD = _MicroWinExecInterface.eCOMMCOMPASS_RESTART_COLD
eCOMMCOMPASS_RESTART_WARM = _MicroWinExecInterface.eCOMMCOMPASS_RESTART_WARM
eCOMMCOMPASS_RESTART_HOT = _MicroWinExecInterface.eCOMMCOMPASS_RESTART_HOT
eCOMMCOMPASS_DEVICE_TYPE_NONE = _MicroWinExecInterface.eCOMMCOMPASS_DEVICE_TYPE_NONE
eCOMMCOMPASS_DEVICE_TYPE_PPI_CABLE = _MicroWinExecInterface.eCOMMCOMPASS_DEVICE_TYPE_PPI_CABLE
eCOMMCOMPASS_DEVICE_TYPE_MODEM = _MicroWinExecInterface.eCOMMCOMPASS_DEVICE_TYPE_MODEM
eCOMMCOMPASS_DEVICE_TYPE_MPICARD = _MicroWinExecInterface.eCOMMCOMPASS_DEVICE_TYPE_MPICARD
eCOMMCOMPASS_DEVICE_TYPE_802_CABLE = _MicroWinExecInterface.eCOMMCOMPASS_DEVICE_TYPE_802_CABLE
eCOMMCOMPASS_DEVICE_TYPE_MPI_CABLE = _MicroWinExecInterface.eCOMMCOMPASS_DEVICE_TYPE_MPI_CABLE
eCOMMCOMPASS_DEVICE_TYPE_MPI_TELE = _MicroWinExecInterface.eCOMMCOMPASS_DEVICE_TYPE_MPI_TELE
eCOMMCOMPASS_DEVICE_TYPE_EM_241 = _MicroWinExecInterface.eCOMMCOMPASS_DEVICE_TYPE_EM_241
eCOMMCOMPASS_DEVICE_TYPE_CELL_PHONE = _MicroWinExecInterface.eCOMMCOMPASS_DEVICE_TYPE_CELL_PHONE
eCOMMCOMPASS_DEVICE_TYPE_RADIO_MODEM = _MicroWinExecInterface.eCOMMCOMPASS_DEVICE_TYPE_RADIO_MODEM
eCOMMCOMPASS_DEVICE_TYPE_SERIAL = _MicroWinExecInterface.eCOMMCOMPASS_DEVICE_TYPE_SERIAL
eCOMMCOMPASS_DEVICE_TYPE_TCPIP = _MicroWinExecInterface.eCOMMCOMPASS_DEVICE_TYPE_TCPIP
eCOMMCOMPASS_DEVICE_TYPE_SMART_CABLE = _MicroWinExecInterface.eCOMMCOMPASS_DEVICE_TYPE_SMART_CABLE
eCOMMCOMPASS_DEVICE_TYPE_SMART_USB = _MicroWinExecInterface.eCOMMCOMPASS_DEVICE_TYPE_SMART_USB
eCOMMCOMPASS_DEVICE_TYPE_SMART_MODEM = _MicroWinExecInterface.eCOMMCOMPASS_DEVICE_TYPE_SMART_MODEM
eCOMMCOMPASS_DEVICE_TYPE_SMART_RADIO = _MicroWinExecInterface.eCOMMCOMPASS_DEVICE_TYPE_SMART_RADIO
eCOMMCOMPASS_DEVICE_TYPE_TELE_IE = _MicroWinExecInterface.eCOMMCOMPASS_DEVICE_TYPE_TELE_IE
eCOMMCOMPASS_PROTOCOL_NONE_SELECTED = _MicroWinExecInterface.eCOMMCOMPASS_PROTOCOL_NONE_SELECTED
eCOMMCOMPASS_PROTOCOL_PPI = _MicroWinExecInterface.eCOMMCOMPASS_PROTOCOL_PPI
eCOMMCOMPASS_PROTOCOL_DPT = _MicroWinExecInterface.eCOMMCOMPASS_PROTOCOL_DPT
eCOMMCOMPASS_PROTOCOL_H1 = _MicroWinExecInterface.eCOMMCOMPASS_PROTOCOL_H1
eCOMMCOMPASS_PROTOCOL_ADV_PPI = _MicroWinExecInterface.eCOMMCOMPASS_PROTOCOL_ADV_PPI
eCOMMCOMPASS_BUSPARAM_NONE = _MicroWinExecInterface.eCOMMCOMPASS_BUSPARAM_NONE
eCOMMCOMPASS_BUSPARAM_DP = _MicroWinExecInterface.eCOMMCOMPASS_BUSPARAM_DP
eCOMMCOMPASS_BUSPARAM_STANDARD = _MicroWinExecInterface.eCOMMCOMPASS_BUSPARAM_STANDARD
eCOMMCOMPASS_BUSPARAM_UNIVERSAL = _MicroWinExecInterface.eCOMMCOMPASS_BUSPARAM_UNIVERSAL
eCOMMCOMPASS_BUSPARAM_USER = _MicroWinExecInterface.eCOMMCOMPASS_BUSPARAM_USER
eCOMMCOMPASS_ERROR_NONE = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_NONE
eCOMMCOMPASS_ERROR_INVALIDCONFIG = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_INVALIDCONFIG
eCOMMCOMPASS_ERROR_PDU_TOO_LARGE = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_PDU_TOO_LARGE
eCOMMCOMPASS_ERROR_RECEIVE_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_RECEIVE_ERROR
eCOMMCOMPASS_ERROR_TIMEOUT = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_TIMEOUT
eCOMMCOMPASS_ERROR_PORT_INUSE = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_PORT_INUSE
eCOMMCOMPASS_ERROR_NOTOPEN = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_NOTOPEN
eCOMMCOMPASS_ERROR_AP_INVALID = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_AP_INVALID
eCOMMCOMPASS_ERROR_INVALID_REQUEST = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_INVALID_REQUEST
eCOMMCOMPASS_ERROR_NOTCLOSED = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_NOTCLOSED
eCOMMCOMPASS_ERROR_TRANSMIT_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_TRANSMIT_ERROR
eCOMMCOMPASS_ERROR_NO_MODEM_CONNECT = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_NO_MODEM_CONNECT
eCOMMCOMPASS_ERROR_NOT_DISCONNECTED = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_NOT_DISCONNECTED
eCOMMCOMPASS_ERROR_VERIFY_CHECKSUM = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_VERIFY_CHECKSUM
eCOMMCOMPASS_ERROR_VERIFY_CRC = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_VERIFY_CRC
eCOMMCOMPASS_ERROR_MODULE_TYPE_UNKNOWN = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_MODULE_TYPE_UNKNOWN
eCOMMCOMPASS_ERROR_MODULE_INVALID_INDEX = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_MODULE_INVALID_INDEX
eCOMMCOMPASS_ERROR_INCONSISTENT_CTREE_INFO = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_INCONSISTENT_CTREE_INFO
eCOMMCOMPASS_ERROR_NO_SET_ACCESS_POINT = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_NO_SET_ACCESS_POINT
eCOMMCOMPASS_ERROR_OPERATION_NOT_SUPPORTED = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_OPERATION_NOT_SUPPORTED
eCOMMCOMPASS_ERROR_IM_PLACEMENT = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_IM_PLACEMENT
eCOMMCOMPASS_ERROR_IM_PLACEMENT_DOWNLOAD = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_IM_PLACEMENT_DOWNLOAD
eCOMMCOMPASS_ERROR_NO_OPEN_INCOMING_LINE = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_NO_OPEN_INCOMING_LINE
eCOMMCOMPASS_ERROR_NO_DEVICE_CONFIG = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_NO_DEVICE_CONFIG
eCOMMCOMPASS_ERROR_MODEM_CONFIG = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_MODEM_CONFIG
eCOMMCOMPASS_ERROR_MODEM_VERIFY = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_MODEM_VERIFY
eCOMMCOMPASS_ERROR_MODEM_INVALID_PIN = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_MODEM_INVALID_PIN
eCOMMCOMPASS_ERROR_MODEM_BAD_SAVE_SETTING = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_MODEM_BAD_SAVE_SETTING
eCOMMCOMPASS_ERROR_NO_MODEM_SELECTED = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_NO_MODEM_SELECTED
eCOMMCOMPASS_ERROR_CE_RXOVER = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_CE_RXOVER
eCOMMCOMPASS_ERROR_CE_OVERRUN = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_CE_OVERRUN
eCOMMCOMPASS_ERROR_CE_RXPARITY = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_CE_RXPARITY
eCOMMCOMPASS_ERROR_CE_FRAME = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_CE_FRAME
eCOMMCOMPASS_ERROR_CE_BREAK = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_CE_BREAK
eCOMMCOMPASS_ERROR_CE_TXFULL = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_CE_TXFULL
eCOMMCOMPASS_ERROR_CE_MODE = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_CE_MODE
eCOMMCOMPASS_ERROR_NETWORK_BAUD_INVALID = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_NETWORK_BAUD_INVALID
eCOMMCOMPASS_ERROR_SOFT_ENTRY_FAILED = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_SOFT_ENTRY_FAILED
eCOMMCOMPASS_ERROR_SOFT_ENTRY_NO_MASTERS = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_SOFT_ENTRY_NO_MASTERS
eCOMMCOMPASS_ERROR_INVALID_IP_ADDRESS = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_INVALID_IP_ADDRESS
eCOMMCOMPASS_ERROR_GET_STRING = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_GET_STRING
eCOMMCOMPASS_ERROR_NET_ADDRESS = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_NET_ADDRESS
eCOMMCOMPASS_ERROR_NO_ADDRESS = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_NO_ADDRESS
eCOMMCOMPASS_ERROR_SCAN_COUNT = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_SCAN_COUNT
eCOMMCOMPASS_ERROR_ALREADY_CONNECTED = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_ALREADY_CONNECTED
eCOMMCOMPASS_ERROR_BLOCK_STATUS = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_BLOCK_STATUS
eCOMMCOMPASS_ERROR_STRING_LANGUAGE = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_STRING_LANGUAGE
eCOMMCOMPASS_ERROR_LOAD_RESOURCE = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_LOAD_RESOURCE
eCOMMCOMPASS_ERROR_AREA_TYPE_MISMATCH = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_AREA_TYPE_MISMATCH
eCOMMCOMPASS_WARNING_MORE_DATA_TO_READ = _MicroWinExecInterface.eCOMMCOMPASS_WARNING_MORE_DATA_TO_READ
eCOMMCOMPASS_ERROR_OUT_MEMORY = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_OUT_MEMORY
eCOMMCOMPASS_ERROR_EEPROM = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_EEPROM
eCOMMCOMPASS_ERROR_INCORRECT_ADDR = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_INCORRECT_ADDR
eCOMMCOMPASS_ERROR_NOT_LAS = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_NOT_LAS
eCOMMCOMPASS_ERROR_INTERFACE = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_INTERFACE
eCOMMCOMPASS_ERROR_CMND_NOT_ALLOWED = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_CMND_NOT_ALLOWED
eCOMMCOMPASS_ERROR_ZERO_ADDRESS = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_ZERO_ADDRESS
eCOMMCOMPASS_ERROR_BAD_CONFIG_DATA = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_BAD_CONFIG_DATA
eCOMMCOMPASS_ERROR_ADDR_NOT_FOUND = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_ADDR_NOT_FOUND
eCOMMCOMPASS_ERROR_NEW_ADDR_EXIST = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_NEW_ADDR_EXIST
eCOMMCOMPASS_ERROR_CANNOT_DELETE_ADDR = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_CANNOT_DELETE_ADDR
eCOMMCOMPASS_ERROR_CANNOT_SET_ADDR = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_CANNOT_SET_ADDR
eCOMMCOMPASS_ERROR_CANNOT_STORE_ADDR = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_CANNOT_STORE_ADDR
eCOMMCOMPASS_ERROR_READ_EX_ID1 = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_READ_EX_ID1
eCOMMCOMPASS_ERROR_ADDR_CONFLICT = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_ADDR_CONFLICT
eCOMMCOMPASS_ERROR_LENGTH = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_LENGTH
eCOMMCOMPASS_ERROR_PROTOCOL = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_PROTOCOL
eCOMMCOMPASS_ERROR_UNKNOWN_NUMBER = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_UNKNOWN_NUMBER
eCOMMCOMPASS_ERROR_NO_CONNECTION = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_NO_CONNECTION
eCOMMCOMPASS_ERROR_NO_DISCONNECTION = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_NO_DISCONNECTION
eCOMMCOMPASS_ERROR_NO_MORE_CONNECTIONS = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_NO_MORE_CONNECTIONS
eCOMMCOMPASS_ERROR_SET_NET_PARAMS = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_SET_NET_PARAMS
eCOMMCOMPASS_ERROR_NO_USB_DEVICE_FOUND = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_NO_USB_DEVICE_FOUND
eCOMMCOMPASS_ERROR_NO_CREATE_USB_DEVICE = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_NO_CREATE_USB_DEVICE
eCOMMCOMPASS_ERROR_LOST_CONNECTION = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_LOST_CONNECTION
eCOMMCOMPASS_ERROR_LOST_ALL_CONNECTIONS = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_LOST_ALL_CONNECTIONS
eCOMMCOMPASS_ERROR_FAIL_SMART_CONFIG = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_FAIL_SMART_CONFIG
eCOMMCOMPASS_ERROR_MASTERS_DETECTED = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_MASTERS_DETECTED
eCOMMCOMPASS_ERROR_NW_STATUS_RSP = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_NW_STATUS_RSP
eCOMMCOMPASS_ERROR_INVALID_BAUD_RATE = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_INVALID_BAUD_RATE
eCOMMCOMPASS_ERROR_187_INVALID_BAUD_RATE = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_187_INVALID_BAUD_RATE
eCOMMCOMPASS_ERROR_NOT_CONNECTED = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_NOT_CONNECTED
eCOMMCOMPASS_ERROR_USB_NOT_SUPPORTED = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_USB_NOT_SUPPORTED
eCOMMCOMPASS_ERROR_PRE_ACCESS_VIOLATION = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_PRE_ACCESS_VIOLATION
eCOMMCOMPASS_ERROR_FAIL_SC_CONFIG_UNKNOWN = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_FAIL_SC_CONFIG_UNKNOWN
eCOMMCOMPASS_ERROR_MODEM_BUSY = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_MODEM_BUSY
eCOMMCOMPASS_ERROR_TAPI_NOT_INITIALIZED = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_TAPI_NOT_INITIALIZED
eCOMMCOMPASS_ERROR_LOCALE_NOT_SET = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_LOCALE_NOT_SET
eCOMMCOMPASS_ERROR_NO_LANGUAGES_FOUND = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_NO_LANGUAGES_FOUND
eCOMMCOMPASS_ERROR_MODEM_SET_NOT_ALLOWED = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_MODEM_SET_NOT_ALLOWED
eCOMMCOMPASS_ERROR_AP_NOT_PREVIOUSLY_SET = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_AP_NOT_PREVIOUSLY_SET
eCOMMCOMPASS_ERROR_NON_MULTI_MASTER_CABLE = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_NON_MULTI_MASTER_CABLE
eCOMMCOMPASS_ERROR_MODEM_DISCONNECT_FIRST = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_MODEM_DISCONNECT_FIRST
eCOMMCOMPASS_ERROR_SINGLE_ACCESS_VIOLATION = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_SINGLE_ACCESS_VIOLATION
eCOMMCOMPASS_ERROR_MULTI_PG_PC_ACCESS = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_MULTI_PG_PC_ACCESS
eCOMMCOMPASS_ERROR_NO_ABORT_HANDLE = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_NO_ABORT_HANDLE
eCOMMCOMPASS_ERROR_SERIOUS_ERROR_CAUGHT = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_SERIOUS_ERROR_CAUGHT
eCOMMCOMPASS_ERROR_REGISTRY_RECOVERY_ERR = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_REGISTRY_RECOVERY_ERR
eCOMMCOMPASS_ERROR_DATA_LOGS_NOT_FOUND = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_DATA_LOGS_NOT_FOUND
eCOMMCOMPASS_ERROR_DATA_LOGS_NOT_SUPPORTED = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_DATA_LOGS_NOT_SUPPORTED
eCOMMCOMPASS_ERROR_UNKNOWN = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_UNKNOWN
eCOMMCOMPASS_ERROR_SWITCH_POS = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_SWITCH_POS
eCOMMCOMPASS_ERROR_PDU_STRUCTURE = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_PDU_STRUCTURE
eCOMMCOMPASS_ERROR_UPLOAD_SEQ = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_UPLOAD_SEQ
eCOMMCOMPASS_ERROR_BUSY = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_BUSY
eCOMMCOMPASS_ERROR_PDU_LENGTH = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_PDU_LENGTH
eCOMMCOMPASS_ERROR_SYNTAX_NAME = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_SYNTAX_NAME
eCOMMCOMPASS_ERROR_COMPILE = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_COMPILE
eCOMMCOMPASS_ERROR_BLOCK_TYPE = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_BLOCK_TYPE
eCOMMCOMPASS_ERROR_BLOCK_IN_EEPROM = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_BLOCK_IN_EEPROM
eCOMMCOMPASS_ERROR_BLOCK_NOT_FOUND = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_BLOCK_NOT_FOUND
eCOMMCOMPASS_ERROR_SDB_PARAMETER = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_SDB_PARAMETER
eCOMMCOMPASS_ERROR_MAX_BLOCK_SIZE = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_MAX_BLOCK_SIZE
eCOMMCOMPASS_ERROR_LENGTH_FIELD = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_LENGTH_FIELD
eCOMMCOMPASS_ERROR_COORD_RULES = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_COORD_RULES
eCOMMCOMPASS_ERROR_PROTECTION = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_PROTECTION
eCOMMCOMPASS_ERROR_SYNTAX_PASSWORD = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_SYNTAX_PASSWORD
eCOMMCOMPASS_ERROR_PASSWORD = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_PASSWORD
eCOMMCOMPASS_ERROR_LINK_LEGITIMIZED = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_LINK_LEGITIMIZED
eCOMMCOMPASS_ERROR_LINK_RELEASED = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_LINK_RELEASED
eCOMMCOMPASS_ERROR_NO_PASSWORD = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_NO_PASSWORD
eCOMMCOMPASS_ERROR_TOD_CLOCK = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_TOD_CLOCK
eCOMMCOMPASS_ERROR_OBJ_ACCESS = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_OBJ_ACCESS
eCOMMCOMPASS_ERROR_ADDRESS = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_ADDRESS
eCOMMCOMPASS_ERROR_DATA_TYPE = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_DATA_TYPE
eCOMMCOMPASS_ERROR_OBJECT_LENGTH = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_OBJECT_LENGTH
eCOMMCOMPASS_ERROR_DATA_TYPE_INCONSISTENT = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_DATA_TYPE_INCONSISTENT
eCOMMCOMPASS_ERROR_HARDWARE_FAULT = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_HARDWARE_FAULT
eCOMMCOMPASS_ERROR_MODE = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_MODE
eCOMMCOMPASS_ERROR_CLOCK_NOT_SET = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_CLOCK_NOT_SET
eCOMMCOMPASS_ERROR_SEMAPHORE_LOCKED = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_SEMAPHORE_LOCKED
eCOMMCOMPASS_ERROR_SEMAPHORE_NOT_SET = _MicroWinExecInterface.eCOMMCOMPASS_ERROR_SEMAPHORE_NOT_SET
eCOMMCOMPASS_BAUDRATE_NONE = _MicroWinExecInterface.eCOMMCOMPASS_BAUDRATE_NONE
eCOMMCOMPASS_BAUDRATE_9_6K = _MicroWinExecInterface.eCOMMCOMPASS_BAUDRATE_9_6K
eCOMMCOMPASS_BAUDRATE_9_6K_B = _MicroWinExecInterface.eCOMMCOMPASS_BAUDRATE_9_6K_B
eCOMMCOMPASS_BAUDRATE_19_2K = _MicroWinExecInterface.eCOMMCOMPASS_BAUDRATE_19_2K
eCOMMCOMPASS_BAUDRATE_38_4K = _MicroWinExecInterface.eCOMMCOMPASS_BAUDRATE_38_4K
eCOMMCOMPASS_BAUDRATE_45_45K = _MicroWinExecInterface.eCOMMCOMPASS_BAUDRATE_45_45K
eCOMMCOMPASS_BAUDRATE_57_6K = _MicroWinExecInterface.eCOMMCOMPASS_BAUDRATE_57_6K
eCOMMCOMPASS_BAUDRATE_93_75K = _MicroWinExecInterface.eCOMMCOMPASS_BAUDRATE_93_75K
eCOMMCOMPASS_BAUDRATE_115_2K = _MicroWinExecInterface.eCOMMCOMPASS_BAUDRATE_115_2K
eCOMMCOMPASS_BAUDRATE_187_5K = _MicroWinExecInterface.eCOMMCOMPASS_BAUDRATE_187_5K
eCOMMCOMPASS_BAUDRATE_500K = _MicroWinExecInterface.eCOMMCOMPASS_BAUDRATE_500K
eCOMMCOMPASS_BAUDRATE_750K = _MicroWinExecInterface.eCOMMCOMPASS_BAUDRATE_750K
eCOMMCOMPASS_BAUDRATE_1_5M = _MicroWinExecInterface.eCOMMCOMPASS_BAUDRATE_1_5M
eCOMMCOMPASS_BAUDRATE_3M = _MicroWinExecInterface.eCOMMCOMPASS_BAUDRATE_3M
eCOMMCOMPASS_BAUDRATE_6M = _MicroWinExecInterface.eCOMMCOMPASS_BAUDRATE_6M
eCOMMCOMPASS_BAUDRATE_12M = _MicroWinExecInterface.eCOMMCOMPASS_BAUDRATE_12M
eCOMMCOMPASS_STATION_TYPE_SLAVE = _MicroWinExecInterface.eCOMMCOMPASS_STATION_TYPE_SLAVE
eCOMMCOMPASS_STATION_TYPE_MASTER_WAITING = _MicroWinExecInterface.eCOMMCOMPASS_STATION_TYPE_MASTER_WAITING
eCOMMCOMPASS_STATION_TYPE_MASTER = _MicroWinExecInterface.eCOMMCOMPASS_STATION_TYPE_MASTER
eCOMMCOMPASS_STATION_TYPE_INVALID = _MicroWinExecInterface.eCOMMCOMPASS_STATION_TYPE_INVALID
eCOMMCOMPASS_BASE_PLC_TYPE_210 = _MicroWinExecInterface.eCOMMCOMPASS_BASE_PLC_TYPE_210
eCOMMCOMPASS_BASE_PLC_TYPE_212 = _MicroWinExecInterface.eCOMMCOMPASS_BASE_PLC_TYPE_212
eCOMMCOMPASS_BASE_PLC_TYPE_214 = _MicroWinExecInterface.eCOMMCOMPASS_BASE_PLC_TYPE_214
eCOMMCOMPASS_BASE_PLC_TYPE_215 = _MicroWinExecInterface.eCOMMCOMPASS_BASE_PLC_TYPE_215
eCOMMCOMPASS_BASE_PLC_TYPE_216 = _MicroWinExecInterface.eCOMMCOMPASS_BASE_PLC_TYPE_216
eCOMMCOMPASS_BASE_PLC_TYPE_221 = _MicroWinExecInterface.eCOMMCOMPASS_BASE_PLC_TYPE_221
eCOMMCOMPASS_BASE_PLC_TYPE_222 = _MicroWinExecInterface.eCOMMCOMPASS_BASE_PLC_TYPE_222
eCOMMCOMPASS_BASE_PLC_TYPE_224 = _MicroWinExecInterface.eCOMMCOMPASS_BASE_PLC_TYPE_224
eCOMMCOMPASS_BASE_PLC_TYPE_226 = _MicroWinExecInterface.eCOMMCOMPASS_BASE_PLC_TYPE_226
eCOMMCOMPASS_BASE_PLC_TYPE_802 = _MicroWinExecInterface.eCOMMCOMPASS_BASE_PLC_TYPE_802
eCOMMCOMPASS_BASE_PLC_TYPE_TD200 = _MicroWinExecInterface.eCOMMCOMPASS_BASE_PLC_TYPE_TD200
eCOMMCOMPASS_BASE_PLC_TYPE_UNKNOWN = _MicroWinExecInterface.eCOMMCOMPASS_BASE_PLC_TYPE_UNKNOWN
eCOMMCOMPASS_BASE_PLC_TYPE_NOT_PRESENT = _MicroWinExecInterface.eCOMMCOMPASS_BASE_PLC_TYPE_NOT_PRESENT
eCOMMCOMPASS_BASE_PLC_TYPE_TD100 = _MicroWinExecInterface.eCOMMCOMPASS_BASE_PLC_TYPE_TD100
eCOMMCOMPASS_RADIO_BAUDRATE_NONE = _MicroWinExecInterface.eCOMMCOMPASS_RADIO_BAUDRATE_NONE
eCOMMCOMPASS_RADIO_BAUDRATE_9600 = _MicroWinExecInterface.eCOMMCOMPASS_RADIO_BAUDRATE_9600
eCOMMCOMPASS_RADIO_BAUDRATE_14400 = _MicroWinExecInterface.eCOMMCOMPASS_RADIO_BAUDRATE_14400
eCOMMCOMPASS_RADIO_BAUDRATE_19200 = _MicroWinExecInterface.eCOMMCOMPASS_RADIO_BAUDRATE_19200
eCOMMCOMPASS_RADIO_BAUDRATE_38400 = _MicroWinExecInterface.eCOMMCOMPASS_RADIO_BAUDRATE_38400
eCOMMCOMPASS_RADIO_BAUDRATE_57600 = _MicroWinExecInterface.eCOMMCOMPASS_RADIO_BAUDRATE_57600
eCOMMCOMPASS_RADIO_BAUDRATE_115200 = _MicroWinExecInterface.eCOMMCOMPASS_RADIO_BAUDRATE_115200
eCOMMCOMPASS_RADIO_PARITY_INVALID = _MicroWinExecInterface.eCOMMCOMPASS_RADIO_PARITY_INVALID
eCOMMCOMPASS_RADIO_PARITY_NONE = _MicroWinExecInterface.eCOMMCOMPASS_RADIO_PARITY_NONE
eCOMMCOMPASS_RADIO_PARITY_EVEN = _MicroWinExecInterface.eCOMMCOMPASS_RADIO_PARITY_EVEN
cCOMMCOMPASS_SERIAL_DATA_BITS = _MicroWinExecInterface.cCOMMCOMPASS_SERIAL_DATA_BITS
cCOMMCOMPASS_SERIAL_ONESTOPBIT = _MicroWinExecInterface.cCOMMCOMPASS_SERIAL_ONESTOPBIT
eCOMMCOMPASS_SERIAL_BAUDRATE_NONE = _MicroWinExecInterface.eCOMMCOMPASS_SERIAL_BAUDRATE_NONE
eCOMMCOMPASS_SERIAL_BAUDRATE_9600 = _MicroWinExecInterface.eCOMMCOMPASS_SERIAL_BAUDRATE_9600
eCOMMCOMPASS_SERIAL_BAUDRATE_14400 = _MicroWinExecInterface.eCOMMCOMPASS_SERIAL_BAUDRATE_14400
eCOMMCOMPASS_SERIAL_BAUDRATE_19200 = _MicroWinExecInterface.eCOMMCOMPASS_SERIAL_BAUDRATE_19200
eCOMMCOMPASS_SERIAL_BAUDRATE_38400 = _MicroWinExecInterface.eCOMMCOMPASS_SERIAL_BAUDRATE_38400
eCOMMCOMPASS_SERIAL_BAUDRATE_57600 = _MicroWinExecInterface.eCOMMCOMPASS_SERIAL_BAUDRATE_57600
eCOMMCOMPASS_SERIAL_BAUDRATE_115200 = _MicroWinExecInterface.eCOMMCOMPASS_SERIAL_BAUDRATE_115200
eCOMMCOMPASS_SERIAL_PARITY_INVALID = _MicroWinExecInterface.eCOMMCOMPASS_SERIAL_PARITY_INVALID
eCOMMCOMPASS_SERIAL_PARITY_NONE = _MicroWinExecInterface.eCOMMCOMPASS_SERIAL_PARITY_NONE
eCOMMCOMPASS_SERIAL_PARITY_EVEN = _MicroWinExecInterface.eCOMMCOMPASS_SERIAL_PARITY_EVEN
eCOMMCOMPASS_NETWORK_TYPE_INVALID = _MicroWinExecInterface.eCOMMCOMPASS_NETWORK_TYPE_INVALID
eCOMMCOMPASS_NETWORK_TYPE_PPI = _MicroWinExecInterface.eCOMMCOMPASS_NETWORK_TYPE_PPI
eCOMMCOMPASS_NETWORK_TYPE_TCPIP = _MicroWinExecInterface.eCOMMCOMPASS_NETWORK_TYPE_TCPIP
class sCOMMCOMPASS_TCPIP_INFO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_lIPAddress = property(_MicroWinExecInterface.sCOMMCOMPASS_TCPIP_INFO_m_lIPAddress_get, _MicroWinExecInterface.sCOMMCOMPASS_TCPIP_INFO_m_lIPAddress_set)
    m_lSubnetMask = property(_MicroWinExecInterface.sCOMMCOMPASS_TCPIP_INFO_m_lSubnetMask_get, _MicroWinExecInterface.sCOMMCOMPASS_TCPIP_INFO_m_lSubnetMask_set)
    m_lDefaultGateway = property(_MicroWinExecInterface.sCOMMCOMPASS_TCPIP_INFO_m_lDefaultGateway_get, _MicroWinExecInterface.sCOMMCOMPASS_TCPIP_INFO_m_lDefaultGateway_set)
    m_byLocTSAP = property(_MicroWinExecInterface.sCOMMCOMPASS_TCPIP_INFO_m_byLocTSAP_get, _MicroWinExecInterface.sCOMMCOMPASS_TCPIP_INFO_m_byLocTSAP_set)
    m_byRemTSAP = property(_MicroWinExecInterface.sCOMMCOMPASS_TCPIP_INFO_m_byRemTSAP_get, _MicroWinExecInterface.sCOMMCOMPASS_TCPIP_INFO_m_byRemTSAP_set)
    m_bUseLifeListTimeout = property(_MicroWinExecInterface.sCOMMCOMPASS_TCPIP_INFO_m_bUseLifeListTimeout_get, _MicroWinExecInterface.sCOMMCOMPASS_TCPIP_INFO_m_bUseLifeListTimeout_set)

    def __init__(self):
        _MicroWinExecInterface.sCOMMCOMPASS_TCPIP_INFO_swiginit(self, _MicroWinExecInterface.new_sCOMMCOMPASS_TCPIP_INFO())
    __swig_destroy__ = _MicroWinExecInterface.delete_sCOMMCOMPASS_TCPIP_INFO

# Register sCOMMCOMPASS_TCPIP_INFO in _MicroWinExecInterface:
_MicroWinExecInterface.sCOMMCOMPASS_TCPIP_INFO_swigregister(sCOMMCOMPASS_TCPIP_INFO)

class sCOMMCOMPASS_NETWORK_INFO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_eNetworkType = property(_MicroWinExecInterface.sCOMMCOMPASS_NETWORK_INFO_m_eNetworkType_get, _MicroWinExecInterface.sCOMMCOMPASS_NETWORK_INFO_m_eNetworkType_set)
    m_nPROFIBUSAddress = property(_MicroWinExecInterface.sCOMMCOMPASS_NETWORK_INFO_m_nPROFIBUSAddress_get, _MicroWinExecInterface.sCOMMCOMPASS_NETWORK_INFO_m_nPROFIBUSAddress_set)
    m_lProcessID = property(_MicroWinExecInterface.sCOMMCOMPASS_NETWORK_INFO_m_lProcessID_get, _MicroWinExecInterface.sCOMMCOMPASS_NETWORK_INFO_m_lProcessID_set)
    m_sTCPIPInfo = property(_MicroWinExecInterface.sCOMMCOMPASS_NETWORK_INFO_m_sTCPIPInfo_get, _MicroWinExecInterface.sCOMMCOMPASS_NETWORK_INFO_m_sTCPIPInfo_set)

    def __init__(self):
        _MicroWinExecInterface.sCOMMCOMPASS_NETWORK_INFO_swiginit(self, _MicroWinExecInterface.new_sCOMMCOMPASS_NETWORK_INFO())
    __swig_destroy__ = _MicroWinExecInterface.delete_sCOMMCOMPASS_NETWORK_INFO

# Register sCOMMCOMPASS_NETWORK_INFO in _MicroWinExecInterface:
_MicroWinExecInterface.sCOMMCOMPASS_NETWORK_INFO_swigregister(sCOMMCOMPASS_NETWORK_INFO)

class sCOMMCOMPASS_CONNECTION_INFO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_sNetInfo = property(_MicroWinExecInterface.sCOMMCOMPASS_CONNECTION_INFO_m_sNetInfo_get, _MicroWinExecInterface.sCOMMCOMPASS_CONNECTION_INFO_m_sNetInfo_set)
    m_nPDUSize = property(_MicroWinExecInterface.sCOMMCOMPASS_CONNECTION_INFO_m_nPDUSize_get, _MicroWinExecInterface.sCOMMCOMPASS_CONNECTION_INFO_m_nPDUSize_set)
    m_bPermanent = property(_MicroWinExecInterface.sCOMMCOMPASS_CONNECTION_INFO_m_bPermanent_get, _MicroWinExecInterface.sCOMMCOMPASS_CONNECTION_INFO_m_bPermanent_set)
    m_bAuthorized = property(_MicroWinExecInterface.sCOMMCOMPASS_CONNECTION_INFO_m_bAuthorized_get, _MicroWinExecInterface.sCOMMCOMPASS_CONNECTION_INFO_m_bAuthorized_set)

    def __init__(self):
        _MicroWinExecInterface.sCOMMCOMPASS_CONNECTION_INFO_swiginit(self, _MicroWinExecInterface.new_sCOMMCOMPASS_CONNECTION_INFO())
    __swig_destroy__ = _MicroWinExecInterface.delete_sCOMMCOMPASS_CONNECTION_INFO

# Register sCOMMCOMPASS_CONNECTION_INFO in _MicroWinExecInterface:
_MicroWinExecInterface.sCOMMCOMPASS_CONNECTION_INFO_swigregister(sCOMMCOMPASS_CONNECTION_INFO)

class sCOMMCOMPASS_TIMEOUTS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    RECEIVE_MASTER_TIMEOUT = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_RECEIVE_MASTER_TIMEOUT_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_RECEIVE_MASTER_TIMEOUT_set)
    MASTER_SLIDER_SLEEP = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_MASTER_SLIDER_SLEEP_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_MASTER_SLIDER_SLEEP_set)
    RCV_PPI_SERIAL_CHAR_DELAY = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_RCV_PPI_SERIAL_CHAR_DELAY_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_RCV_PPI_SERIAL_CHAR_DELAY_set)
    SND_PPI_SERIAL_TIMEOUT = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_SND_PPI_SERIAL_TIMEOUT_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_SND_PPI_SERIAL_TIMEOUT_set)
    PPI_SERIAL_QUIET = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_PPI_SERIAL_QUIET_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_PPI_SERIAL_QUIET_set)
    RCV_PPI_MODEM_CHAR_DELAY = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_RCV_PPI_MODEM_CHAR_DELAY_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_RCV_PPI_MODEM_CHAR_DELAY_set)
    SND_PPI_MODEM_TIMEOUT = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_SND_PPI_MODEM_TIMEOUT_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_SND_PPI_MODEM_TIMEOUT_set)
    RCV_PPI_RADIO_CHAR_DELAY = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_RCV_PPI_RADIO_CHAR_DELAY_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_RCV_PPI_RADIO_CHAR_DELAY_set)
    SND_PPI_RADIO_TIMEOUT = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_SND_PPI_RADIO_TIMEOUT_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_SND_PPI_RADIO_TIMEOUT_set)
    LIFELIST_RADIO_10_BIT_CHAR_DELAY = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_LIFELIST_RADIO_10_BIT_CHAR_DELAY_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_LIFELIST_RADIO_10_BIT_CHAR_DELAY_set)
    LIFELIST_RADIO_11_BIT_CHAR_DELAY = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_LIFELIST_RADIO_11_BIT_CHAR_DELAY_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_LIFELIST_RADIO_11_BIT_CHAR_DELAY_set)
    LIFELIST_PPI_SERIAL_CHAR_DELAY = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_LIFELIST_PPI_SERIAL_CHAR_DELAY_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_LIFELIST_PPI_SERIAL_CHAR_DELAY_set)
    LIFELIST_PPI_MODEM_CHAR_DELAY = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_LIFELIST_PPI_MODEM_CHAR_DELAY_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_LIFELIST_PPI_MODEM_CHAR_DELAY_set)
    LIFELIST_10BIT_MODEM_CHAR_DELAY = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_LIFELIST_10BIT_MODEM_CHAR_DELAY_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_LIFELIST_10BIT_MODEM_CHAR_DELAY_set)
    MODEM_10_BIT_QUIET = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_MODEM_10_BIT_QUIET_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_MODEM_10_BIT_QUIET_set)
    MODEM_10_BIT_SLOT = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_MODEM_10_BIT_SLOT_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_MODEM_10_BIT_SLOT_set)
    MODEM_CONNECT_TIMEOUT = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_MODEM_CONNECT_TIMEOUT_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_MODEM_CONNECT_TIMEOUT_set)
    MODEM_CALLBACK_TIMEOUT = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_MODEM_CALLBACK_TIMEOUT_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_MODEM_CALLBACK_TIMEOUT_set)
    MODEM_DISCONNECT_TIMEOUT = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_MODEM_DISCONNECT_TIMEOUT_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_MODEM_DISCONNECT_TIMEOUT_set)
    MODEM_INITIAL_INFO_TIMEOUT = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_MODEM_INITIAL_INFO_TIMEOUT_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_MODEM_INITIAL_INFO_TIMEOUT_set)
    MODEM_INFORMATION_TIMEOUT = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_MODEM_INFORMATION_TIMEOUT_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_MODEM_INFORMATION_TIMEOUT_set)
    RCV_S7DOS_TIMEOUT = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_RCV_S7DOS_TIMEOUT_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_RCV_S7DOS_TIMEOUT_set)
    RCV_S7DOS_SHORT_TIMEOUT = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_RCV_S7DOS_SHORT_TIMEOUT_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_RCV_S7DOS_SHORT_TIMEOUT_set)
    SND_S7DOS_TIMEOUT = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_SND_S7DOS_TIMEOUT_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_SND_S7DOS_TIMEOUT_set)
    LIFELIST_S7DOS_VXD_TIMEOUT = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_LIFELIST_S7DOS_VXD_TIMEOUT_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_LIFELIST_S7DOS_VXD_TIMEOUT_set)
    LIFELIST_S7DOS_ABORT = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_LIFELIST_S7DOS_ABORT_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_LIFELIST_S7DOS_ABORT_set)
    LIFELIST_S7DOS_TIMEOUT = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_LIFELIST_S7DOS_TIMEOUT_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_LIFELIST_S7DOS_TIMEOUT_set)
    RCV_SERIAL_TIMEOUT = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_RCV_SERIAL_TIMEOUT_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_RCV_SERIAL_TIMEOUT_set)
    RCV_SERIAL_FIND_TIMEOUT = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_RCV_SERIAL_FIND_TIMEOUT_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_RCV_SERIAL_FIND_TIMEOUT_set)
    RCV_SERIAL_SAVE_TIMEOUT = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_RCV_SERIAL_SAVE_TIMEOUT_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_RCV_SERIAL_SAVE_TIMEOUT_set)
    RCV_SERIAL_PIN_TIMEOUT = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_RCV_SERIAL_PIN_TIMEOUT_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_RCV_SERIAL_PIN_TIMEOUT_set)
    RCV_SERIAL_DELAY = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_RCV_SERIAL_DELAY_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_RCV_SERIAL_DELAY_set)
    RCV_TCPIP_TIMEOUT = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_RCV_TCPIP_TIMEOUT_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_RCV_TCPIP_TIMEOUT_set)
    LIFELIST_TCPIP_TIMEOUT = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_LIFELIST_TCPIP_TIMEOUT_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_LIFELIST_TCPIP_TIMEOUT_set)
    UP_DOWN_TCPIP_TIMEOUT = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_UP_DOWN_TCPIP_TIMEOUT_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_UP_DOWN_TCPIP_TIMEOUT_set)
    RCV_SC_TIMEOUT = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_RCV_SC_TIMEOUT_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_RCV_SC_TIMEOUT_set)
    SND_SC_TIMEOUT = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_SND_SC_TIMEOUT_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_SND_SC_TIMEOUT_set)
    SNP_SC_TIMEOUT = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_SNP_SC_TIMEOUT_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_SNP_SC_TIMEOUT_set)
    RCV_SC_SHORT_TIMEOUT = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_RCV_SC_SHORT_TIMEOUT_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_RCV_SC_SHORT_TIMEOUT_set)
    SC_KA_TIMEOUT = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_SC_KA_TIMEOUT_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_SC_KA_TIMEOUT_set)
    RCV_SC_USB_TIMEOUT = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_RCV_SC_USB_TIMEOUT_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_RCV_SC_USB_TIMEOUT_set)
    RCV_SC_USB_SHORT_TIMEOUT = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_RCV_SC_USB_SHORT_TIMEOUT_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_RCV_SC_USB_SHORT_TIMEOUT_set)
    SND_SC_USB_TIMEOUT = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_SND_SC_USB_TIMEOUT_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_SND_SC_USB_TIMEOUT_set)
    RCV_SC_MODEM_TIMEOUT = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_RCV_SC_MODEM_TIMEOUT_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_RCV_SC_MODEM_TIMEOUT_set)
    SND_SC_MODEM_TIMEOUT = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_SND_SC_MODEM_TIMEOUT_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_SND_SC_MODEM_TIMEOUT_set)
    SNP_SC_MODEM_TIMEOUT = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_SNP_SC_MODEM_TIMEOUT_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_SNP_SC_MODEM_TIMEOUT_set)
    RCV_SC_MODEM_SHORT_TIMEOUT = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_RCV_SC_MODEM_SHORT_TIMEOUT_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_RCV_SC_MODEM_SHORT_TIMEOUT_set)
    RCV_SC_RADIO_TIMEOUT = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_RCV_SC_RADIO_TIMEOUT_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_RCV_SC_RADIO_TIMEOUT_set)
    SND_SC_RADIO_TIMEOUT = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_SND_SC_RADIO_TIMEOUT_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_SND_SC_RADIO_TIMEOUT_set)
    SNP_SC_RADIO_TIMEOUT = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_SNP_SC_RADIO_TIMEOUT_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_SNP_SC_RADIO_TIMEOUT_set)
    RCV_SC_RADIO_SHORT_TIMEOUT = property(_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_RCV_SC_RADIO_SHORT_TIMEOUT_get, _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_RCV_SC_RADIO_SHORT_TIMEOUT_set)

    def __init__(self):
        _MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_swiginit(self, _MicroWinExecInterface.new_sCOMMCOMPASS_TIMEOUTS())
    __swig_destroy__ = _MicroWinExecInterface.delete_sCOMMCOMPASS_TIMEOUTS

# Register sCOMMCOMPASS_TIMEOUTS in _MicroWinExecInterface:
_MicroWinExecInterface.sCOMMCOMPASS_TIMEOUTS_swigregister(sCOMMCOMPASS_TIMEOUTS)

class sCOMMCOMPASS_RETRIES(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PPI_MASTER_RETRY = property(_MicroWinExecInterface.sCOMMCOMPASS_RETRIES_PPI_MASTER_RETRY_get, _MicroWinExecInterface.sCOMMCOMPASS_RETRIES_PPI_MASTER_RETRY_set)
    S7DOS_MASTER_RETRY = property(_MicroWinExecInterface.sCOMMCOMPASS_RETRIES_S7DOS_MASTER_RETRY_get, _MicroWinExecInterface.sCOMMCOMPASS_RETRIES_S7DOS_MASTER_RETRY_set)
    MM_ADVPPI_MASTER_RETRY = property(_MicroWinExecInterface.sCOMMCOMPASS_RETRIES_MM_ADVPPI_MASTER_RETRY_get, _MicroWinExecInterface.sCOMMCOMPASS_RETRIES_MM_ADVPPI_MASTER_RETRY_set)
    SMART_MASTER_RETRY = property(_MicroWinExecInterface.sCOMMCOMPASS_RETRIES_SMART_MASTER_RETRY_get, _MicroWinExecInterface.sCOMMCOMPASS_RETRIES_SMART_MASTER_RETRY_set)
    ETHERNET_MASTER_RETRY = property(_MicroWinExecInterface.sCOMMCOMPASS_RETRIES_ETHERNET_MASTER_RETRY_get, _MicroWinExecInterface.sCOMMCOMPASS_RETRIES_ETHERNET_MASTER_RETRY_set)
    PPI_SERIAL_OVERRUN_RETRY = property(_MicroWinExecInterface.sCOMMCOMPASS_RETRIES_PPI_SERIAL_OVERRUN_RETRY_get, _MicroWinExecInterface.sCOMMCOMPASS_RETRIES_PPI_SERIAL_OVERRUN_RETRY_set)
    SC_SNP_RETRIES = property(_MicroWinExecInterface.sCOMMCOMPASS_RETRIES_SC_SNP_RETRIES_get, _MicroWinExecInterface.sCOMMCOMPASS_RETRIES_SC_SNP_RETRIES_set)
    SC_AUTOBAUD_RETRIES = property(_MicroWinExecInterface.sCOMMCOMPASS_RETRIES_SC_AUTOBAUD_RETRIES_get, _MicroWinExecInterface.sCOMMCOMPASS_RETRIES_SC_AUTOBAUD_RETRIES_set)

    def __init__(self):
        _MicroWinExecInterface.sCOMMCOMPASS_RETRIES_swiginit(self, _MicroWinExecInterface.new_sCOMMCOMPASS_RETRIES())
    __swig_destroy__ = _MicroWinExecInterface.delete_sCOMMCOMPASS_RETRIES

# Register sCOMMCOMPASS_RETRIES in _MicroWinExecInterface:
_MicroWinExecInterface.sCOMMCOMPASS_RETRIES_swigregister(sCOMMCOMPASS_RETRIES)

class sCOMMCOMPASS_SMART_DATA(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_nGUF = property(_MicroWinExecInterface.sCOMMCOMPASS_SMART_DATA_m_nGUF_get, _MicroWinExecInterface.sCOMMCOMPASS_SMART_DATA_m_nGUF_set)
    m_nTSlot = property(_MicroWinExecInterface.sCOMMCOMPASS_SMART_DATA_m_nTSlot_get, _MicroWinExecInterface.sCOMMCOMPASS_SMART_DATA_m_nTSlot_set)
    m_nTttr = property(_MicroWinExecInterface.sCOMMCOMPASS_SMART_DATA_m_nTttr_get, _MicroWinExecInterface.sCOMMCOMPASS_SMART_DATA_m_nTttr_set)
    m_bAutoBaudLL = property(_MicroWinExecInterface.sCOMMCOMPASS_SMART_DATA_m_bAutoBaudLL_get, _MicroWinExecInterface.sCOMMCOMPASS_SMART_DATA_m_bAutoBaudLL_set)

    def __init__(self):
        _MicroWinExecInterface.sCOMMCOMPASS_SMART_DATA_swiginit(self, _MicroWinExecInterface.new_sCOMMCOMPASS_SMART_DATA())
    __swig_destroy__ = _MicroWinExecInterface.delete_sCOMMCOMPASS_SMART_DATA

# Register sCOMMCOMPASS_SMART_DATA in _MicroWinExecInterface:
_MicroWinExecInterface.sCOMMCOMPASS_SMART_DATA_swigregister(sCOMMCOMPASS_SMART_DATA)

class sCOMMCOMPASS_AP_DATA(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_szName = property(_MicroWinExecInterface.sCOMMCOMPASS_AP_DATA_m_szName_get, _MicroWinExecInterface.sCOMMCOMPASS_AP_DATA_m_szName_set)
    m_eDeviceType = property(_MicroWinExecInterface.sCOMMCOMPASS_AP_DATA_m_eDeviceType_get, _MicroWinExecInterface.sCOMMCOMPASS_AP_DATA_m_eDeviceType_set)
    m_szDeviceName = property(_MicroWinExecInterface.sCOMMCOMPASS_AP_DATA_m_szDeviceName_get, _MicroWinExecInterface.sCOMMCOMPASS_AP_DATA_m_szDeviceName_set)
    m_eProtocol = property(_MicroWinExecInterface.sCOMMCOMPASS_AP_DATA_m_eProtocol_get, _MicroWinExecInterface.sCOMMCOMPASS_AP_DATA_m_eProtocol_set)
    m_nLocalAddr = property(_MicroWinExecInterface.sCOMMCOMPASS_AP_DATA_m_nLocalAddr_get, _MicroWinExecInterface.sCOMMCOMPASS_AP_DATA_m_nLocalAddr_set)
    m_nHSA = property(_MicroWinExecInterface.sCOMMCOMPASS_AP_DATA_m_nHSA_get, _MicroWinExecInterface.sCOMMCOMPASS_AP_DATA_m_nHSA_set)
    m_eBaudRate = property(_MicroWinExecInterface.sCOMMCOMPASS_AP_DATA_m_eBaudRate_get, _MicroWinExecInterface.sCOMMCOMPASS_AP_DATA_m_eBaudRate_set)
    m_sTimeouts = property(_MicroWinExecInterface.sCOMMCOMPASS_AP_DATA_m_sTimeouts_get, _MicroWinExecInterface.sCOMMCOMPASS_AP_DATA_m_sTimeouts_set)
    m_sRetries = property(_MicroWinExecInterface.sCOMMCOMPASS_AP_DATA_m_sRetries_get, _MicroWinExecInterface.sCOMMCOMPASS_AP_DATA_m_sRetries_set)
    m_nComPort = property(_MicroWinExecInterface.sCOMMCOMPASS_AP_DATA_m_nComPort_get, _MicroWinExecInterface.sCOMMCOMPASS_AP_DATA_m_nComPort_set)
    m_nDebugLevel = property(_MicroWinExecInterface.sCOMMCOMPASS_AP_DATA_m_nDebugLevel_get, _MicroWinExecInterface.sCOMMCOMPASS_AP_DATA_m_nDebugLevel_set)
    m_byRoleSwap = property(_MicroWinExecInterface.sCOMMCOMPASS_AP_DATA_m_byRoleSwap_get, _MicroWinExecInterface.sCOMMCOMPASS_AP_DATA_m_byRoleSwap_set)
    m_bMastersAllowed = property(_MicroWinExecInterface.sCOMMCOMPASS_AP_DATA_m_bMastersAllowed_get, _MicroWinExecInterface.sCOMMCOMPASS_AP_DATA_m_bMastersAllowed_set)
    m_bIncrementOpenCount = property(_MicroWinExecInterface.sCOMMCOMPASS_AP_DATA_m_bIncrementOpenCount_get, _MicroWinExecInterface.sCOMMCOMPASS_AP_DATA_m_bIncrementOpenCount_set)
    m_b11bit = property(_MicroWinExecInterface.sCOMMCOMPASS_AP_DATA_m_b11bit_get, _MicroWinExecInterface.sCOMMCOMPASS_AP_DATA_m_b11bit_set)
    m_hMsgFrameWnd = property(_MicroWinExecInterface.sCOMMCOMPASS_AP_DATA_m_hMsgFrameWnd_get, _MicroWinExecInterface.sCOMMCOMPASS_AP_DATA_m_hMsgFrameWnd_set)
    m_bUseSmartBaud = property(_MicroWinExecInterface.sCOMMCOMPASS_AP_DATA_m_bUseSmartBaud_get, _MicroWinExecInterface.sCOMMCOMPASS_AP_DATA_m_bUseSmartBaud_set)
    m_bOPC = property(_MicroWinExecInterface.sCOMMCOMPASS_AP_DATA_m_bOPC_get, _MicroWinExecInterface.sCOMMCOMPASS_AP_DATA_m_bOPC_set)
    m_sSmartData = property(_MicroWinExecInterface.sCOMMCOMPASS_AP_DATA_m_sSmartData_get, _MicroWinExecInterface.sCOMMCOMPASS_AP_DATA_m_sSmartData_set)

    def __init__(self):
        _MicroWinExecInterface.sCOMMCOMPASS_AP_DATA_swiginit(self, _MicroWinExecInterface.new_sCOMMCOMPASS_AP_DATA())
    __swig_destroy__ = _MicroWinExecInterface.delete_sCOMMCOMPASS_AP_DATA

# Register sCOMMCOMPASS_AP_DATA in _MicroWinExecInterface:
_MicroWinExecInterface.sCOMMCOMPASS_AP_DATA_swigregister(sCOMMCOMPASS_AP_DATA)

class sCOMMCOMPASS_DEVICE_LIFE_LIST(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_aszDeviceType = property(_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_LIFE_LIST_m_aszDeviceType_get, _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_LIFE_LIST_m_aszDeviceType_set)
    m_aszVersion = property(_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_LIFE_LIST_m_aszVersion_get, _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_LIFE_LIST_m_aszVersion_set)
    m_nDeviceAddr = property(_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_LIFE_LIST_m_nDeviceAddr_get, _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_LIFE_LIST_m_nDeviceAddr_set)
    m_nDeviceBaudRate = property(_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_LIFE_LIST_m_nDeviceBaudRate_get, _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_LIFE_LIST_m_nDeviceBaudRate_set)
    m_eStationType = property(_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_LIFE_LIST_m_eStationType_get, _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_LIFE_LIST_m_eStationType_set)
    m_eBasePLCType = property(_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_LIFE_LIST_m_eBasePLCType_get, _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_LIFE_LIST_m_eBasePLCType_set)
    m_sEthernetInfo = property(_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_LIFE_LIST_m_sEthernetInfo_get, _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_LIFE_LIST_m_sEthernetInfo_set)
    m_eLifeListType = property(_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_LIFE_LIST_m_eLifeListType_get, _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_LIFE_LIST_m_eLifeListType_set)
    m_hrResult = property(_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_LIFE_LIST_m_hrResult_get, _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_LIFE_LIST_m_hrResult_set)

    def __init__(self):
        _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_LIFE_LIST_swiginit(self, _MicroWinExecInterface.new_sCOMMCOMPASS_DEVICE_LIFE_LIST())
    __swig_destroy__ = _MicroWinExecInterface.delete_sCOMMCOMPASS_DEVICE_LIFE_LIST

# Register sCOMMCOMPASS_DEVICE_LIFE_LIST in _MicroWinExecInterface:
_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_LIFE_LIST_swigregister(sCOMMCOMPASS_DEVICE_LIFE_LIST)

class sCOMMCOMPASS_DEVICE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_nAddr = property(_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_m_nAddr_get, _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_m_nAddr_set)
    m_eBaudRate = property(_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_m_eBaudRate_get, _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_m_eBaudRate_set)
    m_eStationType = property(_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_m_eStationType_get, _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_m_eStationType_set)
    m_bIsS7DOS = property(_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_m_bIsS7DOS_get, _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_m_bIsS7DOS_set)
    m_eLifeListType = property(_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_m_eLifeListType_get, _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_m_eLifeListType_set)
    m_sEthernetInfo = property(_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_m_sEthernetInfo_get, _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_m_sEthernetInfo_set)

    def __init__(self):
        _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_swiginit(self, _MicroWinExecInterface.new_sCOMMCOMPASS_DEVICE())
    __swig_destroy__ = _MicroWinExecInterface.delete_sCOMMCOMPASS_DEVICE

# Register sCOMMCOMPASS_DEVICE in _MicroWinExecInterface:
_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_swigregister(sCOMMCOMPASS_DEVICE)

class sCOMMCOMPASS_LIFELIST_DATA(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_nAddr = property(_MicroWinExecInterface.sCOMMCOMPASS_LIFELIST_DATA_m_nAddr_get, _MicroWinExecInterface.sCOMMCOMPASS_LIFELIST_DATA_m_nAddr_set)
    m_eBaudRate = property(_MicroWinExecInterface.sCOMMCOMPASS_LIFELIST_DATA_m_eBaudRate_get, _MicroWinExecInterface.sCOMMCOMPASS_LIFELIST_DATA_m_eBaudRate_set)
    m_eStationType = property(_MicroWinExecInterface.sCOMMCOMPASS_LIFELIST_DATA_m_eStationType_get, _MicroWinExecInterface.sCOMMCOMPASS_LIFELIST_DATA_m_eStationType_set)

    def __init__(self):
        _MicroWinExecInterface.sCOMMCOMPASS_LIFELIST_DATA_swiginit(self, _MicroWinExecInterface.new_sCOMMCOMPASS_LIFELIST_DATA())
    __swig_destroy__ = _MicroWinExecInterface.delete_sCOMMCOMPASS_LIFELIST_DATA

# Register sCOMMCOMPASS_LIFELIST_DATA in _MicroWinExecInterface:
_MicroWinExecInterface.sCOMMCOMPASS_LIFELIST_DATA_swigregister(sCOMMCOMPASS_LIFELIST_DATA)

class sCOMMCOMPASS_MC_DATA(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_aszDeviceType = property(_MicroWinExecInterface.sCOMMCOMPASS_MC_DATA_m_aszDeviceType_get, _MicroWinExecInterface.sCOMMCOMPASS_MC_DATA_m_aszDeviceType_set)
    m_aszDeviceVersion = property(_MicroWinExecInterface.sCOMMCOMPASS_MC_DATA_m_aszDeviceVersion_get, _MicroWinExecInterface.sCOMMCOMPASS_MC_DATA_m_aszDeviceVersion_set)
    m_nMCSize = property(_MicroWinExecInterface.sCOMMCOMPASS_MC_DATA_m_nMCSize_get, _MicroWinExecInterface.sCOMMCOMPASS_MC_DATA_m_nMCSize_set)
    m_nMCID = property(_MicroWinExecInterface.sCOMMCOMPASS_MC_DATA_m_nMCID_get, _MicroWinExecInterface.sCOMMCOMPASS_MC_DATA_m_nMCID_set)
    m_nMCFC = property(_MicroWinExecInterface.sCOMMCOMPASS_MC_DATA_m_nMCFC_get, _MicroWinExecInterface.sCOMMCOMPASS_MC_DATA_m_nMCFC_set)
    m_nPLCID = property(_MicroWinExecInterface.sCOMMCOMPASS_MC_DATA_m_nPLCID_get, _MicroWinExecInterface.sCOMMCOMPASS_MC_DATA_m_nPLCID_set)
    m_nPLCFC = property(_MicroWinExecInterface.sCOMMCOMPASS_MC_DATA_m_nPLCFC_get, _MicroWinExecInterface.sCOMMCOMPASS_MC_DATA_m_nPLCFC_set)
    m_lBytesRemaining = property(_MicroWinExecInterface.sCOMMCOMPASS_MC_DATA_m_lBytesRemaining_get, _MicroWinExecInterface.sCOMMCOMPASS_MC_DATA_m_lBytesRemaining_set)
    m_lBlockBytesUsed = property(_MicroWinExecInterface.sCOMMCOMPASS_MC_DATA_m_lBlockBytesUsed_get, _MicroWinExecInterface.sCOMMCOMPASS_MC_DATA_m_lBlockBytesUsed_set)

    def __init__(self):
        _MicroWinExecInterface.sCOMMCOMPASS_MC_DATA_swiginit(self, _MicroWinExecInterface.new_sCOMMCOMPASS_MC_DATA())
    __swig_destroy__ = _MicroWinExecInterface.delete_sCOMMCOMPASS_MC_DATA

# Register sCOMMCOMPASS_MC_DATA in _MicroWinExecInterface:
_MicroWinExecInterface.sCOMMCOMPASS_MC_DATA_swigregister(sCOMMCOMPASS_MC_DATA)

class sCOMMCOMPASS_PROGRAM_MC_DATA(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_bUseThisStructure = property(_MicroWinExecInterface.sCOMMCOMPASS_PROGRAM_MC_DATA_m_bUseThisStructure_get, _MicroWinExecInterface.sCOMMCOMPASS_PROGRAM_MC_DATA_m_bUseThisStructure_set)
    m_bProgramBlock = property(_MicroWinExecInterface.sCOMMCOMPASS_PROGRAM_MC_DATA_m_bProgramBlock_get, _MicroWinExecInterface.sCOMMCOMPASS_PROGRAM_MC_DATA_m_bProgramBlock_set)
    m_bDataBlock = property(_MicroWinExecInterface.sCOMMCOMPASS_PROGRAM_MC_DATA_m_bDataBlock_get, _MicroWinExecInterface.sCOMMCOMPASS_PROGRAM_MC_DATA_m_bDataBlock_set)
    m_bSystemBlock = property(_MicroWinExecInterface.sCOMMCOMPASS_PROGRAM_MC_DATA_m_bSystemBlock_get, _MicroWinExecInterface.sCOMMCOMPASS_PROGRAM_MC_DATA_m_bSystemBlock_set)

    def __init__(self):
        _MicroWinExecInterface.sCOMMCOMPASS_PROGRAM_MC_DATA_swiginit(self, _MicroWinExecInterface.new_sCOMMCOMPASS_PROGRAM_MC_DATA())
    __swig_destroy__ = _MicroWinExecInterface.delete_sCOMMCOMPASS_PROGRAM_MC_DATA

# Register sCOMMCOMPASS_PROGRAM_MC_DATA in _MicroWinExecInterface:
_MicroWinExecInterface.sCOMMCOMPASS_PROGRAM_MC_DATA_swigregister(sCOMMCOMPASS_PROGRAM_MC_DATA)

class ANY_POINTER_BIT_ADDRESS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    BitAddress = property(_MicroWinExecInterface.ANY_POINTER_BIT_ADDRESS_BitAddress_get, _MicroWinExecInterface.ANY_POINTER_BIT_ADDRESS_BitAddress_set)
    ByteAddress = property(_MicroWinExecInterface.ANY_POINTER_BIT_ADDRESS_ByteAddress_get, _MicroWinExecInterface.ANY_POINTER_BIT_ADDRESS_ByteAddress_set)
    Area = property(_MicroWinExecInterface.ANY_POINTER_BIT_ADDRESS_Area_get, _MicroWinExecInterface.ANY_POINTER_BIT_ADDRESS_Area_set)

    def __init__(self):
        _MicroWinExecInterface.ANY_POINTER_BIT_ADDRESS_swiginit(self, _MicroWinExecInterface.new_ANY_POINTER_BIT_ADDRESS())
    __swig_destroy__ = _MicroWinExecInterface.delete_ANY_POINTER_BIT_ADDRESS

# Register ANY_POINTER_BIT_ADDRESS in _MicroWinExecInterface:
_MicroWinExecInterface.ANY_POINTER_BIT_ADDRESS_swigregister(ANY_POINTER_BIT_ADDRESS)

class ANY_POINTER_BYTE_ADDRESS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DoNotCare = property(_MicroWinExecInterface.ANY_POINTER_BYTE_ADDRESS_DoNotCare_get, _MicroWinExecInterface.ANY_POINTER_BYTE_ADDRESS_DoNotCare_set)
    ByteAddress = property(_MicroWinExecInterface.ANY_POINTER_BYTE_ADDRESS_ByteAddress_get, _MicroWinExecInterface.ANY_POINTER_BYTE_ADDRESS_ByteAddress_set)
    Area = property(_MicroWinExecInterface.ANY_POINTER_BYTE_ADDRESS_Area_get, _MicroWinExecInterface.ANY_POINTER_BYTE_ADDRESS_Area_set)

    def __init__(self):
        _MicroWinExecInterface.ANY_POINTER_BYTE_ADDRESS_swiginit(self, _MicroWinExecInterface.new_ANY_POINTER_BYTE_ADDRESS())
    __swig_destroy__ = _MicroWinExecInterface.delete_ANY_POINTER_BYTE_ADDRESS

# Register ANY_POINTER_BYTE_ADDRESS in _MicroWinExecInterface:
_MicroWinExecInterface.ANY_POINTER_BYTE_ADDRESS_swigregister(ANY_POINTER_BYTE_ADDRESS)

class ANY_POINTER_OBJECT_NUMBER(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ObjectNumber = property(_MicroWinExecInterface.ANY_POINTER_OBJECT_NUMBER_ObjectNumber_get, _MicroWinExecInterface.ANY_POINTER_OBJECT_NUMBER_ObjectNumber_set)
    Area = property(_MicroWinExecInterface.ANY_POINTER_OBJECT_NUMBER_Area_get, _MicroWinExecInterface.ANY_POINTER_OBJECT_NUMBER_Area_set)

    def __init__(self):
        _MicroWinExecInterface.ANY_POINTER_OBJECT_NUMBER_swiginit(self, _MicroWinExecInterface.new_ANY_POINTER_OBJECT_NUMBER())
    __swig_destroy__ = _MicroWinExecInterface.delete_ANY_POINTER_OBJECT_NUMBER

# Register ANY_POINTER_OBJECT_NUMBER in _MicroWinExecInterface:
_MicroWinExecInterface.ANY_POINTER_OBJECT_NUMBER_swigregister(ANY_POINTER_OBJECT_NUMBER)

class ANY_POINTER_ADDRESS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __eq__(self, rSrc):
        return _MicroWinExecInterface.ANY_POINTER_ADDRESS___eq__(self, rSrc)

    def __ne__(self, rSrc):
        return _MicroWinExecInterface.ANY_POINTER_ADDRESS___ne__(self, rSrc)

    def __init__(self):
        _MicroWinExecInterface.ANY_POINTER_ADDRESS_swiginit(self, _MicroWinExecInterface.new_ANY_POINTER_ADDRESS())
    __swig_destroy__ = _MicroWinExecInterface.delete_ANY_POINTER_ADDRESS

# Register ANY_POINTER_ADDRESS in _MicroWinExecInterface:
_MicroWinExecInterface.ANY_POINTER_ADDRESS_swigregister(ANY_POINTER_ADDRESS)

class ANY_POINTER(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ucSyntaxId = property(_MicroWinExecInterface.ANY_POINTER_ucSyntaxId_get, _MicroWinExecInterface.ANY_POINTER_ucSyntaxId_set)
    ucType = property(_MicroWinExecInterface.ANY_POINTER_ucType_get, _MicroWinExecInterface.ANY_POINTER_ucType_set)
    usNumberElements = property(_MicroWinExecInterface.ANY_POINTER_usNumberElements_get, _MicroWinExecInterface.ANY_POINTER_usNumberElements_set)
    usSubarea = property(_MicroWinExecInterface.ANY_POINTER_usSubarea_get, _MicroWinExecInterface.ANY_POINTER_usSubarea_set)
    unAddress = property(_MicroWinExecInterface.ANY_POINTER_unAddress_get, _MicroWinExecInterface.ANY_POINTER_unAddress_set)

    def __eq__(self, rSrc):
        return _MicroWinExecInterface.ANY_POINTER___eq__(self, rSrc)

    def __ne__(self, rSrc):
        return _MicroWinExecInterface.ANY_POINTER___ne__(self, rSrc)

    def __init__(self):
        _MicroWinExecInterface.ANY_POINTER_swiginit(self, _MicroWinExecInterface.new_ANY_POINTER())
    __swig_destroy__ = _MicroWinExecInterface.delete_ANY_POINTER

# Register ANY_POINTER in _MicroWinExecInterface:
_MicroWinExecInterface.ANY_POINTER_swigregister(ANY_POINTER)

cCOMMCOMPASS_HEADER_SIZE = _MicroWinExecInterface.cCOMMCOMPASS_HEADER_SIZE
eCOMMCOMPASS_OPMODE_STOP = _MicroWinExecInterface.eCOMMCOMPASS_OPMODE_STOP
eCOMMCOMPASS_OPMODE_RUN = _MicroWinExecInterface.eCOMMCOMPASS_OPMODE_RUN
eCOMMCOMPASS_BLOCK_STATUS_ACTIVE = _MicroWinExecInterface.eCOMMCOMPASS_BLOCK_STATUS_ACTIVE
eCOMMCOMPASS_BLOCK_STATUS_PASSIVE = _MicroWinExecInterface.eCOMMCOMPASS_BLOCK_STATUS_PASSIVE
eCOMMCOMPASS_BLOCK_STATUS_MC = _MicroWinExecInterface.eCOMMCOMPASS_BLOCK_STATUS_MC
eCOMMCOMPASS_BLOCK_STATUS_INVALID = _MicroWinExecInterface.eCOMMCOMPASS_BLOCK_STATUS_INVALID
eCOMMCOMPASS_BLOCK_LOCATION_INVALID = _MicroWinExecInterface.eCOMMCOMPASS_BLOCK_LOCATION_INVALID
eCOMMCOMPASS_BLOCK_LOCATION_MC = _MicroWinExecInterface.eCOMMCOMPASS_BLOCK_LOCATION_MC
eCOMMCOMPASS_BLOCK_LOCATION_EPROM = _MicroWinExecInterface.eCOMMCOMPASS_BLOCK_LOCATION_EPROM
eCOMMCOMPASS_BLOCK_LOCATION_OS = _MicroWinExecInterface.eCOMMCOMPASS_BLOCK_LOCATION_OS
eCOMMCOMPASS_BLOCK_RANGE_RECIPE_START = _MicroWinExecInterface.eCOMMCOMPASS_BLOCK_RANGE_RECIPE_START
eCOMMCOMPASS_BLOCK_RANGE_RECIPE_END = _MicroWinExecInterface.eCOMMCOMPASS_BLOCK_RANGE_RECIPE_END
eCOMMCOMPASS_BLOCK_RANGE_DATA_LOG_START = _MicroWinExecInterface.eCOMMCOMPASS_BLOCK_RANGE_DATA_LOG_START
eCOMMCOMPASS_BLOCK_RANGE_DATA_LOG_END = _MicroWinExecInterface.eCOMMCOMPASS_BLOCK_RANGE_DATA_LOG_END
eCOMMCOMPASS_BLOCK_RANGE_MW_ONLY = _MicroWinExecInterface.eCOMMCOMPASS_BLOCK_RANGE_MW_ONLY
eCOMMCOMPASS_BLOCK_TYPE_ALL = _MicroWinExecInterface.eCOMMCOMPASS_BLOCK_TYPE_ALL
eCOMMCOMPASS_BLOCK_TYPE_AREA1 = _MicroWinExecInterface.eCOMMCOMPASS_BLOCK_TYPE_AREA1
eCOMMCOMPASS_BLOCK_TYPE_OB = _MicroWinExecInterface.eCOMMCOMPASS_BLOCK_TYPE_OB
eCOMMCOMPASS_BLOCK_TYPE_DB = _MicroWinExecInterface.eCOMMCOMPASS_BLOCK_TYPE_DB
eCOMMCOMPASS_BLOCK_TYPE_SDB = _MicroWinExecInterface.eCOMMCOMPASS_BLOCK_TYPE_SDB
eCOMMCOMPASS_MEM_TYPE_BOOL = _MicroWinExecInterface.eCOMMCOMPASS_MEM_TYPE_BOOL
eCOMMCOMPASS_MEM_TYPE_BYTE = _MicroWinExecInterface.eCOMMCOMPASS_MEM_TYPE_BYTE
eCOMMCOMPASS_MEM_TYPE_CHAR = _MicroWinExecInterface.eCOMMCOMPASS_MEM_TYPE_CHAR
eCOMMCOMPASS_MEM_TYPE_WORD = _MicroWinExecInterface.eCOMMCOMPASS_MEM_TYPE_WORD
eCOMMCOMPASS_MEM_TYPE_INT = _MicroWinExecInterface.eCOMMCOMPASS_MEM_TYPE_INT
eCOMMCOMPASS_MEM_TYPE_DWORD = _MicroWinExecInterface.eCOMMCOMPASS_MEM_TYPE_DWORD
eCOMMCOMPASS_MEM_TYPE_DINT = _MicroWinExecInterface.eCOMMCOMPASS_MEM_TYPE_DINT
eCOMMCOMPASS_MEM_TYPE_REAL = _MicroWinExecInterface.eCOMMCOMPASS_MEM_TYPE_REAL
eCOMMCOMPASS_MEM_TYPE_C = _MicroWinExecInterface.eCOMMCOMPASS_MEM_TYPE_C
eCOMMCOMPASS_MEM_TYPE_T = _MicroWinExecInterface.eCOMMCOMPASS_MEM_TYPE_T
eCOMMCOMPASS_MEM_TYPE_HC = _MicroWinExecInterface.eCOMMCOMPASS_MEM_TYPE_HC
eCOMMCOMPASS_MEM_AREA_SD = _MicroWinExecInterface.eCOMMCOMPASS_MEM_AREA_SD
eCOMMCOMPASS_MEM_AREA_S = _MicroWinExecInterface.eCOMMCOMPASS_MEM_AREA_S
eCOMMCOMPASS_MEM_AREA_SM = _MicroWinExecInterface.eCOMMCOMPASS_MEM_AREA_SM
eCOMMCOMPASS_MEM_AREA_AI = _MicroWinExecInterface.eCOMMCOMPASS_MEM_AREA_AI
eCOMMCOMPASS_MEM_AREA_AQ = _MicroWinExecInterface.eCOMMCOMPASS_MEM_AREA_AQ
eCOMMCOMPASS_MEM_AREA_C = _MicroWinExecInterface.eCOMMCOMPASS_MEM_AREA_C
eCOMMCOMPASS_MEM_AREA_T = _MicroWinExecInterface.eCOMMCOMPASS_MEM_AREA_T
eCOMMCOMPASS_MEM_AREA_HC = _MicroWinExecInterface.eCOMMCOMPASS_MEM_AREA_HC
eCOMMCOMPASS_MEM_AREA_I = _MicroWinExecInterface.eCOMMCOMPASS_MEM_AREA_I
eCOMMCOMPASS_MEM_AREA_Q = _MicroWinExecInterface.eCOMMCOMPASS_MEM_AREA_Q
eCOMMCOMPASS_MEM_AREA_M = _MicroWinExecInterface.eCOMMCOMPASS_MEM_AREA_M
eCOMMCOMPASS_MEM_AREA_V = _MicroWinExecInterface.eCOMMCOMPASS_MEM_AREA_V
eCOMMCOMPASS_UPDATE = _MicroWinExecInterface.eCOMMCOMPASS_UPDATE
eCOMMCOMPASS_NOT_UPDATE = _MicroWinExecInterface.eCOMMCOMPASS_NOT_UPDATE
eCOMMCOMPASS_DIRECT_ADDRESS = _MicroWinExecInterface.eCOMMCOMPASS_DIRECT_ADDRESS
eCOMMCOMPASS_ADDRESS_OF = _MicroWinExecInterface.eCOMMCOMPASS_ADDRESS_OF
eCOMMCOMPASS_INDIRECT_ADDRESS = _MicroWinExecInterface.eCOMMCOMPASS_INDIRECT_ADDRESS
eCOMMCOMPASS_INVALID_MODE = _MicroWinExecInterface.eCOMMCOMPASS_INVALID_MODE
eCOMMCOMPASS_OPERAND_SIZE_BIT = _MicroWinExecInterface.eCOMMCOMPASS_OPERAND_SIZE_BIT
eCOMMCOMPASS_OPERAND_SIZE_BYTE = _MicroWinExecInterface.eCOMMCOMPASS_OPERAND_SIZE_BYTE
eCOMMCOMPASS_OPERAND_SIZE_WORD = _MicroWinExecInterface.eCOMMCOMPASS_OPERAND_SIZE_WORD
eCOMMCOMPASS_OPERAND_SIZE_DWORD = _MicroWinExecInterface.eCOMMCOMPASS_OPERAND_SIZE_DWORD
eCOMMCOMPASS_EVENT_LOG_CODE_NO_EVENT = _MicroWinExecInterface.eCOMMCOMPASS_EVENT_LOG_CODE_NO_EVENT
eCOMMCOMPASS_EVENT_LOG_CODE_POWER_UP = _MicroWinExecInterface.eCOMMCOMPASS_EVENT_LOG_CODE_POWER_UP
eCOMMCOMPASS_EVENT_LOG_CODE_TRANSITION_TO_RUN = _MicroWinExecInterface.eCOMMCOMPASS_EVENT_LOG_CODE_TRANSITION_TO_RUN
eCOMMCOMPASS_EVENT_LOG_CODE_TRANSITION_TO_STOP = _MicroWinExecInterface.eCOMMCOMPASS_EVENT_LOG_CODE_TRANSITION_TO_STOP
eCOMMCOMPASS_EVENT_LOG_CODE_WARM_RESTART = _MicroWinExecInterface.eCOMMCOMPASS_EVENT_LOG_CODE_WARM_RESTART
eCOMMCOMPASS_EVENT_LOG_CODE_POWER_DOWN = _MicroWinExecInterface.eCOMMCOMPASS_EVENT_LOG_CODE_POWER_DOWN
eCOMMCOMPASS_EVENT_LOG_CODE_RUN_INHIBIT = _MicroWinExecInterface.eCOMMCOMPASS_EVENT_LOG_CODE_RUN_INHIBIT
eCOMMCOMPASS_EVENT_LOG_CODE_RESET_TO_FACTORY = _MicroWinExecInterface.eCOMMCOMPASS_EVENT_LOG_CODE_RESET_TO_FACTORY
eCOMMCOMPASS_EVENT_LOG_CODE_ALARM_EVENT = _MicroWinExecInterface.eCOMMCOMPASS_EVENT_LOG_CODE_ALARM_EVENT
eCOMMCOMPASS_EVENT_LOG_CODE_FATAL_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_EVENT_LOG_CODE_FATAL_ERROR
eCOMMCOMPASS_EVENT_LOG_REASON_UNKNOWN = _MicroWinExecInterface.eCOMMCOMPASS_EVENT_LOG_REASON_UNKNOWN
eCOMMCOMPASS_EVENT_LOG_REASON_POWER_ON_ACTION = _MicroWinExecInterface.eCOMMCOMPASS_EVENT_LOG_REASON_POWER_ON_ACTION
eCOMMCOMPASS_EVENT_LOG_REASON_COMMUNICATION = _MicroWinExecInterface.eCOMMCOMPASS_EVENT_LOG_REASON_COMMUNICATION
eCOMMCOMPASS_EVENT_LOG_REASON_PROGRAM_EXEC = _MicroWinExecInterface.eCOMMCOMPASS_EVENT_LOG_REASON_PROGRAM_EXEC
eCOMMCOMPASS_EVENT_LOG_REASON_SCAN_CNT_LIMIT = _MicroWinExecInterface.eCOMMCOMPASS_EVENT_LOG_REASON_SCAN_CNT_LIMIT
eCOMMCOMPASS_EVENT_LOG_REASON_MC_INSERTED = _MicroWinExecInterface.eCOMMCOMPASS_EVENT_LOG_REASON_MC_INSERTED
eCOMMCOMPASS_EVENT_LOG_REASON_MISSING_DEVICE = _MicroWinExecInterface.eCOMMCOMPASS_EVENT_LOG_REASON_MISSING_DEVICE
eCOMMCOMPASS_EVENT_LOG_REASON_DEVICE_PARAM = _MicroWinExecInterface.eCOMMCOMPASS_EVENT_LOG_REASON_DEVICE_PARAM
eCOMMCOMPASS_EVENT_LOG_REASON_FW_UPDATE = _MicroWinExecInterface.eCOMMCOMPASS_EVENT_LOG_REASON_FW_UPDATE
eCOMMCOMPASS_EVENT_LOG_REASON_BROWNOUT = _MicroWinExecInterface.eCOMMCOMPASS_EVENT_LOG_REASON_BROWNOUT
eCOMMCOMPASS_EVENT_LOG_REASON_SB_SM_BOARD_FAIL = _MicroWinExecInterface.eCOMMCOMPASS_EVENT_LOG_REASON_SB_SM_BOARD_FAIL
eCOMMCOMPASS_EVENT_LOG_REASON_WATCHDOG = _MicroWinExecInterface.eCOMMCOMPASS_EVENT_LOG_REASON_WATCHDOG
eCOMMCOMPASS_ALARM_LOG_CONNECTED = _MicroWinExecInterface.eCOMMCOMPASS_ALARM_LOG_CONNECTED
eCOMMCOMPASS_ALARM_LOG_DISCONNECTED = _MicroWinExecInterface.eCOMMCOMPASS_ALARM_LOG_DISCONNECTED
eCOMMCOMPASS_ALARM_LOG_NORNAL_ALARM = _MicroWinExecInterface.eCOMMCOMPASS_ALARM_LOG_NORNAL_ALARM
eCM_ALARM_TYPE_DIAGNOSIS = _MicroWinExecInterface.eCM_ALARM_TYPE_DIAGNOSIS
eCM_ALARM_TYPE_PROCESS = _MicroWinExecInterface.eCM_ALARM_TYPE_PROCESS
eCM_ALARM_TYPE_PULL = _MicroWinExecInterface.eCM_ALARM_TYPE_PULL
eCM_ALARM_TYPE_PLUG = _MicroWinExecInterface.eCM_ALARM_TYPE_PLUG
eCM_ALARM_TYPE_STATUS = _MicroWinExecInterface.eCM_ALARM_TYPE_STATUS
eCM_ALARM_TYPE_UPDATE = _MicroWinExecInterface.eCM_ALARM_TYPE_UPDATE
eCM_ALARM_TYPE_MEDIA_REDUNDANCY = _MicroWinExecInterface.eCM_ALARM_TYPE_MEDIA_REDUNDANCY
eCM_ALARM_TYPE_CONTROLLED_BY_SUPERVISOR = _MicroWinExecInterface.eCM_ALARM_TYPE_CONTROLLED_BY_SUPERVISOR
eCM_ALARM_TYPE_RELEASED = _MicroWinExecInterface.eCM_ALARM_TYPE_RELEASED
eCM_ALARM_TYPE_PLUG_WRONG = _MicroWinExecInterface.eCM_ALARM_TYPE_PLUG_WRONG
eCM_ALARM_TYPE_RETURN_OF_SUBMODULE = _MicroWinExecInterface.eCM_ALARM_TYPE_RETURN_OF_SUBMODULE
eCM_ALARM_TYPE_DIAGNOSIS_DISAPPEARS = _MicroWinExecInterface.eCM_ALARM_TYPE_DIAGNOSIS_DISAPPEARS
eCM_ALARM_TYPE_MCR_MISMATCH = _MicroWinExecInterface.eCM_ALARM_TYPE_MCR_MISMATCH
eCM_ALARM_TYPE_PORT_DATA_CHANGED = _MicroWinExecInterface.eCM_ALARM_TYPE_PORT_DATA_CHANGED
eCM_ALARM_TYPE_SYNC_DATA_CHANGED = _MicroWinExecInterface.eCM_ALARM_TYPE_SYNC_DATA_CHANGED
eCM_ALARM_TYPE_ISOCHRONE_MODE_PROBLEM = _MicroWinExecInterface.eCM_ALARM_TYPE_ISOCHRONE_MODE_PROBLEM
eCM_ALARM_TYPE_NETWORK_COMPONENT_PROBLEM = _MicroWinExecInterface.eCM_ALARM_TYPE_NETWORK_COMPONENT_PROBLEM
eCM_ALARM_TYPE_TIME_DATA_CHANGED = _MicroWinExecInterface.eCM_ALARM_TYPE_TIME_DATA_CHANGED
eCM_ALARM_TYPE_DFP_PROBLEM = _MicroWinExecInterface.eCM_ALARM_TYPE_DFP_PROBLEM
eCM_ALARM_TYPE_MRPD_PROBLEM = _MicroWinExecInterface.eCM_ALARM_TYPE_MRPD_PROBLEM
eCM_ALARM_TYPE_reserved_0x0015 = _MicroWinExecInterface.eCM_ALARM_TYPE_reserved_0x0015
eCM_ALARM_TYPE_MULTIPLE_INTERFACE = _MicroWinExecInterface.eCM_ALARM_TYPE_MULTIPLE_INTERFACE
eCM_ALARM_TYPE_reserved_0x0017 = _MicroWinExecInterface.eCM_ALARM_TYPE_reserved_0x0017
eCM_ALARM_TYPE_reserved_0x0018 = _MicroWinExecInterface.eCM_ALARM_TYPE_reserved_0x0018
eCM_ALARM_TYPE_reserved_0x0019 = _MicroWinExecInterface.eCM_ALARM_TYPE_reserved_0x0019
eCM_ALARM_TYPE_reserved_0x001A = _MicroWinExecInterface.eCM_ALARM_TYPE_reserved_0x001A
eCM_ALARM_TYPE_reserved_0x001B = _MicroWinExecInterface.eCM_ALARM_TYPE_reserved_0x001B
eCM_ALARM_TYPE_reserved_0x001C = _MicroWinExecInterface.eCM_ALARM_TYPE_reserved_0x001C
eCM_ALARM_TYPE_reserved_0x001D = _MicroWinExecInterface.eCM_ALARM_TYPE_reserved_0x001D
eCM_ALARM_TYPE_UPLOAD_AND_STORAGE = _MicroWinExecInterface.eCM_ALARM_TYPE_UPLOAD_AND_STORAGE
eCM_ALARM_TYPE_PULL_MODULE = _MicroWinExecInterface.eCM_ALARM_TYPE_PULL_MODULE
eCM_ALARM_TYPE_MODULE_DIFF_SUBSTITUTE = _MicroWinExecInterface.eCM_ALARM_TYPE_MODULE_DIFF_SUBSTITUTE
eCM_ALARM_TYPE_MODULE_DIFF_UNREACHABLE = _MicroWinExecInterface.eCM_ALARM_TYPE_MODULE_DIFF_UNREACHABLE
eCM_ALARM_SEVERITY_LEVEL_0 = _MicroWinExecInterface.eCM_ALARM_SEVERITY_LEVEL_0
eCM_ALARM_SEVERITY_LEVEL_1 = _MicroWinExecInterface.eCM_ALARM_SEVERITY_LEVEL_1
eCM_ALARM_SEVERITY_LEVEL_2 = _MicroWinExecInterface.eCM_ALARM_SEVERITY_LEVEL_2
eCM_ALARM_SEVERITY_LEVEL_3 = _MicroWinExecInterface.eCM_ALARM_SEVERITY_LEVEL_3
eCOMMCOMPASS_DST_SELECTION_DISABLED = _MicroWinExecInterface.eCOMMCOMPASS_DST_SELECTION_DISABLED
eCOMMCOMPASS_DST_SELECTION_EU00 = _MicroWinExecInterface.eCOMMCOMPASS_DST_SELECTION_EU00
eCOMMCOMPASS_DST_SELECTION_EU01 = _MicroWinExecInterface.eCOMMCOMPASS_DST_SELECTION_EU01
eCOMMCOMPASS_DST_SELECTION_EU02 = _MicroWinExecInterface.eCOMMCOMPASS_DST_SELECTION_EU02
eCOMMCOMPASS_DST_SELECTION_EU12 = _MicroWinExecInterface.eCOMMCOMPASS_DST_SELECTION_EU12
eCOMMCOMPASS_DST_SELECTION_US = _MicroWinExecInterface.eCOMMCOMPASS_DST_SELECTION_US
eCOMMCOMPASS_DST_SELECTION_AUS = _MicroWinExecInterface.eCOMMCOMPASS_DST_SELECTION_AUS
eCOMMCOMPASS_DST_SELECTION_NZ = _MicroWinExecInterface.eCOMMCOMPASS_DST_SELECTION_NZ
eCOMMCOMPASS_DST_SELECTION_RELATIVE = _MicroWinExecInterface.eCOMMCOMPASS_DST_SELECTION_RELATIVE
eCOMMCOMPASS_DST_SELECTION_ABSOLUTE = _MicroWinExecInterface.eCOMMCOMPASS_DST_SELECTION_ABSOLUTE
eCOMMCOMPASS_DIR3_SYS_VERSION_STD = _MicroWinExecInterface.eCOMMCOMPASS_DIR3_SYS_VERSION_STD
eCOMMCOMPASS_DIR3_SYS_VERSION_EXT = _MicroWinExecInterface.eCOMMCOMPASS_DIR3_SYS_VERSION_EXT
eCOMMCOMPASS_DIR3_ATTRIBUTE_USER_BLOCK = _MicroWinExecInterface.eCOMMCOMPASS_DIR3_ATTRIBUTE_USER_BLOCK
eCOMMCOMPASS_DIR3_ATTRIBUTE_STD_BLOCK = _MicroWinExecInterface.eCOMMCOMPASS_DIR3_ATTRIBUTE_STD_BLOCK
eCOMMCOMPASS_MC_NOT_PRESENT = _MicroWinExecInterface.eCOMMCOMPASS_MC_NOT_PRESENT
eCOMMCOMPASS_MC_32KB = _MicroWinExecInterface.eCOMMCOMPASS_MC_32KB
eCOMMCOMPASS_MC_64KB = _MicroWinExecInterface.eCOMMCOMPASS_MC_64KB
eCOMMCOMPASS_MC_256KB = _MicroWinExecInterface.eCOMMCOMPASS_MC_256KB
eCOMMCOMPASS_DIR_PGM_LANG_INVALID = _MicroWinExecInterface.eCOMMCOMPASS_DIR_PGM_LANG_INVALID
eCOMMCOMPASS_DIR_PGM_LANG_STMT_LST = _MicroWinExecInterface.eCOMMCOMPASS_DIR_PGM_LANG_STMT_LST
eCOMMCOMPASS_DIR_PGM_LANG_LADDER = _MicroWinExecInterface.eCOMMCOMPASS_DIR_PGM_LANG_LADDER
eCOMMCOMPASS_DIR_PGM_LANG_SDB = _MicroWinExecInterface.eCOMMCOMPASS_DIR_PGM_LANG_SDB
eCOMMCOMPASS_DIR_PGM_LANG_DB = _MicroWinExecInterface.eCOMMCOMPASS_DIR_PGM_LANG_DB
eCOMMCOMPASS_DIR_PGM_LANG_S7_STL = _MicroWinExecInterface.eCOMMCOMPASS_DIR_PGM_LANG_S7_STL
eCOMMCOMPASS_DIR_PGM_LANG_S7_LAD = _MicroWinExecInterface.eCOMMCOMPASS_DIR_PGM_LANG_S7_LAD
eCOMMCOMPASS_DIR_PGM_LANG_S7_FBD = _MicroWinExecInterface.eCOMMCOMPASS_DIR_PGM_LANG_S7_FBD
eCOMMCOMPASS_DIR_PGM_LANG_IEC_LD = _MicroWinExecInterface.eCOMMCOMPASS_DIR_PGM_LANG_IEC_LD
eCOMMCOMPASS_DIR_PGM_LANG_IEC_FBD = _MicroWinExecInterface.eCOMMCOMPASS_DIR_PGM_LANG_IEC_FBD
eCOMMCOMPASS_I_MEM_ONLY = _MicroWinExecInterface.eCOMMCOMPASS_I_MEM_ONLY
eCOMMCOMPASS_Q_MEM_ONLY = _MicroWinExecInterface.eCOMMCOMPASS_Q_MEM_ONLY
eCOMMCOMPASS_AI_MEM_ONLY = _MicroWinExecInterface.eCOMMCOMPASS_AI_MEM_ONLY
eCOMMCOMPASS_AQ_MEM_ONLY = _MicroWinExecInterface.eCOMMCOMPASS_AQ_MEM_ONLY
eCOMMCOMPASS_V_MEM_ONLY = _MicroWinExecInterface.eCOMMCOMPASS_V_MEM_ONLY
eCOMMCOMPASS_M_MEM_ONLY = _MicroWinExecInterface.eCOMMCOMPASS_M_MEM_ONLY
eCOMMCOMPASS_T_MEM_ONLY = _MicroWinExecInterface.eCOMMCOMPASS_T_MEM_ONLY
eCOMMCOMPASS_C_MEM_ONLY = _MicroWinExecInterface.eCOMMCOMPASS_C_MEM_ONLY
eCOMMCOMPASS_HC_MEM_ONLY = _MicroWinExecInterface.eCOMMCOMPASS_HC_MEM_ONLY
eCOMMCOMPASS_SM_MEM_ONLY = _MicroWinExecInterface.eCOMMCOMPASS_SM_MEM_ONLY
eCOMMCOMPASS_SCR_MEM_ONLY = _MicroWinExecInterface.eCOMMCOMPASS_SCR_MEM_ONLY
eCOMMCOMPASS_SD_MEM_ONLY = _MicroWinExecInterface.eCOMMCOMPASS_SD_MEM_ONLY
eCOMMCOMPASS_AC_MEM_ONLY = _MicroWinExecInterface.eCOMMCOMPASS_AC_MEM_ONLY
eCOMMCOMPASS_L_MEM_ONLY = _MicroWinExecInterface.eCOMMCOMPASS_L_MEM_ONLY
eCOMMCOMPASS_INDIRECT_MOD = _MicroWinExecInterface.eCOMMCOMPASS_INDIRECT_MOD
eCOMMCOMPASS_ADDRESSOF_MOD = _MicroWinExecInterface.eCOMMCOMPASS_ADDRESSOF_MOD
eCOMMCOMPASS_LITERAL_ONLY = _MicroWinExecInterface.eCOMMCOMPASS_LITERAL_ONLY
eCOMMCOMPASS_SBR_MEM_ONLY = _MicroWinExecInterface.eCOMMCOMPASS_SBR_MEM_ONLY
eCOMMCOMPASS_INT_MEM_ONLY = _MicroWinExecInterface.eCOMMCOMPASS_INT_MEM_ONLY
eCOMMCOMPASS_OB_MEM_ONLY = _MicroWinExecInterface.eCOMMCOMPASS_OB_MEM_ONLY
class MEM_AREA_MASK(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    discreteInputMask = property(_MicroWinExecInterface.MEM_AREA_MASK_discreteInputMask_get, _MicroWinExecInterface.MEM_AREA_MASK_discreteInputMask_set)
    discreteOutputMask = property(_MicroWinExecInterface.MEM_AREA_MASK_discreteOutputMask_get, _MicroWinExecInterface.MEM_AREA_MASK_discreteOutputMask_set)
    analogInputMask = property(_MicroWinExecInterface.MEM_AREA_MASK_analogInputMask_get, _MicroWinExecInterface.MEM_AREA_MASK_analogInputMask_set)
    analogOutputMask = property(_MicroWinExecInterface.MEM_AREA_MASK_analogOutputMask_get, _MicroWinExecInterface.MEM_AREA_MASK_analogOutputMask_set)
    dataMask = property(_MicroWinExecInterface.MEM_AREA_MASK_dataMask_get, _MicroWinExecInterface.MEM_AREA_MASK_dataMask_set)
    flagMask = property(_MicroWinExecInterface.MEM_AREA_MASK_flagMask_get, _MicroWinExecInterface.MEM_AREA_MASK_flagMask_set)
    timerMask = property(_MicroWinExecInterface.MEM_AREA_MASK_timerMask_get, _MicroWinExecInterface.MEM_AREA_MASK_timerMask_set)
    counterMask = property(_MicroWinExecInterface.MEM_AREA_MASK_counterMask_get, _MicroWinExecInterface.MEM_AREA_MASK_counterMask_set)
    highSpeedCounterMask = property(_MicroWinExecInterface.MEM_AREA_MASK_highSpeedCounterMask_get, _MicroWinExecInterface.MEM_AREA_MASK_highSpeedCounterMask_set)
    systemMask = property(_MicroWinExecInterface.MEM_AREA_MASK_systemMask_get, _MicroWinExecInterface.MEM_AREA_MASK_systemMask_set)
    stageMask = property(_MicroWinExecInterface.MEM_AREA_MASK_stageMask_get, _MicroWinExecInterface.MEM_AREA_MASK_stageMask_set)
    systemDataMask = property(_MicroWinExecInterface.MEM_AREA_MASK_systemDataMask_get, _MicroWinExecInterface.MEM_AREA_MASK_systemDataMask_set)
    accumulatorMask = property(_MicroWinExecInterface.MEM_AREA_MASK_accumulatorMask_get, _MicroWinExecInterface.MEM_AREA_MASK_accumulatorMask_set)
    localMask = property(_MicroWinExecInterface.MEM_AREA_MASK_localMask_get, _MicroWinExecInterface.MEM_AREA_MASK_localMask_set)
    indirectAddressingMask = property(_MicroWinExecInterface.MEM_AREA_MASK_indirectAddressingMask_get, _MicroWinExecInterface.MEM_AREA_MASK_indirectAddressingMask_set)
    addressOfMask = property(_MicroWinExecInterface.MEM_AREA_MASK_addressOfMask_get, _MicroWinExecInterface.MEM_AREA_MASK_addressOfMask_set)
    literalMask = property(_MicroWinExecInterface.MEM_AREA_MASK_literalMask_get, _MicroWinExecInterface.MEM_AREA_MASK_literalMask_set)
    subroutine = property(_MicroWinExecInterface.MEM_AREA_MASK_subroutine_get, _MicroWinExecInterface.MEM_AREA_MASK_subroutine_set)
    interrupt = property(_MicroWinExecInterface.MEM_AREA_MASK_interrupt_get, _MicroWinExecInterface.MEM_AREA_MASK_interrupt_set)
    organization = property(_MicroWinExecInterface.MEM_AREA_MASK_organization_get, _MicroWinExecInterface.MEM_AREA_MASK_organization_set)
    empty = property(_MicroWinExecInterface.MEM_AREA_MASK_empty_get, _MicroWinExecInterface.MEM_AREA_MASK_empty_set)

    def __init__(self):
        _MicroWinExecInterface.MEM_AREA_MASK_swiginit(self, _MicroWinExecInterface.new_MEM_AREA_MASK())
    __swig_destroy__ = _MicroWinExecInterface.delete_MEM_AREA_MASK

# Register MEM_AREA_MASK in _MicroWinExecInterface:
_MicroWinExecInterface.MEM_AREA_MASK_swigregister(MEM_AREA_MASK)

class sCOMMCOMPASS_ADDRESS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_eMemMode = property(_MicroWinExecInterface.sCOMMCOMPASS_ADDRESS_m_eMemMode_get, _MicroWinExecInterface.sCOMMCOMPASS_ADDRESS_m_eMemMode_set)
    m_eMemType = property(_MicroWinExecInterface.sCOMMCOMPASS_ADDRESS_m_eMemType_get, _MicroWinExecInterface.sCOMMCOMPASS_ADDRESS_m_eMemType_set)
    m_dwMemoryArea = property(_MicroWinExecInterface.sCOMMCOMPASS_ADDRESS_m_dwMemoryArea_get, _MicroWinExecInterface.sCOMMCOMPASS_ADDRESS_m_dwMemoryArea_set)
    m_nByteOffset = property(_MicroWinExecInterface.sCOMMCOMPASS_ADDRESS_m_nByteOffset_get, _MicroWinExecInterface.sCOMMCOMPASS_ADDRESS_m_nByteOffset_set)
    m_nBitOffset = property(_MicroWinExecInterface.sCOMMCOMPASS_ADDRESS_m_nBitOffset_get, _MicroWinExecInterface.sCOMMCOMPASS_ADDRESS_m_nBitOffset_set)

    def __init__(self):
        _MicroWinExecInterface.sCOMMCOMPASS_ADDRESS_swiginit(self, _MicroWinExecInterface.new_sCOMMCOMPASS_ADDRESS())
    __swig_destroy__ = _MicroWinExecInterface.delete_sCOMMCOMPASS_ADDRESS

# Register sCOMMCOMPASS_ADDRESS in _MicroWinExecInterface:
_MicroWinExecInterface.sCOMMCOMPASS_ADDRESS_swigregister(sCOMMCOMPASS_ADDRESS)

class sCOMMCOMPASS_MEM_STRUCT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_lErrorCode = property(_MicroWinExecInterface.sCOMMCOMPASS_MEM_STRUCT_m_lErrorCode_get, _MicroWinExecInterface.sCOMMCOMPASS_MEM_STRUCT_m_lErrorCode_set)
    m_sAddress = property(_MicroWinExecInterface.sCOMMCOMPASS_MEM_STRUCT_m_sAddress_get, _MicroWinExecInterface.sCOMMCOMPASS_MEM_STRUCT_m_sAddress_set)
    m_nNumberOfAddr = property(_MicroWinExecInterface.sCOMMCOMPASS_MEM_STRUCT_m_nNumberOfAddr_get, _MicroWinExecInterface.sCOMMCOMPASS_MEM_STRUCT_m_nNumberOfAddr_set)
    m_nDataLength = property(_MicroWinExecInterface.sCOMMCOMPASS_MEM_STRUCT_m_nDataLength_get, _MicroWinExecInterface.sCOMMCOMPASS_MEM_STRUCT_m_nDataLength_set)
    m_pData = property(_MicroWinExecInterface.sCOMMCOMPASS_MEM_STRUCT_m_pData_get, _MicroWinExecInterface.sCOMMCOMPASS_MEM_STRUCT_m_pData_set)

    def __init__(self):
        _MicroWinExecInterface.sCOMMCOMPASS_MEM_STRUCT_swiginit(self, _MicroWinExecInterface.new_sCOMMCOMPASS_MEM_STRUCT())
    __swig_destroy__ = _MicroWinExecInterface.delete_sCOMMCOMPASS_MEM_STRUCT

# Register sCOMMCOMPASS_MEM_STRUCT in _MicroWinExecInterface:
_MicroWinExecInterface.sCOMMCOMPASS_MEM_STRUCT_swigregister(sCOMMCOMPASS_MEM_STRUCT)

class sCOMMCOMPASS_ADDRESS_STRUCT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mode = property(_MicroWinExecInterface.sCOMMCOMPASS_ADDRESS_STRUCT_mode_get, _MicroWinExecInterface.sCOMMCOMPASS_ADDRESS_STRUCT_mode_set)
    size = property(_MicroWinExecInterface.sCOMMCOMPASS_ADDRESS_STRUCT_size_get, _MicroWinExecInterface.sCOMMCOMPASS_ADDRESS_STRUCT_size_set)
    memoryArea = property(_MicroWinExecInterface.sCOMMCOMPASS_ADDRESS_STRUCT_memoryArea_get, _MicroWinExecInterface.sCOMMCOMPASS_ADDRESS_STRUCT_memoryArea_set)
    offset = property(_MicroWinExecInterface.sCOMMCOMPASS_ADDRESS_STRUCT_offset_get, _MicroWinExecInterface.sCOMMCOMPASS_ADDRESS_STRUCT_offset_set)

    def __init__(self):
        _MicroWinExecInterface.sCOMMCOMPASS_ADDRESS_STRUCT_swiginit(self, _MicroWinExecInterface.new_sCOMMCOMPASS_ADDRESS_STRUCT())
    __swig_destroy__ = _MicroWinExecInterface.delete_sCOMMCOMPASS_ADDRESS_STRUCT

# Register sCOMMCOMPASS_ADDRESS_STRUCT in _MicroWinExecInterface:
_MicroWinExecInterface.sCOMMCOMPASS_ADDRESS_STRUCT_swigregister(sCOMMCOMPASS_ADDRESS_STRUCT)

class sCOMMCOMPASS_ES_DEF(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_nStartLineNum = property(_MicroWinExecInterface.sCOMMCOMPASS_ES_DEF_m_nStartLineNum_get, _MicroWinExecInterface.sCOMMCOMPASS_ES_DEF_m_nStartLineNum_set)
    m_nLines = property(_MicroWinExecInterface.sCOMMCOMPASS_ES_DEF_m_nLines_get, _MicroWinExecInterface.sCOMMCOMPASS_ES_DEF_m_nLines_set)

    def __init__(self):
        _MicroWinExecInterface.sCOMMCOMPASS_ES_DEF_swiginit(self, _MicroWinExecInterface.new_sCOMMCOMPASS_ES_DEF())
    __swig_destroy__ = _MicroWinExecInterface.delete_sCOMMCOMPASS_ES_DEF

# Register sCOMMCOMPASS_ES_DEF in _MicroWinExecInterface:
_MicroWinExecInterface.sCOMMCOMPASS_ES_DEF_swigregister(sCOMMCOMPASS_ES_DEF)

class eCOMMCOMPASS_TIMER_COUNTER_DATA(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byBitData = property(_MicroWinExecInterface.eCOMMCOMPASS_TIMER_COUNTER_DATA_byBitData_get, _MicroWinExecInterface.eCOMMCOMPASS_TIMER_COUNTER_DATA_byBitData_set)
    wWordData = property(_MicroWinExecInterface.eCOMMCOMPASS_TIMER_COUNTER_DATA_wWordData_get, _MicroWinExecInterface.eCOMMCOMPASS_TIMER_COUNTER_DATA_wWordData_set)

    def __init__(self):
        _MicroWinExecInterface.eCOMMCOMPASS_TIMER_COUNTER_DATA_swiginit(self, _MicroWinExecInterface.new_eCOMMCOMPASS_TIMER_COUNTER_DATA())
    __swig_destroy__ = _MicroWinExecInterface.delete_eCOMMCOMPASS_TIMER_COUNTER_DATA

# Register eCOMMCOMPASS_TIMER_COUNTER_DATA in _MicroWinExecInterface:
_MicroWinExecInterface.eCOMMCOMPASS_TIMER_COUNTER_DATA_swigregister(eCOMMCOMPASS_TIMER_COUNTER_DATA)

class sCOMMCOMPASS_SYSTEMTIME(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    wYear = property(_MicroWinExecInterface.sCOMMCOMPASS_SYSTEMTIME_wYear_get, _MicroWinExecInterface.sCOMMCOMPASS_SYSTEMTIME_wYear_set)
    wMonth = property(_MicroWinExecInterface.sCOMMCOMPASS_SYSTEMTIME_wMonth_get, _MicroWinExecInterface.sCOMMCOMPASS_SYSTEMTIME_wMonth_set)
    wDayOfWeek = property(_MicroWinExecInterface.sCOMMCOMPASS_SYSTEMTIME_wDayOfWeek_get, _MicroWinExecInterface.sCOMMCOMPASS_SYSTEMTIME_wDayOfWeek_set)
    wDay = property(_MicroWinExecInterface.sCOMMCOMPASS_SYSTEMTIME_wDay_get, _MicroWinExecInterface.sCOMMCOMPASS_SYSTEMTIME_wDay_set)
    wHour = property(_MicroWinExecInterface.sCOMMCOMPASS_SYSTEMTIME_wHour_get, _MicroWinExecInterface.sCOMMCOMPASS_SYSTEMTIME_wHour_set)
    wMinute = property(_MicroWinExecInterface.sCOMMCOMPASS_SYSTEMTIME_wMinute_get, _MicroWinExecInterface.sCOMMCOMPASS_SYSTEMTIME_wMinute_set)
    wSecond = property(_MicroWinExecInterface.sCOMMCOMPASS_SYSTEMTIME_wSecond_get, _MicroWinExecInterface.sCOMMCOMPASS_SYSTEMTIME_wSecond_set)
    wMilliseconds = property(_MicroWinExecInterface.sCOMMCOMPASS_SYSTEMTIME_wMilliseconds_get, _MicroWinExecInterface.sCOMMCOMPASS_SYSTEMTIME_wMilliseconds_set)

    def __init__(self):
        _MicroWinExecInterface.sCOMMCOMPASS_SYSTEMTIME_swiginit(self, _MicroWinExecInterface.new_sCOMMCOMPASS_SYSTEMTIME())
    __swig_destroy__ = _MicroWinExecInterface.delete_sCOMMCOMPASS_SYSTEMTIME

# Register sCOMMCOMPASS_SYSTEMTIME in _MicroWinExecInterface:
_MicroWinExecInterface.sCOMMCOMPASS_SYSTEMTIME_swigregister(sCOMMCOMPASS_SYSTEMTIME)

class sCOMMCOMPASS_DST_SYSTEMTIME(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sTime = property(_MicroWinExecInterface.sCOMMCOMPASS_DST_SYSTEMTIME_sTime_get, _MicroWinExecInterface.sCOMMCOMPASS_DST_SYSTEMTIME_sTime_set)
    wWeekNumber = property(_MicroWinExecInterface.sCOMMCOMPASS_DST_SYSTEMTIME_wWeekNumber_get, _MicroWinExecInterface.sCOMMCOMPASS_DST_SYSTEMTIME_wWeekNumber_set)

    def __init__(self):
        _MicroWinExecInterface.sCOMMCOMPASS_DST_SYSTEMTIME_swiginit(self, _MicroWinExecInterface.new_sCOMMCOMPASS_DST_SYSTEMTIME())
    __swig_destroy__ = _MicroWinExecInterface.delete_sCOMMCOMPASS_DST_SYSTEMTIME

# Register sCOMMCOMPASS_DST_SYSTEMTIME in _MicroWinExecInterface:
_MicroWinExecInterface.sCOMMCOMPASS_DST_SYSTEMTIME_swigregister(sCOMMCOMPASS_DST_SYSTEMTIME)

class sAlarmLog(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_wDeviceNum = property(_MicroWinExecInterface.sAlarmLog_m_wDeviceNum_get, _MicroWinExecInterface.sAlarmLog_m_wDeviceNum_set)
    m_wSlotNum = property(_MicroWinExecInterface.sAlarmLog_m_wSlotNum_get, _MicroWinExecInterface.sAlarmLog_m_wSlotNum_set)
    m_wSubSlotNum = property(_MicroWinExecInterface.sAlarmLog_m_wSubSlotNum_get, _MicroWinExecInterface.sAlarmLog_m_wSubSlotNum_set)
    m_wAlarmType = property(_MicroWinExecInterface.sAlarmLog_m_wAlarmType_get, _MicroWinExecInterface.sAlarmLog_m_wAlarmType_set)
    m_dwAPI = property(_MicroWinExecInterface.sAlarmLog_m_dwAPI_get, _MicroWinExecInterface.sAlarmLog_m_dwAPI_set)
    m_dwDataLength = property(_MicroWinExecInterface.sAlarmLog_m_dwDataLength_get, _MicroWinExecInterface.sAlarmLog_m_dwDataLength_set)
    m_aRawData = property(_MicroWinExecInterface.sAlarmLog_m_aRawData_get, _MicroWinExecInterface.sAlarmLog_m_aRawData_set)

    def __init__(self):
        _MicroWinExecInterface.sAlarmLog_swiginit(self, _MicroWinExecInterface.new_sAlarmLog())
    __swig_destroy__ = _MicroWinExecInterface.delete_sAlarmLog

# Register sAlarmLog in _MicroWinExecInterface:
_MicroWinExecInterface.sAlarmLog_swigregister(sAlarmLog)

class sCOMMCOMPASS_EVENT_LOG(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_eEventCode = property(_MicroWinExecInterface.sCOMMCOMPASS_EVENT_LOG_m_eEventCode_get, _MicroWinExecInterface.sCOMMCOMPASS_EVENT_LOG_m_eEventCode_set)
    m_eReason = property(_MicroWinExecInterface.sCOMMCOMPASS_EVENT_LOG_m_eReason_get, _MicroWinExecInterface.sCOMMCOMPASS_EVENT_LOG_m_eReason_set)
    m_sEventTime = property(_MicroWinExecInterface.sCOMMCOMPASS_EVENT_LOG_m_sEventTime_get, _MicroWinExecInterface.sCOMMCOMPASS_EVENT_LOG_m_sEventTime_set)
    m_nFatalErrorCode = property(_MicroWinExecInterface.sCOMMCOMPASS_EVENT_LOG_m_nFatalErrorCode_get, _MicroWinExecInterface.sCOMMCOMPASS_EVENT_LOG_m_nFatalErrorCode_set)
    m_byOccupied = property(_MicroWinExecInterface.sCOMMCOMPASS_EVENT_LOG_m_byOccupied_get, _MicroWinExecInterface.sCOMMCOMPASS_EVENT_LOG_m_byOccupied_set)
    m_byReserved = property(_MicroWinExecInterface.sCOMMCOMPASS_EVENT_LOG_m_byReserved_get, _MicroWinExecInterface.sCOMMCOMPASS_EVENT_LOG_m_byReserved_set)
    m_tAlarmLog = property(_MicroWinExecInterface.sCOMMCOMPASS_EVENT_LOG_m_tAlarmLog_get, _MicroWinExecInterface.sCOMMCOMPASS_EVENT_LOG_m_tAlarmLog_set)

    def __init__(self):
        _MicroWinExecInterface.sCOMMCOMPASS_EVENT_LOG_swiginit(self, _MicroWinExecInterface.new_sCOMMCOMPASS_EVENT_LOG())
    __swig_destroy__ = _MicroWinExecInterface.delete_sCOMMCOMPASS_EVENT_LOG

# Register sCOMMCOMPASS_EVENT_LOG in _MicroWinExecInterface:
_MicroWinExecInterface.sCOMMCOMPASS_EVENT_LOG_swigregister(sCOMMCOMPASS_EVENT_LOG)

class sChannelError(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_wChannelErrorType = property(_MicroWinExecInterface.sChannelError_m_wChannelErrorType_get, _MicroWinExecInterface.sChannelError_m_wChannelErrorType_set)
    m_wReserved1 = property(_MicroWinExecInterface.sChannelError_m_wReserved1_get, _MicroWinExecInterface.sChannelError_m_wReserved1_set)
    m_dwReserved2 = property(_MicroWinExecInterface.sChannelError_m_dwReserved2_get, _MicroWinExecInterface.sChannelError_m_dwReserved2_set)
    m_dwReserved3 = property(_MicroWinExecInterface.sChannelError_m_dwReserved3_get, _MicroWinExecInterface.sChannelError_m_dwReserved3_set)

    def __init__(self):
        _MicroWinExecInterface.sChannelError_swiginit(self, _MicroWinExecInterface.new_sChannelError())
    __swig_destroy__ = _MicroWinExecInterface.delete_sChannelError

# Register sChannelError in _MicroWinExecInterface:
_MicroWinExecInterface.sChannelError_swigregister(sChannelError)

class sExtChannelError(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_wChannelErrorType = property(_MicroWinExecInterface.sExtChannelError_m_wChannelErrorType_get, _MicroWinExecInterface.sExtChannelError_m_wChannelErrorType_set)
    m_wExtChannelErrorType = property(_MicroWinExecInterface.sExtChannelError_m_wExtChannelErrorType_get, _MicroWinExecInterface.sExtChannelError_m_wExtChannelErrorType_set)
    m_dwExtChannelAddValue = property(_MicroWinExecInterface.sExtChannelError_m_dwExtChannelAddValue_get, _MicroWinExecInterface.sExtChannelError_m_dwExtChannelAddValue_set)
    m_dwReserved = property(_MicroWinExecInterface.sExtChannelError_m_dwReserved_get, _MicroWinExecInterface.sExtChannelError_m_dwReserved_set)

    def __init__(self):
        _MicroWinExecInterface.sExtChannelError_swiginit(self, _MicroWinExecInterface.new_sExtChannelError())
    __swig_destroy__ = _MicroWinExecInterface.delete_sExtChannelError

# Register sExtChannelError in _MicroWinExecInterface:
_MicroWinExecInterface.sExtChannelError_swigregister(sExtChannelError)

class sQualifiedChannelError(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_wChannelErrorType = property(_MicroWinExecInterface.sQualifiedChannelError_m_wChannelErrorType_get, _MicroWinExecInterface.sQualifiedChannelError_m_wChannelErrorType_set)
    m_wExtChannelErrorType = property(_MicroWinExecInterface.sQualifiedChannelError_m_wExtChannelErrorType_get, _MicroWinExecInterface.sQualifiedChannelError_m_wExtChannelErrorType_set)
    m_dwExtChannelAddValue = property(_MicroWinExecInterface.sQualifiedChannelError_m_dwExtChannelAddValue_get, _MicroWinExecInterface.sQualifiedChannelError_m_dwExtChannelAddValue_set)
    m_dwQualifiedChannelQualifier = property(_MicroWinExecInterface.sQualifiedChannelError_m_dwQualifiedChannelQualifier_get, _MicroWinExecInterface.sQualifiedChannelError_m_dwQualifiedChannelQualifier_set)

    def __init__(self):
        _MicroWinExecInterface.sQualifiedChannelError_swiginit(self, _MicroWinExecInterface.new_sQualifiedChannelError())
    __swig_destroy__ = _MicroWinExecInterface.delete_sQualifiedChannelError

# Register sQualifiedChannelError in _MicroWinExecInterface:
_MicroWinExecInterface.sQualifiedChannelError_swigregister(sQualifiedChannelError)

class sManufacturerError(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_wInfoLength = property(_MicroWinExecInterface.sManufacturerError_m_wInfoLength_get, _MicroWinExecInterface.sManufacturerError_m_wInfoLength_set)
    m_wReserved = property(_MicroWinExecInterface.sManufacturerError_m_wReserved_get, _MicroWinExecInterface.sManufacturerError_m_wReserved_set)
    m_dwDataIndex = property(_MicroWinExecInterface.sManufacturerError_m_dwDataIndex_get, _MicroWinExecInterface.sManufacturerError_m_dwDataIndex_set)
    m_dwDataPtr = property(_MicroWinExecInterface.sManufacturerError_m_dwDataPtr_get, _MicroWinExecInterface.sManufacturerError_m_dwDataPtr_set)

    def __init__(self):
        _MicroWinExecInterface.sManufacturerError_swiginit(self, _MicroWinExecInterface.new_sManufacturerError())
    __swig_destroy__ = _MicroWinExecInterface.delete_sManufacturerError

# Register sManufacturerError in _MicroWinExecInterface:
_MicroWinExecInterface.sManufacturerError_swigregister(sManufacturerError)

class sModuleDiffError(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_dwModuleIdentNo = property(_MicroWinExecInterface.sModuleDiffError_m_dwModuleIdentNo_get, _MicroWinExecInterface.sModuleDiffError_m_dwModuleIdentNo_set)
    m_dwReserve1 = property(_MicroWinExecInterface.sModuleDiffError_m_dwReserve1_get, _MicroWinExecInterface.sModuleDiffError_m_dwReserve1_set)
    m_dwReserve2 = property(_MicroWinExecInterface.sModuleDiffError_m_dwReserve2_get, _MicroWinExecInterface.sModuleDiffError_m_dwReserve2_set)

    def __init__(self):
        _MicroWinExecInterface.sModuleDiffError_swiginit(self, _MicroWinExecInterface.new_sModuleDiffError())
    __swig_destroy__ = _MicroWinExecInterface.delete_sModuleDiffError

# Register sModuleDiffError in _MicroWinExecInterface:
_MicroWinExecInterface.sModuleDiffError_swigregister(sModuleDiffError)

class uDiagnosisData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_tChannelError = property(_MicroWinExecInterface.uDiagnosisData_m_tChannelError_get, _MicroWinExecInterface.uDiagnosisData_m_tChannelError_set)
    m_tExtChannelError = property(_MicroWinExecInterface.uDiagnosisData_m_tExtChannelError_get, _MicroWinExecInterface.uDiagnosisData_m_tExtChannelError_set)
    m_tQualifiedChannelError = property(_MicroWinExecInterface.uDiagnosisData_m_tQualifiedChannelError_get, _MicroWinExecInterface.uDiagnosisData_m_tQualifiedChannelError_set)
    m_tManufactureError = property(_MicroWinExecInterface.uDiagnosisData_m_tManufactureError_get, _MicroWinExecInterface.uDiagnosisData_m_tManufactureError_set)

    def __init__(self):
        _MicroWinExecInterface.uDiagnosisData_swiginit(self, _MicroWinExecInterface.new_uDiagnosisData())
    __swig_destroy__ = _MicroWinExecInterface.delete_uDiagnosisData

# Register uDiagnosisData in _MicroWinExecInterface:
_MicroWinExecInterface.uDiagnosisData_swigregister(uDiagnosisData)

class sDiagnosisItem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_wAlarmTag = property(_MicroWinExecInterface.sDiagnosisItem_m_wAlarmTag_get, _MicroWinExecInterface.sDiagnosisItem_m_wAlarmTag_set)
    m_wChannelNumber = property(_MicroWinExecInterface.sDiagnosisItem_m_wChannelNumber_get, _MicroWinExecInterface.sDiagnosisItem_m_wChannelNumber_set)
    m_byDirection = property(_MicroWinExecInterface.sDiagnosisItem_m_byDirection_get, _MicroWinExecInterface.sDiagnosisItem_m_byDirection_set)
    m_bySpecifier = property(_MicroWinExecInterface.sDiagnosisItem_m_bySpecifier_get, _MicroWinExecInterface.sDiagnosisItem_m_bySpecifier_set)
    m_bySeverity = property(_MicroWinExecInterface.sDiagnosisItem_m_bySeverity_get, _MicroWinExecInterface.sDiagnosisItem_m_bySeverity_set)
    m_bMultipleChannel = property(_MicroWinExecInterface.sDiagnosisItem_m_bMultipleChannel_get, _MicroWinExecInterface.sDiagnosisItem_m_bMultipleChannel_set)
    m_uDiagnosisData = property(_MicroWinExecInterface.sDiagnosisItem_m_uDiagnosisData_get, _MicroWinExecInterface.sDiagnosisItem_m_uDiagnosisData_set)

    def __init__(self):
        _MicroWinExecInterface.sDiagnosisItem_swiginit(self, _MicroWinExecInterface.new_sDiagnosisItem())
    __swig_destroy__ = _MicroWinExecInterface.delete_sDiagnosisItem

# Register sDiagnosisItem in _MicroWinExecInterface:
_MicroWinExecInterface.sDiagnosisItem_swigregister(sDiagnosisItem)

class sCOMMCOMPASS_ALARM_ITEM(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_byYear = property(_MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_byYear_get, _MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_byYear_set)
    m_byMonth = property(_MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_byMonth_get, _MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_byMonth_set)
    m_byDay = property(_MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_byDay_get, _MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_byDay_set)
    m_byHour = property(_MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_byHour_get, _MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_byHour_set)
    m_byMinute = property(_MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_byMinute_get, _MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_byMinute_set)
    m_bySecond = property(_MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_bySecond_get, _MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_bySecond_set)
    m_byTimeReserv1 = property(_MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_byTimeReserv1_get, _MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_byTimeReserv1_set)
    m_byTimeReserv2 = property(_MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_byTimeReserv2_get, _MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_byTimeReserv2_set)
    m_pSubModuleAlarmPtr = property(_MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_pSubModuleAlarmPtr_get, _MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_pSubModuleAlarmPtr_set)
    m_dwAPINumber = property(_MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_dwAPINumber_get, _MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_dwAPINumber_set)
    m_wDeviceNumber = property(_MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_wDeviceNumber_get, _MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_wDeviceNumber_set)
    m_wSlotNumber = property(_MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_wSlotNumber_get, _MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_wSlotNumber_set)
    m_wSubSlotNumber = property(_MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_wSubSlotNumber_get, _MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_wSubSlotNumber_set)
    m_wAlarmType = property(_MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_wAlarmType_get, _MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_wAlarmType_set)
    m_wAlarmSequence = property(_MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_wAlarmSequence_get, _MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_wAlarmSequence_set)
    m_bDiagChannelAvailable = property(_MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_bDiagChannelAvailable_get, _MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_bDiagChannelAvailable_set)
    m_bDiagGenericAvailable = property(_MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_bDiagGenericAvailable_get, _MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_bDiagGenericAvailable_set)
    m_bDiagSubmodAvailable = property(_MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_bDiagSubmodAvailable_get, _MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_bDiagSubmodAvailable_set)
    m_bArDiagnosisState = property(_MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_bArDiagnosisState_get, _MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_bArDiagnosisState_set)
    m_wReserve1 = property(_MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_wReserve1_get, _MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_wReserve1_set)
    m_nMaintenanceStatus = property(_MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_nMaintenanceStatus_get, _MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_nMaintenanceStatus_set)
    m_bHasDiagnosisItem = property(_MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_bHasDiagnosisItem_get, _MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_bHasDiagnosisItem_set)
    m_byReserved = property(_MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_byReserved_get, _MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_byReserved_set)
    m_tDiagnosisItem = property(_MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_tDiagnosisItem_get, _MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_m_tDiagnosisItem_set)

    def __init__(self):
        _MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_swiginit(self, _MicroWinExecInterface.new_sCOMMCOMPASS_ALARM_ITEM())
    __swig_destroy__ = _MicroWinExecInterface.delete_sCOMMCOMPASS_ALARM_ITEM

# Register sCOMMCOMPASS_ALARM_ITEM in _MicroWinExecInterface:
_MicroWinExecInterface.sCOMMCOMPASS_ALARM_ITEM_swigregister(sCOMMCOMPASS_ALARM_ITEM)

class sCOMMCOMPASS_DST_STATUS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_sCurrentTime = property(_MicroWinExecInterface.sCOMMCOMPASS_DST_STATUS_m_sCurrentTime_get, _MicroWinExecInterface.sCOMMCOMPASS_DST_STATUS_m_sCurrentTime_set)
    m_eSelection = property(_MicroWinExecInterface.sCOMMCOMPASS_DST_STATUS_m_eSelection_get, _MicroWinExecInterface.sCOMMCOMPASS_DST_STATUS_m_eSelection_set)
    m_nDeltaHour = property(_MicroWinExecInterface.sCOMMCOMPASS_DST_STATUS_m_nDeltaHour_get, _MicroWinExecInterface.sCOMMCOMPASS_DST_STATUS_m_nDeltaHour_set)
    m_nDeltaMinute = property(_MicroWinExecInterface.sCOMMCOMPASS_DST_STATUS_m_nDeltaMinute_get, _MicroWinExecInterface.sCOMMCOMPASS_DST_STATUS_m_nDeltaMinute_set)
    m_sConvertToTime = property(_MicroWinExecInterface.sCOMMCOMPASS_DST_STATUS_m_sConvertToTime_get, _MicroWinExecInterface.sCOMMCOMPASS_DST_STATUS_m_sConvertToTime_set)
    m_sConvertFromTime = property(_MicroWinExecInterface.sCOMMCOMPASS_DST_STATUS_m_sConvertFromTime_get, _MicroWinExecInterface.sCOMMCOMPASS_DST_STATUS_m_sConvertFromTime_set)

    def __init__(self):
        _MicroWinExecInterface.sCOMMCOMPASS_DST_STATUS_swiginit(self, _MicroWinExecInterface.new_sCOMMCOMPASS_DST_STATUS())
    __swig_destroy__ = _MicroWinExecInterface.delete_sCOMMCOMPASS_DST_STATUS

# Register sCOMMCOMPASS_DST_STATUS in _MicroWinExecInterface:
_MicroWinExecInterface.sCOMMCOMPASS_DST_STATUS_swigregister(sCOMMCOMPASS_DST_STATUS)

class sCOMMCOMPASS_DIR3_DATA(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_nStatus = property(_MicroWinExecInterface.sCOMMCOMPASS_DIR3_DATA_m_nStatus_get, _MicroWinExecInterface.sCOMMCOMPASS_DIR3_DATA_m_nStatus_set)
    m_eSysVersion = property(_MicroWinExecInterface.sCOMMCOMPASS_DIR3_DATA_m_eSysVersion_get, _MicroWinExecInterface.sCOMMCOMPASS_DIR3_DATA_m_eSysVersion_set)
    m_eAttribute = property(_MicroWinExecInterface.sCOMMCOMPASS_DIR3_DATA_m_eAttribute_get, _MicroWinExecInterface.sCOMMCOMPASS_DIR3_DATA_m_eAttribute_set)
    m_ePGMLanguage = property(_MicroWinExecInterface.sCOMMCOMPASS_DIR3_DATA_m_ePGMLanguage_get, _MicroWinExecInterface.sCOMMCOMPASS_DIR3_DATA_m_ePGMLanguage_set)
    m_eBlockType = property(_MicroWinExecInterface.sCOMMCOMPASS_DIR3_DATA_m_eBlockType_get, _MicroWinExecInterface.sCOMMCOMPASS_DIR3_DATA_m_eBlockType_set)
    m_nBlockNumber = property(_MicroWinExecInterface.sCOMMCOMPASS_DIR3_DATA_m_nBlockNumber_get, _MicroWinExecInterface.sCOMMCOMPASS_DIR3_DATA_m_nBlockNumber_set)
    m_lBlockLength = property(_MicroWinExecInterface.sCOMMCOMPASS_DIR3_DATA_m_lBlockLength_get, _MicroWinExecInterface.sCOMMCOMPASS_DIR3_DATA_m_lBlockLength_set)
    m_sModifyTime = property(_MicroWinExecInterface.sCOMMCOMPASS_DIR3_DATA_m_sModifyTime_get, _MicroWinExecInterface.sCOMMCOMPASS_DIR3_DATA_m_sModifyTime_set)
    m_sCreateTime = property(_MicroWinExecInterface.sCOMMCOMPASS_DIR3_DATA_m_sCreateTime_get, _MicroWinExecInterface.sCOMMCOMPASS_DIR3_DATA_m_sCreateTime_set)
    m_lSection1Length = property(_MicroWinExecInterface.sCOMMCOMPASS_DIR3_DATA_m_lSection1Length_get, _MicroWinExecInterface.sCOMMCOMPASS_DIR3_DATA_m_lSection1Length_set)
    m_lSection2Length = property(_MicroWinExecInterface.sCOMMCOMPASS_DIR3_DATA_m_lSection2Length_get, _MicroWinExecInterface.sCOMMCOMPASS_DIR3_DATA_m_lSection2Length_set)
    m_lSection3Length = property(_MicroWinExecInterface.sCOMMCOMPASS_DIR3_DATA_m_lSection3Length_get, _MicroWinExecInterface.sCOMMCOMPASS_DIR3_DATA_m_lSection3Length_set)

    def __init__(self):
        _MicroWinExecInterface.sCOMMCOMPASS_DIR3_DATA_swiginit(self, _MicroWinExecInterface.new_sCOMMCOMPASS_DIR3_DATA())
    __swig_destroy__ = _MicroWinExecInterface.delete_sCOMMCOMPASS_DIR3_DATA

# Register sCOMMCOMPASS_DIR3_DATA in _MicroWinExecInterface:
_MicroWinExecInterface.sCOMMCOMPASS_DIR3_DATA_swigregister(sCOMMCOMPASS_DIR3_DATA)

class sCOMMCOMPASS_DIR2_DATA(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_nBlockNumber = property(_MicroWinExecInterface.sCOMMCOMPASS_DIR2_DATA_m_nBlockNumber_get, _MicroWinExecInterface.sCOMMCOMPASS_DIR2_DATA_m_nBlockNumber_set)
    m_eBlockLocation = property(_MicroWinExecInterface.sCOMMCOMPASS_DIR2_DATA_m_eBlockLocation_get, _MicroWinExecInterface.sCOMMCOMPASS_DIR2_DATA_m_eBlockLocation_set)
    m_eBlockStatus = property(_MicroWinExecInterface.sCOMMCOMPASS_DIR2_DATA_m_eBlockStatus_get, _MicroWinExecInterface.sCOMMCOMPASS_DIR2_DATA_m_eBlockStatus_set)
    m_ePGMLanguage = property(_MicroWinExecInterface.sCOMMCOMPASS_DIR2_DATA_m_ePGMLanguage_get, _MicroWinExecInterface.sCOMMCOMPASS_DIR2_DATA_m_ePGMLanguage_set)

    def __init__(self):
        _MicroWinExecInterface.sCOMMCOMPASS_DIR2_DATA_swiginit(self, _MicroWinExecInterface.new_sCOMMCOMPASS_DIR2_DATA())
    __swig_destroy__ = _MicroWinExecInterface.delete_sCOMMCOMPASS_DIR2_DATA

# Register sCOMMCOMPASS_DIR2_DATA in _MicroWinExecInterface:
_MicroWinExecInterface.sCOMMCOMPASS_DIR2_DATA_swigregister(sCOMMCOMPASS_DIR2_DATA)

eCOMMCOMPASS_MODULE_IS_CPU = _MicroWinExecInterface.eCOMMCOMPASS_MODULE_IS_CPU
eCOMMCOMPASS_MODULE_IS_DISCRETE = _MicroWinExecInterface.eCOMMCOMPASS_MODULE_IS_DISCRETE
eCOMMCOMPASS_MODULE_IS_ANALOG = _MicroWinExecInterface.eCOMMCOMPASS_MODULE_IS_ANALOG
eCOMMCOMPASS_MODULE_IS_INTELLIGENT_DISCRETE = _MicroWinExecInterface.eCOMMCOMPASS_MODULE_IS_INTELLIGENT_DISCRETE
eCOMMCOMPASS_MODULE_IS_INTELLIGENT_ANALOG = _MicroWinExecInterface.eCOMMCOMPASS_MODULE_IS_INTELLIGENT_ANALOG
eCOMMCOMPASS_MODULE_IS_ABSENT = _MicroWinExecInterface.eCOMMCOMPASS_MODULE_IS_ABSENT
eCOMMCOMPASS_MODULE_IS_ASI_CP243_DISCRETE = _MicroWinExecInterface.eCOMMCOMPASS_MODULE_IS_ASI_CP243_DISCRETE
eCOMMCOMPASS_MODULE_IS_ASI_CP243_ANALOG = _MicroWinExecInterface.eCOMMCOMPASS_MODULE_IS_ASI_CP243_ANALOG
eCOMMCOMPASS_CPU_IS_BIG_BRICK = _MicroWinExecInterface.eCOMMCOMPASS_CPU_IS_BIG_BRICK
eCOMMCOMPASS_CPU_IS_SMALL_BRICK = _MicroWinExecInterface.eCOMMCOMPASS_CPU_IS_SMALL_BRICK
eCOMMCOMPASS_MODULE_IS_BIG_BRICK = _MicroWinExecInterface.eCOMMCOMPASS_MODULE_IS_BIG_BRICK
eCOMMCOMPASS_MODULE_IS_SMALL_BRICK = _MicroWinExecInterface.eCOMMCOMPASS_MODULE_IS_SMALL_BRICK
eCOMMCOMPASS_BB_CPU_NO_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_BB_CPU_NO_ERROR
eCOMMCOMPASS_BB_CPU_TERMINAL_BLOCK_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_BB_CPU_TERMINAL_BLOCK_ERROR
eCOMMCOMPASS_BB_CPU_BLOWN_FUSE_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_BB_CPU_BLOWN_FUSE_ERROR
eCOMMCOMPASS_BB_CPU_NO_POWER_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_BB_CPU_NO_POWER_ERROR
eCOMMCOMPASS_BB_CPU_CONFIG_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_BB_CPU_CONFIG_ERROR
eCOMMCOMPASS_BB_CPU_UNION = _MicroWinExecInterface.eCOMMCOMPASS_BB_CPU_UNION
eCOMMCOMPASS_BB_CPU_TYPE2 = _MicroWinExecInterface.eCOMMCOMPASS_BB_CPU_TYPE2
eCOMMCOMPASS_BB_CPU_TYPE1 = _MicroWinExecInterface.eCOMMCOMPASS_BB_CPU_TYPE1
eCOMMCOMPASS_BB_CPU_FORMAT = _MicroWinExecInterface.eCOMMCOMPASS_BB_CPU_FORMAT
eCOMMCOMPASS_SB_CPU_NO_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_SB_CPU_NO_ERROR
eCOMMCOMPASS_SB_CPU_TERMINAL_BLOCK_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_SB_CPU_TERMINAL_BLOCK_ERROR
eCOMMCOMPASS_SB_CPU_BLOWN_FUSE_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_SB_CPU_BLOWN_FUSE_ERROR
eCOMMCOMPASS_SB_CPU_NO_POWER_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_SB_CPU_NO_POWER_ERROR
eCOMMCOMPASS_SB_CPU_RANGE_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_SB_CPU_RANGE_ERROR
eCOMMCOMPASS_SB_CPU_UNION = _MicroWinExecInterface.eCOMMCOMPASS_SB_CPU_UNION
eCOMMCOMPASS_SB_CPU_TYPE2 = _MicroWinExecInterface.eCOMMCOMPASS_SB_CPU_TYPE2
eCOMMCOMPASS_SB_CPU_TYPE1 = _MicroWinExecInterface.eCOMMCOMPASS_SB_CPU_TYPE1
eCOMMCOMPASS_SB_CPU_CONFIG_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_SB_CPU_CONFIG_ERROR
eCOMMCOMPASS_BB_MOD_NO_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_BB_MOD_NO_ERROR
eCOMMCOMPASS_BB_MOD_TERMINAL_BLOCK_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_BB_MOD_TERMINAL_BLOCK_ERROR
eCOMMCOMPASS_BB_MOD_BLOWN_FUSE_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_BB_MOD_BLOWN_FUSE_ERROR
eCOMMCOMPASS_BB_MOD_NO_POWER_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_BB_MOD_NO_POWER_ERROR
eCOMMCOMPASS_BB_MOD_CONFIG_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_BB_MOD_CONFIG_ERROR
eCOMMCOMPASS_BB_MOD_BUS_PARITY_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_BB_MOD_BUS_PARITY_ERROR
eCOMMCOMPASS_BB_MOD_TYPE2 = _MicroWinExecInterface.eCOMMCOMPASS_BB_MOD_TYPE2
eCOMMCOMPASS_BB_MOD_TYPE1 = _MicroWinExecInterface.eCOMMCOMPASS_BB_MOD_TYPE1
eCOMMCOMPASS_BB_MOD_PRESENT = _MicroWinExecInterface.eCOMMCOMPASS_BB_MOD_PRESENT
eCOMMCOMPASS_SB_MOD_NO_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_SB_MOD_NO_ERROR
eCOMMCOMPASS_SB_MOD_TERMINAL_BLOCK_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_SB_MOD_TERMINAL_BLOCK_ERROR
eCOMMCOMPASS_SB_MOD_BLOWN_FUSE_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_SB_MOD_BLOWN_FUSE_ERROR
eCOMMCOMPASS_SB_MOD_NO_POWER_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_SB_MOD_NO_POWER_ERROR
eCOMMCOMPASS_SB_MOD_RANGE_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_SB_MOD_RANGE_ERROR
eCOMMCOMPASS_SB_MOD_BUS_PARITY_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_SB_MOD_BUS_PARITY_ERROR
eCOMMCOMPASS_SB_MOD_TYPE2 = _MicroWinExecInterface.eCOMMCOMPASS_SB_MOD_TYPE2
eCOMMCOMPASS_SB_MOD_TYPE1 = _MicroWinExecInterface.eCOMMCOMPASS_SB_MOD_TYPE1
eCOMMCOMPASS_SB_MOD_CONFIG_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_SB_MOD_CONFIG_ERROR
eCOMMCOMPASS_IO_NO_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_IO_NO_ERROR
eCOMMCOMPASS_IO_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_IO_ERROR
eCOMMCOMPASS_IO_TOO_MANY_DISCRETE_POINTS = _MicroWinExecInterface.eCOMMCOMPASS_IO_TOO_MANY_DISCRETE_POINTS
eCOMMCOMPASS_IO_TOO_MANY_ANALOG_POINTS = _MicroWinExecInterface.eCOMMCOMPASS_IO_TOO_MANY_ANALOG_POINTS
eCOMMCOMPASS_IO_TOO_MANY_INT_MODULES = _MicroWinExecInterface.eCOMMCOMPASS_IO_TOO_MANY_INT_MODULES
eCOMMCOMPASS_IO_RESERVED3 = _MicroWinExecInterface.eCOMMCOMPASS_IO_RESERVED3
eCOMMCOMPASS_IO_RESERVED2 = _MicroWinExecInterface.eCOMMCOMPASS_IO_RESERVED2
eCOMMCOMPASS_IO_RESERVED1 = _MicroWinExecInterface.eCOMMCOMPASS_IO_RESERVED1
eCOMMCOMPASS_IO_DP_STD_BUS_FAULT = _MicroWinExecInterface.eCOMMCOMPASS_IO_DP_STD_BUS_FAULT
eCOMMCOMPASS_EM277_NO_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_EM277_NO_ERROR
eCOMMCOMPASS_EM277_NO_POWER_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_EM277_NO_POWER_ERROR
eCOMMCOMPASS_EM253_NO_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_EM253_NO_ERROR
eCOMMCOMPASS_EM253_NO_POWER_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_EM253_NO_POWER_ERROR
eCOMMCOMPASS_EM253_NO_CONFIG_ID = _MicroWinExecInterface.eCOMMCOMPASS_EM253_NO_CONFIG_ID
eCOMMCOMPASS_EM253_CONFIG_PTR_ERR = _MicroWinExecInterface.eCOMMCOMPASS_EM253_CONFIG_PTR_ERR
eCOMMCOMPASS_EM253_CONFIG_TOO_LARGE = _MicroWinExecInterface.eCOMMCOMPASS_EM253_CONFIG_TOO_LARGE
eCOMMCOMPASS_EM253_CONFIG_ILLEGAL = _MicroWinExecInterface.eCOMMCOMPASS_EM253_CONFIG_ILLEGAL
eCOMMCOMPASS_EM253_XPROFILE_ERR = _MicroWinExecInterface.eCOMMCOMPASS_EM253_XPROFILE_ERR
eCOMMCOMPASS_EM253_XSTOPRSP_ERR = _MicroWinExecInterface.eCOMMCOMPASS_EM253_XSTOPRSP_ERR
eCOMMCOMPASS_EM253_XLMTNRSP_ERR = _MicroWinExecInterface.eCOMMCOMPASS_EM253_XLMTNRSP_ERR
eCOMMCOMPASS_EM253_XLMTPRSP_ERR = _MicroWinExecInterface.eCOMMCOMPASS_EM253_XLMTPRSP_ERR
eCOMMCOMPASS_EM253_XFILTER_ERR = _MicroWinExecInterface.eCOMMCOMPASS_EM253_XFILTER_ERR
eCOMMCOMPASS_EM253_XMEASSYS_ERR = _MicroWinExecInterface.eCOMMCOMPASS_EM253_XMEASSYS_ERR
eCOMMCOMPASS_EM253_XRPCFG_ERR = _MicroWinExecInterface.eCOMMCOMPASS_EM253_XRPCFG_ERR
eCOMMCOMPASS_EM253_BADPREV_ERR = _MicroWinExecInterface.eCOMMCOMPASS_EM253_BADPREV_ERR
eCOMMCOMPASS_EM253_BADUREV_ERR = _MicroWinExecInterface.eCOMMCOMPASS_EM253_BADUREV_ERR
eCOMMCOMPASS_EM253_BADZCNT_ERR = _MicroWinExecInterface.eCOMMCOMPASS_EM253_BADZCNT_ERR
eCOMMCOMPASS_EM253_BADJINC_ERR = _MicroWinExecInterface.eCOMMCOMPASS_EM253_BADJINC_ERR
eCOMMCOMPASS_EM253_XMAXSPD_ERR = _MicroWinExecInterface.eCOMMCOMPASS_EM253_XMAXSPD_ERR
eCOMMCOMPASS_EM253_XSSSPD_ERR = _MicroWinExecInterface.eCOMMCOMPASS_EM253_XSSSPD_ERR
eCOMMCOMPASS_EM253_XRPFSPD_ERR = _MicroWinExecInterface.eCOMMCOMPASS_EM253_XRPFSPD_ERR
eCOMMCOMPASS_EM253_XRPSSPD_ERR = _MicroWinExecInterface.eCOMMCOMPASS_EM253_XRPSSPD_ERR
eCOMMCOMPASS_EM253_XJOGSPD_ERR = _MicroWinExecInterface.eCOMMCOMPASS_EM253_XJOGSPD_ERR
eCOMMCOMPASS_EM253_XACCEL_ERR = _MicroWinExecInterface.eCOMMCOMPASS_EM253_XACCEL_ERR
eCOMMCOMPASS_EM253_XDECEL_ERR = _MicroWinExecInterface.eCOMMCOMPASS_EM253_XDECEL_ERR
eCOMMCOMPASS_EM253_XJERK_ERR = _MicroWinExecInterface.eCOMMCOMPASS_EM253_XJERK_ERR
eCOMMCOMPASS_EM241_NO_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_EM241_NO_ERROR
eCOMMCOMPASS_EM241_NO_POWER_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_EM241_NO_POWER_ERROR
eCOMMCOMPASS_EM241_MODEM_FAILURE = _MicroWinExecInterface.eCOMMCOMPASS_EM241_MODEM_FAILURE
eCOMMCOMPASS_EM241_NO_CONFIG_ID = _MicroWinExecInterface.eCOMMCOMPASS_EM241_NO_CONFIG_ID
eCOMMCOMPASS_EM241_CONFIG_BLOCK_RANGE = _MicroWinExecInterface.eCOMMCOMPASS_EM241_CONFIG_BLOCK_RANGE
eCOMMCOMPASS_EM241_CONFIG_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_EM241_CONFIG_ERROR
eCOMMCOMPASS_EM241_COUNTRY_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_EM241_COUNTRY_ERROR
eCOMMCOMPASS_EM241_PHONE_TOO_LARGE = _MicroWinExecInterface.eCOMMCOMPASS_EM241_PHONE_TOO_LARGE
eCOMMCOMPASS_EM241_MESSAGE_TOO_LARGE = _MicroWinExecInterface.eCOMMCOMPASS_EM241_MESSAGE_TOO_LARGE
eCOMMCOMPASS_EM241_CALLBACK_NUM_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_EM241_CALLBACK_NUM_ERROR
eCOMMCOMPASS_EM241_PAGER_NUM_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_EM241_PAGER_NUM_ERROR
eCOMMCOMPASS_EM241_MESSAGE_NUM_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_EM241_MESSAGE_NUM_ERROR
eCOMMCOMPASS_ASI_NO_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_ASI_NO_ERROR
eCOMMCOMPASS_ASI_CONFIG_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_ASI_CONFIG_ERROR
eCOMMCOMPASS_ASI_POWER_FAIL_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_ASI_POWER_FAIL_ERROR
eCOMMCOMPASS_CP243_CONN_NO_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_CP243_CONN_NO_ERROR
eCOMMCOMPASS_CP243_CONN_IO_BUS_XFER = _MicroWinExecInterface.eCOMMCOMPASS_CP243_CONN_IO_BUS_XFER
eCOMMCOMPASS_CP243_CONN_XMIT_ABORT = _MicroWinExecInterface.eCOMMCOMPASS_CP243_CONN_XMIT_ABORT
eCOMMCOMPASS_CP243_CONN_OUT_OF_RANGE = _MicroWinExecInterface.eCOMMCOMPASS_CP243_CONN_OUT_OF_RANGE
eCOMMCOMPASS_CP243_CONN_EA_RESP_INVALID = _MicroWinExecInterface.eCOMMCOMPASS_CP243_CONN_EA_RESP_INVALID
eCOMMCOMPASS_CP243_CONN_CONNECTION_BROKEN = _MicroWinExecInterface.eCOMMCOMPASS_CP243_CONN_CONNECTION_BROKEN
eCOMMCOMPASS_CP243_CONN_PDU_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_CP243_CONN_PDU_ERROR
eCOMMCOMPASS_CP243_CONN_R_AFTER_W_FAILED = _MicroWinExecInterface.eCOMMCOMPASS_CP243_CONN_R_AFTER_W_FAILED
eCOMMCOMPASS_CP243_CONN_W_AFTER_R_FAILED = _MicroWinExecInterface.eCOMMCOMPASS_CP243_CONN_W_AFTER_R_FAILED
eCOMMCOMPASS_CP243_CONN_CHAN_NOT_CONFIG = _MicroWinExecInterface.eCOMMCOMPASS_CP243_CONN_CHAN_NOT_CONFIG
eCOMMCOMPASS_CP243_CONN_CHAN_CONFIG_SERVER = _MicroWinExecInterface.eCOMMCOMPASS_CP243_CONN_CHAN_CONFIG_SERVER
eCOMMCOMPASS_CP243_CONN_START_BEFORE_LAST = _MicroWinExecInterface.eCOMMCOMPASS_CP243_CONN_START_BEFORE_LAST
eCOMMCOMPASS_CP243_CONN_INVALID_CMD = _MicroWinExecInterface.eCOMMCOMPASS_CP243_CONN_INVALID_CMD
eCOMMCOMPASS_CP243_CONN_NEW_CONFIG = _MicroWinExecInterface.eCOMMCOMPASS_CP243_CONN_NEW_CONFIG
eCOMMCOMPASS_CP243_CONN_POWER_FAILURE = _MicroWinExecInterface.eCOMMCOMPASS_CP243_CONN_POWER_FAILURE
eCOMMCOMPASS_CP243_EMAIL_NO_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_CP243_EMAIL_NO_ERROR
eCOMMCOMPASS_CP243_EMAIL_IO_BUS_XFER = _MicroWinExecInterface.eCOMMCOMPASS_CP243_EMAIL_IO_BUS_XFER
eCOMMCOMPASS_CP243_EMAIL_XMIT_ABORT = _MicroWinExecInterface.eCOMMCOMPASS_CP243_EMAIL_XMIT_ABORT
eCOMMCOMPASS_CP243_EMAIL_OUT_OF_RANGE = _MicroWinExecInterface.eCOMMCOMPASS_CP243_EMAIL_OUT_OF_RANGE
eCOMMCOMPASS_CP243_EMAIL_CONNECTION_BROKEN = _MicroWinExecInterface.eCOMMCOMPASS_CP243_EMAIL_CONNECTION_BROKEN
eCOMMCOMPASS_CP243_EMAIL_PDU_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_CP243_EMAIL_PDU_ERROR
eCOMMCOMPASS_CP243_EMAIL_CHAN_NOT_CONFIG = _MicroWinExecInterface.eCOMMCOMPASS_CP243_EMAIL_CHAN_NOT_CONFIG
eCOMMCOMPASS_CP243_EMAIL_START_BEFORE_LAST = _MicroWinExecInterface.eCOMMCOMPASS_CP243_EMAIL_START_BEFORE_LAST
eCOMMCOMPASS_CP243_EMAIL_INVALID_CMD = _MicroWinExecInterface.eCOMMCOMPASS_CP243_EMAIL_INVALID_CMD
eCOMMCOMPASS_CP243_EMAIL_NEW_CONFIG = _MicroWinExecInterface.eCOMMCOMPASS_CP243_EMAIL_NEW_CONFIG
eCOMMCOMPASS_CP243_EMAIL_DATA_READ_ERR = _MicroWinExecInterface.eCOMMCOMPASS_CP243_EMAIL_DATA_READ_ERR
eCOMMCOMPASS_CP243_EMAIL_NO_CONN = _MicroWinExecInterface.eCOMMCOMPASS_CP243_EMAIL_NO_CONN
eCOMMCOMPASS_CP243_EMAIL_PROTOCOL_FAIL = _MicroWinExecInterface.eCOMMCOMPASS_CP243_EMAIL_PROTOCOL_FAIL
eCOMMCOMPASS_CP243_EMAIL_EXPANDING_FAIL = _MicroWinExecInterface.eCOMMCOMPASS_CP243_EMAIL_EXPANDING_FAIL
eCOMMCOMPASS_CP243_EMAIL_CONFIG_FAIL = _MicroWinExecInterface.eCOMMCOMPASS_CP243_EMAIL_CONFIG_FAIL
eCOMMCOMPASS_CP243_EMAIL_TEXT_TOO_LONG = _MicroWinExecInterface.eCOMMCOMPASS_CP243_EMAIL_TEXT_TOO_LONG
eCOMMCOMPASS_CP243_EMAIL_POWER_FAILURE = _MicroWinExecInterface.eCOMMCOMPASS_CP243_EMAIL_POWER_FAILURE
eCOMMCOMPASS_CP243_FTP_CLIENT_NO_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTP_CLIENT_NO_ERROR
eCOMMCOMPASS_CP243_FTP_CLIENT_IO_BUS_XFER = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTP_CLIENT_IO_BUS_XFER
eCOMMCOMPASS_CP243_FTP_CLIENT_XMIT_ABORT = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTP_CLIENT_XMIT_ABORT
eCOMMCOMPASS_CP243_FTP_CLIENT_OUT_OF_RANGE = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTP_CLIENT_OUT_OF_RANGE
eCOMMCOMPASS_CP243_FTP_CLIENT_CONNECTION_BROKEN = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTP_CLIENT_CONNECTION_BROKEN
eCOMMCOMPASS_CP243_FTP_CLIENT_PDU_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTP_CLIENT_PDU_ERROR
eCOMMCOMPASS_CP243_FTP_CLIENT_CHAN_NOT_CONFIG = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTP_CLIENT_CHAN_NOT_CONFIG
eCOMMCOMPASS_CP243_FTP_CLIENT_START_BEFORE_LAST = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTP_CLIENT_START_BEFORE_LAST
eCOMMCOMPASS_CP243_FTP_CLIENT_INVALID_CMD = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTP_CLIENT_INVALID_CMD
eCOMMCOMPASS_CP243_FTP_CLIENT_NEW_CONFIG = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTP_CLIENT_NEW_CONFIG
eCOMMCOMPASS_CP243_FTP_CLIENT_DATA_READ_ERR = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTP_CLIENT_DATA_READ_ERR
eCOMMCOMPASS_CP243_FTP_CLIENT_DATA_WRITE_ERR = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTP_CLIENT_DATA_WRITE_ERR
eCOMMCOMPASS_CP243_FTP_CLIENT_NO_CONN_AVAIL = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTP_CLIENT_NO_CONN_AVAIL
eCOMMCOMPASS_CP243_FTP_CLIENT_LOGIN_FAILED = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTP_CLIENT_LOGIN_FAILED
eCOMMCOMPASS_CP243_FTP_CLIENT_TRANSFER_FAILED = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTP_CLIENT_TRANSFER_FAILED
eCOMMCOMPASS_CP243_FTP_CLIENT_PLC_MEM_TOO_SMALL = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTP_CLIENT_PLC_MEM_TOO_SMALL
eCOMMCOMPASS_CP243_FTP_CLIENT_FILE_SIZE_EXCEEDED = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTP_CLIENT_FILE_SIZE_EXCEEDED
eCOMMCOMPASS_CP243_FTP_CLIENT_POWER_FAILURE = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTP_CLIENT_POWER_FAILURE
eCOMMCOMPASS_CP243_FTP_SERVER_NO_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTP_SERVER_NO_ERROR
eCOMMCOMPASS_CP243_FTP_SERVER_CONNECTION_BROKEN = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTP_SERVER_CONNECTION_BROKEN
eCOMMCOMPASS_CP243_FTP_SERVER_CHAN_SERVER = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTP_SERVER_CHAN_SERVER
eCOMMCOMPASS_CP243_FTP_SERVER_NEW_CONFIG = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTP_SERVER_NEW_CONFIG
eCOMMCOMPASS_CP243_FTP_SERVER_POWER_FAILURE = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTP_SERVER_POWER_FAILURE
eCOMMCOMPASS_CP243_HTTP_SERVER_NO_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_CP243_HTTP_SERVER_NO_ERROR
eCOMMCOMPASS_CP243_HTTP_SERVER_CONNECTION_BROKEN = _MicroWinExecInterface.eCOMMCOMPASS_CP243_HTTP_SERVER_CONNECTION_BROKEN
eCOMMCOMPASS_CP243_HTTP_SERVER_NEW_CONFIG = _MicroWinExecInterface.eCOMMCOMPASS_CP243_HTTP_SERVER_NEW_CONFIG
eCOMMCOMPASS_CP243_HTTP_SERVER_POWER_FAILURE = _MicroWinExecInterface.eCOMMCOMPASS_CP243_HTTP_SERVER_POWER_FAILURE
eCOMMCOMPASS_CP243_LOW_NO_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_NO_ERROR
eCOMMCOMPASS_CP243_LOW_WRONG_HARDWARE_TYPE = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_WRONG_HARDWARE_TYPE
eCOMMCOMPASS_CP243_LOW_NEW_CONFIG_RESET = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_NEW_CONFIG_RESET
eCOMMCOMPASS_CP243_LOW_TIMEOUT_CDB_RECEIVE = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_TIMEOUT_CDB_RECEIVE
eCOMMCOMPASS_CP243_LOW_CONF_INVALID = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_CONF_INVALID
eCOMMCOMPASS_CP243_LOW_CONF_CRC_FAILED = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_CONF_CRC_FAILED
eCOMMCOMPASS_CP243_LOW_VMEM_OVERRUN = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_VMEM_OVERRUN
eCOMMCOMPASS_CP243_LOW_CDB_PTR_FAILED = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_CDB_PTR_FAILED
eCOMMCOMPASS_CP243_LOW_WRONG_CDB_FORMAT = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_WRONG_CDB_FORMAT
eCOMMCOMPASS_CP243_LOW_TSAP_UNAMBIGUOUS = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_TSAP_UNAMBIGUOUS
eCOMMCOMPASS_CP243_LOW_WRITE_CONF_VALIDITY_CMD = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_WRITE_CONF_VALIDITY_CMD
eCOMMCOMPASS_CP243_LOW_CDB_DATA_UNAMBIGUOUS = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_CDB_DATA_UNAMBIGUOUS
eCOMMCOMPASS_CP243_LOW_NO_VALID_BOOTP_RESPONSE = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_NO_VALID_BOOTP_RESPONSE
eCOMMCOMPASS_CP243_LOW_INVALID_MODULE_NAME = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_INVALID_MODULE_NAME
eCOMMCOMPASS_CP243_LOW_INVALID_TCPIP_ADDRESS = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_INVALID_TCPIP_ADDRESS
eCOMMCOMPASS_CP243_LOW_INVALID_GATEWAY_ADDRESS = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_INVALID_GATEWAY_ADDRESS
eCOMMCOMPASS_CP243_LOW_INVALID_KEEP_ALIVE_TIME = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_INVALID_KEEP_ALIVE_TIME
eCOMMCOMPASS_CP243_LOW_NO_VALID_CONFIG = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_NO_VALID_CONFIG
eCOMMCOMPASS_CP243_LOW_WRITE_NPB = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_WRITE_NPB
eCOMMCOMPASS_CP243_LOW_WRITE_SMB = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_WRITE_SMB
eCOMMCOMPASS_CP243_LOW_WRITE_SMB_CMD_FAILED = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_WRITE_SMB_CMD_FAILED
eCOMMCOMPASS_CP243_LOW_NDB_SYNTAX_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_NDB_SYNTAX_ERROR
eCOMMCOMPASS_CP243_LOW_MQ_CREATION = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_MQ_CREATION
eCOMMCOMPASS_CP243_LOW_TAM_CREATION = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_TAM_CREATION
eCOMMCOMPASS_CP243_LOW_REM_CREATION = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_REM_CREATION
eCOMMCOMPASS_CP243_LOW_PIH_CREATION = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_PIH_CREATION
eCOMMCOMPASS_CP243_LOW_S7S_INIT = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_S7S_INIT
eCOMMCOMPASS_CP243_LOW_S7C_CREATION = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_S7C_CREATION
eCOMMCOMPASS_CP243_LOW_S7S_CREATION = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_S7S_CREATION
eCOMMCOMPASS_CP243_LOW_S7S_MW_DEFAULT_CREATION = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_S7S_MW_DEFAULT_CREATION
eCOMMCOMPASS_CP243_LOW_TASK_LIST_MISMATCH = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_TASK_LIST_MISMATCH
eCOMMCOMPASS_CP243_LOW_UNKNOWN_TASK_DETECTED = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_UNKNOWN_TASK_DETECTED
eCOMMCOMPASS_CP243_LOW_S7S_TASK_CODE_MISMATCH_1 = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_S7S_TASK_CODE_MISMATCH_1
eCOMMCOMPASS_CP243_LOW_S7S_TASK_CODE_MISMATCH_2 = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_S7S_TASK_CODE_MISMATCH_2
eCOMMCOMPASS_CP243_LOW_S7C_TASK_CODE_MISMATCH_1 = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_S7C_TASK_CODE_MISMATCH_1
eCOMMCOMPASS_CP243_LOW_S7C_TASK_CODE_MISMATCH_2 = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_S7C_TASK_CODE_MISMATCH_2
eCOMMCOMPASS_CP243_LOW_REM_NOT_ALIVE = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_REM_NOT_ALIVE
eCOMMCOMPASS_CP243_LOW_DUPLICATED_TASK = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_DUPLICATED_TASK
eCOMMCOMPASS_CP243_LOW_INVALID_S7S_TASK = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_INVALID_S7S_TASK
eCOMMCOMPASS_CP243_LOW_INVALID_S7C_TASK = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_INVALID_S7C_TASK
eCOMMCOMPASS_CP243_LOW_INVALID_PIH_TASK = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_INVALID_PIH_TASK
eCOMMCOMPASS_CP243_LOW_BOOTP_REQUEST_FAILED = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_BOOTP_REQUEST_FAILED
eCOMMCOMPASS_CP243_LOW_BOOTP_RESULT_FAILED = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_BOOTP_RESULT_FAILED
eCOMMCOMPASS_CP243_LOW_SET_KEEP_ALIVE_FAILED = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_SET_KEEP_ALIVE_FAILED
eCOMMCOMPASS_CP243_LOW_SET_TCPIP_ADDRESS_FAILED = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_SET_TCPIP_ADDRESS_FAILED
eCOMMCOMPASS_CP243_LOW_SET_SUBNET_MASK_FAILED = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_SET_SUBNET_MASK_FAILED
eCOMMCOMPASS_CP243_LOW_SET_GATEWAY_FAILED = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_SET_GATEWAY_FAILED
eCOMMCOMPASS_CP243_LOW_SET_ETHERNET_DATARATE_FAILED = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_SET_ETHERNET_DATARATE_FAILED
eCOMMCOMPASS_CP243_LOW_DUPLICATE_IP_ADDRESS = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_DUPLICATE_IP_ADDRESS
eCOMMCOMPASS_CP243_LOW_NETWORK_FAILED = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_NETWORK_FAILED
eCOMMCOMPASS_CP243_LOW_NETTASK_RESUME = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_NETTASK_RESUME
eCOMMCOMPASS_CP243_LOW_IDB_CONTENT_FAILED = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_IDB_CONTENT_FAILED
eCOMMCOMPASS_CP243_LOW_IDB_CRC_FAILED = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_IDB_CRC_FAILED
eCOMMCOMPASS_CP243_LOW_ADMIN_NAME_FAILED = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_ADMIN_NAME_FAILED
eCOMMCOMPASS_CP243_LOW_ADMIN_PSSWD_FAILED = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_ADMIN_PSSWD_FAILED
eCOMMCOMPASS_CP243_LOW_ADMIN_PSSWD_DECRYPT_FAIL = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_ADMIN_PSSWD_DECRYPT_FAIL
eCOMMCOMPASS_CP243_LOW_ADMIN_PSSWD_ENCRYPT_FAIL = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_ADMIN_PSSWD_ENCRYPT_FAIL
eCOMMCOMPASS_CP243_LOW_ADMIN_PSSWD_ALGORITHM_FAIL = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_ADMIN_PSSWD_ALGORITHM_FAIL
eCOMMCOMPASS_CP243_LOW_ADMIN_PSSWD_LENGTH = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_ADMIN_PSSWD_LENGTH
eCOMMCOMPASS_CP243_LOW_USER_PSSWD_DECRYPT_FAIL = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_USER_PSSWD_DECRYPT_FAIL
eCOMMCOMPASS_CP243_LOW_USER_PSSWD_ENCRYPT_FAIL = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_USER_PSSWD_ENCRYPT_FAIL
eCOMMCOMPASS_CP243_LOW_USER_PSSWD_ALGORITHM_FAIL = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_USER_PSSWD_ALGORITHM_FAIL
eCOMMCOMPASS_CP243_LOW_WRONG_IDB_FORMAT = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_WRONG_IDB_FORMAT
eCOMMCOMPASS_CP243_LOW_CONFIG_CACHE_TASK_FAILED = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_CONFIG_CACHE_TASK_FAILED
eCOMMCOMPASS_CP243_LOW_FFS_INIT = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_FFS_INIT
eCOMMCOMPASS_CP243_LOW_RFS_INIT = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_RFS_INIT
eCOMMCOMPASS_CP243_LOW_SDB_CREATION = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_SDB_CREATION
eCOMMCOMPASS_CP243_LOW_FTPS_CREATION = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_FTPS_CREATION
eCOMMCOMPASS_CP243_LOW_FTPC_CREATION = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_FTPC_CREATION
eCOMMCOMPASS_CP243_LOW_WEBS_CREATION = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_WEBS_CREATION
eCOMMCOMPASS_CP243_LOW_SMTPC_CREATION = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_SMTPC_CREATION
eCOMMCOMPASS_CP243_LOW_INVALID_FTPS_TASK = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_INVALID_FTPS_TASK
eCOMMCOMPASS_CP243_LOW_INVALID_FTPC_TASK = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_INVALID_FTPC_TASK
eCOMMCOMPASS_CP243_LOW_INVALID_WEBS_TASK = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_INVALID_WEBS_TASK
eCOMMCOMPASS_CP243_LOW_INVALID_SMTPC_TASK = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_INVALID_SMTPC_TASK
eCOMMCOMPASS_CP243_LOW_FTPS_DELETION = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_FTPS_DELETION
eCOMMCOMPASS_CP243_LOW_WEBS_NOT_ALIVE = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_WEBS_NOT_ALIVE
eCOMMCOMPASS_CP243_LOW_CODETAB_CREATION_FAILED = _MicroWinExecInterface.eCOMMCOMPASS_CP243_LOW_CODETAB_CREATION_FAILED
eCOMMCOMPASS_CP243_HIGH_TCP_GET_SOCKET = _MicroWinExecInterface.eCOMMCOMPASS_CP243_HIGH_TCP_GET_SOCKET
eCOMMCOMPASS_CP243_HIGH_TCP_BIND = _MicroWinExecInterface.eCOMMCOMPASS_CP243_HIGH_TCP_BIND
eCOMMCOMPASS_CP243_HIGH_TCP_BIND_INV_SOCKET = _MicroWinExecInterface.eCOMMCOMPASS_CP243_HIGH_TCP_BIND_INV_SOCKET
eCOMMCOMPASS_CP243_HIGH_TCP_LISTEN = _MicroWinExecInterface.eCOMMCOMPASS_CP243_HIGH_TCP_LISTEN
eCOMMCOMPASS_CP243_HIGH_TCP_LISTEN_INV_SOCKET = _MicroWinExecInterface.eCOMMCOMPASS_CP243_HIGH_TCP_LISTEN_INV_SOCKET
eCOMMCOMPASS_CP243_HIGH_MQ_SEND_MQ_CLEAR = _MicroWinExecInterface.eCOMMCOMPASS_CP243_HIGH_MQ_SEND_MQ_CLEAR
eCOMMCOMPASS_CP243_HIGH_MQ_SEND_MQ_SEND = _MicroWinExecInterface.eCOMMCOMPASS_CP243_HIGH_MQ_SEND_MQ_SEND
eCOMMCOMPASS_CP243_HIGH_MQ_SEND_TOO_LONG = _MicroWinExecInterface.eCOMMCOMPASS_CP243_HIGH_MQ_SEND_TOO_LONG
eCOMMCOMPASS_CP243_HIGH_SET_SOCK_OPT_NONBLOCK = _MicroWinExecInterface.eCOMMCOMPASS_CP243_HIGH_SET_SOCK_OPT_NONBLOCK
eCOMMCOMPASS_CP243_HIGH_SET_SOCK_OPT_SEND_BUF = _MicroWinExecInterface.eCOMMCOMPASS_CP243_HIGH_SET_SOCK_OPT_SEND_BUF
eCOMMCOMPASS_CP243_HIGH_SET_SOCK_OPT_RECV_BUF = _MicroWinExecInterface.eCOMMCOMPASS_CP243_HIGH_SET_SOCK_OPT_RECV_BUF
eCOMMCOMPASS_CP243_HIGH_SOCK_OPT_KEEPALIVE = _MicroWinExecInterface.eCOMMCOMPASS_CP243_HIGH_SOCK_OPT_KEEPALIVE
eCOMMCOMPASS_CP243_HIGH_SOCK_OPT_LINGER = _MicroWinExecInterface.eCOMMCOMPASS_CP243_HIGH_SOCK_OPT_LINGER
eCOMMCOMPASS_CP243_HIGH_SOCK_OPT_NODELAY = _MicroWinExecInterface.eCOMMCOMPASS_CP243_HIGH_SOCK_OPT_NODELAY
eCOMMCOMPASS_CP243_HIGH_SOCK_OPT_REUSEADDR = _MicroWinExecInterface.eCOMMCOMPASS_CP243_HIGH_SOCK_OPT_REUSEADDR
eCOMMCOMPASS_CP243_HIGH_TCP_ACCEPT = _MicroWinExecInterface.eCOMMCOMPASS_CP243_HIGH_TCP_ACCEPT
eCOMMCOMPASS_CP243_HIGH_TCP_ACCEPT_INV_SOCKET = _MicroWinExecInterface.eCOMMCOMPASS_CP243_HIGH_TCP_ACCEPT_INV_SOCKET
eCOMMCOMPASS_CP243_HIGH_TCP_CLOSE_SHUTDOWN = _MicroWinExecInterface.eCOMMCOMPASS_CP243_HIGH_TCP_CLOSE_SHUTDOWN
eCOMMCOMPASS_CP243_HIGH_TCP_CLOSE_CLOSE = _MicroWinExecInterface.eCOMMCOMPASS_CP243_HIGH_TCP_CLOSE_CLOSE
eCOMMCOMPASS_CP243_HIGH_TCP_RECV = _MicroWinExecInterface.eCOMMCOMPASS_CP243_HIGH_TCP_RECV
eCOMMCOMPASS_CP243_HIGH_TCP_RECV_INTERNAL_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_CP243_HIGH_TCP_RECV_INTERNAL_ERROR
eCOMMCOMPASS_CP243_HIGH_TCP_SEND = _MicroWinExecInterface.eCOMMCOMPASS_CP243_HIGH_TCP_SEND
eCOMMCOMPASS_CP243_HIGH_TCP_SEND_INTERNAL_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_CP243_HIGH_TCP_SEND_INTERNAL_ERROR
eCOMMCOMPASS_CP243_HIGH_TCP_EVAL = _MicroWinExecInterface.eCOMMCOMPASS_CP243_HIGH_TCP_EVAL
eCOMMCOMPASS_CP243_HIGH_RECV_TPKT_DEFAULT = _MicroWinExecInterface.eCOMMCOMPASS_CP243_HIGH_RECV_TPKT_DEFAULT
eCOMMCOMPASS_CP243_HIGH_INV_CONNECTION_NUMBER = _MicroWinExecInterface.eCOMMCOMPASS_CP243_HIGH_INV_CONNECTION_NUMBER
eCOMMCOMPASS_CP243_HIGH_MQ_CLEAR_CMD_MQ_CLEAR = _MicroWinExecInterface.eCOMMCOMPASS_CP243_HIGH_MQ_CLEAR_CMD_MQ_CLEAR
eCOMMCOMPASS_CP243_HIGH_MQ_CLEAR_MSG_MQ_CLEAR = _MicroWinExecInterface.eCOMMCOMPASS_CP243_HIGH_MQ_CLEAR_MSG_MQ_CLEAR
eCOMMCOMPASS_CP243_HIGH_S7C_MAINLOOP_DEFAULT = _MicroWinExecInterface.eCOMMCOMPASS_CP243_HIGH_S7C_MAINLOOP_DEFAULT
eCOMMCOMPASS_CP243_HIGH_S7C_UNKNOWN_TASK_ID = _MicroWinExecInterface.eCOMMCOMPASS_CP243_HIGH_S7C_UNKNOWN_TASK_ID
eCOMMCOMPASS_CP243_HIGH_S7C_TCP_CONNECT = _MicroWinExecInterface.eCOMMCOMPASS_CP243_HIGH_S7C_TCP_CONNECT
eCOMMCOMPASS_CP243_HIGH_S7C_MQ_RECV_INV_CMD = _MicroWinExecInterface.eCOMMCOMPASS_CP243_HIGH_S7C_MQ_RECV_INV_CMD
eCOMMCOMPASS_CP243_HIGH_S7C_MQ_RECV_INV_LEN = _MicroWinExecInterface.eCOMMCOMPASS_CP243_HIGH_S7C_MQ_RECV_INV_LEN
eCOMMCOMPASS_CP243_HIGH_S7C_TASK_EXIT = _MicroWinExecInterface.eCOMMCOMPASS_CP243_HIGH_S7C_TASK_EXIT
eCOMMCOMPASS_CP243_HIGH_S7S_MAINLOOP_DEFAULT = _MicroWinExecInterface.eCOMMCOMPASS_CP243_HIGH_S7S_MAINLOOP_DEFAULT
eCOMMCOMPASS_CP243_HIGH_S7S_CHECK_CR = _MicroWinExecInterface.eCOMMCOMPASS_CP243_HIGH_S7S_CHECK_CR
eCOMMCOMPASS_CP243_HIGH_S7S_UNKNOWN_TASK_ID = _MicroWinExecInterface.eCOMMCOMPASS_CP243_HIGH_S7S_UNKNOWN_TASK_ID
eCOMMCOMPASS_CP243_HIGH_S7S_MQ_RECV_INV_CMD = _MicroWinExecInterface.eCOMMCOMPASS_CP243_HIGH_S7S_MQ_RECV_INV_CMD
eCOMMCOMPASS_CP243_HIGH_S7S_MQ_RECV_INV_LEN = _MicroWinExecInterface.eCOMMCOMPASS_CP243_HIGH_S7S_MQ_RECV_INV_LEN
eCOMMCOMPASS_CP243_HIGH_S7S_TASK_EXIT = _MicroWinExecInterface.eCOMMCOMPASS_CP243_HIGH_S7S_TASK_EXIT
eCOMMCOMPASS_CP243_EC_REM_INIT_PUT_SMB = _MicroWinExecInterface.eCOMMCOMPASS_CP243_EC_REM_INIT_PUT_SMB
eCOMMCOMPASS_CP243_EC_REM_INIT_READ_R1_ASIC = _MicroWinExecInterface.eCOMMCOMPASS_CP243_EC_REM_INIT_READ_R1_ASIC
eCOMMCOMPASS_CP243_EC_REM_INIT_READ_CHECK_COPY_CDB = _MicroWinExecInterface.eCOMMCOMPASS_CP243_EC_REM_INIT_READ_CHECK_COPY_CDB
eCOMMCOMPASS_CP243_EC_REM_INIT_READ_CHECK_COPY_NDB = _MicroWinExecInterface.eCOMMCOMPASS_CP243_EC_REM_INIT_READ_CHECK_COPY_NDB
eCOMMCOMPASS_CP243_EC_REM_INIT_CHECK_CDB_PTR = _MicroWinExecInterface.eCOMMCOMPASS_CP243_EC_REM_INIT_CHECK_CDB_PTR
eCOMMCOMPASS_CP243_EC_REM_INIT_READ_PIH = _MicroWinExecInterface.eCOMMCOMPASS_CP243_EC_REM_INIT_READ_PIH
eCOMMCOMPASS_CP243_EC_REM_PUT_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_CP243_EC_REM_PUT_ERROR
eCOMMCOMPASS_CP243_EC_REM_CMD_CALC_MSG_CODE_TIMEOUT = _MicroWinExecInterface.eCOMMCOMPASS_CP243_EC_REM_CMD_CALC_MSG_CODE_TIMEOUT
eCOMMCOMPASS_CP243_EC_REM_CMD_PUT_PLC_DATA_TIMEOUT = _MicroWinExecInterface.eCOMMCOMPASS_CP243_EC_REM_CMD_PUT_PLC_DATA_TIMEOUT
eCOMMCOMPASS_CP243_EC_REM_CMD_CDB_NDB_CHANGED = _MicroWinExecInterface.eCOMMCOMPASS_CP243_EC_REM_CMD_CDB_NDB_CHANGED
eCOMMCOMPASS_CP243_EC_REM_TASK_EXIT = _MicroWinExecInterface.eCOMMCOMPASS_CP243_EC_REM_TASK_EXIT
eCOMMCOMPASS_CP243_EC_REM_INIT_READ_CHECK_COPY_IDB = _MicroWinExecInterface.eCOMMCOMPASS_CP243_EC_REM_INIT_READ_CHECK_COPY_IDB
eCOMMCOMPASS_CP243_EC_REM_INIT_GET_RACK_STATUS = _MicroWinExecInterface.eCOMMCOMPASS_CP243_EC_REM_INIT_GET_RACK_STATUS
eCOMMCOMPASS_CP243_PIH_LEAVE_MAIN_LOOP = _MicroWinExecInterface.eCOMMCOMPASS_CP243_PIH_LEAVE_MAIN_LOOP
eCOMMCOMPASS_CP243_PIH_IRH = _MicroWinExecInterface.eCOMMCOMPASS_CP243_PIH_IRH
eCOMMCOMPASS_CP243_PIH_TASK_EXIT = _MicroWinExecInterface.eCOMMCOMPASS_CP243_PIH_TASK_EXIT
eCOMMCOMPASS_CP243_POWER_FAILED = _MicroWinExecInterface.eCOMMCOMPASS_CP243_POWER_FAILED
eCOMMCOMPASS_CP243_EMA_TASK_SHUTDOWN_IMMEDIATELY = _MicroWinExecInterface.eCOMMCOMPASS_CP243_EMA_TASK_SHUTDOWN_IMMEDIATELY
eCOMMCOMPASS_CP243_EMA_TASK_SHUTDOWN_CONTROLLED = _MicroWinExecInterface.eCOMMCOMPASS_CP243_EMA_TASK_SHUTDOWN_CONTROLLED
eCOMMCOMPASS_CP243_EMA_LEAVE_MAIN_LOOP = _MicroWinExecInterface.eCOMMCOMPASS_CP243_EMA_LEAVE_MAIN_LOOP
eCOMMCOMPASS_CP243_EMA_CONN_OPEN_SOCKET = _MicroWinExecInterface.eCOMMCOMPASS_CP243_EMA_CONN_OPEN_SOCKET
eCOMMCOMPASS_CP243_EMA_CONN_SET_SNDBUF = _MicroWinExecInterface.eCOMMCOMPASS_CP243_EMA_CONN_SET_SNDBUF
eCOMMCOMPASS_CP243_EMA_CONN_SET_RCVBUF = _MicroWinExecInterface.eCOMMCOMPASS_CP243_EMA_CONN_SET_RCVBUF
eCOMMCOMPASS_CP243_EMA_CONN_SET_TCP_NODELAY = _MicroWinExecInterface.eCOMMCOMPASS_CP243_EMA_CONN_SET_TCP_NODELAY
eCOMMCOMPASS_CP243_EMA_CONN_SET_DONT_BLOCK = _MicroWinExecInterface.eCOMMCOMPASS_CP243_EMA_CONN_SET_DONT_BLOCK
eCOMMCOMPASS_CP243_EMA_HANDLE_MAIL_MQ_SEND = _MicroWinExecInterface.eCOMMCOMPASS_CP243_EMA_HANDLE_MAIL_MQ_SEND
eCOMMCOMPASS_CP243_EMA_WOULD_BLOCK_MQ_SEND = _MicroWinExecInterface.eCOMMCOMPASS_CP243_EMA_WOULD_BLOCK_MQ_SEND
eCOMMCOMPASS_CP243_EMA_TASK_EXIT = _MicroWinExecInterface.eCOMMCOMPASS_CP243_EMA_TASK_EXIT
eCOMMCOMPASS_CP243_FTS_MAIN_SET_SOCK_OPT_KEEPALIVE = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTS_MAIN_SET_SOCK_OPT_KEEPALIVE
eCOMMCOMPASS_CP243_FTS_MAIN_ACCEPT_FAILED = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTS_MAIN_ACCEPT_FAILED
eCOMMCOMPASS_CP243_FTS_MAIN_WORK_TASK_CREATION_FAILED = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTS_MAIN_WORK_TASK_CREATION_FAILED
eCOMMCOMPASS_CP243_FTS_MAIN_LEAVE_MAIN_LOOP = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTS_MAIN_LEAVE_MAIN_LOOP
eCOMMCOMPASS_CP243_FTS_INIT_SET_SOCK_OPT_SEND_BUF = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTS_INIT_SET_SOCK_OPT_SEND_BUF
eCOMMCOMPASS_CP243_FTS_INIT_SET_SOCK_OPT_RECV_BUF = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTS_INIT_SET_SOCK_OPT_RECV_BUF
eCOMMCOMPASS_CP243_FTS_INIT_SET_SOCK_OPT_NODELAY = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTS_INIT_SET_SOCK_OPT_NODELAY
eCOMMCOMPASS_CP243_FTS_INIT_SET_SOCK_OPT_REUSEADDR = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTS_INIT_SET_SOCK_OPT_REUSEADDR
eCOMMCOMPASS_CP243_FTS_INIT_SET_SOCK_OPT_NONBLOCK = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTS_INIT_SET_SOCK_OPT_NONBLOCK
eCOMMCOMPASS_CP243_FTC_MASTER_SHUTDOWN = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTC_MASTER_SHUTDOWN
eCOMMCOMPASS_CP243_FTC_MASTER_SEND_REM_CMD = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTC_MASTER_SEND_REM_CMD
eCOMMCOMPASS_CP243_FTC_MASTER_INTERNAL_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTC_MASTER_INTERNAL_ERROR
eCOMMCOMPASS_CP243_FTC_MASTER_INVALID_TAM_CMD = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTC_MASTER_INVALID_TAM_CMD
eCOMMCOMPASS_CP243_FTC_MASTER_INVALID_REM_CMD = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTC_MASTER_INVALID_REM_CMD
eCOMMCOMPASS_CP243_FTC_MASTER_NULL_POINTER = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTC_MASTER_NULL_POINTER
eCOMMCOMPASS_CP243_FTC_CONNECT_OPEN_SOCKET = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTC_CONNECT_OPEN_SOCKET
eCOMMCOMPASS_CP243_FTC_CONNECT_SET_SNDBUF = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTC_CONNECT_SET_SNDBUF
eCOMMCOMPASS_CP243_FTC_CONNECT_SET_RCVBUF = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTC_CONNECT_SET_RCVBUF
eCOMMCOMPASS_CP243_FTC_CONNECT_SET_TCP_NODELAY = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTC_CONNECT_SET_TCP_NODELAY
eCOMMCOMPASS_CP243_FTC_CONNECT_SET_DONT_BLOCK = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTC_CONNECT_SET_DONT_BLOCK
eCOMMCOMPASS_CP243_FTC_CDS_OPEN = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTC_CDS_OPEN
eCOMMCOMPASS_CP243_FTC_CDS_SET_SNDBUF = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTC_CDS_SET_SNDBUF
eCOMMCOMPASS_CP243_FTC_CDS_SET_RCVBUF = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTC_CDS_SET_RCVBUF
eCOMMCOMPASS_CP243_FTC_CDS_SET_TCP_NODELAY = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTC_CDS_SET_TCP_NODELAY
eCOMMCOMPASS_CP243_FTC_CDS_SET_SO_REUSEADDR = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTC_CDS_SET_SO_REUSEADDR
eCOMMCOMPASS_CP243_FTC_CDS_SET_DONT_BLOCK = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTC_CDS_SET_DONT_BLOCK
eCOMMCOMPASS_CP243_FTC_CDS_BIND_FAILED = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTC_CDS_BIND_FAILED
eCOMMCOMPASS_CP243_FTC_CDS_LISTEN_FAILED = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTC_CDS_LISTEN_FAILED
eCOMMCOMPASS_CP243_FTC_REM_REQ_SEND_REM_REQ_FAILED = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTC_REM_REQ_SEND_REM_REQ_FAILED
eCOMMCOMPASS_CP243_FTC_REM_REQ_HANDLE_REM_RES_FAILED = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTC_REM_REQ_HANDLE_REM_RES_FAILED
eCOMMCOMPASS_CP243_FTC_REM_REQ_IOH_BDT_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTC_REM_REQ_IOH_BDT_ERROR
eCOMMCOMPASS_CP243_FTC_BDT_REQ_SEND_REQ_FAILED = _MicroWinExecInterface.eCOMMCOMPASS_CP243_FTC_BDT_REQ_SEND_REQ_FAILED
eCOMMCOMPASS_CP243_WEB_STARTUP_INITIALIZE = _MicroWinExecInterface.eCOMMCOMPASS_CP243_WEB_STARTUP_INITIALIZE
eCOMMCOMPASS_CP243_WEB_STARTUP_REGISTER_RPM_FUNC = _MicroWinExecInterface.eCOMMCOMPASS_CP243_WEB_STARTUP_REGISTER_RPM_FUNC
eCOMMCOMPASS_CP243_WEB_RACK_STATUS_GET_TASK_ID = _MicroWinExecInterface.eCOMMCOMPASS_CP243_WEB_RACK_STATUS_GET_TASK_ID
eCOMMCOMPASS_CP243_WEB_SEND_COMMAND_CMD_MQ_CLEAR = _MicroWinExecInterface.eCOMMCOMPASS_CP243_WEB_SEND_COMMAND_CMD_MQ_CLEAR
eCOMMCOMPASS_CP243_WEB_SEND_COMMAND_CMD_MQ_SEND = _MicroWinExecInterface.eCOMMCOMPASS_CP243_WEB_SEND_COMMAND_CMD_MQ_SEND
eCOMMCOMPASS_CP243_WEB_SEND_DATA_CMD_MQ_CLEAR = _MicroWinExecInterface.eCOMMCOMPASS_CP243_WEB_SEND_DATA_CMD_MQ_CLEAR
eCOMMCOMPASS_CP243_WEB_SEND_DATA_CMD_MQ_SEND = _MicroWinExecInterface.eCOMMCOMPASS_CP243_WEB_SEND_DATA_CMD_MQ_SEND
eCOMMCOMPASS_CP243_WEB_RECV_CMD_UNEX_CMD_CODE = _MicroWinExecInterface.eCOMMCOMPASS_CP243_WEB_RECV_CMD_UNEX_CMD_CODE
eCOMMCOMPASS_CP243_WEB_HANDLE_APPLET_S7_REQ_GET_TASK_ID = _MicroWinExecInterface.eCOMMCOMPASS_CP243_WEB_HANDLE_APPLET_S7_REQ_GET_TASK_ID
eCOMMCOMPASS_CP243_WEB_GET_TASK_CODE_GET_TASK_ID = _MicroWinExecInterface.eCOMMCOMPASS_CP243_WEB_GET_TASK_CODE_GET_TASK_ID
eCOMMCOMPASS_CP243_RANGE_EC_REM = _MicroWinExecInterface.eCOMMCOMPASS_CP243_RANGE_EC_REM
eCOMMCOMPASS_CP243_RANGE_PIH = _MicroWinExecInterface.eCOMMCOMPASS_CP243_RANGE_PIH
eCOMMCOMPASS_CP243_RANGE_EC_EMA = _MicroWinExecInterface.eCOMMCOMPASS_CP243_RANGE_EC_EMA
eCOMMCOMPASS_CP243_RANGE_EC_FTS1 = _MicroWinExecInterface.eCOMMCOMPASS_CP243_RANGE_EC_FTS1
eCOMMCOMPASS_CP243_RANGE_EC_FTS2 = _MicroWinExecInterface.eCOMMCOMPASS_CP243_RANGE_EC_FTS2
eCOMMCOMPASS_CP243_RANGE_EC_FTC = _MicroWinExecInterface.eCOMMCOMPASS_CP243_RANGE_EC_FTC
eCOMMCOMPASS_CP243_RANGE_EC_WEB1 = _MicroWinExecInterface.eCOMMCOMPASS_CP243_RANGE_EC_WEB1
eCOMMCOMPASS_CP243_RANGE_EC_WEB2 = _MicroWinExecInterface.eCOMMCOMPASS_CP243_RANGE_EC_WEB2
eCOMMCOMPASS_CP243_RANGE_EC_WEB3 = _MicroWinExecInterface.eCOMMCOMPASS_CP243_RANGE_EC_WEB3
eCOMMCOMPASS_CP243_RANGE_EC_WEB4 = _MicroWinExecInterface.eCOMMCOMPASS_CP243_RANGE_EC_WEB4
eCOMMCOMPASS_CP243_RANGE_CLIENT = _MicroWinExecInterface.eCOMMCOMPASS_CP243_RANGE_CLIENT
eCOMMCOMPASS_CP243_RANGE_NOT_CONNECTED_SERVER = _MicroWinExecInterface.eCOMMCOMPASS_CP243_RANGE_NOT_CONNECTED_SERVER
eCOMMCOMPASS_CP243_RANGE_CONNECTED_SERVER = _MicroWinExecInterface.eCOMMCOMPASS_CP243_RANGE_CONNECTED_SERVER
eCOMMCOMPASS_CP243_RANGE_STANDARD = _MicroWinExecInterface.eCOMMCOMPASS_CP243_RANGE_STANDARD
eCOMMCOMPASS_CP243_NO_CONNECTION = _MicroWinExecInterface.eCOMMCOMPASS_CP243_NO_CONNECTION
eCOMMCOMPASS_CP243_SERVER_CONNECTION = _MicroWinExecInterface.eCOMMCOMPASS_CP243_SERVER_CONNECTION
eCOMMCOMPASS_CP243_CLIENT_CONNECTION = _MicroWinExecInterface.eCOMMCOMPASS_CP243_CLIENT_CONNECTION
eCOMMCOMPASS_STANDARD_NO_POWER = _MicroWinExecInterface.eCOMMCOMPASS_STANDARD_NO_POWER
eCOMMCOMPASS_STANDARD_NO_POWER_CP243 = _MicroWinExecInterface.eCOMMCOMPASS_STANDARD_NO_POWER_CP243
cCOMMCOMPASS_DEVICE_MODULE_LIMIT = _MicroWinExecInterface.cCOMMCOMPASS_DEVICE_MODULE_LIMIT
cCOMMCOMPASS_DEVICE_MODULE_LIMIT_WITH_CPU = _MicroWinExecInterface.cCOMMCOMPASS_DEVICE_MODULE_LIMIT_WITH_CPU
cCOMMCOMPASS_MAX_ENET_CONNECTIONS = _MicroWinExecInterface.cCOMMCOMPASS_MAX_ENET_CONNECTIONS
cCOMMCOMPASS_MAX_MAC_ADDR_SIZE = _MicroWinExecInterface.cCOMMCOMPASS_MAX_MAC_ADDR_SIZE
class sCOMMCOMPASS_PLC_SCAN_TIMES(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    wLast = property(_MicroWinExecInterface.sCOMMCOMPASS_PLC_SCAN_TIMES_wLast_get, _MicroWinExecInterface.sCOMMCOMPASS_PLC_SCAN_TIMES_wLast_set)
    wMin = property(_MicroWinExecInterface.sCOMMCOMPASS_PLC_SCAN_TIMES_wMin_get, _MicroWinExecInterface.sCOMMCOMPASS_PLC_SCAN_TIMES_wMin_set)
    wMax = property(_MicroWinExecInterface.sCOMMCOMPASS_PLC_SCAN_TIMES_wMax_get, _MicroWinExecInterface.sCOMMCOMPASS_PLC_SCAN_TIMES_wMax_set)

    def __init__(self):
        _MicroWinExecInterface.sCOMMCOMPASS_PLC_SCAN_TIMES_swiginit(self, _MicroWinExecInterface.new_sCOMMCOMPASS_PLC_SCAN_TIMES())
    __swig_destroy__ = _MicroWinExecInterface.delete_sCOMMCOMPASS_PLC_SCAN_TIMES

# Register sCOMMCOMPASS_PLC_SCAN_TIMES in _MicroWinExecInterface:
_MicroWinExecInterface.sCOMMCOMPASS_PLC_SCAN_TIMES_swigregister(sCOMMCOMPASS_PLC_SCAN_TIMES)

cCOMMCOMPASS_DEV_IO_IDENT_SIZE = _MicroWinExecInterface.cCOMMCOMPASS_DEV_IO_IDENT_SIZE
cCOMMCOMPASS_DEV_IO_OFFSET = _MicroWinExecInterface.cCOMMCOMPASS_DEV_IO_OFFSET
cCOMMCOMPASS_DEV_IO_CPU_OFFSET = _MicroWinExecInterface.cCOMMCOMPASS_DEV_IO_CPU_OFFSET
cCOMMCOMPASS_DEV_IO_SB_OFFSET = _MicroWinExecInterface.cCOMMCOMPASS_DEV_IO_SB_OFFSET
cCOMMCOMPASS_DEV_IO_EM_OFFSET = _MicroWinExecInterface.cCOMMCOMPASS_DEV_IO_EM_OFFSET
cCOMMCOMPASS_DEV_IO_EXPAND_EM_OFFSET = _MicroWinExecInterface.cCOMMCOMPASS_DEV_IO_EXPAND_EM_OFFSET
cCOMMCOMPASS_DEV_IO_MAX_EMS = _MicroWinExecInterface.cCOMMCOMPASS_DEV_IO_MAX_EMS
cCOMMCOMPASS_VENDOR_ID_SIZE = _MicroWinExecInterface.cCOMMCOMPASS_VENDOR_ID_SIZE
cCOMMCOMPASS_VENDOR_ID_OFFSET = _MicroWinExecInterface.cCOMMCOMPASS_VENDOR_ID_OFFSET
cCOMMCOMPASS_SERIAL_NUMBER_SIZE = _MicroWinExecInterface.cCOMMCOMPASS_SERIAL_NUMBER_SIZE
cCOMMCOMPASS_SERIAL_NUMBER_ASCII_SIZE = _MicroWinExecInterface.cCOMMCOMPASS_SERIAL_NUMBER_ASCII_SIZE
cCOMMCOMPASS_SERIAL_NUMBER_OFFSET = _MicroWinExecInterface.cCOMMCOMPASS_SERIAL_NUMBER_OFFSET
cCOMMCOMPASS_MLFB_SIZE = _MicroWinExecInterface.cCOMMCOMPASS_MLFB_SIZE
cCOMMCOMPASS_MLFB_ASCII_SIZE = _MicroWinExecInterface.cCOMMCOMPASS_MLFB_ASCII_SIZE
cCOMMCOMPASS_MLFB_OFFSET = _MicroWinExecInterface.cCOMMCOMPASS_MLFB_OFFSET
cCOMMCOMPASS_HW_ESTAND_SIZE = _MicroWinExecInterface.cCOMMCOMPASS_HW_ESTAND_SIZE
cCOMMCOMPASS_HW_ESTAND_OFFSET = _MicroWinExecInterface.cCOMMCOMPASS_HW_ESTAND_OFFSET
cCOMMCOMPASS_FW_REV_SIZE = _MicroWinExecInterface.cCOMMCOMPASS_FW_REV_SIZE
cCOMMCOMPASS_FW_REV_OFFSET = _MicroWinExecInterface.cCOMMCOMPASS_FW_REV_OFFSET
cCOMMCOMPASS_FW_CNT_SIZE = _MicroWinExecInterface.cCOMMCOMPASS_FW_CNT_SIZE
cCOMMCOMPASS_FW_CNT_OFFSET = _MicroWinExecInterface.cCOMMCOMPASS_FW_CNT_OFFSET
cCOMMCOMPASS_FIRMWARE_SIZE = _MicroWinExecInterface.cCOMMCOMPASS_FIRMWARE_SIZE
cCOMMCOMPASS_DEV_TYPE_SIZE = _MicroWinExecInterface.cCOMMCOMPASS_DEV_TYPE_SIZE
cCOMMCOMPASS_DEV_TYPE_OFFSET = _MicroWinExecInterface.cCOMMCOMPASS_DEV_TYPE_OFFSET
cCOMMCOMPASS_DIAG_CODE_SIZE = _MicroWinExecInterface.cCOMMCOMPASS_DIAG_CODE_SIZE
cCOMMCOMPASS_DIAG_CODE_OFFSET = _MicroWinExecInterface.cCOMMCOMPASS_DIAG_CODE_OFFSET
cCOMMCOMPASS_DIAG_CODE_CPU_OFFSET = _MicroWinExecInterface.cCOMMCOMPASS_DIAG_CODE_CPU_OFFSET
cCOMMCOMPASS_DIAG_CODE_SB_OFFSET = _MicroWinExecInterface.cCOMMCOMPASS_DIAG_CODE_SB_OFFSET
cCOMMCOMPASS_DIAG_CODE_SM_OFFSET = _MicroWinExecInterface.cCOMMCOMPASS_DIAG_CODE_SM_OFFSET
cCOMMCOMPASS_EXPAND_SLAVE_ADDR_OFFSET = _MicroWinExecInterface.cCOMMCOMPASS_EXPAND_SLAVE_ADDR_OFFSET
cCOMMCOMPASS_EXPAND_MASTER_ADDR_OFFSET = _MicroWinExecInterface.cCOMMCOMPASS_EXPAND_MASTER_ADDR_OFFSET
cCOMMCOMPASS_EXPAND_OUTPUT_BUFFER_OFFSET = _MicroWinExecInterface.cCOMMCOMPASS_EXPAND_OUTPUT_BUFFER_OFFSET
cCOMMCOMPASS_EXPAND_NUM_OUTPUT_BYTES_OFFSET = _MicroWinExecInterface.cCOMMCOMPASS_EXPAND_NUM_OUTPUT_BYTES_OFFSET
cCOMMCOMPASS_EXPAND_NUM_INPUT_BYTES_OFFSET = _MicroWinExecInterface.cCOMMCOMPASS_EXPAND_NUM_INPUT_BYTES_OFFSET
cCOMMCOMPASS_EXPAND_DP_STATUS_OFFSET = _MicroWinExecInterface.cCOMMCOMPASS_EXPAND_DP_STATUS_OFFSET
cCOMMCOMPASS_PN_DIAG_STATUS_OFFSET = _MicroWinExecInterface.cCOMMCOMPASS_PN_DIAG_STATUS_OFFSET
cCOMMCOMPASS_PN_DIAG_IODATA_STATUS_OFFSET = _MicroWinExecInterface.cCOMMCOMPASS_PN_DIAG_IODATA_STATUS_OFFSET
cCOMMCOMPASS_PN_IDEVICE_CONNECT_STATUS_OFFSET = _MicroWinExecInterface.cCOMMCOMPASS_PN_IDEVICE_CONNECT_STATUS_OFFSET
cCOMMCOMPASS_PN_IDEVICE_IO_STATUS_OFFSET = _MicroWinExecInterface.cCOMMCOMPASS_PN_IDEVICE_IO_STATUS_OFFSET
cCOMMCOMPASS_PN_DEVICE_IP_OFFSET = _MicroWinExecInterface.cCOMMCOMPASS_PN_DEVICE_IP_OFFSET
eCOMMCOMPASS_DP_NOT_ACTIVE = _MicroWinExecInterface.eCOMMCOMPASS_DP_NOT_ACTIVE
eCOMMCOMPASS_DP_CONFIG_ERROR = _MicroWinExecInterface.eCOMMCOMPASS_DP_CONFIG_ERROR
eCOMMCOMPASS_DP_ACTIVE = _MicroWinExecInterface.eCOMMCOMPASS_DP_ACTIVE
eCOMMCOMPASS_DP_DROPPED = _MicroWinExecInterface.eCOMMCOMPASS_DP_DROPPED
class sCOMMCOMPASS_EXPAND_DEV_IDENTIFICATION(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nSlaveAddr = property(_MicroWinExecInterface.sCOMMCOMPASS_EXPAND_DEV_IDENTIFICATION_nSlaveAddr_get, _MicroWinExecInterface.sCOMMCOMPASS_EXPAND_DEV_IDENTIFICATION_nSlaveAddr_set)
    nMasterAddr = property(_MicroWinExecInterface.sCOMMCOMPASS_EXPAND_DEV_IDENTIFICATION_nMasterAddr_get, _MicroWinExecInterface.sCOMMCOMPASS_EXPAND_DEV_IDENTIFICATION_nMasterAddr_set)
    nOutputBufferAddr = property(_MicroWinExecInterface.sCOMMCOMPASS_EXPAND_DEV_IDENTIFICATION_nOutputBufferAddr_get, _MicroWinExecInterface.sCOMMCOMPASS_EXPAND_DEV_IDENTIFICATION_nOutputBufferAddr_set)
    nNumOutputBytes = property(_MicroWinExecInterface.sCOMMCOMPASS_EXPAND_DEV_IDENTIFICATION_nNumOutputBytes_get, _MicroWinExecInterface.sCOMMCOMPASS_EXPAND_DEV_IDENTIFICATION_nNumOutputBytes_set)
    nNumInputBytes = property(_MicroWinExecInterface.sCOMMCOMPASS_EXPAND_DEV_IDENTIFICATION_nNumInputBytes_get, _MicroWinExecInterface.sCOMMCOMPASS_EXPAND_DEV_IDENTIFICATION_nNumInputBytes_set)
    nDPStatus = property(_MicroWinExecInterface.sCOMMCOMPASS_EXPAND_DEV_IDENTIFICATION_nDPStatus_get, _MicroWinExecInterface.sCOMMCOMPASS_EXPAND_DEV_IDENTIFICATION_nDPStatus_set)

    def __init__(self):
        _MicroWinExecInterface.sCOMMCOMPASS_EXPAND_DEV_IDENTIFICATION_swiginit(self, _MicroWinExecInterface.new_sCOMMCOMPASS_EXPAND_DEV_IDENTIFICATION())
    __swig_destroy__ = _MicroWinExecInterface.delete_sCOMMCOMPASS_EXPAND_DEV_IDENTIFICATION

# Register sCOMMCOMPASS_EXPAND_DEV_IDENTIFICATION in _MicroWinExecInterface:
_MicroWinExecInterface.sCOMMCOMPASS_EXPAND_DEV_IDENTIFICATION_swigregister(sCOMMCOMPASS_EXPAND_DEV_IDENTIFICATION)

class sCOMMCOMPASS_DEV_IDENTIFICATION(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nVendorID = property(_MicroWinExecInterface.sCOMMCOMPASS_DEV_IDENTIFICATION_nVendorID_get, _MicroWinExecInterface.sCOMMCOMPASS_DEV_IDENTIFICATION_nVendorID_set)
    aszMLFB = property(_MicroWinExecInterface.sCOMMCOMPASS_DEV_IDENTIFICATION_aszMLFB_get, _MicroWinExecInterface.sCOMMCOMPASS_DEV_IDENTIFICATION_aszMLFB_set)
    aszSerialNumber = property(_MicroWinExecInterface.sCOMMCOMPASS_DEV_IDENTIFICATION_aszSerialNumber_get, _MicroWinExecInterface.sCOMMCOMPASS_DEV_IDENTIFICATION_aszSerialNumber_set)
    aszDeviceFirmware = property(_MicroWinExecInterface.sCOMMCOMPASS_DEV_IDENTIFICATION_aszDeviceFirmware_get, _MicroWinExecInterface.sCOMMCOMPASS_DEV_IDENTIFICATION_aszDeviceFirmware_set)
    nHardwareEStand = property(_MicroWinExecInterface.sCOMMCOMPASS_DEV_IDENTIFICATION_nHardwareEStand_get, _MicroWinExecInterface.sCOMMCOMPASS_DEV_IDENTIFICATION_nHardwareEStand_set)
    lFirmwareRev = property(_MicroWinExecInterface.sCOMMCOMPASS_DEV_IDENTIFICATION_lFirmwareRev_get, _MicroWinExecInterface.sCOMMCOMPASS_DEV_IDENTIFICATION_lFirmwareRev_set)
    nFirmwareCnt = property(_MicroWinExecInterface.sCOMMCOMPASS_DEV_IDENTIFICATION_nFirmwareCnt_get, _MicroWinExecInterface.sCOMMCOMPASS_DEV_IDENTIFICATION_nFirmwareCnt_set)
    nDevType = property(_MicroWinExecInterface.sCOMMCOMPASS_DEV_IDENTIFICATION_nDevType_get, _MicroWinExecInterface.sCOMMCOMPASS_DEV_IDENTIFICATION_nDevType_set)
    nErrorInfo = property(_MicroWinExecInterface.sCOMMCOMPASS_DEV_IDENTIFICATION_nErrorInfo_get, _MicroWinExecInterface.sCOMMCOMPASS_DEV_IDENTIFICATION_nErrorInfo_set)
    nDiagnosticAlarmCode = property(_MicroWinExecInterface.sCOMMCOMPASS_DEV_IDENTIFICATION_nDiagnosticAlarmCode_get, _MicroWinExecInterface.sCOMMCOMPASS_DEV_IDENTIFICATION_nDiagnosticAlarmCode_set)
    sExpandedInfo = property(_MicroWinExecInterface.sCOMMCOMPASS_DEV_IDENTIFICATION_sExpandedInfo_get, _MicroWinExecInterface.sCOMMCOMPASS_DEV_IDENTIFICATION_sExpandedInfo_set)

    def __init__(self):
        _MicroWinExecInterface.sCOMMCOMPASS_DEV_IDENTIFICATION_swiginit(self, _MicroWinExecInterface.new_sCOMMCOMPASS_DEV_IDENTIFICATION())
    __swig_destroy__ = _MicroWinExecInterface.delete_sCOMMCOMPASS_DEV_IDENTIFICATION

# Register sCOMMCOMPASS_DEV_IDENTIFICATION in _MicroWinExecInterface:
_MicroWinExecInterface.sCOMMCOMPASS_DEV_IDENTIFICATION_swigregister(sCOMMCOMPASS_DEV_IDENTIFICATION)

class sCOMMCOMPASS_PN_DEVICE_MODULE_STATUS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_wDeviceNumber = property(_MicroWinExecInterface.sCOMMCOMPASS_PN_DEVICE_MODULE_STATUS_m_wDeviceNumber_get, _MicroWinExecInterface.sCOMMCOMPASS_PN_DEVICE_MODULE_STATUS_m_wDeviceNumber_set)
    m_byDeviceStatus = property(_MicroWinExecInterface.sCOMMCOMPASS_PN_DEVICE_MODULE_STATUS_m_byDeviceStatus_get, _MicroWinExecInterface.sCOMMCOMPASS_PN_DEVICE_MODULE_STATUS_m_byDeviceStatus_set)
    m_byReserve = property(_MicroWinExecInterface.sCOMMCOMPASS_PN_DEVICE_MODULE_STATUS_m_byReserve_get, _MicroWinExecInterface.sCOMMCOMPASS_PN_DEVICE_MODULE_STATUS_m_byReserve_set)
    m_aszModuleStatus = property(_MicroWinExecInterface.sCOMMCOMPASS_PN_DEVICE_MODULE_STATUS_m_aszModuleStatus_get, _MicroWinExecInterface.sCOMMCOMPASS_PN_DEVICE_MODULE_STATUS_m_aszModuleStatus_set)

    def __init__(self):
        _MicroWinExecInterface.sCOMMCOMPASS_PN_DEVICE_MODULE_STATUS_swiginit(self, _MicroWinExecInterface.new_sCOMMCOMPASS_PN_DEVICE_MODULE_STATUS())
    __swig_destroy__ = _MicroWinExecInterface.delete_sCOMMCOMPASS_PN_DEVICE_MODULE_STATUS

# Register sCOMMCOMPASS_PN_DEVICE_MODULE_STATUS in _MicroWinExecInterface:
_MicroWinExecInterface.sCOMMCOMPASS_PN_DEVICE_MODULE_STATUS_swigregister(sCOMMCOMPASS_PN_DEVICE_MODULE_STATUS)

class sCOMMCOMPASS_PN_DEVICE_IODATA_STATUS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_wDeviceNumber = property(_MicroWinExecInterface.sCOMMCOMPASS_PN_DEVICE_IODATA_STATUS_m_wDeviceNumber_get, _MicroWinExecInterface.sCOMMCOMPASS_PN_DEVICE_IODATA_STATUS_m_wDeviceNumber_set)
    m_byDeviceStatus = property(_MicroWinExecInterface.sCOMMCOMPASS_PN_DEVICE_IODATA_STATUS_m_byDeviceStatus_get, _MicroWinExecInterface.sCOMMCOMPASS_PN_DEVICE_IODATA_STATUS_m_byDeviceStatus_set)
    m_byReserve = property(_MicroWinExecInterface.sCOMMCOMPASS_PN_DEVICE_IODATA_STATUS_m_byReserve_get, _MicroWinExecInterface.sCOMMCOMPASS_PN_DEVICE_IODATA_STATUS_m_byReserve_set)
    m_aszIODataStatus = property(_MicroWinExecInterface.sCOMMCOMPASS_PN_DEVICE_IODATA_STATUS_m_aszIODataStatus_get, _MicroWinExecInterface.sCOMMCOMPASS_PN_DEVICE_IODATA_STATUS_m_aszIODataStatus_set)

    def __init__(self):
        _MicroWinExecInterface.sCOMMCOMPASS_PN_DEVICE_IODATA_STATUS_swiginit(self, _MicroWinExecInterface.new_sCOMMCOMPASS_PN_DEVICE_IODATA_STATUS())
    __swig_destroy__ = _MicroWinExecInterface.delete_sCOMMCOMPASS_PN_DEVICE_IODATA_STATUS

# Register sCOMMCOMPASS_PN_DEVICE_IODATA_STATUS in _MicroWinExecInterface:
_MicroWinExecInterface.sCOMMCOMPASS_PN_DEVICE_IODATA_STATUS_swigregister(sCOMMCOMPASS_PN_DEVICE_IODATA_STATUS)

class sCOMMCOMPASS_PN_DEVICE_IP(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_wDeviceNumber = property(_MicroWinExecInterface.sCOMMCOMPASS_PN_DEVICE_IP_m_wDeviceNumber_get, _MicroWinExecInterface.sCOMMCOMPASS_PN_DEVICE_IP_m_wDeviceNumber_set)
    m_wDeviceIP = property(_MicroWinExecInterface.sCOMMCOMPASS_PN_DEVICE_IP_m_wDeviceIP_get, _MicroWinExecInterface.sCOMMCOMPASS_PN_DEVICE_IP_m_wDeviceIP_set)

    def __init__(self):
        _MicroWinExecInterface.sCOMMCOMPASS_PN_DEVICE_IP_swiginit(self, _MicroWinExecInterface.new_sCOMMCOMPASS_PN_DEVICE_IP())
    __swig_destroy__ = _MicroWinExecInterface.delete_sCOMMCOMPASS_PN_DEVICE_IP

# Register sCOMMCOMPASS_PN_DEVICE_IP in _MicroWinExecInterface:
_MicroWinExecInterface.sCOMMCOMPASS_PN_DEVICE_IP_swigregister(sCOMMCOMPASS_PN_DEVICE_IP)

class sCOMMCOMPASS_DEVICE_INFORMATION(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cCPUIdent = property(_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_INFORMATION_cCPUIdent_get, _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_INFORMATION_cCPUIdent_set)
    cSBIdent = property(_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_INFORMATION_cSBIdent_get, _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_INFORMATION_cSBIdent_set)
    aSMIdent = property(_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_INFORMATION_aSMIdent_get, _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_INFORMATION_aSMIdent_set)
    aDeviceModuleStatus = property(_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_INFORMATION_aDeviceModuleStatus_get, _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_INFORMATION_aDeviceModuleStatus_set)
    aDeviceIODataStatus = property(_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_INFORMATION_aDeviceIODataStatus_get, _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_INFORMATION_aDeviceIODataStatus_set)
    aDeviceIP = property(_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_INFORMATION_aDeviceIP_get, _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_INFORMATION_aDeviceIP_set)
    aszDeviceType = property(_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_INFORMATION_aszDeviceType_get, _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_INFORMATION_aszDeviceType_set)
    nOperatingMode = property(_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_INFORMATION_nOperatingMode_get, _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_INFORMATION_nOperatingMode_set)
    nFatalError = property(_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_INFORMATION_nFatalError_get, _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_INFORMATION_nFatalError_set)
    nNonFatalError = property(_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_INFORMATION_nNonFatalError_get, _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_INFORMATION_nNonFatalError_set)
    nNonFatalCounts = property(_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_INFORMATION_nNonFatalCounts_get, _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_INFORMATION_nNonFatalCounts_set)
    nAddressOfError = property(_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_INFORMATION_nAddressOfError_get, _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_INFORMATION_nAddressOfError_set)
    nLastFatalError = property(_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_INFORMATION_nLastFatalError_get, _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_INFORMATION_nLastFatalError_set)
    nTotalFatalError = property(_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_INFORMATION_nTotalFatalError_get, _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_INFORMATION_nTotalFatalError_set)
    nLastScanRate = property(_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_INFORMATION_nLastScanRate_get, _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_INFORMATION_nLastScanRate_set)
    nMinScanRate = property(_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_INFORMATION_nMinScanRate_get, _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_INFORMATION_nMinScanRate_set)
    nMaxScanRate = property(_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_INFORMATION_nMaxScanRate_get, _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_INFORMATION_nMaxScanRate_set)
    nIOStatus = property(_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_INFORMATION_nIOStatus_get, _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_INFORMATION_nIOStatus_set)
    nForceStatus = property(_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_INFORMATION_nForceStatus_get, _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_INFORMATION_nForceStatus_set)
    nIDeviceConnectStatus = property(_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_INFORMATION_nIDeviceConnectStatus_get, _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_INFORMATION_nIDeviceConnectStatus_set)
    nIDeviceIOStatus = property(_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_INFORMATION_nIDeviceIOStatus_get, _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_INFORMATION_nIDeviceIOStatus_set)

    def __init__(self):
        _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_INFORMATION_swiginit(self, _MicroWinExecInterface.new_sCOMMCOMPASS_DEVICE_INFORMATION())
    __swig_destroy__ = _MicroWinExecInterface.delete_sCOMMCOMPASS_DEVICE_INFORMATION

# Register sCOMMCOMPASS_DEVICE_INFORMATION in _MicroWinExecInterface:
_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_INFORMATION_swigregister(sCOMMCOMPASS_DEVICE_INFORMATION)

cCOMMCOMPASS_MOTION_MAX_STEPS = _MicroWinExecInterface.cCOMMCOMPASS_MOTION_MAX_STEPS
cCOMMCOMPASS_MOTION_CFG_ID_SIZE = _MicroWinExecInterface.cCOMMCOMPASS_MOTION_CFG_ID_SIZE
cCOMMCOMPASS_MOTION_UNITS_SIZE = _MicroWinExecInterface.cCOMMCOMPASS_MOTION_UNITS_SIZE
cCOMMCOMPASS_MOTION_CONFIG_BLOCK_SIZE = _MicroWinExecInterface.cCOMMCOMPASS_MOTION_CONFIG_BLOCK_SIZE
eCOMMCOMPASS_MODE_ABSOLUTE_POSITION = _MicroWinExecInterface.eCOMMCOMPASS_MODE_ABSOLUTE_POSITION
eCOMMCOMPASS_MODE_RELATIVE_POSITION = _MicroWinExecInterface.eCOMMCOMPASS_MODE_RELATIVE_POSITION
eCOMMCOMPASS_MODE_1S_POS = _MicroWinExecInterface.eCOMMCOMPASS_MODE_1S_POS
eCOMMCOMPASS_MODE_1S_NEG = _MicroWinExecInterface.eCOMMCOMPASS_MODE_1S_NEG
eCOMMCOMPASS_MODE_1S_POS_RPS = _MicroWinExecInterface.eCOMMCOMPASS_MODE_1S_POS_RPS
eCOMMCOMPASS_MODE_1S_NEG_RPS = _MicroWinExecInterface.eCOMMCOMPASS_MODE_1S_NEG_RPS
eCOMMCOMPASS_MODE_2S_POS_RPS = _MicroWinExecInterface.eCOMMCOMPASS_MODE_2S_POS_RPS
eCOMMCOMPASS_MODE_2S_NEG_RPS = _MicroWinExecInterface.eCOMMCOMPASS_MODE_2S_NEG_RPS
eCOMMCOMPASS_POSITIVE_DIRECTION = _MicroWinExecInterface.eCOMMCOMPASS_POSITIVE_DIRECTION
eCOMMCOMPASS_NEGATIVE_DIRECTION = _MicroWinExecInterface.eCOMMCOMPASS_NEGATIVE_DIRECTION
eCOMMCOMPASS_SEARCH_DISABLED = _MicroWinExecInterface.eCOMMCOMPASS_SEARCH_DISABLED
eCOMMCOMPASS_RPS_ACTIVE = _MicroWinExecInterface.eCOMMCOMPASS_RPS_ACTIVE
eCOMMCOMPASS_RPS_CENTER = _MicroWinExecInterface.eCOMMCOMPASS_RPS_CENTER
eCOMMCOMPASS_RPS_OUTSIDE = _MicroWinExecInterface.eCOMMCOMPASS_RPS_OUTSIDE
eCOMMCOMPASS_RPS_WITHIN = _MicroWinExecInterface.eCOMMCOMPASS_RPS_WITHIN
class sCOMMCOMPASS_MOTION_PROFILE_STEP(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    position = property(_MicroWinExecInterface.sCOMMCOMPASS_MOTION_PROFILE_STEP_position_get, _MicroWinExecInterface.sCOMMCOMPASS_MOTION_PROFILE_STEP_position_set)
    speed = property(_MicroWinExecInterface.sCOMMCOMPASS_MOTION_PROFILE_STEP_speed_get, _MicroWinExecInterface.sCOMMCOMPASS_MOTION_PROFILE_STEP_speed_set)

    def __init__(self):
        _MicroWinExecInterface.sCOMMCOMPASS_MOTION_PROFILE_STEP_swiginit(self, _MicroWinExecInterface.new_sCOMMCOMPASS_MOTION_PROFILE_STEP())
    __swig_destroy__ = _MicroWinExecInterface.delete_sCOMMCOMPASS_MOTION_PROFILE_STEP

# Register sCOMMCOMPASS_MOTION_PROFILE_STEP in _MicroWinExecInterface:
_MicroWinExecInterface.sCOMMCOMPASS_MOTION_PROFILE_STEP_swigregister(sCOMMCOMPASS_MOTION_PROFILE_STEP)

class sCOMMCOMPASS_MOTION_PROFILE_BLOCK(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    numSteps = property(_MicroWinExecInterface.sCOMMCOMPASS_MOTION_PROFILE_BLOCK_numSteps_get, _MicroWinExecInterface.sCOMMCOMPASS_MOTION_PROFILE_BLOCK_numSteps_set)
    mode = property(_MicroWinExecInterface.sCOMMCOMPASS_MOTION_PROFILE_BLOCK_mode_get, _MicroWinExecInterface.sCOMMCOMPASS_MOTION_PROFILE_BLOCK_mode_set)
    steps = property(_MicroWinExecInterface.sCOMMCOMPASS_MOTION_PROFILE_BLOCK_steps_get, _MicroWinExecInterface.sCOMMCOMPASS_MOTION_PROFILE_BLOCK_steps_set)

    def __init__(self):
        _MicroWinExecInterface.sCOMMCOMPASS_MOTION_PROFILE_BLOCK_swiginit(self, _MicroWinExecInterface.new_sCOMMCOMPASS_MOTION_PROFILE_BLOCK())
    __swig_destroy__ = _MicroWinExecInterface.delete_sCOMMCOMPASS_MOTION_PROFILE_BLOCK

# Register sCOMMCOMPASS_MOTION_PROFILE_BLOCK in _MicroWinExecInterface:
_MicroWinExecInterface.sCOMMCOMPASS_MOTION_PROFILE_BLOCK_swigregister(sCOMMCOMPASS_MOTION_PROFILE_BLOCK)

class sCOMMCOMPASS_MOTION_CONFIG_BLOCK(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    aszCFG_ID = property(_MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_aszCFG_ID_get, _MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_aszCFG_ID_set)
    cb_len = property(_MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_cb_len_get, _MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_cb_len_set)
    ib_len = property(_MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_ib_len_get, _MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_ib_len_set)
    pf_len = property(_MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_pf_len_get, _MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_pf_len_set)
    stp_len = property(_MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_stp_len_get, _MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_stp_len_set)
    steps = property(_MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_steps_get, _MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_steps_set)
    profiles = property(_MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_profiles_get, _MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_profiles_set)
    stp_rsp = property(_MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_stp_rsp_get, _MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_stp_rsp_set)
    lmt_neg_rsp = property(_MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_lmt_neg_rsp_get, _MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_lmt_neg_rsp_set)
    lmt_pos_rsp = property(_MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_lmt_pos_rsp_get, _MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_lmt_pos_rsp_set)
    meas_sys = property(_MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_meas_sys_get, _MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_meas_sys_set)
    pls_per_rev = property(_MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_pls_per_rev_get, _MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_pls_per_rev_set)
    units_per_rev = property(_MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_units_per_rev_get, _MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_units_per_rev_set)
    aszUnits = property(_MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_aszUnits_get, _MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_aszUnits_set)
    rp_seek_dir = property(_MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_rp_seek_dir_get, _MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_rp_seek_dir_set)
    rp_appr_dir = property(_MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_rp_appr_dir_get, _MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_rp_appr_dir_set)
    rp_mode = property(_MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_rp_mode_get, _MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_rp_mode_set)
    rp_zp_cnt = property(_MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_rp_zp_cnt_get, _MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_rp_zp_cnt_set)
    rp_fast = property(_MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_rp_fast_get, _MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_rp_fast_set)
    rp_slow = property(_MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_rp_slow_get, _MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_rp_slow_set)
    ss_speed = property(_MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_ss_speed_get, _MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_ss_speed_set)
    max_speed = property(_MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_max_speed_get, _MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_max_speed_set)
    jog_speed = property(_MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_jog_speed_get, _MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_jog_speed_set)
    jog_increment = property(_MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_jog_increment_get, _MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_jog_increment_set)
    accel_time = property(_MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_accel_time_get, _MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_accel_time_set)
    decel_time = property(_MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_decel_time_get, _MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_decel_time_set)
    bklsh_comp = property(_MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_bklsh_comp_get, _MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_bklsh_comp_set)
    jerk_time = property(_MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_jerk_time_get, _MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_jerk_time_set)

    def __init__(self):
        _MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_swiginit(self, _MicroWinExecInterface.new_sCOMMCOMPASS_MOTION_CONFIG_BLOCK())
    __swig_destroy__ = _MicroWinExecInterface.delete_sCOMMCOMPASS_MOTION_CONFIG_BLOCK

# Register sCOMMCOMPASS_MOTION_CONFIG_BLOCK in _MicroWinExecInterface:
_MicroWinExecInterface.sCOMMCOMPASS_MOTION_CONFIG_BLOCK_swigregister(sCOMMCOMPASS_MOTION_CONFIG_BLOCK)

eCOMMCOMPASS_BOOL = _MicroWinExecInterface.eCOMMCOMPASS_BOOL
eCOMMCOMPASS_BYTE = _MicroWinExecInterface.eCOMMCOMPASS_BYTE
eCOMMCOMPASS_CHAR = _MicroWinExecInterface.eCOMMCOMPASS_CHAR
eCOMMCOMPASS_WORD = _MicroWinExecInterface.eCOMMCOMPASS_WORD
eCOMMCOMPASS_INT = _MicroWinExecInterface.eCOMMCOMPASS_INT
eCOMMCOMPASS_DWORD = _MicroWinExecInterface.eCOMMCOMPASS_DWORD
eCOMMCOMPASS_DINT = _MicroWinExecInterface.eCOMMCOMPASS_DINT
eCOMMCOMPASS_READ = _MicroWinExecInterface.eCOMMCOMPASS_READ
eCOMMCOMPASS_C = _MicroWinExecInterface.eCOMMCOMPASS_C
eCOMMCOMPASS_T = _MicroWinExecInterface.eCOMMCOMPASS_T
eCOMMCOMPASS_HC = _MicroWinExecInterface.eCOMMCOMPASS_HC
eCOMMCOMPASS_SD_MEM = _MicroWinExecInterface.eCOMMCOMPASS_SD_MEM
eCOMMCOMPASS_S_MEM = _MicroWinExecInterface.eCOMMCOMPASS_S_MEM
eCOMMCOMPASS_SM_MEM = _MicroWinExecInterface.eCOMMCOMPASS_SM_MEM
eCOMMCOMPASS_AI_MEM = _MicroWinExecInterface.eCOMMCOMPASS_AI_MEM
eCOMMCOMPASS_AQ_MEM = _MicroWinExecInterface.eCOMMCOMPASS_AQ_MEM
eCOMMCOMPASS_C_MEM = _MicroWinExecInterface.eCOMMCOMPASS_C_MEM
eCOMMCOMPASS_T_MEM = _MicroWinExecInterface.eCOMMCOMPASS_T_MEM
eCOMMCOMPASS_HC_MEM = _MicroWinExecInterface.eCOMMCOMPASS_HC_MEM
eCOMMCOMPASS_I_MEM = _MicroWinExecInterface.eCOMMCOMPASS_I_MEM
eCOMMCOMPASS_Q_MEM = _MicroWinExecInterface.eCOMMCOMPASS_Q_MEM
eCOMMCOMPASS_M_MEM = _MicroWinExecInterface.eCOMMCOMPASS_M_MEM
eCOMMCOMPASS_V_MEM = _MicroWinExecInterface.eCOMMCOMPASS_V_MEM
cCOMMCOMPASS_MAX_FORCE_IO_LOCATIONS = _MicroWinExecInterface.cCOMMCOMPASS_MAX_FORCE_IO_LOCATIONS
cCOMMCOMPASS_MAX_FORCE_VALUE_LOCATIONS = _MicroWinExecInterface.cCOMMCOMPASS_MAX_FORCE_VALUE_LOCATIONS
class sCOMMCOMPASS_FORCE_LOCATIONS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bForceLocation = property(_MicroWinExecInterface.sCOMMCOMPASS_FORCE_LOCATIONS_bForceLocation_get, _MicroWinExecInterface.sCOMMCOMPASS_FORCE_LOCATIONS_bForceLocation_set)
    bForceValue = property(_MicroWinExecInterface.sCOMMCOMPASS_FORCE_LOCATIONS_bForceValue_get, _MicroWinExecInterface.sCOMMCOMPASS_FORCE_LOCATIONS_bForceValue_set)

    def __init__(self):
        _MicroWinExecInterface.sCOMMCOMPASS_FORCE_LOCATIONS_swiginit(self, _MicroWinExecInterface.new_sCOMMCOMPASS_FORCE_LOCATIONS())
    __swig_destroy__ = _MicroWinExecInterface.delete_sCOMMCOMPASS_FORCE_LOCATIONS

# Register sCOMMCOMPASS_FORCE_LOCATIONS in _MicroWinExecInterface:
_MicroWinExecInterface.sCOMMCOMPASS_FORCE_LOCATIONS_swigregister(sCOMMCOMPASS_FORCE_LOCATIONS)

class sCOMMCOMPASS_DEVICE_ERROR_INFORMATION(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nOperatingMode = property(_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_ERROR_INFORMATION_nOperatingMode_get, _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_ERROR_INFORMATION_nOperatingMode_set)
    nFatalError = property(_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_ERROR_INFORMATION_nFatalError_get, _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_ERROR_INFORMATION_nFatalError_set)
    nNonFatalError = property(_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_ERROR_INFORMATION_nNonFatalError_get, _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_ERROR_INFORMATION_nNonFatalError_set)
    nNonFatalCounts = property(_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_ERROR_INFORMATION_nNonFatalCounts_get, _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_ERROR_INFORMATION_nNonFatalCounts_set)
    nAddressOfError = property(_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_ERROR_INFORMATION_nAddressOfError_get, _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_ERROR_INFORMATION_nAddressOfError_set)

    def __init__(self):
        _MicroWinExecInterface.sCOMMCOMPASS_DEVICE_ERROR_INFORMATION_swiginit(self, _MicroWinExecInterface.new_sCOMMCOMPASS_DEVICE_ERROR_INFORMATION())
    __swig_destroy__ = _MicroWinExecInterface.delete_sCOMMCOMPASS_DEVICE_ERROR_INFORMATION

# Register sCOMMCOMPASS_DEVICE_ERROR_INFORMATION in _MicroWinExecInterface:
_MicroWinExecInterface.sCOMMCOMPASS_DEVICE_ERROR_INFORMATION_swigregister(sCOMMCOMPASS_DEVICE_ERROR_INFORMATION)

class sCOMMCOMPASS_RME_INFORMATION(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bFeatureDisabled = property(_MicroWinExecInterface.sCOMMCOMPASS_RME_INFORMATION_bFeatureDisabled_get, _MicroWinExecInterface.sCOMMCOMPASS_RME_INFORMATION_bFeatureDisabled_set)
    wCompileState = property(_MicroWinExecInterface.sCOMMCOMPASS_RME_INFORMATION_wCompileState_get, _MicroWinExecInterface.sCOMMCOMPASS_RME_INFORMATION_wCompileState_set)
    wErrorState = property(_MicroWinExecInterface.sCOMMCOMPASS_RME_INFORMATION_wErrorState_get, _MicroWinExecInterface.sCOMMCOMPASS_RME_INFORMATION_wErrorState_set)
    wCompileProgress = property(_MicroWinExecInterface.sCOMMCOMPASS_RME_INFORMATION_wCompileProgress_get, _MicroWinExecInterface.sCOMMCOMPASS_RME_INFORMATION_wCompileProgress_set)
    wStopRunCount = property(_MicroWinExecInterface.sCOMMCOMPASS_RME_INFORMATION_wStopRunCount_get, _MicroWinExecInterface.sCOMMCOMPASS_RME_INFORMATION_wStopRunCount_set)

    def __init__(self):
        _MicroWinExecInterface.sCOMMCOMPASS_RME_INFORMATION_swiginit(self, _MicroWinExecInterface.new_sCOMMCOMPASS_RME_INFORMATION())
    __swig_destroy__ = _MicroWinExecInterface.delete_sCOMMCOMPASS_RME_INFORMATION

# Register sCOMMCOMPASS_RME_INFORMATION in _MicroWinExecInterface:
_MicroWinExecInterface.sCOMMCOMPASS_RME_INFORMATION_swigregister(sCOMMCOMPASS_RME_INFORMATION)

class sCOMMCOMPASS_UDM_INFORMATION(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    aszDeviceType = property(_MicroWinExecInterface.sCOMMCOMPASS_UDM_INFORMATION_aszDeviceType_get, _MicroWinExecInterface.sCOMMCOMPASS_UDM_INFORMATION_aszDeviceType_set)
    aszDeviceFirmware = property(_MicroWinExecInterface.sCOMMCOMPASS_UDM_INFORMATION_aszDeviceFirmware_get, _MicroWinExecInterface.sCOMMCOMPASS_UDM_INFORMATION_aszDeviceFirmware_set)
    nOperatingMode = property(_MicroWinExecInterface.sCOMMCOMPASS_UDM_INFORMATION_nOperatingMode_get, _MicroWinExecInterface.sCOMMCOMPASS_UDM_INFORMATION_nOperatingMode_set)
    sCreateTime = property(_MicroWinExecInterface.sCOMMCOMPASS_UDM_INFORMATION_sCreateTime_get, _MicroWinExecInterface.sCOMMCOMPASS_UDM_INFORMATION_sCreateTime_set)
    sModifyTime = property(_MicroWinExecInterface.sCOMMCOMPASS_UDM_INFORMATION_sModifyTime_get, _MicroWinExecInterface.sCOMMCOMPASS_UDM_INFORMATION_sModifyTime_set)
    nMCSize = property(_MicroWinExecInterface.sCOMMCOMPASS_UDM_INFORMATION_nMCSize_get, _MicroWinExecInterface.sCOMMCOMPASS_UDM_INFORMATION_nMCSize_set)
    nMCAvailableSize = property(_MicroWinExecInterface.sCOMMCOMPASS_UDM_INFORMATION_nMCAvailableSize_get, _MicroWinExecInterface.sCOMMCOMPASS_UDM_INFORMATION_nMCAvailableSize_set)
    aszMCDeviceType = property(_MicroWinExecInterface.sCOMMCOMPASS_UDM_INFORMATION_aszMCDeviceType_get, _MicroWinExecInterface.sCOMMCOMPASS_UDM_INFORMATION_aszMCDeviceType_set)
    aszMCDeviceFirmware = property(_MicroWinExecInterface.sCOMMCOMPASS_UDM_INFORMATION_aszMCDeviceFirmware_get, _MicroWinExecInterface.sCOMMCOMPASS_UDM_INFORMATION_aszMCDeviceFirmware_set)
    nMCVersion = property(_MicroWinExecInterface.sCOMMCOMPASS_UDM_INFORMATION_nMCVersion_get, _MicroWinExecInterface.sCOMMCOMPASS_UDM_INFORMATION_nMCVersion_set)
    nMCFormatCode = property(_MicroWinExecInterface.sCOMMCOMPASS_UDM_INFORMATION_nMCFormatCode_get, _MicroWinExecInterface.sCOMMCOMPASS_UDM_INFORMATION_nMCFormatCode_set)
    nPLCVersion = property(_MicroWinExecInterface.sCOMMCOMPASS_UDM_INFORMATION_nPLCVersion_get, _MicroWinExecInterface.sCOMMCOMPASS_UDM_INFORMATION_nPLCVersion_set)
    nPLCFormatCode = property(_MicroWinExecInterface.sCOMMCOMPASS_UDM_INFORMATION_nPLCFormatCode_get, _MicroWinExecInterface.sCOMMCOMPASS_UDM_INFORMATION_nPLCFormatCode_set)

    def __init__(self):
        _MicroWinExecInterface.sCOMMCOMPASS_UDM_INFORMATION_swiginit(self, _MicroWinExecInterface.new_sCOMMCOMPASS_UDM_INFORMATION())
    __swig_destroy__ = _MicroWinExecInterface.delete_sCOMMCOMPASS_UDM_INFORMATION

# Register sCOMMCOMPASS_UDM_INFORMATION in _MicroWinExecInterface:
_MicroWinExecInterface.sCOMMCOMPASS_UDM_INFORMATION_swigregister(sCOMMCOMPASS_UDM_INFORMATION)

class sCOMMCOMPASS_BLOCK_INFORMATION(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_eBlockLocation = property(_MicroWinExecInterface.sCOMMCOMPASS_BLOCK_INFORMATION_m_eBlockLocation_get, _MicroWinExecInterface.sCOMMCOMPASS_BLOCK_INFORMATION_m_eBlockLocation_set)
    m_eBlockType = property(_MicroWinExecInterface.sCOMMCOMPASS_BLOCK_INFORMATION_m_eBlockType_get, _MicroWinExecInterface.sCOMMCOMPASS_BLOCK_INFORMATION_m_eBlockType_set)
    m_eBlockStatus = property(_MicroWinExecInterface.sCOMMCOMPASS_BLOCK_INFORMATION_m_eBlockStatus_get, _MicroWinExecInterface.sCOMMCOMPASS_BLOCK_INFORMATION_m_eBlockStatus_set)
    m_sModifyTime = property(_MicroWinExecInterface.sCOMMCOMPASS_BLOCK_INFORMATION_m_sModifyTime_get, _MicroWinExecInterface.sCOMMCOMPASS_BLOCK_INFORMATION_m_sModifyTime_set)
    m_sCreateTime = property(_MicroWinExecInterface.sCOMMCOMPASS_BLOCK_INFORMATION_m_sCreateTime_get, _MicroWinExecInterface.sCOMMCOMPASS_BLOCK_INFORMATION_m_sCreateTime_set)
    m_nBlockNumber = property(_MicroWinExecInterface.sCOMMCOMPASS_BLOCK_INFORMATION_m_nBlockNumber_get, _MicroWinExecInterface.sCOMMCOMPASS_BLOCK_INFORMATION_m_nBlockNumber_set)
    m_lBlockLength = property(_MicroWinExecInterface.sCOMMCOMPASS_BLOCK_INFORMATION_m_lBlockLength_get, _MicroWinExecInterface.sCOMMCOMPASS_BLOCK_INFORMATION_m_lBlockLength_set)
    m_lSection1Length = property(_MicroWinExecInterface.sCOMMCOMPASS_BLOCK_INFORMATION_m_lSection1Length_get, _MicroWinExecInterface.sCOMMCOMPASS_BLOCK_INFORMATION_m_lSection1Length_set)
    m_lSection2Length = property(_MicroWinExecInterface.sCOMMCOMPASS_BLOCK_INFORMATION_m_lSection2Length_get, _MicroWinExecInterface.sCOMMCOMPASS_BLOCK_INFORMATION_m_lSection2Length_set)
    m_lSection3Length = property(_MicroWinExecInterface.sCOMMCOMPASS_BLOCK_INFORMATION_m_lSection3Length_get, _MicroWinExecInterface.sCOMMCOMPASS_BLOCK_INFORMATION_m_lSection3Length_set)

    def __init__(self):
        _MicroWinExecInterface.sCOMMCOMPASS_BLOCK_INFORMATION_swiginit(self, _MicroWinExecInterface.new_sCOMMCOMPASS_BLOCK_INFORMATION())
    __swig_destroy__ = _MicroWinExecInterface.delete_sCOMMCOMPASS_BLOCK_INFORMATION

# Register sCOMMCOMPASS_BLOCK_INFORMATION in _MicroWinExecInterface:
_MicroWinExecInterface.sCOMMCOMPASS_BLOCK_INFORMATION_swigregister(sCOMMCOMPASS_BLOCK_INFORMATION)

cCOMMCOMPASS_ASI_LAS_LENGTH = _MicroWinExecInterface.cCOMMCOMPASS_ASI_LAS_LENGTH
cCOMMCOMPASS_ASI_VERSION_LENGTH = _MicroWinExecInterface.cCOMMCOMPASS_ASI_VERSION_LENGTH
cCOMMCOMPASS_ASI_MAX_PROFILES = _MicroWinExecInterface.cCOMMCOMPASS_ASI_MAX_PROFILES
cBANK_10_LEFT_OVER_BYTES = _MicroWinExecInterface.cBANK_10_LEFT_OVER_BYTES
class sASI_VERSION(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byCommand = property(_MicroWinExecInterface.sASI_VERSION_byCommand_get, _MicroWinExecInterface.sASI_VERSION_byCommand_set)
    byStatus = property(_MicroWinExecInterface.sASI_VERSION_byStatus_get, _MicroWinExecInterface.sASI_VERSION_byStatus_set)
    aszVersion = property(_MicroWinExecInterface.sASI_VERSION_aszVersion_get, _MicroWinExecInterface.sASI_VERSION_aszVersion_set)

    def __init__(self):
        _MicroWinExecInterface.sASI_VERSION_swiginit(self, _MicroWinExecInterface.new_sASI_VERSION())
    __swig_destroy__ = _MicroWinExecInterface.delete_sASI_VERSION

# Register sASI_VERSION in _MicroWinExecInterface:
_MicroWinExecInterface.sASI_VERSION_swigregister(sASI_VERSION)

class sASI_COMMAND_STATUS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byCommand = property(_MicroWinExecInterface.sASI_COMMAND_STATUS_byCommand_get, _MicroWinExecInterface.sASI_COMMAND_STATUS_byCommand_set)
    byStatus = property(_MicroWinExecInterface.sASI_COMMAND_STATUS_byStatus_get, _MicroWinExecInterface.sASI_COMMAND_STATUS_byStatus_set)
    aszNotUsed = property(_MicroWinExecInterface.sASI_COMMAND_STATUS_aszNotUsed_get, _MicroWinExecInterface.sASI_COMMAND_STATUS_aszNotUsed_set)

    def __init__(self):
        _MicroWinExecInterface.sASI_COMMAND_STATUS_swiginit(self, _MicroWinExecInterface.new_sASI_COMMAND_STATUS())
    __swig_destroy__ = _MicroWinExecInterface.delete_sASI_COMMAND_STATUS

# Register sASI_COMMAND_STATUS in _MicroWinExecInterface:
_MicroWinExecInterface.sASI_COMMAND_STATUS_swigregister(sASI_COMMAND_STATUS)

class sASI_PROFILE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byProfile = property(_MicroWinExecInterface.sASI_PROFILE_byProfile_get, _MicroWinExecInterface.sASI_PROFILE_byProfile_set)
    byExt = property(_MicroWinExecInterface.sASI_PROFILE_byExt_get, _MicroWinExecInterface.sASI_PROFILE_byExt_set)

    def __init__(self):
        _MicroWinExecInterface.sASI_PROFILE_swiginit(self, _MicroWinExecInterface.new_sASI_PROFILE())
    __swig_destroy__ = _MicroWinExecInterface.delete_sASI_PROFILE

# Register sASI_PROFILE in _MicroWinExecInterface:
_MicroWinExecInterface.sASI_PROFILE_swigregister(sASI_PROFILE)

class sASI_EXT_TOTAL_CONFIG(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byCommand = property(_MicroWinExecInterface.sASI_EXT_TOTAL_CONFIG_byCommand_get, _MicroWinExecInterface.sASI_EXT_TOTAL_CONFIG_byCommand_set)
    byStatus = property(_MicroWinExecInterface.sASI_EXT_TOTAL_CONFIG_byStatus_get, _MicroWinExecInterface.sASI_EXT_TOTAL_CONFIG_byStatus_set)
    aszLAS = property(_MicroWinExecInterface.sASI_EXT_TOTAL_CONFIG_aszLAS_get, _MicroWinExecInterface.sASI_EXT_TOTAL_CONFIG_aszLAS_set)
    asProfiles = property(_MicroWinExecInterface.sASI_EXT_TOTAL_CONFIG_asProfiles_get, _MicroWinExecInterface.sASI_EXT_TOTAL_CONFIG_asProfiles_set)
    aszNotUsed = property(_MicroWinExecInterface.sASI_EXT_TOTAL_CONFIG_aszNotUsed_get, _MicroWinExecInterface.sASI_EXT_TOTAL_CONFIG_aszNotUsed_set)

    def __init__(self):
        _MicroWinExecInterface.sASI_EXT_TOTAL_CONFIG_swiginit(self, _MicroWinExecInterface.new_sASI_EXT_TOTAL_CONFIG())
    __swig_destroy__ = _MicroWinExecInterface.delete_sASI_EXT_TOTAL_CONFIG

# Register sASI_EXT_TOTAL_CONFIG in _MicroWinExecInterface:
_MicroWinExecInterface.sASI_EXT_TOTAL_CONFIG_swigregister(sASI_EXT_TOTAL_CONFIG)

eCOMMCOMPASS_MOTION_TYPE_HEARTBEAT = _MicroWinExecInterface.eCOMMCOMPASS_MOTION_TYPE_HEARTBEAT
eCOMMCOMPASS_MOTION_TYPE_COMMAND = _MicroWinExecInterface.eCOMMCOMPASS_MOTION_TYPE_COMMAND
class sCOMMCOMPASS_MOTION_AXIS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    eType = property(_MicroWinExecInterface.sCOMMCOMPASS_MOTION_AXIS_eType_get, _MicroWinExecInterface.sCOMMCOMPASS_MOTION_AXIS_eType_set)
    nAxis = property(_MicroWinExecInterface.sCOMMCOMPASS_MOTION_AXIS_nAxis_get, _MicroWinExecInterface.sCOMMCOMPASS_MOTION_AXIS_nAxis_set)
    byCommand = property(_MicroWinExecInterface.sCOMMCOMPASS_MOTION_AXIS_byCommand_get, _MicroWinExecInterface.sCOMMCOMPASS_MOTION_AXIS_byCommand_set)

    def __init__(self):
        _MicroWinExecInterface.sCOMMCOMPASS_MOTION_AXIS_swiginit(self, _MicroWinExecInterface.new_sCOMMCOMPASS_MOTION_AXIS())
    __swig_destroy__ = _MicroWinExecInterface.delete_sCOMMCOMPASS_MOTION_AXIS

# Register sCOMMCOMPASS_MOTION_AXIS in _MicroWinExecInterface:
_MicroWinExecInterface.sCOMMCOMPASS_MOTION_AXIS_swigregister(sCOMMCOMPASS_MOTION_AXIS)

eControllerIDevice = _MicroWinExecInterface.eControllerIDevice
eIODevice = _MicroWinExecInterface.eIODevice
ePhysicalDevice = _MicroWinExecInterface.ePhysicalDevice
class PNBlockData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MicroWinExecInterface.PNBlockData_swiginit(self, _MicroWinExecInterface.new_PNBlockData(*args))
    __swig_destroy__ = _MicroWinExecInterface.delete_PNBlockData

    def __eq__(self, rSrc):
        return _MicroWinExecInterface.PNBlockData___eq__(self, rSrc)

    def Store(self, rDest):
        return _MicroWinExecInterface.PNBlockData_Store(self, rDest)

    def Retrieve(self, rSrc, byVer):
        return _MicroWinExecInterface.PNBlockData_Retrieve(self, rSrc, byVer)

    def SetBlockData(self, nSDBNumber, nParamSize, ppbyParamData):
        return _MicroWinExecInterface.PNBlockData_SetBlockData(self, nSDBNumber, nParamSize, ppbyParamData)

    def GetBlockData(self, nSDBNumber, pnParamBytes, pbyParamData):
        return _MicroWinExecInterface.PNBlockData_GetBlockData(self, nSDBNumber, pnParamBytes, pbyParamData)

    def GetDeviceBlockData(self, deviceType, deviceID, pnParamBytes, pbyParamData):
        return _MicroWinExecInterface.PNBlockData_GetDeviceBlockData(self, deviceType, deviceID, pnParamBytes, pbyParamData)

    def GetClsId(self):
        return _MicroWinExecInterface.PNBlockData_GetClsId(self)

    def QueryBase(self, rBaseId):
        return _MicroWinExecInterface.PNBlockData_QueryBase(self, rBaseId)

    def Clone(self):
        return _MicroWinExecInterface.PNBlockData_Clone(self)

    @staticmethod
    def Factory():
        return _MicroWinExecInterface.PNBlockData_Factory()

    def Empty(self):
        return _MicroWinExecInterface.PNBlockData_Empty(self)

    def RemoveIDeviceSDB(self, rToRole):
        return _MicroWinExecInterface.PNBlockData_RemoveIDeviceSDB(self, rToRole)
    m_PhysicalSDB = property(_MicroWinExecInterface.PNBlockData_m_PhysicalSDB_get, _MicroWinExecInterface.PNBlockData_m_PhysicalSDB_set)
    m_PNDeviceMap = property(_MicroWinExecInterface.PNBlockData_m_PNDeviceMap_get, _MicroWinExecInterface.PNBlockData_m_PNDeviceMap_set)
    m_SDBPNPLCRole = property(_MicroWinExecInterface.PNBlockData_m_SDBPNPLCRole_get, _MicroWinExecInterface.PNBlockData_m_SDBPNPLCRole_set)

# Register PNBlockData in _MicroWinExecInterface:
_MicroWinExecInterface.PNBlockData_swigregister(PNBlockData)
g_mwPNBlockDataID = cvar.g_mwPNBlockDataID

def PNBlockData_Factory():
    return _MicroWinExecInterface.PNBlockData_Factory()

MAX_DEVICE_NUMBER = _MicroWinExecInterface.MAX_DEVICE_NUMBER
MAX_DEVICE_NUMBER_UNDER_IDEVICE = _MicroWinExecInterface.MAX_DEVICE_NUMBER_UNDER_IDEVICE
MAX_MODULESOFDEVICES_NUMBER = _MicroWinExecInterface.MAX_MODULESOFDEVICES_NUMBER
MAX_IODATA_INPUT_OUTPUT_Length = _MicroWinExecInterface.MAX_IODATA_INPUT_OUTPUT_Length
class EX_PNWizardData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _MicroWinExecInterface.delete_EX_PNWizardData

    def __init__(self, *args):
        _MicroWinExecInterface.EX_PNWizardData_swiginit(self, _MicroWinExecInterface.new_EX_PNWizardData(*args))

    def __eq__(self, rRight):
        return _MicroWinExecInterface.EX_PNWizardData___eq__(self, rRight)

    def __ne__(self, rRight):
        return _MicroWinExecInterface.EX_PNWizardData___ne__(self, rRight)

    def Store(self, rDest):
        return _MicroWinExecInterface.EX_PNWizardData_Store(self, rDest)

    def Retrieve(self, *args):
        return _MicroWinExecInterface.EX_PNWizardData_Retrieve(self, *args)

    def Empty(self):
        return _MicroWinExecInterface.EX_PNWizardData_Empty(self)

    def IsEnabled(self):
        return _MicroWinExecInterface.EX_PNWizardData_IsEnabled(self)

    def IsValidConfiguration(self):
        return _MicroWinExecInterface.EX_PNWizardData_IsValidConfiguration(self)

    def GetAttachedModuleCountForAllDevice(self):
        return _MicroWinExecInterface.EX_PNWizardData_GetAttachedModuleCountForAllDevice(self)

    def BuildThirdPartyDeviceCatalog(self, rootNode, GSDRawData, GSDPath):
        return _MicroWinExecInterface.EX_PNWizardData_BuildThirdPartyDeviceCatalog(self, rootNode, GSDRawData, GSDPath)

    def BuildDeviceModuleCatalog(self, nDeviceIndex):
        return _MicroWinExecInterface.EX_PNWizardData_BuildDeviceModuleCatalog(self, nDeviceIndex)

    def BuildDeviceSubModuleCatalog(self, rootNode, GSDRawData):
        return _MicroWinExecInterface.EX_PNWizardData_BuildDeviceSubModuleCatalog(self, rootNode, GSDRawData)

    def BuildCPUCatalog(self, rootNode, GSDRawData, strGSDPath):
        return _MicroWinExecInterface.EX_PNWizardData_BuildCPUCatalog(self, rootNode, GSDRawData, strGSDPath)

    def LoadSubmoduleCatalog(self, nDeviceIndex):
        return _MicroWinExecInterface.EX_PNWizardData_LoadSubmoduleCatalog(self, nDeviceIndex)

    def ReallocatePLCRoleResource(self):
        return _MicroWinExecInterface.EX_PNWizardData_ReallocatePLCRoleResource(self)

    def LoadGsdData(self, PNCatalog):
        return _MicroWinExecInterface.EX_PNWizardData_LoadGsdData(self, PNCatalog)

    def GetInstalledGSDFileList(self):
        return _MicroWinExecInterface.EX_PNWizardData_GetInstalledGSDFileList(self)

    def OpenGsd(self, strFile):
        return _MicroWinExecInterface.EX_PNWizardData_OpenGsd(self, strFile)

    def GetValueItem(self, nDeviceNumber, strItemName, valueItem):
        return _MicroWinExecInterface.EX_PNWizardData_GetValueItem(self, nDeviceNumber, strItemName, valueItem)

    def IsMissingGsd(self, *args):
        return _MicroWinExecInterface.EX_PNWizardData_IsMissingGsd(self, *args)

    def GetMissingGsds(self):
        return _MicroWinExecInterface.EX_PNWizardData_GetMissingGsds(self)

    def GetDeviceGsdPath(self, nDeviceNumber):
        return _MicroWinExecInterface.EX_PNWizardData_GetDeviceGsdPath(self, nDeviceNumber)

    def GetMaxSupportedIoDevice(self):
        return _MicroWinExecInterface.EX_PNWizardData_GetMaxSupportedIoDevice(self)

    def FindModuleFromGSD(self, spXmldoc, moduleId, moduleIdentNumber, moduleInfo, moduleType, moduleNode):
        return _MicroWinExecInterface.EX_PNWizardData_FindModuleFromGSD(self, spXmldoc, moduleId, moduleIdentNumber, moduleInfo, moduleType, moduleNode)

    def FindPortInPNSystem(self, deviceName, portNumber):
        return _MicroWinExecInterface.EX_PNWizardData_FindPortInPNSystem(self, deviceName, portNumber)

    def GetDefaultDeviceName(self, strNextDevNum, strDefaultName):
        return _MicroWinExecInterface.EX_PNWizardData_GetDefaultDeviceName(self, strNextDevNum, strDefaultName)

    def GetIDeviceTransferAreas(self):
        return _MicroWinExecInterface.EX_PNWizardData_GetIDeviceTransferAreas(self)

    @staticmethod
    def GetEncodeError(errCode, errCodeResID):
        return _MicroWinExecInterface.EX_PNWizardData_GetEncodeError(errCode, errCodeResID)

    def CloseGsds(self):
        return _MicroWinExecInterface.EX_PNWizardData_CloseGsds(self)

    def GetXmlDoc(self, *args):
        return _MicroWinExecInterface.EX_PNWizardData_GetXmlDoc(self, *args)
    m_CompiledSuccess = property(_MicroWinExecInterface.EX_PNWizardData_m_CompiledSuccess_get, _MicroWinExecInterface.EX_PNWizardData_m_CompiledSuccess_set)
    m_Smart200PLCPDEV = property(_MicroWinExecInterface.EX_PNWizardData_m_Smart200PLCPDEV_get, _MicroWinExecInterface.EX_PNWizardData_m_Smart200PLCPDEV_set)
    m_IOController = property(_MicroWinExecInterface.EX_PNWizardData_m_IOController_get, _MicroWinExecInterface.EX_PNWizardData_m_IOController_set)
    m_IDevice = property(_MicroWinExecInterface.EX_PNWizardData_m_IDevice_get, _MicroWinExecInterface.EX_PNWizardData_m_IDevice_set)
    m_cIODeviceArray = property(_MicroWinExecInterface.EX_PNWizardData_m_cIODeviceArray_get, _MicroWinExecInterface.EX_PNWizardData_m_cIODeviceArray_set)
    m_spXmldocMap = property(_MicroWinExecInterface.EX_PNWizardData_m_spXmldocMap_get, _MicroWinExecInterface.EX_PNWizardData_m_spXmldocMap_set)
    m_LoadGSDDataError = property(_MicroWinExecInterface.EX_PNWizardData_m_LoadGSDDataError_get, _MicroWinExecInterface.EX_PNWizardData_m_LoadGSDDataError_set)

# Register EX_PNWizardData in _MicroWinExecInterface:
_MicroWinExecInterface.EX_PNWizardData_swigregister(EX_PNWizardData)

def EX_PNWizardData_GetEncodeError(errCode, errCodeResID):
    return _MicroWinExecInterface.EX_PNWizardData_GetEncodeError(errCode, errCodeResID)

class SDBPNController(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MicroWinExecInterface.SDBPNController_swiginit(self, _MicroWinExecInterface.new_SDBPNController(*args))
    __swig_destroy__ = _MicroWinExecInterface.delete_SDBPNController

    def __eq__(self, rSrc):
        return _MicroWinExecInterface.SDBPNController___eq__(self, rSrc)

    def Empty(self):
        return _MicroWinExecInterface.SDBPNController_Empty(self)

    def Store(self, rDest):
        return _MicroWinExecInterface.SDBPNController_Store(self, rDest)

    def Retrieve(self, *args):
        return _MicroWinExecInterface.SDBPNController_Retrieve(self, *args)

    def SetBlockData(self, nParamSize, ppbyParamData):
        return _MicroWinExecInterface.SDBPNController_SetBlockData(self, nParamSize, ppbyParamData)

    def GetBlockData(self, pnParamBytes, ppbyParamData):
        return _MicroWinExecInterface.SDBPNController_GetBlockData(self, pnParamBytes, ppbyParamData)

    def GetPNSDBType(self):
        return _MicroWinExecInterface.SDBPNController_GetPNSDBType(self)

    def Compare(self, pDevice, nMaxErrors, pErrors):
        return _MicroWinExecInterface.SDBPNController_Compare(self, pDevice, nMaxErrors, pErrors)
    m_ControllerProperties = property(_MicroWinExecInterface.SDBPNController_m_ControllerProperties_get, _MicroWinExecInterface.SDBPNController_m_ControllerProperties_set)
    m_ControllerConfig = property(_MicroWinExecInterface.SDBPNController_m_ControllerConfig_get, _MicroWinExecInterface.SDBPNController_m_ControllerConfig_set)

    def EncodeControllerInfo(self, rData):
        return _MicroWinExecInterface.SDBPNController_EncodeControllerInfo(self, rData)

    def GetControllerProperties(self, pnParamBytes, ppbyParamData):
        return _MicroWinExecInterface.SDBPNController_GetControllerProperties(self, pnParamBytes, ppbyParamData)

    def SetControllerProperties(self, ppbyParamData):
        return _MicroWinExecInterface.SDBPNController_SetControllerProperties(self, ppbyParamData)

    def InitializeControllerProperties(self):
        return _MicroWinExecInterface.SDBPNController_InitializeControllerProperties(self)

    def GetControllerConfig(self, pnParamBytes, ppbyParamData):
        return _MicroWinExecInterface.SDBPNController_GetControllerConfig(self, pnParamBytes, ppbyParamData)

    def SetControllerConfig(self, ppbyParamData):
        return _MicroWinExecInterface.SDBPNController_SetControllerConfig(self, ppbyParamData)

    def InitializeControllerConfig(self):
        return _MicroWinExecInterface.SDBPNController_InitializeControllerConfig(self)

# Register SDBPNController in _MicroWinExecInterface:
_MicroWinExecInterface.SDBPNController_swigregister(SDBPNController)

class PhysicalSDB(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MicroWinExecInterface.PhysicalSDB_swiginit(self, _MicroWinExecInterface.new_PhysicalSDB(*args))
    __swig_destroy__ = _MicroWinExecInterface.delete_PhysicalSDB

    def __eq__(self, rSrc):
        return _MicroWinExecInterface.PhysicalSDB___eq__(self, rSrc)

    def Empty(self):
        return _MicroWinExecInterface.PhysicalSDB_Empty(self)

    def Store(self, rDest):
        return _MicroWinExecInterface.PhysicalSDB_Store(self, rDest)

    def Retrieve(self, *args):
        return _MicroWinExecInterface.PhysicalSDB_Retrieve(self, *args)

    def SetBlockData(self, nParamSize, ppbyParamData):
        return _MicroWinExecInterface.PhysicalSDB_SetBlockData(self, nParamSize, ppbyParamData)

    def GetBlockData(self, pnParamBytes, ppbyParamData):
        return _MicroWinExecInterface.PhysicalSDB_GetBlockData(self, pnParamBytes, ppbyParamData)

    def Compare(self, pDevice, nMaxErrors, pErrors):
        return _MicroWinExecInterface.PhysicalSDB_Compare(self, pDevice, nMaxErrors, pErrors)

# Register PhysicalSDB in _MicroWinExecInterface:
_MicroWinExecInterface.PhysicalSDB_swigregister(PhysicalSDB)

class SDBPNPLCRole(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MicroWinExecInterface.SDBPNPLCRole_swiginit(self, _MicroWinExecInterface.new_SDBPNPLCRole(*args))
    __swig_destroy__ = _MicroWinExecInterface.delete_SDBPNPLCRole

    def __eq__(self, rSrc):
        return _MicroWinExecInterface.SDBPNPLCRole___eq__(self, rSrc)

    def Empty(self):
        return _MicroWinExecInterface.SDBPNPLCRole_Empty(self)

    def ReallocateResourceForPLCRole(self):
        return _MicroWinExecInterface.SDBPNPLCRole_ReallocateResourceForPLCRole(self)

    def Store(self, rDest):
        return _MicroWinExecInterface.SDBPNPLCRole_Store(self, rDest)

    def Retrieve(self, *args):
        return _MicroWinExecInterface.SDBPNPLCRole_Retrieve(self, *args)

    def SetBlockData(self, nParamSize, ppbyParamData):
        return _MicroWinExecInterface.SDBPNPLCRole_SetBlockData(self, nParamSize, ppbyParamData)

    def GetBlockData(self, pnParamBytes, ppbyParamData):
        return _MicroWinExecInterface.SDBPNPLCRole_GetBlockData(self, pnParamBytes, ppbyParamData)

    def SetSDBPLCRole(self, role):
        return _MicroWinExecInterface.SDBPNPLCRole_SetSDBPLCRole(self, role)

    def GetSDBPLCRole(self, role):
        return _MicroWinExecInterface.SDBPNPLCRole_GetSDBPLCRole(self, role)

    def Compare(self, pDevice, nMaxErrors, pErrors):
        return _MicroWinExecInterface.SDBPNPLCRole_Compare(self, pDevice, nMaxErrors, pErrors)

    def GetControllerSDBData(self):
        return _MicroWinExecInterface.SDBPNPLCRole_GetControllerSDBData(self)

    def GetIDeviceSDB(self):
        return _MicroWinExecInterface.SDBPNPLCRole_GetIDeviceSDB(self)

    def GetPLCRole(self):
        return _MicroWinExecInterface.SDBPNPLCRole_GetPLCRole(self)

    def ClearIdeviceSDB(self):
        return _MicroWinExecInterface.SDBPNPLCRole_ClearIdeviceSDB(self)

# Register SDBPNPLCRole in _MicroWinExecInterface:
_MicroWinExecInterface.SDBPNPLCRole_swigregister(SDBPNPLCRole)

class SDBPNIDevice(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MicroWinExecInterface.SDBPNIDevice_swiginit(self, _MicroWinExecInterface.new_SDBPNIDevice())
    __swig_destroy__ = _MicroWinExecInterface.delete_SDBPNIDevice

    def Empty(self):
        return _MicroWinExecInterface.SDBPNIDevice_Empty(self)

    def Store(self, rDest):
        return _MicroWinExecInterface.SDBPNIDevice_Store(self, rDest)

    def Retrieve(self, *args):
        return _MicroWinExecInterface.SDBPNIDevice_Retrieve(self, *args)

    def __eq__(self, rData):
        return _MicroWinExecInterface.SDBPNIDevice___eq__(self, rData)

    def EncodeIDevice(self, pData, cSysData, nErrCode):
        return _MicroWinExecInterface.SDBPNIDevice_EncodeIDevice(self, pData, cSysData, nErrCode)

    def GetBlockData(self, pnParamBytes, ppbyParamData):
        return _MicroWinExecInterface.SDBPNIDevice_GetBlockData(self, pnParamBytes, ppbyParamData)

    def GetFrameResData(self, pnParamBytes, ppbyParamData):
        return _MicroWinExecInterface.SDBPNIDevice_GetFrameResData(self, pnParamBytes, ppbyParamData)

    def GetSubModDefData(self, pnParamBytes, ppbyParamData):
        return _MicroWinExecInterface.SDBPNIDevice_GetSubModDefData(self, pnParamBytes, ppbyParamData)

    def GetIOConfigData(self, pnParamBytes, ppbyParamData):
        return _MicroWinExecInterface.SDBPNIDevice_GetIOConfigData(self, pnParamBytes, ppbyParamData)

    def GetTransAreaData(self, pnParamBytes, ppbyParamData):
        return _MicroWinExecInterface.SDBPNIDevice_GetTransAreaData(self, pnParamBytes, ppbyParamData)

    def SetFrameResData(self, ppbyParamData):
        return _MicroWinExecInterface.SDBPNIDevice_SetFrameResData(self, ppbyParamData)

    def SetSubModDefData(self, ppbyParamData):
        return _MicroWinExecInterface.SDBPNIDevice_SetSubModDefData(self, ppbyParamData)

    def SetIOConfigData(self, ppbyParamData):
        return _MicroWinExecInterface.SDBPNIDevice_SetIOConfigData(self, ppbyParamData)

    def SetTransAreaData(self, ppbyParamData):
        return _MicroWinExecInterface.SDBPNIDevice_SetTransAreaData(self, ppbyParamData)

    def Compare(self, pDevice, nMaxErrors, pErrors):
        return _MicroWinExecInterface.SDBPNIDevice_Compare(self, pDevice, nMaxErrors, pErrors)

    def EncodeFrameRes(self, pData, nErrCode):
        return _MicroWinExecInterface.SDBPNIDevice_EncodeFrameRes(self, pData, nErrCode)

    def EncodeSubModDef(self, pData, cSysData, nErrCode):
        return _MicroWinExecInterface.SDBPNIDevice_EncodeSubModDef(self, pData, cSysData, nErrCode)

    def EncodeIOConfig(self, pData, nErrCode):
        return _MicroWinExecInterface.SDBPNIDevice_EncodeIOConfig(self, pData, nErrCode)

    def EncodeTransArea(self, pData, nErrCode):
        return _MicroWinExecInterface.SDBPNIDevice_EncodeTransArea(self, pData, nErrCode)

    def EncodeBlkHeader(self, tBlkHeader, nBlkType, nBlkLength):
        return _MicroWinExecInterface.SDBPNIDevice_EncodeBlkHeader(self, tBlkHeader, nBlkType, nBlkLength)

    def ClearFrameRes(self):
        return _MicroWinExecInterface.SDBPNIDevice_ClearFrameRes(self)

    def ClearSubmodDef(self):
        return _MicroWinExecInterface.SDBPNIDevice_ClearSubmodDef(self)

    def ClearIOConfig(self):
        return _MicroWinExecInterface.SDBPNIDevice_ClearIOConfig(self)

    def ClearTransArea(self):
        return _MicroWinExecInterface.SDBPNIDevice_ClearTransArea(self)

    def GetModIdentNo(self, cSysData, nIdentNo):
        return _MicroWinExecInterface.SDBPNIDevice_GetModIdentNo(self, cSysData, nIdentNo)
    m_tFrameRes = property(_MicroWinExecInterface.SDBPNIDevice_m_tFrameRes_get, _MicroWinExecInterface.SDBPNIDevice_m_tFrameRes_set)
    m_tSubmodDef = property(_MicroWinExecInterface.SDBPNIDevice_m_tSubmodDef_get, _MicroWinExecInterface.SDBPNIDevice_m_tSubmodDef_set)
    m_tIOConfig = property(_MicroWinExecInterface.SDBPNIDevice_m_tIOConfig_get, _MicroWinExecInterface.SDBPNIDevice_m_tIOConfig_set)
    m_tTransArea = property(_MicroWinExecInterface.SDBPNIDevice_m_tTransArea_get, _MicroWinExecInterface.SDBPNIDevice_m_tTransArea_set)
    m_mSubSlotAddr = property(_MicroWinExecInterface.SDBPNIDevice_m_mSubSlotAddr_get, _MicroWinExecInterface.SDBPNIDevice_m_mSubSlotAddr_set)

# Register SDBPNIDevice in _MicroWinExecInterface:
_MicroWinExecInterface.SDBPNIDevice_swigregister(SDBPNIDevice)

MAX_MODULE_NUMBER = _MicroWinExecInterface.MAX_MODULE_NUMBER
MIN_UPDATETIME = _MicroWinExecInterface.MIN_UPDATETIME
DEVICE_ADDRESS_RANG_ARRAY_LENGTH = _MicroWinExecInterface.DEVICE_ADDRESS_RANG_ARRAY_LENGTH
class IODevice(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MicroWinExecInterface.IODevice_swiginit(self, _MicroWinExecInterface.new_IODevice(*args))
    __swig_destroy__ = _MicroWinExecInterface.delete_IODevice

    def GetAllIODataSize(self, eIOType):
        return _MicroWinExecInterface.IODevice_GetAllIODataSize(self, eIOType)

    def GetAttachedModuleCount(self):
        return _MicroWinExecInterface.IODevice_GetAttachedModuleCount(self)

    def GetDAP(self, *args):
        return _MicroWinExecInterface.IODevice_GetDAP(self, *args)

    def GetNextAvailableSlot(self, allowedSlots):
        return _MicroWinExecInterface.IODevice_GetNextAvailableSlot(self, allowedSlots)

    def GetAllAvailableSlot(self, allowedInSlots):
        return _MicroWinExecInterface.IODevice_GetAllAvailableSlot(self, allowedInSlots)

    def GetAllAvailableSubSlot(self, allowedInSlotSubslotsMap, allAvailableSlotSubSlotMap):
        return _MicroWinExecInterface.IODevice_GetAllAvailableSubSlot(self, allowedInSlotSubslotsMap, allAvailableSlotSubSlotMap)

    def AddIOModule(self, spXmldoc, targetSubmoduleItem, slot, bFixed, pGSDParser, strCurrentGSDPath, needUpdateSubmoduleCatalog):
        return _MicroWinExecInterface.IODevice_AddIOModule(self, spXmldoc, targetSubmoduleItem, slot, bFixed, pGSDParser, strCurrentGSDPath, needUpdateSubmoduleCatalog)

    def AddModule(self, spXmldoc, moduleOrSubModuleNode, newModuleSlot, pGSDParser, needUpdateSubmoduleCatalog):
        return _MicroWinExecInterface.IODevice_AddModule(self, spXmldoc, moduleOrSubModuleNode, newModuleSlot, pGSDParser, needUpdateSubmoduleCatalog)

    def AddSubModule(self, spXmldoc, moduleOrSubModuleNode, newModuleSlot, newSubModuleSlot, pGSDParser):
        return _MicroWinExecInterface.IODevice_AddSubModule(self, spXmldoc, moduleOrSubModuleNode, newModuleSlot, newSubModuleSlot, pGSDParser)

    def BuildUpIODevice(self, spXmldoc, pGSDParser, selectedDevice):
        return _MicroWinExecInterface.IODevice_BuildUpIODevice(self, spXmldoc, pGSDParser, selectedDevice)

    def DeleteSubModule(self, strSlotNumber, strSubSlotNumber):
        return _MicroWinExecInterface.IODevice_DeleteSubModule(self, strSlotNumber, strSubSlotNumber)

    def DeleteModule(self, strSlotNumber, subModuleItemTargetIDs, needUpdateSubmoduleCatalog):
        return _MicroWinExecInterface.IODevice_DeleteModule(self, strSlotNumber, subModuleItemTargetIDs, needUpdateSubmoduleCatalog)

    def GetAllowedSlotsForSelectedModule(self, allowedSlots, moduleItemTarget):
        return _MicroWinExecInterface.IODevice_GetAllowedSlotsForSelectedModule(self, allowedSlots, moduleItemTarget)

    def GetAllowedSubSlotsForSelectedSubModule(self, allowedSlotSubSlotsMap, moduleSubModuleItemTarget):
        return _MicroWinExecInterface.IODevice_GetAllowedSubSlotsForSelectedSubModule(self, allowedSlotSubSlotsMap, moduleSubModuleItemTarget)

    def FindModuleItemRefWithModuleItemTargetID(self, subModuleItemTargetID):
        return _MicroWinExecInterface.IODevice_FindModuleItemRefWithModuleItemTargetID(self, subModuleItemTargetID)

    def GeAvailableAddress(self, availableAdressList, length, type):
        return _MicroWinExecInterface.IODevice_GeAvailableAddress(self, availableAdressList, length, type)

    def GeNextAvailableAddress(self, address, length, type):
        return _MicroWinExecInterface.IODevice_GeNextAvailableAddress(self, address, length, type)

    def ExtractData(self, isCatalogConfig=False):
        return _MicroWinExecInterface.IODevice_ExtractData(self, isCatalogConfig)

    def SetAddressUsedFlag(self, adress, size, type):
        return _MicroWinExecInterface.IODevice_SetAddressUsedFlag(self, adress, size, type)

    def SetAddressUnusedFlag(self, address, size, type):
        return _MicroWinExecInterface.IODevice_SetAddressUnusedFlag(self, address, size, type)

    def SetDefaultAddress(self, data, type):
        return _MicroWinExecInterface.IODevice_SetDefaultAddress(self, data, type)

    def ValidateAddress(self, address, type, length, overlapAddress):
        return _MicroWinExecInterface.IODevice_ValidateAddress(self, address, type, length, overlapAddress)

    def GetStartAddress(self):
        return _MicroWinExecInterface.IODevice_GetStartAddress(self)

    def ConverterAvailableAddressToString(self, availableAdressList):
        return _MicroWinExecInterface.IODevice_ConverterAvailableAddressToString(self, availableAdressList)

    def ChangeSlot(self, sourceSlot, targetSlot):
        return _MicroWinExecInterface.IODevice_ChangeSlot(self, sourceSlot, targetSlot)

    def ChangeSubslot(self, sourceSlot, sourceSubslot, targetSlot, targetSubslot):
        return _MicroWinExecInterface.IODevice_ChangeSubslot(self, sourceSlot, sourceSubslot, targetSlot, targetSubslot)

    def GetUpdateTimeMS(self):
        return _MicroWinExecInterface.IODevice_GetUpdateTimeMS(self)

    def SetUpdateTime(self, dUpdateTime):
        return _MicroWinExecInterface.IODevice_SetUpdateTime(self, dUpdateTime)

    def GetDataHold(self):
        return _MicroWinExecInterface.IODevice_GetDataHold(self)

    def SetDataHold(self, iDataHold):
        return _MicroWinExecInterface.IODevice_SetDataHold(self, iDataHold)

    def GetInputFrameLength(self, nGrossInputFrameLength, nNetInputFrameLength, totalIoxsLength, bIOXSRequirtedController):
        return _MicroWinExecInterface.IODevice_GetInputFrameLength(self, nGrossInputFrameLength, nNetInputFrameLength, totalIoxsLength, bIOXSRequirtedController)

    def GetOutputFrameLength(self, nGrossOutputFrameLength, nNetsOutputFrameLength, totalIoxsLength, bIOXSRequirtedController):
        return _MicroWinExecInterface.IODevice_GetOutputFrameLength(self, nGrossOutputFrameLength, nNetsOutputFrameLength, totalIoxsLength, bIOXSRequirtedController)

    def IsSubmoduleModelSupport(self):
        return _MicroWinExecInterface.IODevice_IsSubmoduleModelSupport(self)

    def IsPnIoIpConfigModeSupported(self):
        return _MicroWinExecInterface.IODevice_IsPnIoIpConfigModeSupported(self)

    def GetPorts(self, ports, justInterfacePorts):
        return _MicroWinExecInterface.IODevice_GetPorts(self, ports, justInterfacePorts)

    def GetPDInterface(self):
        return _MicroWinExecInterface.IODevice_GetPDInterface(self)

    def GetPDPorts(self):
        return _MicroWinExecInterface.IODevice_GetPDPorts(self)

    def GetStationName(self, *args):
        return _MicroWinExecInterface.IODevice_GetStationName(self, *args)

    def SetStationName(self, stationName):
        return _MicroWinExecInterface.IODevice_SetStationName(self, stationName)

    def GetIPAddr(self, *args):
        return _MicroWinExecInterface.IODevice_GetIPAddr(self, *args)

    def SetIPAddr(self, dwIPAddr):
        return _MicroWinExecInterface.IODevice_SetIPAddr(self, dwIPAddr)

    def FindPortByPortNumber(self, portNumber):
        return _MicroWinExecInterface.IODevice_FindPortByPortNumber(self, portNumber)

    def GetTimingPropertiesAttributes(self, supportedSendClock, suppRr12Pow2, suppRr12NonPow2):
        return _MicroWinExecInterface.IODevice_GetTimingPropertiesAttributes(self, supportedSendClock, suppRr12Pow2, suppRr12NonPow2)

    def IsScalanceDeviceCapabilities(self):
        return _MicroWinExecInterface.IODevice_IsScalanceDeviceCapabilities(self)

    def IsFixedinSlot(self, strModuleItemID, fixedSlots):
        return _MicroWinExecInterface.IODevice_IsFixedinSlot(self, strModuleItemID, fixedSlots)

    def IsFixedinSubslot(self, slotNumber, strModuleItemID, fixedSlots):
        return _MicroWinExecInterface.IODevice_IsFixedinSubslot(self, slotNumber, strModuleItemID, fixedSlots)

    def GetDefaultDeviceName(self):
        return _MicroWinExecInterface.IODevice_GetDefaultDeviceName(self)

    def CheckIODataLength(self, type):
        return _MicroWinExecInterface.IODevice_CheckIODataLength(self, type)

    def GetDeviceGSDPath(self):
        return _MicroWinExecInterface.IODevice_GetDeviceGSDPath(self)

    def SetDeviceGSDPath(self, gsdPath):
        return _MicroWinExecInterface.IODevice_SetDeviceGSDPath(self, gsdPath)

    def GetComment(self):
        return _MicroWinExecInterface.IODevice_GetComment(self)

    def Store(self, rDest):
        return _MicroWinExecInterface.IODevice_Store(self, rDest)

    def Retrieve(self, *args):
        return _MicroWinExecInterface.IODevice_Retrieve(self, *args)

    def IsCPUCatalogConfig(self):
        return _MicroWinExecInterface.IODevice_IsCPUCatalogConfig(self)

    def IsDevAddrFixedInGSD(self):
        return _MicroWinExecInterface.IODevice_IsDevAddrFixedInGSD(self)

    def SetSuperordinatedLocked(self, isParaDisallowed):
        return _MicroWinExecInterface.IODevice_SetSuperordinatedLocked(self, isParaDisallowed)
    m_strDeviceId = property(_MicroWinExecInterface.IODevice_m_strDeviceId_get, _MicroWinExecInterface.IODevice_m_strDeviceId_set)
    m_strType = property(_MicroWinExecInterface.IODevice_m_strType_get, _MicroWinExecInterface.IODevice_m_strType_set)
    m_strOrgName = property(_MicroWinExecInterface.IODevice_m_strOrgName_get, _MicroWinExecInterface.IODevice_m_strOrgName_set)
    m_strComments = property(_MicroWinExecInterface.IODevice_m_strComments_get, _MicroWinExecInterface.IODevice_m_strComments_set)
    m_dUpdateTime = property(_MicroWinExecInterface.IODevice_m_dUpdateTime_get, _MicroWinExecInterface.IODevice_m_dUpdateTime_set)
    m_iDataHold = property(_MicroWinExecInterface.IODevice_m_iDataHold_get, _MicroWinExecInterface.IODevice_m_iDataHold_set)
    m_PhysicalSlots = property(_MicroWinExecInterface.IODevice_m_PhysicalSlots_get, _MicroWinExecInterface.IODevice_m_PhysicalSlots_set)
    m_pDeviceCatalogRawData = property(_MicroWinExecInterface.IODevice_m_pDeviceCatalogRawData_get, _MicroWinExecInterface.IODevice_m_pDeviceCatalogRawData_set)
    m_cBuildDeviceCatalog = property(_MicroWinExecInterface.IODevice_m_cBuildDeviceCatalog_get, _MicroWinExecInterface.IODevice_m_cBuildDeviceCatalog_set)
    m_PnIoGsdLegacyDataLengthConsistencyCheck = property(_MicroWinExecInterface.IODevice_m_PnIoGsdLegacyDataLengthConsistencyCheck_get, _MicroWinExecInterface.IODevice_m_PnIoGsdLegacyDataLengthConsistencyCheck_set)
    m_PrioritizedStartup = property(_MicroWinExecInterface.IODevice_m_PrioritizedStartup_get, _MicroWinExecInterface.IODevice_m_PrioritizedStartup_set)
    m_bIsUploadedData = property(_MicroWinExecInterface.IODevice_m_bIsUploadedData_get, _MicroWinExecInterface.IODevice_m_bIsUploadedData_set)
    m_NoPortInGSD = property(_MicroWinExecInterface.IODevice_m_NoPortInGSD_get, _MicroWinExecInterface.IODevice_m_NoPortInGSD_set)
    m_bStoreInProject = property(_MicroWinExecInterface.IODevice_m_bStoreInProject_get, _MicroWinExecInterface.IODevice_m_bStoreInProject_set)

# Register IODevice in _MicroWinExecInterface:
_MicroWinExecInterface.IODevice_swigregister(IODevice)

class ModuleWizardData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MicroWinExecInterface.ModuleWizardData_swiginit(self, _MicroWinExecInterface.new_ModuleWizardData())
    m_strModuleName = property(_MicroWinExecInterface.ModuleWizardData_m_strModuleName_get, _MicroWinExecInterface.ModuleWizardData_m_strModuleName_set)
    m_strSubModuleName = property(_MicroWinExecInterface.ModuleWizardData_m_strSubModuleName_get, _MicroWinExecInterface.ModuleWizardData_m_strSubModuleName_set)
    m_strISize = property(_MicroWinExecInterface.ModuleWizardData_m_strISize_get, _MicroWinExecInterface.ModuleWizardData_m_strISize_set)
    m_strQSize = property(_MicroWinExecInterface.ModuleWizardData_m_strQSize_get, _MicroWinExecInterface.ModuleWizardData_m_strQSize_set)
    m_strOrderNumber = property(_MicroWinExecInterface.ModuleWizardData_m_strOrderNumber_get, _MicroWinExecInterface.ModuleWizardData_m_strOrderNumber_set)
    m_strComments = property(_MicroWinExecInterface.ModuleWizardData_m_strComments_get, _MicroWinExecInterface.ModuleWizardData_m_strComments_set)
    m_strFirmwareVersion = property(_MicroWinExecInterface.ModuleWizardData_m_strFirmwareVersion_get, _MicroWinExecInterface.ModuleWizardData_m_strFirmwareVersion_set)
    m_DeviceNumber = property(_MicroWinExecInterface.ModuleWizardData_m_DeviceNumber_get, _MicroWinExecInterface.ModuleWizardData_m_DeviceNumber_set)
    m_IOType = property(_MicroWinExecInterface.ModuleWizardData_m_IOType_get, _MicroWinExecInterface.ModuleWizardData_m_IOType_set)
    m_DeviceName = property(_MicroWinExecInterface.ModuleWizardData_m_DeviceName_get, _MicroWinExecInterface.ModuleWizardData_m_DeviceName_set)
    m_SlotNumber = property(_MicroWinExecInterface.ModuleWizardData_m_SlotNumber_get, _MicroWinExecInterface.ModuleWizardData_m_SlotNumber_set)
    m_SubSlotNumber = property(_MicroWinExecInterface.ModuleWizardData_m_SubSlotNumber_get, _MicroWinExecInterface.ModuleWizardData_m_SubSlotNumber_set)
    m_SubmoduleIdentNumber = property(_MicroWinExecInterface.ModuleWizardData_m_SubmoduleIdentNumber_get, _MicroWinExecInterface.ModuleWizardData_m_SubmoduleIdentNumber_set)
    m_SubmoduleAPI = property(_MicroWinExecInterface.ModuleWizardData_m_SubmoduleAPI_get, _MicroWinExecInterface.ModuleWizardData_m_SubmoduleAPI_set)
    m_strModuleID = property(_MicroWinExecInterface.ModuleWizardData_m_strModuleID_get, _MicroWinExecInterface.ModuleWizardData_m_strModuleID_set)
    m_strSubModuleID = property(_MicroWinExecInterface.ModuleWizardData_m_strSubModuleID_get, _MicroWinExecInterface.ModuleWizardData_m_strSubModuleID_set)
    m_bFixed = property(_MicroWinExecInterface.ModuleWizardData_m_bFixed_get, _MicroWinExecInterface.ModuleWizardData_m_bFixed_set)
    m_placeHolder = property(_MicroWinExecInterface.ModuleWizardData_m_placeHolder_get, _MicroWinExecInterface.ModuleWizardData_m_placeHolder_set)
    m_IsPROFIsafe = property(_MicroWinExecInterface.ModuleWizardData_m_IsPROFIsafe_get, _MicroWinExecInterface.ModuleWizardData_m_IsPROFIsafe_set)
    m_IOCSLength = property(_MicroWinExecInterface.ModuleWizardData_m_IOCSLength_get, _MicroWinExecInterface.ModuleWizardData_m_IOCSLength_set)
    m_IOPSLength = property(_MicroWinExecInterface.ModuleWizardData_m_IOPSLength_get, _MicroWinExecInterface.ModuleWizardData_m_IOPSLength_set)
    m_Submoduletype = property(_MicroWinExecInterface.ModuleWizardData_m_Submoduletype_get, _MicroWinExecInterface.ModuleWizardData_m_Submoduletype_set)

    def GetSlot(self):
        return _MicroWinExecInterface.ModuleWizardData_GetSlot(self)

    def GetSubSlot(self):
        return _MicroWinExecInterface.ModuleWizardData_GetSubSlot(self)

    def GetPNIStartAddress(self):
        return _MicroWinExecInterface.ModuleWizardData_GetPNIStartAddress(self)

    def GetPNQStartAddress(self):
        return _MicroWinExecInterface.ModuleWizardData_GetPNQStartAddress(self)

    def GetSubslotName(self):
        return _MicroWinExecInterface.ModuleWizardData_GetSubslotName(self)

    def GetSlotName(self):
        return _MicroWinExecInterface.ModuleWizardData_GetSlotName(self)

    def SetSubslotName(self, strName):
        return _MicroWinExecInterface.ModuleWizardData_SetSubslotName(self, strName)

    def SetSlotName(self, strName):
        return _MicroWinExecInterface.ModuleWizardData_SetSlotName(self, strName)

    def SetSlot(self, slot):
        return _MicroWinExecInterface.ModuleWizardData_SetSlot(self, slot)

    def SetSubSlot(self, subSlot):
        return _MicroWinExecInterface.ModuleWizardData_SetSubSlot(self, subSlot)

    def SetPNIStartAddress(self, adress):
        return _MicroWinExecInterface.ModuleWizardData_SetPNIStartAddress(self, adress)

    def SetPNQStartAddress(self, adress):
        return _MicroWinExecInterface.ModuleWizardData_SetPNQStartAddress(self, adress)

    def SetPNILength(self, adress):
        return _MicroWinExecInterface.ModuleWizardData_SetPNILength(self, adress)

    def SetPNQLength(self, adress):
        return _MicroWinExecInterface.ModuleWizardData_SetPNQLength(self, adress)

    def SetComment(self, comment):
        return _MicroWinExecInterface.ModuleWizardData_SetComment(self, comment)

    def SetIOStartAdressRefBase(self, IOStartAdressRefBase):
        return _MicroWinExecInterface.ModuleWizardData_SetIOStartAdressRefBase(self, IOStartAdressRefBase)

    def SetCommentRefBase(self, pCommentRef):
        return _MicroWinExecInterface.ModuleWizardData_SetCommentRefBase(self, pCommentRef)

    def GetIStartAddress(self):
        return _MicroWinExecInterface.ModuleWizardData_GetIStartAddress(self)

    def GetQStartAddress(self):
        return _MicroWinExecInterface.ModuleWizardData_GetQStartAddress(self)

    def UpdateAddressRelatedRefBase(self, type):
        return _MicroWinExecInterface.ModuleWizardData_UpdateAddressRelatedRefBase(self, type)

    def UpdateTALenRelatedRefBase(self, type):
        return _MicroWinExecInterface.ModuleWizardData_UpdateTALenRelatedRefBase(self, type)

    def UpdateSlotRelatedRefBase(self):
        return _MicroWinExecInterface.ModuleWizardData_UpdateSlotRelatedRefBase(self)

    def GetPositionTag(self):
        return _MicroWinExecInterface.ModuleWizardData_GetPositionTag(self)
    __swig_destroy__ = _MicroWinExecInterface.delete_ModuleWizardData

# Register ModuleWizardData in _MicroWinExecInterface:
_MicroWinExecInterface.ModuleWizardData_swigregister(ModuleWizardData)

class CommonModuleSubModule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def ExtractData(self, isCatalogConfig=False):
        return _MicroWinExecInterface.CommonModuleSubModule_ExtractData(self, isCatalogConfig)
    m_ModuleWizardDataList = property(_MicroWinExecInterface.CommonModuleSubModule_m_ModuleWizardDataList_get, _MicroWinExecInterface.CommonModuleSubModule_m_ModuleWizardDataList_set)
    m_ModuleSDBData = property(_MicroWinExecInterface.CommonModuleSubModule_m_ModuleSDBData_get, _MicroWinExecInterface.CommonModuleSubModule_m_ModuleSDBData_set)
    __swig_destroy__ = _MicroWinExecInterface.delete_CommonModuleSubModule

    def Store(self, rDest):
        return _MicroWinExecInterface.CommonModuleSubModule_Store(self, rDest)

    def Retrieve(self, *args):
        return _MicroWinExecInterface.CommonModuleSubModule_Retrieve(self, *args)

# Register CommonModuleSubModule in _MicroWinExecInterface:
_MicroWinExecInterface.CommonModuleSubModule_swigregister(CommonModuleSubModule)

class UseableSubmodule(CommonModuleSubModule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _MicroWinExecInterface.delete_UseableSubmodule

    def __init__(self, *args):
        _MicroWinExecInterface.UseableSubmodule_swiginit(self, _MicroWinExecInterface.new_UseableSubmodule(*args))

    def GetSubModuleItem(self, *args):
        return _MicroWinExecInterface.UseableSubmodule_GetSubModuleItem(self, *args)

    def GetSubmoduleType(self):
        return _MicroWinExecInterface.UseableSubmodule_GetSubmoduleType(self)

    def GetID(self):
        return _MicroWinExecInterface.UseableSubmodule_GetID(self)

    def GetAPI(self):
        return _MicroWinExecInterface.UseableSubmodule_GetAPI(self)

    def GetType(self):
        return _MicroWinExecInterface.UseableSubmodule_GetType(self)

    def GetRecordDataList(self):
        return _MicroWinExecInterface.UseableSubmodule_GetRecordDataList(self)

    def ExtractData(self, isCatalogConfig=False):
        return _MicroWinExecInterface.UseableSubmodule_ExtractData(self, isCatalogConfig)

    def UpdateTransferSubmoduleIdentNumber(self, type, length):
        return _MicroWinExecInterface.UseableSubmodule_UpdateTransferSubmoduleIdentNumber(self, type, length)

    def UpdateTransferSubmoduleID(self):
        return _MicroWinExecInterface.UseableSubmodule_UpdateTransferSubmoduleID(self)

    def UpdateTransferSubmoduleIMInfo(self):
        return _MicroWinExecInterface.UseableSubmodule_UpdateTransferSubmoduleIMInfo(self)

    def Store(self, rDest):
        return _MicroWinExecInterface.UseableSubmodule_Store(self, rDest)

    def Retrieve(self, *args):
        return _MicroWinExecInterface.UseableSubmodule_Retrieve(self, *args)
    m_Slot = property(_MicroWinExecInterface.UseableSubmodule_m_Slot_get, _MicroWinExecInterface.UseableSubmodule_m_Slot_set)
    m_SubSlot = property(_MicroWinExecInterface.UseableSubmodule_m_SubSlot_get, _MicroWinExecInterface.UseableSubmodule_m_SubSlot_set)
    m_bFixed = property(_MicroWinExecInterface.UseableSubmodule_m_bFixed_get, _MicroWinExecInterface.UseableSubmodule_m_bFixed_set)

# Register UseableSubmodule in _MicroWinExecInterface:
_MicroWinExecInterface.UseableSubmodule_swigregister(UseableSubmodule)

class IOModule(CommonModuleSubModule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MicroWinExecInterface.delete_IOModule

    def ExtractBuildInVirtualSubModule(self, virtualSubmoduleList, VirtualSubModuleWizardDataList, ioDataInputSum, ioDataOutputSum, strSlot):
        return _MicroWinExecInterface.IOModule_ExtractBuildInVirtualSubModule(self, virtualSubmoduleList, VirtualSubModuleWizardDataList, ioDataInputSum, ioDataOutputSum, strSlot)

    def InitUseableSubmodules(self, spXmldoc, useableSubmodules, pGSDParser, strCurrentGSDPath):
        return _MicroWinExecInterface.IOModule_InitUseableSubmodules(self, spXmldoc, useableSubmodules, pGSDParser, strCurrentGSDPath)

    def DeleteSubModule(self, strSubSlotNumber):
        return _MicroWinExecInterface.IOModule_DeleteSubModule(self, strSubSlotNumber)

    def AddUseableSubmodule(self, *args):
        return _MicroWinExecInterface.IOModule_AddUseableSubmodule(self, *args)

    def GetUseableSubmodulesCount(self):
        return _MicroWinExecInterface.IOModule_GetUseableSubmodulesCount(self)

    def GetModuleItemRefByModuleItemTargetID(self, subModuleItemTargetID, pSubmoduleItemRef):
        return _MicroWinExecInterface.IOModule_GetModuleItemRefByModuleItemTargetID(self, subModuleItemTargetID, pSubmoduleItemRef)

    def ExtractAllBuildInData(self, moduleInfo, virtualSubmoduleList, systemDefinedSubmoduleList, isCatalogConfig=False):
        return _MicroWinExecInterface.IOModule_ExtractAllBuildInData(self, moduleInfo, virtualSubmoduleList, systemDefinedSubmoduleList, isCatalogConfig)

    def ExtractUseableSubmodulesData(self):
        return _MicroWinExecInterface.IOModule_ExtractUseableSubmodulesData(self)

    def GetPhysicalSubSlots(self):
        return _MicroWinExecInterface.IOModule_GetPhysicalSubSlots(self)

    def GetUseableSubmodulesFromGSD(self):
        return _MicroWinExecInterface.IOModule_GetUseableSubmodulesFromGSD(self)

    def GetModuleIdentNumber(self):
        return _MicroWinExecInterface.IOModule_GetModuleIdentNumber(self)

    def GetID(self):
        return _MicroWinExecInterface.IOModule_GetID(self)

    def GetBuildInData(self, virtualSubmoduleList, systemDefinedSubmoduleList):
        return _MicroWinExecInterface.IOModule_GetBuildInData(self, virtualSubmoduleList, systemDefinedSubmoduleList)

    def GetVirtualSubmoduleList(self):
        return _MicroWinExecInterface.IOModule_GetVirtualSubmoduleList(self)

    def GetSystemDefinedSubmoduleList(self):
        return _MicroWinExecInterface.IOModule_GetSystemDefinedSubmoduleList(self)

    def Store(self, rDest):
        return _MicroWinExecInterface.IOModule_Store(self, rDest)

    def Retrieve(self, *args):
        return _MicroWinExecInterface.IOModule_Retrieve(self, *args)
    m_Slot = property(_MicroWinExecInterface.IOModule_m_Slot_get, _MicroWinExecInterface.IOModule_m_Slot_set)
    m_bFixed = property(_MicroWinExecInterface.IOModule_m_bFixed_get, _MicroWinExecInterface.IOModule_m_bFixed_set)
    m_PhysicalSubSlots = property(_MicroWinExecInterface.IOModule_m_PhysicalSubSlots_get, _MicroWinExecInterface.IOModule_m_PhysicalSubSlots_set)
    m_cBuildModuleCatalog = property(_MicroWinExecInterface.IOModule_m_cBuildModuleCatalog_get, _MicroWinExecInterface.IOModule_m_cBuildModuleCatalog_set)
    m_pSubModuleCatalogRawData = property(_MicroWinExecInterface.IOModule_m_pSubModuleCatalogRawData_get, _MicroWinExecInterface.IOModule_m_pSubModuleCatalogRawData_set)

# Register IOModule in _MicroWinExecInterface:
_MicroWinExecInterface.IOModule_swigregister(IOModule)

class IOUseableModule(IOModule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _MicroWinExecInterface.delete_IOUseableModule

    def __init__(self, *args):
        _MicroWinExecInterface.IOUseableModule_swiginit(self, _MicroWinExecInterface.new_IOUseableModule(*args))

    def ExtractData(self, isCatalogConfig=False):
        return _MicroWinExecInterface.IOUseableModule_ExtractData(self, isCatalogConfig)

    def GetModuleItem(self, *args):
        return _MicroWinExecInterface.IOUseableModule_GetModuleItem(self, *args)

    def GetUseableSubmodulesFromGSD(self):
        return _MicroWinExecInterface.IOUseableModule_GetUseableSubmodulesFromGSD(self)

    def GetPhysicalSubSlots(self):
        return _MicroWinExecInterface.IOUseableModule_GetPhysicalSubSlots(self)

    def GetAllIODataSize(self, eIOType, onlyFixed):
        return _MicroWinExecInterface.IOUseableModule_GetAllIODataSize(self, eIOType, onlyFixed)

    def GetModuleIdentNumber(self):
        return _MicroWinExecInterface.IOUseableModule_GetModuleIdentNumber(self)

    def GetID(self, *args):
        return _MicroWinExecInterface.IOUseableModule_GetID(self, *args)

    def GetBuildInData(self, virtualSubmoduleList, systemDefinedSubmoduleList):
        return _MicroWinExecInterface.IOUseableModule_GetBuildInData(self, virtualSubmoduleList, systemDefinedSubmoduleList)

    def GetVirtualSubmoduleList(self):
        return _MicroWinExecInterface.IOUseableModule_GetVirtualSubmoduleList(self)

    def GetSystemDefinedSubmoduleList(self):
        return _MicroWinExecInterface.IOUseableModule_GetSystemDefinedSubmoduleList(self)

    def Store(self, rDest):
        return _MicroWinExecInterface.IOUseableModule_Store(self, rDest)

    def Retrieve(self, *args):
        return _MicroWinExecInterface.IOUseableModule_Retrieve(self, *args)

# Register IOUseableModule in _MicroWinExecInterface:
_MicroWinExecInterface.IOUseableModule_swigregister(IOUseableModule)

class IODAP(IOModule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MicroWinExecInterface.IODAP_swiginit(self, _MicroWinExecInterface.new_IODAP(*args))
    __swig_destroy__ = _MicroWinExecInterface.delete_IODAP

    def ExtractData(self, isCatalogConfig=False):
        return _MicroWinExecInterface.IODAP_ExtractData(self, isCatalogConfig)

    def GetUseableSubmodulesFromGSD(self):
        return _MicroWinExecInterface.IODAP_GetUseableSubmodulesFromGSD(self)

    def GetPhysicalSubSlots(self):
        return _MicroWinExecInterface.IODAP_GetPhysicalSubSlots(self)

    def GetUseableModules(self):
        return _MicroWinExecInterface.IODAP_GetUseableModules(self)

    def GetDeviceAccessPointItem(self, *args):
        return _MicroWinExecInterface.IODAP_GetDeviceAccessPointItem(self, *args)

    def GetBuildInData(self, virtualSubmoduleList, systemDefinedSubmoduleList):
        return _MicroWinExecInterface.IODAP_GetBuildInData(self, virtualSubmoduleList, systemDefinedSubmoduleList)

    def GetVirtualSubmoduleList(self):
        return _MicroWinExecInterface.IODAP_GetVirtualSubmoduleList(self)

    def GetSystemDefinedSubmoduleList(self):
        return _MicroWinExecInterface.IODAP_GetSystemDefinedSubmoduleList(self)

    def GetModuleIdentNumber(self):
        return _MicroWinExecInterface.IODAP_GetModuleIdentNumber(self)

    def GetID(self):
        return _MicroWinExecInterface.IODAP_GetID(self)

    def Store(self, rDest):
        return _MicroWinExecInterface.IODAP_Store(self, rDest)

    def Retrieve(self, *args):
        return _MicroWinExecInterface.IODAP_Retrieve(self, *args)

# Register IODAP in _MicroWinExecInterface:
_MicroWinExecInterface.IODAP_swigregister(IODAP)

PROCESS_ID_NOT_SET = _MicroWinExecInterface.PROCESS_ID_NOT_SET
class MWNetworkInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MicroWinExecInterface.MWNetworkInfo_swiginit(self, _MicroWinExecInterface.new_MWNetworkInfo(*args))
    __swig_destroy__ = _MicroWinExecInterface.delete_MWNetworkInfo

    def __eq__(self, *args):
        return _MicroWinExecInterface.MWNetworkInfo___eq__(self, *args)

    def __ne__(self, *args):
        return _MicroWinExecInterface.MWNetworkInfo___ne__(self, *args)

    def GetNetworkType(self):
        return _MicroWinExecInterface.MWNetworkInfo_GetNetworkType(self)

    def SetNetworkType(self, eType):
        return _MicroWinExecInterface.MWNetworkInfo_SetNetworkType(self, eType)

    def GetPROFIBUSAddress(self):
        return _MicroWinExecInterface.MWNetworkInfo_GetPROFIBUSAddress(self)

    def SetPROFIBUSAddress(self, nAddr):
        return _MicroWinExecInterface.MWNetworkInfo_SetPROFIBUSAddress(self, nAddr)

    def ValidatePROFIBUSAddress(self):
        return _MicroWinExecInterface.MWNetworkInfo_ValidatePROFIBUSAddress(self)

    def GetIPAddressAsDWORD(self):
        return _MicroWinExecInterface.MWNetworkInfo_GetIPAddressAsDWORD(self)

    def GetIPAddressAsString(self):
        return _MicroWinExecInterface.MWNetworkInfo_GetIPAddressAsString(self)

    def GetIPAddressAsBYTE(self):
        return _MicroWinExecInterface.MWNetworkInfo_GetIPAddressAsBYTE(self)

    def SetIPAddress(self, *args):
        return _MicroWinExecInterface.MWNetworkInfo_SetIPAddress(self, *args)

    def GetSubnet(self):
        return _MicroWinExecInterface.MWNetworkInfo_GetSubnet(self)

    def SetSubnet(self, dwSubnet):
        return _MicroWinExecInterface.MWNetworkInfo_SetSubnet(self, dwSubnet)

    def GetGateway(self):
        return _MicroWinExecInterface.MWNetworkInfo_GetGateway(self)

    def SetGateway(self, dwGateway):
        return _MicroWinExecInterface.MWNetworkInfo_SetGateway(self, dwGateway)

    def Clear(self, nProfibusAddress=2):
        return _MicroWinExecInterface.MWNetworkInfo_Clear(self, nProfibusAddress)

    def IsValid(self):
        return _MicroWinExecInterface.MWNetworkInfo_IsValid(self)

    def SetLifeListAddress(self, nAddr):
        return _MicroWinExecInterface.MWNetworkInfo_SetLifeListAddress(self, nAddr)

    def UseLifeListTimeout(self):
        return _MicroWinExecInterface.MWNetworkInfo_UseLifeListTimeout(self)

    def SetLifeListTimeout(self, *args):
        return _MicroWinExecInterface.MWNetworkInfo_SetLifeListTimeout(self, *args)

    def Store(self, rDest):
        return _MicroWinExecInterface.MWNetworkInfo_Store(self, rDest)

    def Retrieve(self, *args):
        return _MicroWinExecInterface.MWNetworkInfo_Retrieve(self, *args)

    def RestoreMSBAddress(self):
        return _MicroWinExecInterface.MWNetworkInfo_RestoreMSBAddress(self)

    def SetMSBAddress(self):
        return _MicroWinExecInterface.MWNetworkInfo_SetMSBAddress(self)

# Register MWNetworkInfo in _MicroWinExecInterface:
_MicroWinExecInterface.MWNetworkInfo_swigregister(MWNetworkInfo)

eSIGCOMPASS_STL_CONVERSION_NONE = _MicroWinExecInterface.eSIGCOMPASS_STL_CONVERSION_NONE
eSIGCOMPASS_STL_CONVERSION_AND = _MicroWinExecInterface.eSIGCOMPASS_STL_CONVERSION_AND
eSIGCOMPASS_STL_CONVERSION_OR = _MicroWinExecInterface.eSIGCOMPASS_STL_CONVERSION_OR
eSIGCOMPASS_COMPILE_FORMAT_A = _MicroWinExecInterface.eSIGCOMPASS_COMPILE_FORMAT_A
eSIGCOMPASS_COMPILE_FORMAT_B = _MicroWinExecInterface.eSIGCOMPASS_COMPILE_FORMAT_B
eSIGCOMPASS_COMPILE_FORMAT_C = _MicroWinExecInterface.eSIGCOMPASS_COMPILE_FORMAT_C
eSIGCOMPASS_COMPILE_FORMAT_D = _MicroWinExecInterface.eSIGCOMPASS_COMPILE_FORMAT_D
eSIGCOMPASS_COMPILE_FORMAT_E = _MicroWinExecInterface.eSIGCOMPASS_COMPILE_FORMAT_E
eSIGCOMPASS_COMPILE_FORMAT_F = _MicroWinExecInterface.eSIGCOMPASS_COMPILE_FORMAT_F
eSIGCOMPASS_COMPILE_FORMAT_G = _MicroWinExecInterface.eSIGCOMPASS_COMPILE_FORMAT_G
eSIGCOMPASS_COMPILE_FORMAT_H = _MicroWinExecInterface.eSIGCOMPASS_COMPILE_FORMAT_H
eSIGCOMPASS_COMPILE_FORMAT_I = _MicroWinExecInterface.eSIGCOMPASS_COMPILE_FORMAT_I
eSIGCOMPASS_COMPILE_FORMAT_J = _MicroWinExecInterface.eSIGCOMPASS_COMPILE_FORMAT_J
eSIGCOMPASS_VAR_TYPE_IN = _MicroWinExecInterface.eSIGCOMPASS_VAR_TYPE_IN
eSIGCOMPASS_VAR_TYPE_INOUT = _MicroWinExecInterface.eSIGCOMPASS_VAR_TYPE_INOUT
eSIGCOMPASS_VAR_TYPE_OUT = _MicroWinExecInterface.eSIGCOMPASS_VAR_TYPE_OUT
eSIGCOMPASS_VAR_TYPE_VAR = _MicroWinExecInterface.eSIGCOMPASS_VAR_TYPE_VAR
eSIGCOMPASS_VAR_TYPE_VAR_EXTERN = _MicroWinExecInterface.eSIGCOMPASS_VAR_TYPE_VAR_EXTERN
eSIGCOMPASS_INSTR_CATEGORY_UNDEFINED = _MicroWinExecInterface.eSIGCOMPASS_INSTR_CATEGORY_UNDEFINED
eSIGCOMPASS_INSTR_CATEGORY_BIT_LOGIC = _MicroWinExecInterface.eSIGCOMPASS_INSTR_CATEGORY_BIT_LOGIC
eSIGCOMPASS_INSTR_CATEGORY_CLOCK = _MicroWinExecInterface.eSIGCOMPASS_INSTR_CATEGORY_CLOCK
eSIGCOMPASS_INSTR_CATEGORY_COMMUNICATIONS = _MicroWinExecInterface.eSIGCOMPASS_INSTR_CATEGORY_COMMUNICATIONS
eSIGCOMPASS_INSTR_CATEGORY_COMPARE = _MicroWinExecInterface.eSIGCOMPASS_INSTR_CATEGORY_COMPARE
eSIGCOMPASS_INSTR_CATEGORY_CONVERT = _MicroWinExecInterface.eSIGCOMPASS_INSTR_CATEGORY_CONVERT
eSIGCOMPASS_INSTR_CATEGORY_COUNTER = _MicroWinExecInterface.eSIGCOMPASS_INSTR_CATEGORY_COUNTER
eSIGCOMPASS_INSTR_CATEGORY_REAL_MATH = _MicroWinExecInterface.eSIGCOMPASS_INSTR_CATEGORY_REAL_MATH
eSIGCOMPASS_INSTR_CATEGORY_INTEGER_MATH = _MicroWinExecInterface.eSIGCOMPASS_INSTR_CATEGORY_INTEGER_MATH
eSIGCOMPASS_INSTR_CATEGORY_INTERRUPT = _MicroWinExecInterface.eSIGCOMPASS_INSTR_CATEGORY_INTERRUPT
eSIGCOMPASS_INSTR_CATEGORY_LOGICAL_OPS = _MicroWinExecInterface.eSIGCOMPASS_INSTR_CATEGORY_LOGICAL_OPS
eSIGCOMPASS_INSTR_CATEGORY_MATH = _MicroWinExecInterface.eSIGCOMPASS_INSTR_CATEGORY_MATH
eSIGCOMPASS_INSTR_CATEGORY_MOVE = _MicroWinExecInterface.eSIGCOMPASS_INSTR_CATEGORY_MOVE
eSIGCOMPASS_INSTR_CATEGORY_NUMERIC = _MicroWinExecInterface.eSIGCOMPASS_INSTR_CATEGORY_NUMERIC
eSIGCOMPASS_INSTR_CATEGORY_PROGRAM_CONTROL = _MicroWinExecInterface.eSIGCOMPASS_INSTR_CATEGORY_PROGRAM_CONTROL
eSIGCOMPASS_INSTR_CATEGORY_SHIFT_ROTATE = _MicroWinExecInterface.eSIGCOMPASS_INSTR_CATEGORY_SHIFT_ROTATE
eSIGCOMPASS_INSTR_CATEGORY_STRING = _MicroWinExecInterface.eSIGCOMPASS_INSTR_CATEGORY_STRING
eSIGCOMPASS_INSTR_CATEGORY_TABLE = _MicroWinExecInterface.eSIGCOMPASS_INSTR_CATEGORY_TABLE
eSIGCOMPASS_INSTR_CATEGORY_TIMER = _MicroWinExecInterface.eSIGCOMPASS_INSTR_CATEGORY_TIMER
eSIGCOMPASS_INSTR_CATEGORY_MEMORY_CARTRIDGE = _MicroWinExecInterface.eSIGCOMPASS_INSTR_CATEGORY_MEMORY_CARTRIDGE
eSIGCOMPASS_INSTR_CATEGORY_SUBROUTINE = _MicroWinExecInterface.eSIGCOMPASS_INSTR_CATEGORY_SUBROUTINE
eSIGCOMPASS_INSTR_CATEGORY_NOT_VISIBLE = _MicroWinExecInterface.eSIGCOMPASS_INSTR_CATEGORY_NOT_VISIBLE
eSIGCOMPASS_INSTR_CATEGORY_PROFINET = _MicroWinExecInterface.eSIGCOMPASS_INSTR_CATEGORY_PROFINET
eSIGCOMPASS_INST_TYPE_CONTACT_TYPE = _MicroWinExecInterface.eSIGCOMPASS_INST_TYPE_CONTACT_TYPE
eSIGCOMPASS_INST_TYPE_COIL_TYPE = _MicroWinExecInterface.eSIGCOMPASS_INST_TYPE_COIL_TYPE
eSIGCOMPASS_INST_TYPE_FUNCTION_TYPE = _MicroWinExecInterface.eSIGCOMPASS_INST_TYPE_FUNCTION_TYPE
eSIGCOMPASS_INST_TYPE_FUNCTION_BLOCK_TYPE = _MicroWinExecInterface.eSIGCOMPASS_INST_TYPE_FUNCTION_BLOCK_TYPE
eSIGCOMPASS_INSTRUCTIONSET_SIMATIC = _MicroWinExecInterface.eSIGCOMPASS_INSTRUCTIONSET_SIMATIC
eSIGCOMPASS_INSTRUCTIONSET_IEC = _MicroWinExecInterface.eSIGCOMPASS_INSTRUCTIONSET_IEC
eSIGCOMPASS_INSTRUCTIONSET_IEC_NON_STANDARD = _MicroWinExecInterface.eSIGCOMPASS_INSTRUCTIONSET_IEC_NON_STANDARD
eSIGCOMPASS_MEMORY_AREA_I = _MicroWinExecInterface.eSIGCOMPASS_MEMORY_AREA_I
eSIGCOMPASS_MEMORY_AREA_Q = _MicroWinExecInterface.eSIGCOMPASS_MEMORY_AREA_Q
eSIGCOMPASS_MEMORY_AREA_AI = _MicroWinExecInterface.eSIGCOMPASS_MEMORY_AREA_AI
eSIGCOMPASS_MEMORY_AREA_AQ = _MicroWinExecInterface.eSIGCOMPASS_MEMORY_AREA_AQ
eSIGCOMPASS_MEMORY_AREA_V = _MicroWinExecInterface.eSIGCOMPASS_MEMORY_AREA_V
eSIGCOMPASS_MEMORY_AREA_M = _MicroWinExecInterface.eSIGCOMPASS_MEMORY_AREA_M
eSIGCOMPASS_MEMORY_AREA_T = _MicroWinExecInterface.eSIGCOMPASS_MEMORY_AREA_T
eSIGCOMPASS_MEMORY_AREA_C = _MicroWinExecInterface.eSIGCOMPASS_MEMORY_AREA_C
eSIGCOMPASS_MEMORY_AREA_HC = _MicroWinExecInterface.eSIGCOMPASS_MEMORY_AREA_HC
eSIGCOMPASS_MEMORY_AREA_SM = _MicroWinExecInterface.eSIGCOMPASS_MEMORY_AREA_SM
eSIGCOMPASS_MEMORY_AREA_SCR = _MicroWinExecInterface.eSIGCOMPASS_MEMORY_AREA_SCR
eSIGCOMPASS_MEMORY_AREA_SD = _MicroWinExecInterface.eSIGCOMPASS_MEMORY_AREA_SD
eSIGCOMPASS_MEMORY_AREA_AC = _MicroWinExecInterface.eSIGCOMPASS_MEMORY_AREA_AC
eSIGCOMPASS_MEMORY_AREA_L = _MicroWinExecInterface.eSIGCOMPASS_MEMORY_AREA_L
eSIGCOMPASS_MEMORY_AREA_INDIRECT = _MicroWinExecInterface.eSIGCOMPASS_MEMORY_AREA_INDIRECT
eSIGCOMPASS_MEMORY_AREA_ADDRESSOF = _MicroWinExecInterface.eSIGCOMPASS_MEMORY_AREA_ADDRESSOF
eSIGCOMPASS_MEMORY_AREA_LITERAL = _MicroWinExecInterface.eSIGCOMPASS_MEMORY_AREA_LITERAL
eSIGCOMPASS_MEMORY_AREA_SBR = _MicroWinExecInterface.eSIGCOMPASS_MEMORY_AREA_SBR
eSIGCOMPASS_MEMORY_AREA_INT = _MicroWinExecInterface.eSIGCOMPASS_MEMORY_AREA_INT
eSIGCOMPASS_MEMORY_AREA_OB = _MicroWinExecInterface.eSIGCOMPASS_MEMORY_AREA_OB
eSIGCOMPASS_DATA_TYPE_ANY_BIT = _MicroWinExecInterface.eSIGCOMPASS_DATA_TYPE_ANY_BIT
eSIGCOMPASS_DATA_TYPE_BOOL = _MicroWinExecInterface.eSIGCOMPASS_DATA_TYPE_BOOL
eSIGCOMPASS_DATA_TYPE_BYTE = _MicroWinExecInterface.eSIGCOMPASS_DATA_TYPE_BYTE
eSIGCOMPASS_DATA_TYPE_WORD = _MicroWinExecInterface.eSIGCOMPASS_DATA_TYPE_WORD
eSIGCOMPASS_DATA_TYPE_DWORD = _MicroWinExecInterface.eSIGCOMPASS_DATA_TYPE_DWORD
eSIGCOMPASS_DATA_TYPE_ANY_INT = _MicroWinExecInterface.eSIGCOMPASS_DATA_TYPE_ANY_INT
eSIGCOMPASS_DATA_TYPE_INT = _MicroWinExecInterface.eSIGCOMPASS_DATA_TYPE_INT
eSIGCOMPASS_DATA_TYPE_DINT = _MicroWinExecInterface.eSIGCOMPASS_DATA_TYPE_DINT
eSIGCOMPASS_DATA_TYPE_USINT = _MicroWinExecInterface.eSIGCOMPASS_DATA_TYPE_USINT
eSIGCOMPASS_DATA_TYPE_UINT = _MicroWinExecInterface.eSIGCOMPASS_DATA_TYPE_UINT
eSIGCOMPASS_DATA_TYPE_UDINT = _MicroWinExecInterface.eSIGCOMPASS_DATA_TYPE_UDINT
eSIGCOMPASS_DATA_TYPE_ANY_REAL = _MicroWinExecInterface.eSIGCOMPASS_DATA_TYPE_ANY_REAL
eSIGCOMPASS_DATA_TYPE_REAL = _MicroWinExecInterface.eSIGCOMPASS_DATA_TYPE_REAL
eSIGCOMPASS_DATA_TYPE_ANY_TIME = _MicroWinExecInterface.eSIGCOMPASS_DATA_TYPE_ANY_TIME
eSIGCOMPASS_DATA_TYPE_TIME = _MicroWinExecInterface.eSIGCOMPASS_DATA_TYPE_TIME
eSIGCOMPASS_DATA_TYPE_SUBROUTINE = _MicroWinExecInterface.eSIGCOMPASS_DATA_TYPE_SUBROUTINE
eSIGCOMPASS_DATA_TYPE_INTERRUPT = _MicroWinExecInterface.eSIGCOMPASS_DATA_TYPE_INTERRUPT
eSIGCOMPASS_DATA_TYPE_ORGANIZATION = _MicroWinExecInterface.eSIGCOMPASS_DATA_TYPE_ORGANIZATION
eSIGCOMPASS_DATA_TYPE_CHAR = _MicroWinExecInterface.eSIGCOMPASS_DATA_TYPE_CHAR
eSIGCOMPASS_DATA_TYPE_ANYSTRING = _MicroWinExecInterface.eSIGCOMPASS_DATA_TYPE_ANYSTRING
eSIGCOMPASS_DATA_TYPE_STRING = _MicroWinExecInterface.eSIGCOMPASS_DATA_TYPE_STRING
eSIGCOMPASS_DATA_TYPE_NETR = _MicroWinExecInterface.eSIGCOMPASS_DATA_TYPE_NETR
eSIGCOMPASS_DATA_TYPE_PID = _MicroWinExecInterface.eSIGCOMPASS_DATA_TYPE_PID
eSIGCOMPASS_DATA_TYPE_TON = _MicroWinExecInterface.eSIGCOMPASS_DATA_TYPE_TON
eSIGCOMPASS_DATA_TYPE_TOF = _MicroWinExecInterface.eSIGCOMPASS_DATA_TYPE_TOF
eSIGCOMPASS_DATA_TYPE_TP = _MicroWinExecInterface.eSIGCOMPASS_DATA_TYPE_TP
eSIGCOMPASS_DATA_TYPE_CTU = _MicroWinExecInterface.eSIGCOMPASS_DATA_TYPE_CTU
eSIGCOMPASS_DATA_TYPE_CTD = _MicroWinExecInterface.eSIGCOMPASS_DATA_TYPE_CTD
eSIGCOMPASS_DATA_TYPE_CTUD = _MicroWinExecInterface.eSIGCOMPASS_DATA_TYPE_CTUD
eSIGCOMPASS_DATA_TYPE_RS = _MicroWinExecInterface.eSIGCOMPASS_DATA_TYPE_RS
eSIGCOMPASS_DATA_TYPE_SR = _MicroWinExecInterface.eSIGCOMPASS_DATA_TYPE_SR
eSIGCOMPASS_DATA_TYPE_POWER_FLOW = _MicroWinExecInterface.eSIGCOMPASS_DATA_TYPE_POWER_FLOW
eSIGCOMPASS_EDITOR_LAD = _MicroWinExecInterface.eSIGCOMPASS_EDITOR_LAD
eSIGCOMPASS_EDITOR_FBD = _MicroWinExecInterface.eSIGCOMPASS_EDITOR_FBD
eSIGCOMPASS_EDITOR_STL = _MicroWinExecInterface.eSIGCOMPASS_EDITOR_STL
eSIGCOMPASS_STATUS_FORMAT_SIGNED = _MicroWinExecInterface.eSIGCOMPASS_STATUS_FORMAT_SIGNED
eSIGCOMPASS_STATUS_FORMAT_UNSIGNED = _MicroWinExecInterface.eSIGCOMPASS_STATUS_FORMAT_UNSIGNED
eSIGCOMPASS_STATUS_FORMAT_HEXADECIMAL = _MicroWinExecInterface.eSIGCOMPASS_STATUS_FORMAT_HEXADECIMAL
eSIGCOMPASS_STATUS_FORMAT_BINARY = _MicroWinExecInterface.eSIGCOMPASS_STATUS_FORMAT_BINARY
eSIGCOMPASS_STATUS_FORMAT_FLOATING = _MicroWinExecInterface.eSIGCOMPASS_STATUS_FORMAT_FLOATING
eSIGCOMPASS_STATUS_FORMAT_ASCII = _MicroWinExecInterface.eSIGCOMPASS_STATUS_FORMAT_ASCII
eSIGCOMPASS_STATUS_FORMAT_STRING = _MicroWinExecInterface.eSIGCOMPASS_STATUS_FORMAT_STRING
eSIGCOMPASS_STATUS_FORMAT_TIME = _MicroWinExecInterface.eSIGCOMPASS_STATUS_FORMAT_TIME
eSIGCOMPASS_STATUS_FORMAT_BIT = _MicroWinExecInterface.eSIGCOMPASS_STATUS_FORMAT_BIT
eSIGCOMPASS_OPERAND_SIZE_NOSIZE = _MicroWinExecInterface.eSIGCOMPASS_OPERAND_SIZE_NOSIZE
eSIGCOMPASS_OPERAND_SIZE_BIT = _MicroWinExecInterface.eSIGCOMPASS_OPERAND_SIZE_BIT
eSIGCOMPASS_OPERAND_SIZE_BYTE = _MicroWinExecInterface.eSIGCOMPASS_OPERAND_SIZE_BYTE
eSIGCOMPASS_OPERAND_SIZE_WORD = _MicroWinExecInterface.eSIGCOMPASS_OPERAND_SIZE_WORD
eSIGCOMPASS_OPERAND_SIZE_DWORD = _MicroWinExecInterface.eSIGCOMPASS_OPERAND_SIZE_DWORD
eSIGCOMPASS_OPERAND_SIZE_STRING = _MicroWinExecInterface.eSIGCOMPASS_OPERAND_SIZE_STRING
eSIGCOMPASS_OPERAND_SIZE_UNUSED = _MicroWinExecInterface.eSIGCOMPASS_OPERAND_SIZE_UNUSED
eSIGCOMPASS_OPERAND_SIZE_UNDEFINED = _MicroWinExecInterface.eSIGCOMPASS_OPERAND_SIZE_UNDEFINED
eSIGCOMPASS_ADDR_RANGE_QUALIFIER_NONE = _MicroWinExecInterface.eSIGCOMPASS_ADDR_RANGE_QUALIFIER_NONE
eSIGCOMPASS_ADDR_RANGE_QUALIFIER_FMT = _MicroWinExecInterface.eSIGCOMPASS_ADDR_RANGE_QUALIFIER_FMT
eSIGCOMPASS_ADDR_RANGE_QUALIFIER_LEN = _MicroWinExecInterface.eSIGCOMPASS_ADDR_RANGE_QUALIFIER_LEN
eSIGCOMPASS_ADDR_RANGE_QUALIFIER_LEN_TIMES_ONE = _MicroWinExecInterface.eSIGCOMPASS_ADDR_RANGE_QUALIFIER_LEN_TIMES_ONE
eSIGCOMPASS_ADDR_RANGE_QUALIFIER_LEN_TIMES_OPERAND_SIZE = _MicroWinExecInterface.eSIGCOMPASS_ADDR_RANGE_QUALIFIER_LEN_TIMES_OPERAND_SIZE
eSIGCOMPASS_ADDR_RANGE_QUALIFIER_FMT_REAL = _MicroWinExecInterface.eSIGCOMPASS_ADDR_RANGE_QUALIFIER_FMT_REAL
eSIGCOMPASS_ADDR_RANGE_QUALIFIER_LEN_DIVIDED_BY_TWO = _MicroWinExecInterface.eSIGCOMPASS_ADDR_RANGE_QUALIFIER_LEN_DIVIDED_BY_TWO
eSIGCOMPASS_ADDR_RANGE_QUALIFIER_LEN_TIMES_TWO = _MicroWinExecInterface.eSIGCOMPASS_ADDR_RANGE_QUALIFIER_LEN_TIMES_TWO
eSIGCOMPASS_ADDR_RANGE_QUALIFIER_BSTR_BYTE = _MicroWinExecInterface.eSIGCOMPASS_ADDR_RANGE_QUALIFIER_BSTR_BYTE
eSIGCOMPASS_ADDR_RANGE_QUALIFIER_BSTR_DWORD = _MicroWinExecInterface.eSIGCOMPASS_ADDR_RANGE_QUALIFIER_BSTR_DWORD
eSIGCOMPASS_LITERAL_TYPE_BOOL = _MicroWinExecInterface.eSIGCOMPASS_LITERAL_TYPE_BOOL
eSIGCOMPASS_LITERAL_TYPE_UNSIGNED = _MicroWinExecInterface.eSIGCOMPASS_LITERAL_TYPE_UNSIGNED
eSIGCOMPASS_LITERAL_TYPE_SIGNED = _MicroWinExecInterface.eSIGCOMPASS_LITERAL_TYPE_SIGNED
eSIGCOMPASS_LITERAL_TYPE_TIME = _MicroWinExecInterface.eSIGCOMPASS_LITERAL_TYPE_TIME
eSIGCOMPASS_LITERAL_TYPE_HEXADECIMAL = _MicroWinExecInterface.eSIGCOMPASS_LITERAL_TYPE_HEXADECIMAL
eSIGCOMPASS_LITERAL_TYPE_BINARY = _MicroWinExecInterface.eSIGCOMPASS_LITERAL_TYPE_BINARY
eSIGCOMPASS_LITERAL_TYPE_ASCII = _MicroWinExecInterface.eSIGCOMPASS_LITERAL_TYPE_ASCII
eSIGCOMPASS_LITERAL_TYPE_REAL = _MicroWinExecInterface.eSIGCOMPASS_LITERAL_TYPE_REAL
eSIGCOMPASS_LITERAL_TYPE_STRING = _MicroWinExecInterface.eSIGCOMPASS_LITERAL_TYPE_STRING
eSIGCOMPASS_LITERAL_TYPE_NO_FORMAT = _MicroWinExecInterface.eSIGCOMPASS_LITERAL_TYPE_NO_FORMAT
eSIGCOMPASS_LITERAL_TYPE_COUNT = _MicroWinExecInterface.eSIGCOMPASS_LITERAL_TYPE_COUNT
eSIGCOMPASS_EXP_FORMAT_UNDEFINED = _MicroWinExecInterface.eSIGCOMPASS_EXP_FORMAT_UNDEFINED
eSIGCOMPASS_EXP_FORMAT_ML_IN1IN2OUT_TYPE1 = _MicroWinExecInterface.eSIGCOMPASS_EXP_FORMAT_ML_IN1IN2OUT_TYPE1
eSIGCOMPASS_EXP_FORMAT_ML_IN1IN2OUT_TYPE2 = _MicroWinExecInterface.eSIGCOMPASS_EXP_FORMAT_ML_IN1IN2OUT_TYPE2
eSIGCOMPASS_EXP_FORMAT_ML_IN1IN2OUT_TYPE3 = _MicroWinExecInterface.eSIGCOMPASS_EXP_FORMAT_ML_IN1IN2OUT_TYPE3
eSIGCOMPASS_EXP_FORMAT_ML_IN1IN2OUT_TYPE4 = _MicroWinExecInterface.eSIGCOMPASS_EXP_FORMAT_ML_IN1IN2OUT_TYPE4
eSIGCOMPASS_EXP_FORMAT_ML_INOUT = _MicroWinExecInterface.eSIGCOMPASS_EXP_FORMAT_ML_INOUT
eSIGCOMPASS_EXP_FORMAT_ML_INNOUT = _MicroWinExecInterface.eSIGCOMPASS_EXP_FORMAT_ML_INNOUT
eSIGCOMPASS_EXP_FORMAT_SL_INFMTOUT = _MicroWinExecInterface.eSIGCOMPASS_EXP_FORMAT_SL_INFMTOUT
eSIGCOMPASS_EXP_FORMAT_SL_IEC_SET_RESET = _MicroWinExecInterface.eSIGCOMPASS_EXP_FORMAT_SL_IEC_SET_RESET
eSIGCOMPASS_REC_FORMAT_UNDEFINED = _MicroWinExecInterface.eSIGCOMPASS_REC_FORMAT_UNDEFINED
eSIGCOMPASS_REC_FORMAT_ML_MOVE_BYTE = _MicroWinExecInterface.eSIGCOMPASS_REC_FORMAT_ML_MOVE_BYTE
eSIGCOMPASS_REC_FORMAT_ML_MOVE_WORD = _MicroWinExecInterface.eSIGCOMPASS_REC_FORMAT_ML_MOVE_WORD
eSIGCOMPASS_REC_FORMAT_ML_MOVE_DWORD = _MicroWinExecInterface.eSIGCOMPASS_REC_FORMAT_ML_MOVE_DWORD
eSIGCOMPASS_REC_FORMAT_ML_MOVE_REAL = _MicroWinExecInterface.eSIGCOMPASS_REC_FORMAT_ML_MOVE_REAL
eSIGCOMPASS_REC_FORMAT_ML_IN1IN2OUT_TYPE1 = _MicroWinExecInterface.eSIGCOMPASS_REC_FORMAT_ML_IN1IN2OUT_TYPE1
eSIGCOMPASS_REC_FORMAT_ML_IN1IN2OUT_TYPE2 = _MicroWinExecInterface.eSIGCOMPASS_REC_FORMAT_ML_IN1IN2OUT_TYPE2
eSIGCOMPASS_REC_FORMAT_ML_INOUT = _MicroWinExecInterface.eSIGCOMPASS_REC_FORMAT_ML_INOUT
eSIGCOMPASS_REC_FORMAT_ML_INNOUT = _MicroWinExecInterface.eSIGCOMPASS_REC_FORMAT_ML_INNOUT
eSIGCOMPASS_REC_FORMAT_ML_MUL16TO32 = _MicroWinExecInterface.eSIGCOMPASS_REC_FORMAT_ML_MUL16TO32
eSIGCOMPASS_REC_FORMAT_ML_DIV16TO32 = _MicroWinExecInterface.eSIGCOMPASS_REC_FORMAT_ML_DIV16TO32
eSIGCOMPASS_REC_FORMAT_SL_POU = _MicroWinExecInterface.eSIGCOMPASS_REC_FORMAT_SL_POU
eSIGCOMPASS_REC_FORMAT_SL_STACK = _MicroWinExecInterface.eSIGCOMPASS_REC_FORMAT_SL_STACK
eSIGCOMPASS_REC_FORMAT_SL_LOAD = _MicroWinExecInterface.eSIGCOMPASS_REC_FORMAT_SL_LOAD
eSIGCOMPASS_REC_FORMAT_SL_AND = _MicroWinExecInterface.eSIGCOMPASS_REC_FORMAT_SL_AND
eSIGCOMPASS_REC_FORMAT_SL_OR = _MicroWinExecInterface.eSIGCOMPASS_REC_FORMAT_SL_OR
eSIGCOMPASS_REC_FORMAT_SL_NOT = _MicroWinExecInterface.eSIGCOMPASS_REC_FORMAT_SL_NOT
eSIGCOMPASS_REC_FORMAT_SL_EDGE = _MicroWinExecInterface.eSIGCOMPASS_REC_FORMAT_SL_EDGE
eSIGCOMPASS_REC_FORMAT_SL_LDCMP = _MicroWinExecInterface.eSIGCOMPASS_REC_FORMAT_SL_LDCMP
eSIGCOMPASS_REC_FORMAT_SL_ANDCMP = _MicroWinExecInterface.eSIGCOMPASS_REC_FORMAT_SL_ANDCMP
eSIGCOMPASS_REC_FORMAT_SL_ORCMP = _MicroWinExecInterface.eSIGCOMPASS_REC_FORMAT_SL_ORCMP
eSIGCOMPASS_REC_FORMAT_SL_RETURN = _MicroWinExecInterface.eSIGCOMPASS_REC_FORMAT_SL_RETURN
eSIGCOMPASS_REC_FORMAT_SL_SET_RESET = _MicroWinExecInterface.eSIGCOMPASS_REC_FORMAT_SL_SET_RESET
eSIGCOMPASS_REC_FORMAT_SL_SETI_RESETI = _MicroWinExecInterface.eSIGCOMPASS_REC_FORMAT_SL_SETI_RESETI
eSIGCOMPASS_REC_FORMAT_SL_OUT = _MicroWinExecInterface.eSIGCOMPASS_REC_FORMAT_SL_OUT
eSIGCOMPASS_REC_FORMAT_SL_MISCFB1 = _MicroWinExecInterface.eSIGCOMPASS_REC_FORMAT_SL_MISCFB1
eSIGCOMPASS_REC_FORMAT_SL_MISCFB2 = _MicroWinExecInterface.eSIGCOMPASS_REC_FORMAT_SL_MISCFB2
eSIGCOMPASS_REC_FORMAT_SL_MISCCOIL1 = _MicroWinExecInterface.eSIGCOMPASS_REC_FORMAT_SL_MISCCOIL1
eSIGCOMPASS_REC_FORMAT_SL_MISCCOIL2 = _MicroWinExecInterface.eSIGCOMPASS_REC_FORMAT_SL_MISCCOIL2
eSIGCOMPASS_REC_FORMAT_SL_NOP = _MicroWinExecInterface.eSIGCOMPASS_REC_FORMAT_SL_NOP
eSIGCOMPASS_REC_FORMAT_SL_IN = _MicroWinExecInterface.eSIGCOMPASS_REC_FORMAT_SL_IN
eSIGCOMPASS_REC_FORMAT_SL_CT = _MicroWinExecInterface.eSIGCOMPASS_REC_FORMAT_SL_CT
eSIGCOMPASS_REC_FORMAT_SL_CTUD = _MicroWinExecInterface.eSIGCOMPASS_REC_FORMAT_SL_CTUD
eSIGCOMPASS_REC_FORMAT_SL_TOX = _MicroWinExecInterface.eSIGCOMPASS_REC_FORMAT_SL_TOX
eSIGCOMPASS_REC_FORMAT_SL_INOUT = _MicroWinExecInterface.eSIGCOMPASS_REC_FORMAT_SL_INOUT
eSIGCOMPASS_REC_FORMAT_SL_TBLPORT = _MicroWinExecInterface.eSIGCOMPASS_REC_FORMAT_SL_TBLPORT
eSIGCOMPASS_REC_FORMAT_SL_IN3 = _MicroWinExecInterface.eSIGCOMPASS_REC_FORMAT_SL_IN3
eSIGCOMPASS_REC_FORMAT_SL_INFMTOUT = _MicroWinExecInterface.eSIGCOMPASS_REC_FORMAT_SL_INFMTOUT
eSIGCOMPASS_REC_FORMAT_SL_FIND = _MicroWinExecInterface.eSIGCOMPASS_REC_FORMAT_SL_FIND
eSIGCOMPASS_ADDRESSING_MODE_DIRECT_ADDRESS = _MicroWinExecInterface.eSIGCOMPASS_ADDRESSING_MODE_DIRECT_ADDRESS
eSIGCOMPASS_ADDRESSING_MODE_ADDRESS_OF = _MicroWinExecInterface.eSIGCOMPASS_ADDRESSING_MODE_ADDRESS_OF
eSIGCOMPASS_ADDRESSING_MODE_INDIRECT_ADDRESS = _MicroWinExecInterface.eSIGCOMPASS_ADDRESSING_MODE_INDIRECT_ADDRESS
eSIGCOMPASS_ADDRESSING_MODE_INVALID_MODE = _MicroWinExecInterface.eSIGCOMPASS_ADDRESSING_MODE_INVALID_MODE
eSIGCOMPASS_ERROR_NOTFOUND = _MicroWinExecInterface.eSIGCOMPASS_ERROR_NOTFOUND
eSIGCOMPASS_ERROR_DUPLICATE = _MicroWinExecInterface.eSIGCOMPASS_ERROR_DUPLICATE
eSIGCOMPASS_ERROR_NOSIGFILE = _MicroWinExecInterface.eSIGCOMPASS_ERROR_NOSIGFILE
eSIGCOMPASS_ERROR_LIBCREATE_FAIL = _MicroWinExecInterface.eSIGCOMPASS_ERROR_LIBCREATE_FAIL
eSIGCOMPASS_EXEC_STAT_SCHEME_NO_OPERANDS = _MicroWinExecInterface.eSIGCOMPASS_EXEC_STAT_SCHEME_NO_OPERANDS
eSIGCOMPASS_EXEC_STAT_SCHEME_NORMAL = _MicroWinExecInterface.eSIGCOMPASS_EXEC_STAT_SCHEME_NORMAL
eSIGCOMPASS_EXEC_STAT_SCHEME_INDIRECTS_FIRST = _MicroWinExecInterface.eSIGCOMPASS_EXEC_STAT_SCHEME_INDIRECTS_FIRST
eSIGCOMPASS_EXEC_STAT_SCHEME_ADD_CURRENT = _MicroWinExecInterface.eSIGCOMPASS_EXEC_STAT_SCHEME_ADD_CURRENT
eSIGCOMPASS_EXEC_STAT_SCHEME_NOFIRST = _MicroWinExecInterface.eSIGCOMPASS_EXEC_STAT_SCHEME_NOFIRST
eSIGCOMPASS_EXEC_STAT_SCHEME_NOSECOND = _MicroWinExecInterface.eSIGCOMPASS_EXEC_STAT_SCHEME_NOSECOND
eSIGCOMPASS_EXEC_STAT_SCHEME_MIX1 = _MicroWinExecInterface.eSIGCOMPASS_EXEC_STAT_SCHEME_MIX1
eSIGCOMPASS_EXEC_STAT_SCHEME_MIX2 = _MicroWinExecInterface.eSIGCOMPASS_EXEC_STAT_SCHEME_MIX2
eSIGCOMPASS_EXEC_STAT_IGNORE_STACK = _MicroWinExecInterface.eSIGCOMPASS_EXEC_STAT_IGNORE_STACK
eSIGCOMPASS_MNEMONIC_SIMATIC = _MicroWinExecInterface.eSIGCOMPASS_MNEMONIC_SIMATIC
eSIGCOMPASS_MNEMONIC_INTL = _MicroWinExecInterface.eSIGCOMPASS_MNEMONIC_INTL
cSIGCOMPASS_MAX_MNEMONIC_LENGTH = _MicroWinExecInterface.cSIGCOMPASS_MAX_MNEMONIC_LENGTH
cSIGCOMPASS_MAX_NUMBER_OF_SUBROUTINES = _MicroWinExecInterface.cSIGCOMPASS_MAX_NUMBER_OF_SUBROUTINES
cSIGCOMPASS_MAX_NUMBER_OF_INTERRUPTS = _MicroWinExecInterface.cSIGCOMPASS_MAX_NUMBER_OF_INTERRUPTS
cSIGCOMPASS_PCALL_OPCODE = _MicroWinExecInterface.cSIGCOMPASS_PCALL_OPCODE
cSIGCOMPASS_CALL_OPCODE = _MicroWinExecInterface.cSIGCOMPASS_CALL_OPCODE
cSIGCOMPASS_MAIN_POU_ID = _MicroWinExecInterface.cSIGCOMPASS_MAIN_POU_ID
cSIGCOMPASS_SUBROUTINE_POU_ID = _MicroWinExecInterface.cSIGCOMPASS_SUBROUTINE_POU_ID
cSIGCOMPASS_INTERRUPT_POU_ID = _MicroWinExecInterface.cSIGCOMPASS_INTERRUPT_POU_ID
cSIGCOMPASS_START_LIB_ID = _MicroWinExecInterface.cSIGCOMPASS_START_LIB_ID
cSIGCOMPASS_END_LIB_ID = _MicroWinExecInterface.cSIGCOMPASS_END_LIB_ID
MAX_POU_PASSWORD_SIZE = _MicroWinExecInterface.MAX_POU_PASSWORD_SIZE
EMPTY_ELEMENT = _MicroWinExecInterface.EMPTY_ELEMENT
FULL_HORIZONTAL = _MicroWinExecInterface.FULL_HORIZONTAL
GENERIC_CONTACT = _MicroWinExecInterface.GENERIC_CONTACT
GENERIC_COIL = _MicroWinExecInterface.GENERIC_COIL
GENERIC_BOX = _MicroWinExecInterface.GENERIC_BOX
T_BRANCH = _MicroWinExecInterface.T_BRANCH
LAD_BIT_LOGIC_BEGIN = _MicroWinExecInterface.LAD_BIT_LOGIC_BEGIN
NO_CONTACT = _MicroWinExecInterface.NO_CONTACT
NC_CONTACT = _MicroWinExecInterface.NC_CONTACT
NOI_CONTACT = _MicroWinExecInterface.NOI_CONTACT
NCI_CONTACT = _MicroWinExecInterface.NCI_CONTACT
NOT_CONTACT = _MicroWinExecInterface.NOT_CONTACT
POS_CONTACT = _MicroWinExecInterface.POS_CONTACT
NEG_CONTACT = _MicroWinExecInterface.NEG_CONTACT
OUT_COIL = _MicroWinExecInterface.OUT_COIL
OUTI_COIL = _MicroWinExecInterface.OUTI_COIL
SET_COIL = _MicroWinExecInterface.SET_COIL
IEC_SET_COIL = _MicroWinExecInterface.IEC_SET_COIL
SETI_COIL = _MicroWinExecInterface.SETI_COIL
RESET_COIL = _MicroWinExecInterface.RESET_COIL
IEC_RESET_COIL = _MicroWinExecInterface.IEC_RESET_COIL
RESETI_COIL = _MicroWinExecInterface.RESETI_COIL
NOP_COIL = _MicroWinExecInterface.NOP_COIL
FBD_BIT_LOGIC_BEGIN = _MicroWinExecInterface.FBD_BIT_LOGIC_BEGIN
FBD_AND_LOGIC_BEGIN = _MicroWinExecInterface.FBD_AND_LOGIC_BEGIN
AND1_BOX = _MicroWinExecInterface.AND1_BOX
AND2_BOX = _MicroWinExecInterface.AND2_BOX
AND3_BOX = _MicroWinExecInterface.AND3_BOX
AND4_BOX = _MicroWinExecInterface.AND4_BOX
AND5_BOX = _MicroWinExecInterface.AND5_BOX
AND6_BOX = _MicroWinExecInterface.AND6_BOX
AND7_BOX = _MicroWinExecInterface.AND7_BOX
AND8_BOX = _MicroWinExecInterface.AND8_BOX
AND9_BOX = _MicroWinExecInterface.AND9_BOX
AND10_BOX = _MicroWinExecInterface.AND10_BOX
AND11_BOX = _MicroWinExecInterface.AND11_BOX
AND12_BOX = _MicroWinExecInterface.AND12_BOX
AND13_BOX = _MicroWinExecInterface.AND13_BOX
AND14_BOX = _MicroWinExecInterface.AND14_BOX
AND15_BOX = _MicroWinExecInterface.AND15_BOX
AND16_BOX = _MicroWinExecInterface.AND16_BOX
AND17_BOX = _MicroWinExecInterface.AND17_BOX
AND18_BOX = _MicroWinExecInterface.AND18_BOX
AND19_BOX = _MicroWinExecInterface.AND19_BOX
AND20_BOX = _MicroWinExecInterface.AND20_BOX
AND21_BOX = _MicroWinExecInterface.AND21_BOX
AND22_BOX = _MicroWinExecInterface.AND22_BOX
AND23_BOX = _MicroWinExecInterface.AND23_BOX
AND24_BOX = _MicroWinExecInterface.AND24_BOX
AND25_BOX = _MicroWinExecInterface.AND25_BOX
AND26_BOX = _MicroWinExecInterface.AND26_BOX
AND27_BOX = _MicroWinExecInterface.AND27_BOX
AND28_BOX = _MicroWinExecInterface.AND28_BOX
AND29_BOX = _MicroWinExecInterface.AND29_BOX
AND30_BOX = _MicroWinExecInterface.AND30_BOX
AND31_BOX = _MicroWinExecInterface.AND31_BOX
AND32_BOX = _MicroWinExecInterface.AND32_BOX
FBD_AND_LOGIC_END = _MicroWinExecInterface.FBD_AND_LOGIC_END
FBD_OR_LOGIC_BEGIN = _MicroWinExecInterface.FBD_OR_LOGIC_BEGIN
OR2_BOX = _MicroWinExecInterface.OR2_BOX
OR3_BOX = _MicroWinExecInterface.OR3_BOX
OR4_BOX = _MicroWinExecInterface.OR4_BOX
OR5_BOX = _MicroWinExecInterface.OR5_BOX
OR6_BOX = _MicroWinExecInterface.OR6_BOX
OR7_BOX = _MicroWinExecInterface.OR7_BOX
OR8_BOX = _MicroWinExecInterface.OR8_BOX
OR9_BOX = _MicroWinExecInterface.OR9_BOX
OR10_BOX = _MicroWinExecInterface.OR10_BOX
OR11_BOX = _MicroWinExecInterface.OR11_BOX
OR12_BOX = _MicroWinExecInterface.OR12_BOX
OR13_BOX = _MicroWinExecInterface.OR13_BOX
OR14_BOX = _MicroWinExecInterface.OR14_BOX
OR15_BOX = _MicroWinExecInterface.OR15_BOX
OR16_BOX = _MicroWinExecInterface.OR16_BOX
OR17_BOX = _MicroWinExecInterface.OR17_BOX
OR18_BOX = _MicroWinExecInterface.OR18_BOX
OR19_BOX = _MicroWinExecInterface.OR19_BOX
OR20_BOX = _MicroWinExecInterface.OR20_BOX
OR21_BOX = _MicroWinExecInterface.OR21_BOX
OR22_BOX = _MicroWinExecInterface.OR22_BOX
OR23_BOX = _MicroWinExecInterface.OR23_BOX
OR24_BOX = _MicroWinExecInterface.OR24_BOX
OR25_BOX = _MicroWinExecInterface.OR25_BOX
OR26_BOX = _MicroWinExecInterface.OR26_BOX
OR27_BOX = _MicroWinExecInterface.OR27_BOX
OR28_BOX = _MicroWinExecInterface.OR28_BOX
OR29_BOX = _MicroWinExecInterface.OR29_BOX
OR30_BOX = _MicroWinExecInterface.OR30_BOX
OR31_BOX = _MicroWinExecInterface.OR31_BOX
OR32_BOX = _MicroWinExecInterface.OR32_BOX
FBD_OR_LOGIC_END = _MicroWinExecInterface.FBD_OR_LOGIC_END
P_BOX = _MicroWinExecInterface.P_BOX
N_BOX = _MicroWinExecInterface.N_BOX
ASSIGN_BOX = _MicroWinExecInterface.ASSIGN_BOX
ASSIGNI_BOX = _MicroWinExecInterface.ASSIGNI_BOX
S_BOX = _MicroWinExecInterface.S_BOX
SI_BOX = _MicroWinExecInterface.SI_BOX
R_BOX = _MicroWinExecInterface.R_BOX
RI_BOX = _MicroWinExecInterface.RI_BOX
NOP_BOX = _MicroWinExecInterface.NOP_BOX
IEC_S_BOX = _MicroWinExecInterface.IEC_S_BOX
IEC_R_BOX = _MicroWinExecInterface.IEC_R_BOX
BOTH_BIT_LOGIC_BEGIN = _MicroWinExecInterface.BOTH_BIT_LOGIC_BEGIN
IEC_SR_BOX = _MicroWinExecInterface.IEC_SR_BOX
IEC_RS_BOX = _MicroWinExecInterface.IEC_RS_BOX
PROFINET_BEGIN = _MicroWinExecInterface.PROFINET_BEGIN
RDREC_BOX = _MicroWinExecInterface.RDREC_BOX
WRREC_BOX = _MicroWinExecInterface.WRREC_BOX
BMOVBIR_BOX = _MicroWinExecInterface.BMOVBIR_BOX
BMOVBIW_BOX = _MicroWinExecInterface.BMOVBIW_BOX
CLOCK_BEGIN = _MicroWinExecInterface.CLOCK_BEGIN
READRTC_BOX = _MicroWinExecInterface.READRTC_BOX
SETRTC_BOX = _MicroWinExecInterface.SETRTC_BOX
READRTCX_BOX = _MicroWinExecInterface.READRTCX_BOX
SETRTCX_BOX = _MicroWinExecInterface.SETRTCX_BOX
COMMEXT_BEGIN = _MicroWinExecInterface.COMMEXT_BEGIN
TCON_BOX = _MicroWinExecInterface.TCON_BOX
TSEND_BOX = _MicroWinExecInterface.TSEND_BOX
TRECV_BOX = _MicroWinExecInterface.TRECV_BOX
TDCON_BOX = _MicroWinExecInterface.TDCON_BOX
COMM_BEGIN = _MicroWinExecInterface.COMM_BEGIN
XMT_BOX = _MicroWinExecInterface.XMT_BOX
RCV_BOX = _MicroWinExecInterface.RCV_BOX
NETR_BOX = _MicroWinExecInterface.NETR_BOX
NETW_BOX = _MicroWinExecInterface.NETW_BOX
GPA_BOX = _MicroWinExecInterface.GPA_BOX
SPA_BOX = _MicroWinExecInterface.SPA_BOX
GIP_BOX = _MicroWinExecInterface.GIP_BOX
SIP_BOX = _MicroWinExecInterface.SIP_BOX
GET_BOX = _MicroWinExecInterface.GET_BOX
PUT_BOX = _MicroWinExecInterface.PUT_BOX
LAD_SIMATIC_COMPARE = _MicroWinExecInterface.LAD_SIMATIC_COMPARE
BEQ_CONTACT = _MicroWinExecInterface.BEQ_CONTACT
BNE_CONTACT = _MicroWinExecInterface.BNE_CONTACT
BGE_CONTACT = _MicroWinExecInterface.BGE_CONTACT
BLE_CONTACT = _MicroWinExecInterface.BLE_CONTACT
BGT_CONTACT = _MicroWinExecInterface.BGT_CONTACT
BLT_CONTACT = _MicroWinExecInterface.BLT_CONTACT
IEQ_CONTACT = _MicroWinExecInterface.IEQ_CONTACT
INE_CONTACT = _MicroWinExecInterface.INE_CONTACT
IGE_CONTACT = _MicroWinExecInterface.IGE_CONTACT
ILE_CONTACT = _MicroWinExecInterface.ILE_CONTACT
IGT_CONTACT = _MicroWinExecInterface.IGT_CONTACT
ILT_CONTACT = _MicroWinExecInterface.ILT_CONTACT
DEQ_CONTACT = _MicroWinExecInterface.DEQ_CONTACT
DNE_CONTACT = _MicroWinExecInterface.DNE_CONTACT
DGE_CONTACT = _MicroWinExecInterface.DGE_CONTACT
DLE_CONTACT = _MicroWinExecInterface.DLE_CONTACT
DGT_CONTACT = _MicroWinExecInterface.DGT_CONTACT
DLT_CONTACT = _MicroWinExecInterface.DLT_CONTACT
REQ_CONTACT = _MicroWinExecInterface.REQ_CONTACT
RNE_CONTACT = _MicroWinExecInterface.RNE_CONTACT
RGE_CONTACT = _MicroWinExecInterface.RGE_CONTACT
RLE_CONTACT = _MicroWinExecInterface.RLE_CONTACT
RGT_CONTACT = _MicroWinExecInterface.RGT_CONTACT
RLT_CONTACT = _MicroWinExecInterface.RLT_CONTACT
SEQ_CONTACT = _MicroWinExecInterface.SEQ_CONTACT
SNE_CONTACT = _MicroWinExecInterface.SNE_CONTACT
LAD_IEC_COMPARE = _MicroWinExecInterface.LAD_IEC_COMPARE
IEC_EQ_BOX_LD = _MicroWinExecInterface.IEC_EQ_BOX_LD
IEC_NE_BOX_LD = _MicroWinExecInterface.IEC_NE_BOX_LD
IEC_GE_BOX_LD = _MicroWinExecInterface.IEC_GE_BOX_LD
IEC_LE_BOX_LD = _MicroWinExecInterface.IEC_LE_BOX_LD
IEC_GT_BOX_LD = _MicroWinExecInterface.IEC_GT_BOX_LD
IEC_LT_BOX_LD = _MicroWinExecInterface.IEC_LT_BOX_LD
IEC_EQS_BOX_LD = _MicroWinExecInterface.IEC_EQS_BOX_LD
IEC_NES_BOX_LD = _MicroWinExecInterface.IEC_NES_BOX_LD
FBD_SIMATIC_COMPARE = _MicroWinExecInterface.FBD_SIMATIC_COMPARE
BEQ_BOX = _MicroWinExecInterface.BEQ_BOX
BNE_BOX = _MicroWinExecInterface.BNE_BOX
BGE_BOX = _MicroWinExecInterface.BGE_BOX
BLE_BOX = _MicroWinExecInterface.BLE_BOX
BGT_BOX = _MicroWinExecInterface.BGT_BOX
BLT_BOX = _MicroWinExecInterface.BLT_BOX
IEQ_BOX = _MicroWinExecInterface.IEQ_BOX
INE_BOX = _MicroWinExecInterface.INE_BOX
IGE_BOX = _MicroWinExecInterface.IGE_BOX
ILE_BOX = _MicroWinExecInterface.ILE_BOX
IGT_BOX = _MicroWinExecInterface.IGT_BOX
ILT_BOX = _MicroWinExecInterface.ILT_BOX
DEQ_BOX = _MicroWinExecInterface.DEQ_BOX
DNE_BOX = _MicroWinExecInterface.DNE_BOX
DGE_BOX = _MicroWinExecInterface.DGE_BOX
DLE_BOX = _MicroWinExecInterface.DLE_BOX
DGT_BOX = _MicroWinExecInterface.DGT_BOX
DLT_BOX = _MicroWinExecInterface.DLT_BOX
REQ_BOX = _MicroWinExecInterface.REQ_BOX
RNE_BOX = _MicroWinExecInterface.RNE_BOX
RGE_BOX = _MicroWinExecInterface.RGE_BOX
RLE_BOX = _MicroWinExecInterface.RLE_BOX
RGT_BOX = _MicroWinExecInterface.RGT_BOX
RLT_BOX = _MicroWinExecInterface.RLT_BOX
SEQ_BOX = _MicroWinExecInterface.SEQ_BOX
SNE_BOX = _MicroWinExecInterface.SNE_BOX
FBD_IEC_COMPARE = _MicroWinExecInterface.FBD_IEC_COMPARE
IEC_EQ_BOX_FBD = _MicroWinExecInterface.IEC_EQ_BOX_FBD
IEC_NE_BOX_FBD = _MicroWinExecInterface.IEC_NE_BOX_FBD
IEC_GE_BOX_FBD = _MicroWinExecInterface.IEC_GE_BOX_FBD
IEC_LE_BOX_FBD = _MicroWinExecInterface.IEC_LE_BOX_FBD
IEC_GT_BOX_FBD = _MicroWinExecInterface.IEC_GT_BOX_FBD
IEC_LT_BOX_FBD = _MicroWinExecInterface.IEC_LT_BOX_FBD
IEC_EQS_BOX_FBD = _MicroWinExecInterface.IEC_EQS_BOX_FBD
IEC_NES_BOX_FBD = _MicroWinExecInterface.IEC_NES_BOX_FBD
IEC_CONVERT_BEGIN = _MicroWinExecInterface.IEC_CONVERT_BEGIN
IEC_BTOW = _MicroWinExecInterface.IEC_BTOW
IEC_WTOB = _MicroWinExecInterface.IEC_WTOB
IEC_WTODW = _MicroWinExecInterface.IEC_WTODW
IEC_DWTOW = _MicroWinExecInterface.IEC_DWTOW
IEC_DWTOR = _MicroWinExecInterface.IEC_DWTOR
IEC_RTODW = _MicroWinExecInterface.IEC_RTODW
IEC_BCDTOI = _MicroWinExecInterface.IEC_BCDTOI
IEC_ITOBCD = _MicroWinExecInterface.IEC_ITOBCD
IEC_ITOS = _MicroWinExecInterface.IEC_ITOS
IEC_DTOS = _MicroWinExecInterface.IEC_DTOS
IEC_RTOS = _MicroWinExecInterface.IEC_RTOS
IEC_STOI = _MicroWinExecInterface.IEC_STOI
IEC_STOD = _MicroWinExecInterface.IEC_STOD
IEC_STOR = _MicroWinExecInterface.IEC_STOR
SIMATIC_CONVERT_BEGIN = _MicroWinExecInterface.SIMATIC_CONVERT_BEGIN
BTI_BOX = _MicroWinExecInterface.BTI_BOX
ITB_BOX = _MicroWinExecInterface.ITB_BOX
IDI_BOX = _MicroWinExecInterface.IDI_BOX
DII_BOX = _MicroWinExecInterface.DII_BOX
DIR_BOX = _MicroWinExecInterface.DIR_BOX
BCDI_BOX = _MicroWinExecInterface.BCDI_BOX
IBCD_BOX = _MicroWinExecInterface.IBCD_BOX
ROUND_BOX = _MicroWinExecInterface.ROUND_BOX
TRUNC_BOX = _MicroWinExecInterface.TRUNC_BOX
WTA_BOX = _MicroWinExecInterface.WTA_BOX
DTA_BOX = _MicroWinExecInterface.DTA_BOX
RTA_BOX = _MicroWinExecInterface.RTA_BOX
DECO_BOX = _MicroWinExecInterface.DECO_BOX
ENCO_BOX = _MicroWinExecInterface.ENCO_BOX
ATH_BOX = _MicroWinExecInterface.ATH_BOX
HTA_BOX = _MicroWinExecInterface.HTA_BOX
SEG_BOX = _MicroWinExecInterface.SEG_BOX
RTS_BOX = _MicroWinExecInterface.RTS_BOX
DTS_BOX = _MicroWinExecInterface.DTS_BOX
ITS_BOX = _MicroWinExecInterface.ITS_BOX
STR_BOX = _MicroWinExecInterface.STR_BOX
STD_BOX = _MicroWinExecInterface.STD_BOX
STI_BOX = _MicroWinExecInterface.STI_BOX
IEC_COUNTER_BEGIN = _MicroWinExecInterface.IEC_COUNTER_BEGIN
IEC_CTU_BOX = _MicroWinExecInterface.IEC_CTU_BOX
IEC_CTD_BOX = _MicroWinExecInterface.IEC_CTD_BOX
IEC_CTUD_BOX = _MicroWinExecInterface.IEC_CTUD_BOX
SIMATIC_COUNTER_BEGIN = _MicroWinExecInterface.SIMATIC_COUNTER_BEGIN
CTU_BOX = _MicroWinExecInterface.CTU_BOX
CTD_BOX = _MicroWinExecInterface.CTD_BOX
CTUD_BOX = _MicroWinExecInterface.CTUD_BOX
HDEF_BOX = _MicroWinExecInterface.HDEF_BOX
HSC_BOX = _MicroWinExecInterface.HSC_BOX
PLS_BOX = _MicroWinExecInterface.PLS_BOX
PTO_BOX = _MicroWinExecInterface.PTO_BOX
IEC_MATH_BEGIN = _MicroWinExecInterface.IEC_MATH_BEGIN
IEC_ADD_BOX = _MicroWinExecInterface.IEC_ADD_BOX
IEC_SUB_BOX = _MicroWinExecInterface.IEC_SUB_BOX
IEC_MUL_BOX = _MicroWinExecInterface.IEC_MUL_BOX
IEC_DIV_BOX = _MicroWinExecInterface.IEC_DIV_BOX
IEC_INC_BOX = _MicroWinExecInterface.IEC_INC_BOX
IEC_DEC_BOX = _MicroWinExecInterface.IEC_DEC_BOX
FLOAT_MATH_BEGIN = _MicroWinExecInterface.FLOAT_MATH_BEGIN
ADDR_BOX = _MicroWinExecInterface.ADDR_BOX
SUBR_BOX = _MicroWinExecInterface.SUBR_BOX
MULR_BOX = _MicroWinExecInterface.MULR_BOX
DIVR_BOX = _MicroWinExecInterface.DIVR_BOX
SQRT_BOX = _MicroWinExecInterface.SQRT_BOX
PID_BOX = _MicroWinExecInterface.PID_BOX
SIN_BOX = _MicroWinExecInterface.SIN_BOX
COS_BOX = _MicroWinExecInterface.COS_BOX
TAN_BOX = _MicroWinExecInterface.TAN_BOX
LN_BOX = _MicroWinExecInterface.LN_BOX
EXP_BOX = _MicroWinExecInterface.EXP_BOX
INT_MATH_BEGIN = _MicroWinExecInterface.INT_MATH_BEGIN
ADDI_BOX = _MicroWinExecInterface.ADDI_BOX
ADDDI_BOX = _MicroWinExecInterface.ADDDI_BOX
SUBI_BOX = _MicroWinExecInterface.SUBI_BOX
SUBDI_BOX = _MicroWinExecInterface.SUBDI_BOX
MUL_BOX = _MicroWinExecInterface.MUL_BOX
MULI_BOX = _MicroWinExecInterface.MULI_BOX
MULDI_BOX = _MicroWinExecInterface.MULDI_BOX
DIV_BOX = _MicroWinExecInterface.DIV_BOX
DIVI_BOX = _MicroWinExecInterface.DIVI_BOX
DIVDI_BOX = _MicroWinExecInterface.DIVDI_BOX
INCB_BOX = _MicroWinExecInterface.INCB_BOX
INCW_BOX = _MicroWinExecInterface.INCW_BOX
INCDW_BOX = _MicroWinExecInterface.INCDW_BOX
DECB_BOX = _MicroWinExecInterface.DECB_BOX
DECW_BOX = _MicroWinExecInterface.DECW_BOX
DECDW_BOX = _MicroWinExecInterface.DECDW_BOX
LAD_INT_BEGIN = _MicroWinExecInterface.LAD_INT_BEGIN
ENI_COIL = _MicroWinExecInterface.ENI_COIL
DISI_COIL = _MicroWinExecInterface.DISI_COIL
RETI_COIL = _MicroWinExecInterface.RETI_COIL
FBD_INT_BEGIN = _MicroWinExecInterface.FBD_INT_BEGIN
ENI_BOX = _MicroWinExecInterface.ENI_BOX
DISI_BOX = _MicroWinExecInterface.DISI_BOX
RETI_BOX = _MicroWinExecInterface.RETI_BOX
BOTH_INT_BEGIN = _MicroWinExecInterface.BOTH_INT_BEGIN
ATCH_BOX = _MicroWinExecInterface.ATCH_BOX
DTCH_BOX = _MicroWinExecInterface.DTCH_BOX
CLR_EVNT_BOX = _MicroWinExecInterface.CLR_EVNT_BOX
SIMATIC_LOGIC_BEGIN = _MicroWinExecInterface.SIMATIC_LOGIC_BEGIN
INVB_BOX = _MicroWinExecInterface.INVB_BOX
INVW_BOX = _MicroWinExecInterface.INVW_BOX
INVDW_BOX = _MicroWinExecInterface.INVDW_BOX
WANDB_BOX = _MicroWinExecInterface.WANDB_BOX
WANDW_BOX = _MicroWinExecInterface.WANDW_BOX
WANDDW_BOX = _MicroWinExecInterface.WANDDW_BOX
WORB_BOX = _MicroWinExecInterface.WORB_BOX
WORW_BOX = _MicroWinExecInterface.WORW_BOX
WORDW_BOX = _MicroWinExecInterface.WORDW_BOX
WXORB_BOX = _MicroWinExecInterface.WXORB_BOX
WXORW_BOX = _MicroWinExecInterface.WXORW_BOX
WXORDW_BOX = _MicroWinExecInterface.WXORDW_BOX
SIMATIC_MEMCART_BEGIN = _MicroWinExecInterface.SIMATIC_MEMCART_BEGIN
LOAD_RCP_BOX = _MicroWinExecInterface.LOAD_RCP_BOX
STORE_RCP_BOX = _MicroWinExecInterface.STORE_RCP_BOX
STORE_DL_BOX = _MicroWinExecInterface.STORE_DL_BOX
IEC_LOGIC_BEGIN = _MicroWinExecInterface.IEC_LOGIC_BEGIN
IEC_NOT_BOX = _MicroWinExecInterface.IEC_NOT_BOX
IEC_AND_BOX = _MicroWinExecInterface.IEC_AND_BOX
IEC_OR_BOX = _MicroWinExecInterface.IEC_OR_BOX
IEC_XOR_BOX = _MicroWinExecInterface.IEC_XOR_BOX
IEC_MOVE_BEGIN = _MicroWinExecInterface.IEC_MOVE_BEGIN
IEC_MOV_BOX = _MicroWinExecInterface.IEC_MOV_BOX
IEC_BLKMOV_BOX = _MicroWinExecInterface.IEC_BLKMOV_BOX
SIMATIC_MOVE_BEGIN = _MicroWinExecInterface.SIMATIC_MOVE_BEGIN
MOVB_BOX = _MicroWinExecInterface.MOVB_BOX
MOVW_BOX = _MicroWinExecInterface.MOVW_BOX
MOVDW_BOX = _MicroWinExecInterface.MOVDW_BOX
MOVR_BOX = _MicroWinExecInterface.MOVR_BOX
BLKMOVB_BOX = _MicroWinExecInterface.BLKMOVB_BOX
BLKMOVW_BOX = _MicroWinExecInterface.BLKMOVW_BOX
BLKMOVDW_BOX = _MicroWinExecInterface.BLKMOVDW_BOX
SWAP_BOX = _MicroWinExecInterface.SWAP_BOX
RBI_BOX = _MicroWinExecInterface.RBI_BOX
WBI_BOX = _MicroWinExecInterface.WBI_BOX
BOTH_PROG_CONTROL_BEGIN = _MicroWinExecInterface.BOTH_PROG_CONTROL_BEGIN
FOR_BOX = _MicroWinExecInterface.FOR_BOX
LAD_PROG_CONTROL_BEGIN = _MicroWinExecInterface.LAD_PROG_CONTROL_BEGIN
NEXT_COIL = _MicroWinExecInterface.NEXT_COIL
JMP_COIL = _MicroWinExecInterface.JMP_COIL
LBL_BOX = _MicroWinExecInterface.LBL_BOX
SCR_BOX = _MicroWinExecInterface.SCR_BOX
SCRT_COIL = _MicroWinExecInterface.SCRT_COIL
SCRE_COIL = _MicroWinExecInterface.SCRE_COIL
RET_COIL = _MicroWinExecInterface.RET_COIL
END_COIL = _MicroWinExecInterface.END_COIL
STOP_COIL = _MicroWinExecInterface.STOP_COIL
WDR_COIL = _MicroWinExecInterface.WDR_COIL
FBD_PROG_CONTROL_BEGIN = _MicroWinExecInterface.FBD_PROG_CONTROL_BEGIN
NEXT_BOX = _MicroWinExecInterface.NEXT_BOX
JMP_BOX = _MicroWinExecInterface.JMP_BOX
LBL_BOX_FBD = _MicroWinExecInterface.LBL_BOX_FBD
SCR_BOX_FBD = _MicroWinExecInterface.SCR_BOX_FBD
SCRT_BOX = _MicroWinExecInterface.SCRT_BOX
SCRE_BOX = _MicroWinExecInterface.SCRE_BOX
RET_BOX = _MicroWinExecInterface.RET_BOX
END_BOX = _MicroWinExecInterface.END_BOX
STOP_BOX = _MicroWinExecInterface.STOP_BOX
WDR_BOX = _MicroWinExecInterface.WDR_BOX
CSCRE_BOX = _MicroWinExecInterface.CSCRE_BOX
DIAG_LED_BOX = _MicroWinExecInterface.DIAG_LED_BOX
IM_CMD_BOX = _MicroWinExecInterface.IM_CMD_BOX
GERR_BOX = _MicroWinExecInterface.GERR_BOX
IEC_SHIFT_BEGIN = _MicroWinExecInterface.IEC_SHIFT_BEGIN
IEC_SHL_BOX = _MicroWinExecInterface.IEC_SHL_BOX
IEC_SHR_BOX = _MicroWinExecInterface.IEC_SHR_BOX
IEC_ROL_BOX = _MicroWinExecInterface.IEC_ROL_BOX
IEC_ROR_BOX = _MicroWinExecInterface.IEC_ROR_BOX
SIMATIC_SHIFT_BEGIN = _MicroWinExecInterface.SIMATIC_SHIFT_BEGIN
SLB_BOX = _MicroWinExecInterface.SLB_BOX
SLW_BOX = _MicroWinExecInterface.SLW_BOX
SLDW_BOX = _MicroWinExecInterface.SLDW_BOX
SRB_BOX = _MicroWinExecInterface.SRB_BOX
SRW_BOX = _MicroWinExecInterface.SRW_BOX
SRDW_BOX = _MicroWinExecInterface.SRDW_BOX
RLB_BOX = _MicroWinExecInterface.RLB_BOX
RLW_BOX = _MicroWinExecInterface.RLW_BOX
RLDW_BOX = _MicroWinExecInterface.RLDW_BOX
RRB_BOX = _MicroWinExecInterface.RRB_BOX
RRW_BOX = _MicroWinExecInterface.RRW_BOX
RRDW_BOX = _MicroWinExecInterface.RRDW_BOX
SHRB_BOX = _MicroWinExecInterface.SHRB_BOX
TABLE_BEGIN = _MicroWinExecInterface.TABLE_BEGIN
LIFO_BOX = _MicroWinExecInterface.LIFO_BOX
FIFO_BOX = _MicroWinExecInterface.FIFO_BOX
ADTTBL_BOX = _MicroWinExecInterface.ADTTBL_BOX
FILLN_BOX = _MicroWinExecInterface.FILLN_BOX
TBLFIND_BOX = _MicroWinExecInterface.TBLFIND_BOX
SIMATIC_TIMER_BEGIN = _MicroWinExecInterface.SIMATIC_TIMER_BEGIN
TON_BOX = _MicroWinExecInterface.TON_BOX
TONR_BOX = _MicroWinExecInterface.TONR_BOX
TOF_BOX = _MicroWinExecInterface.TOF_BOX
BGN_ITIME_BOX = _MicroWinExecInterface.BGN_ITIME_BOX
CAL_ITIME_BOX = _MicroWinExecInterface.CAL_ITIME_BOX
IEC_TIMER_BEGIN = _MicroWinExecInterface.IEC_TIMER_BEGIN
IEC_TON_BOX = _MicroWinExecInterface.IEC_TON_BOX
IEC_TOF_BOX = _MicroWinExecInterface.IEC_TOF_BOX
IEC_TP_BOX = _MicroWinExecInterface.IEC_TP_BOX
STL_BIT_LOGIC_BEGIN = _MicroWinExecInterface.STL_BIT_LOGIC_BEGIN
STL_LD = _MicroWinExecInterface.STL_LD
STL_A = _MicroWinExecInterface.STL_A
STL_O = _MicroWinExecInterface.STL_O
STL_LDN = _MicroWinExecInterface.STL_LDN
STL_AN = _MicroWinExecInterface.STL_AN
STL_ON = _MicroWinExecInterface.STL_ON
STL_LDI = _MicroWinExecInterface.STL_LDI
STL_AI = _MicroWinExecInterface.STL_AI
STL_OI = _MicroWinExecInterface.STL_OI
STL_LDNI = _MicroWinExecInterface.STL_LDNI
STL_ANI = _MicroWinExecInterface.STL_ANI
STL_ONI = _MicroWinExecInterface.STL_ONI
STL_NOT = _MicroWinExecInterface.STL_NOT
STL_EU = _MicroWinExecInterface.STL_EU
STL_NEU = _MicroWinExecInterface.STL_NEU
STL_ED = _MicroWinExecInterface.STL_ED
STL_NED = _MicroWinExecInterface.STL_NED
STL_ALD = _MicroWinExecInterface.STL_ALD
STL_OLD = _MicroWinExecInterface.STL_OLD
STL_LPS = _MicroWinExecInterface.STL_LPS
STL_LRD = _MicroWinExecInterface.STL_LRD
STL_LPP = _MicroWinExecInterface.STL_LPP
STL_OUT = _MicroWinExecInterface.STL_OUT
STL_OUTI = _MicroWinExecInterface.STL_OUTI
STL_S = _MicroWinExecInterface.STL_S
STL_SI = _MicroWinExecInterface.STL_SI
STL_R = _MicroWinExecInterface.STL_R
STL_RI = _MicroWinExecInterface.STL_RI
STL_NOP = _MicroWinExecInterface.STL_NOP
STL_LDS = _MicroWinExecInterface.STL_LDS
STL_CLOCK_BEGIN = _MicroWinExecInterface.STL_CLOCK_BEGIN
STL_TODR = _MicroWinExecInterface.STL_TODR
STL_TODW = _MicroWinExecInterface.STL_TODW
STL_TODRX = _MicroWinExecInterface.STL_TODRX
STL_TODWX = _MicroWinExecInterface.STL_TODWX
STL_COMM_BEGIN = _MicroWinExecInterface.STL_COMM_BEGIN
STL_XMT = _MicroWinExecInterface.STL_XMT
STL_RCV = _MicroWinExecInterface.STL_RCV
STL_NETR = _MicroWinExecInterface.STL_NETR
STL_NETW = _MicroWinExecInterface.STL_NETW
STL_GPA = _MicroWinExecInterface.STL_GPA
STL_SPA = _MicroWinExecInterface.STL_SPA
STL_GIP = _MicroWinExecInterface.STL_GIP
STL_SIP = _MicroWinExecInterface.STL_SIP
STL_GET = _MicroWinExecInterface.STL_GET
STL_PUT = _MicroWinExecInterface.STL_PUT
STL_COMPARE_BEGIN = _MicroWinExecInterface.STL_COMPARE_BEGIN
STL_LDBE = _MicroWinExecInterface.STL_LDBE
STL_ABE = _MicroWinExecInterface.STL_ABE
STL_OBE = _MicroWinExecInterface.STL_OBE
STL_LDBNE = _MicroWinExecInterface.STL_LDBNE
STL_ABNE = _MicroWinExecInterface.STL_ABNE
STL_OBNE = _MicroWinExecInterface.STL_OBNE
STL_LDBGE = _MicroWinExecInterface.STL_LDBGE
STL_ABGE = _MicroWinExecInterface.STL_ABGE
STL_OBGE = _MicroWinExecInterface.STL_OBGE
STL_LDBLE = _MicroWinExecInterface.STL_LDBLE
STL_ABLE = _MicroWinExecInterface.STL_ABLE
STL_OBLE = _MicroWinExecInterface.STL_OBLE
STL_LDBGT = _MicroWinExecInterface.STL_LDBGT
STL_ABGT = _MicroWinExecInterface.STL_ABGT
STL_OBGT = _MicroWinExecInterface.STL_OBGT
STL_LDBLT = _MicroWinExecInterface.STL_LDBLT
STL_ABLT = _MicroWinExecInterface.STL_ABLT
STL_OBLT = _MicroWinExecInterface.STL_OBLT
STL_LDWE = _MicroWinExecInterface.STL_LDWE
STL_AWE = _MicroWinExecInterface.STL_AWE
STL_OWE = _MicroWinExecInterface.STL_OWE
STL_LDWNE = _MicroWinExecInterface.STL_LDWNE
STL_AWNE = _MicroWinExecInterface.STL_AWNE
STL_OWNE = _MicroWinExecInterface.STL_OWNE
STL_LDWGE = _MicroWinExecInterface.STL_LDWGE
STL_AWGE = _MicroWinExecInterface.STL_AWGE
STL_OWGE = _MicroWinExecInterface.STL_OWGE
STL_LDWLE = _MicroWinExecInterface.STL_LDWLE
STL_AWLE = _MicroWinExecInterface.STL_AWLE
STL_OWLE = _MicroWinExecInterface.STL_OWLE
STL_LDWGT = _MicroWinExecInterface.STL_LDWGT
STL_AWGT = _MicroWinExecInterface.STL_AWGT
STL_OWGT = _MicroWinExecInterface.STL_OWGT
STL_LDWLT = _MicroWinExecInterface.STL_LDWLT
STL_AWLT = _MicroWinExecInterface.STL_AWLT
STL_OWLT = _MicroWinExecInterface.STL_OWLT
STL_LDDE = _MicroWinExecInterface.STL_LDDE
STL_ADE = _MicroWinExecInterface.STL_ADE
STL_ODE = _MicroWinExecInterface.STL_ODE
STL_LDDNE = _MicroWinExecInterface.STL_LDDNE
STL_ADNE = _MicroWinExecInterface.STL_ADNE
STL_ODNE = _MicroWinExecInterface.STL_ODNE
STL_LDDGE = _MicroWinExecInterface.STL_LDDGE
STL_ADGE = _MicroWinExecInterface.STL_ADGE
STL_ODGE = _MicroWinExecInterface.STL_ODGE
STL_LDDLE = _MicroWinExecInterface.STL_LDDLE
STL_ADLE = _MicroWinExecInterface.STL_ADLE
STL_ODLE = _MicroWinExecInterface.STL_ODLE
STL_LDDGT = _MicroWinExecInterface.STL_LDDGT
STL_ADGT = _MicroWinExecInterface.STL_ADGT
STL_ODGT = _MicroWinExecInterface.STL_ODGT
STL_LDDLT = _MicroWinExecInterface.STL_LDDLT
STL_ADLT = _MicroWinExecInterface.STL_ADLT
STL_ODLT = _MicroWinExecInterface.STL_ODLT
STL_LDRE = _MicroWinExecInterface.STL_LDRE
STL_ARE = _MicroWinExecInterface.STL_ARE
STL_ORE = _MicroWinExecInterface.STL_ORE
STL_LDRNE = _MicroWinExecInterface.STL_LDRNE
STL_ARNE = _MicroWinExecInterface.STL_ARNE
STL_ORNE = _MicroWinExecInterface.STL_ORNE
STL_LDRGE = _MicroWinExecInterface.STL_LDRGE
STL_ARGE = _MicroWinExecInterface.STL_ARGE
STL_ORGE = _MicroWinExecInterface.STL_ORGE
STL_LDRLE = _MicroWinExecInterface.STL_LDRLE
STL_ARLE = _MicroWinExecInterface.STL_ARLE
STL_ORLE = _MicroWinExecInterface.STL_ORLE
STL_LDRGT = _MicroWinExecInterface.STL_LDRGT
STL_ARGT = _MicroWinExecInterface.STL_ARGT
STL_ORGT = _MicroWinExecInterface.STL_ORGT
STL_LDRLT = _MicroWinExecInterface.STL_LDRLT
STL_ARLT = _MicroWinExecInterface.STL_ARLT
STL_ORLT = _MicroWinExecInterface.STL_ORLT
STL_LDSE = _MicroWinExecInterface.STL_LDSE
STL_ASE = _MicroWinExecInterface.STL_ASE
STL_OSE = _MicroWinExecInterface.STL_OSE
STL_LDSNE = _MicroWinExecInterface.STL_LDSNE
STL_ASNE = _MicroWinExecInterface.STL_ASNE
STL_OSNE = _MicroWinExecInterface.STL_OSNE
STL_PROFINET_BEGIN = _MicroWinExecInterface.STL_PROFINET_BEGIN
STL_RDREC = _MicroWinExecInterface.STL_RDREC
STL_WRREC = _MicroWinExecInterface.STL_WRREC
STL_BMIR = _MicroWinExecInterface.STL_BMIR
STL_BMIW = _MicroWinExecInterface.STL_BMIW
STL_COMMEXT_BEGIN = _MicroWinExecInterface.STL_COMMEXT_BEGIN
STL_TCON = _MicroWinExecInterface.STL_TCON
STL_TSEND = _MicroWinExecInterface.STL_TSEND
STL_TRECV = _MicroWinExecInterface.STL_TRECV
STL_TDCON = _MicroWinExecInterface.STL_TDCON
STL_CONVERT_BEGIN = _MicroWinExecInterface.STL_CONVERT_BEGIN
STL_BTW = _MicroWinExecInterface.STL_BTW
STL_WTB = _MicroWinExecInterface.STL_WTB
STL_WTD = _MicroWinExecInterface.STL_WTD
STL_DTW = _MicroWinExecInterface.STL_DTW
STL_DTR = _MicroWinExecInterface.STL_DTR
STL_ROUND = _MicroWinExecInterface.STL_ROUND
STL_TRUNC = _MicroWinExecInterface.STL_TRUNC
STL_BCDI = _MicroWinExecInterface.STL_BCDI
STL_IBCD = _MicroWinExecInterface.STL_IBCD
STL_ITA = _MicroWinExecInterface.STL_ITA
STL_DTA = _MicroWinExecInterface.STL_DTA
STL_RTA = _MicroWinExecInterface.STL_RTA
STL_DECO = _MicroWinExecInterface.STL_DECO
STL_ENCO = _MicroWinExecInterface.STL_ENCO
STL_ATH = _MicroWinExecInterface.STL_ATH
STL_HTA = _MicroWinExecInterface.STL_HTA
STL_SEG = _MicroWinExecInterface.STL_SEG
STL_RTS = _MicroWinExecInterface.STL_RTS
STL_DTS = _MicroWinExecInterface.STL_DTS
STL_ITS = _MicroWinExecInterface.STL_ITS
STL_STR = _MicroWinExecInterface.STL_STR
STL_STD = _MicroWinExecInterface.STL_STD
STL_STI = _MicroWinExecInterface.STL_STI
STL_COUNTER_BEGIN = _MicroWinExecInterface.STL_COUNTER_BEGIN
STL_CTU = _MicroWinExecInterface.STL_CTU
STL_CTD = _MicroWinExecInterface.STL_CTD
STL_CTUD = _MicroWinExecInterface.STL_CTUD
STL_HDEF = _MicroWinExecInterface.STL_HDEF
STL_HSC = _MicroWinExecInterface.STL_HSC
STL_PLS = _MicroWinExecInterface.STL_PLS
STL_PTO = _MicroWinExecInterface.STL_PTO
STL_FLOAT_MATH = _MicroWinExecInterface.STL_FLOAT_MATH
STL_ADDR = _MicroWinExecInterface.STL_ADDR
STL_SUBR = _MicroWinExecInterface.STL_SUBR
STL_MULR = _MicroWinExecInterface.STL_MULR
STL_DIVR = _MicroWinExecInterface.STL_DIVR
STL_SQRT = _MicroWinExecInterface.STL_SQRT
STL_PID = _MicroWinExecInterface.STL_PID
STL_SIN = _MicroWinExecInterface.STL_SIN
STL_COS = _MicroWinExecInterface.STL_COS
STL_TAN = _MicroWinExecInterface.STL_TAN
STL_LN = _MicroWinExecInterface.STL_LN
STL_EXP = _MicroWinExecInterface.STL_EXP
STL_INTEGER_MATH = _MicroWinExecInterface.STL_INTEGER_MATH
STL_ADDI = _MicroWinExecInterface.STL_ADDI
STL_ADDDI = _MicroWinExecInterface.STL_ADDDI
STL_SUBI = _MicroWinExecInterface.STL_SUBI
STL_SUBDI = _MicroWinExecInterface.STL_SUBDI
STL_MUL = _MicroWinExecInterface.STL_MUL
STL_MULI = _MicroWinExecInterface.STL_MULI
STL_MULDI = _MicroWinExecInterface.STL_MULDI
STL_DIV = _MicroWinExecInterface.STL_DIV
STL_DIVI = _MicroWinExecInterface.STL_DIVI
STL_DIVDI = _MicroWinExecInterface.STL_DIVDI
STL_INCB = _MicroWinExecInterface.STL_INCB
STL_INCW = _MicroWinExecInterface.STL_INCW
STL_INCD = _MicroWinExecInterface.STL_INCD
STL_DECB = _MicroWinExecInterface.STL_DECB
STL_DECW = _MicroWinExecInterface.STL_DECW
STL_DECD = _MicroWinExecInterface.STL_DECD
STL_INT_BEGIN = _MicroWinExecInterface.STL_INT_BEGIN
STL_INT = _MicroWinExecInterface.STL_INT
STL_RETI = _MicroWinExecInterface.STL_RETI
STL_CRETI = _MicroWinExecInterface.STL_CRETI
STL_ENI = _MicroWinExecInterface.STL_ENI
STL_DISI = _MicroWinExecInterface.STL_DISI
STL_ATCH = _MicroWinExecInterface.STL_ATCH
STL_DTCH = _MicroWinExecInterface.STL_DTCH
STL_CLR_EVNT = _MicroWinExecInterface.STL_CLR_EVNT
STL_LOGIC_BEGIN = _MicroWinExecInterface.STL_LOGIC_BEGIN
STL_INVB = _MicroWinExecInterface.STL_INVB
STL_INVW = _MicroWinExecInterface.STL_INVW
STL_INVD = _MicroWinExecInterface.STL_INVD
STL_ANDB = _MicroWinExecInterface.STL_ANDB
STL_ANDW = _MicroWinExecInterface.STL_ANDW
STL_ANDD = _MicroWinExecInterface.STL_ANDD
STL_ORB = _MicroWinExecInterface.STL_ORB
STL_ORW = _MicroWinExecInterface.STL_ORW
STL_ORD = _MicroWinExecInterface.STL_ORD
STL_XORB = _MicroWinExecInterface.STL_XORB
STL_XORW = _MicroWinExecInterface.STL_XORW
STL_XORD = _MicroWinExecInterface.STL_XORD
STL_LRCP = _MicroWinExecInterface.STL_LRCP
STL_SRCP = _MicroWinExecInterface.STL_SRCP
STL_SDL = _MicroWinExecInterface.STL_SDL
STL_MOVE_BEGIN = _MicroWinExecInterface.STL_MOVE_BEGIN
STL_MOVB = _MicroWinExecInterface.STL_MOVB
STL_MOVW = _MicroWinExecInterface.STL_MOVW
STL_MOVD = _MicroWinExecInterface.STL_MOVD
STL_MOVR = _MicroWinExecInterface.STL_MOVR
STL_BMB = _MicroWinExecInterface.STL_BMB
STL_BMW = _MicroWinExecInterface.STL_BMW
STL_BMD = _MicroWinExecInterface.STL_BMD
STL_SWAP = _MicroWinExecInterface.STL_SWAP
STL_RBI = _MicroWinExecInterface.STL_RBI
STL_WBI = _MicroWinExecInterface.STL_WBI
STL_PROG_CONTROL_BEGIN = _MicroWinExecInterface.STL_PROG_CONTROL_BEGIN
STL_FOR = _MicroWinExecInterface.STL_FOR
STL_NEXT = _MicroWinExecInterface.STL_NEXT
STL_JMP = _MicroWinExecInterface.STL_JMP
STL_LBL = _MicroWinExecInterface.STL_LBL
STL_SCR = _MicroWinExecInterface.STL_SCR
STL_SCRT = _MicroWinExecInterface.STL_SCRT
STL_SCRE = _MicroWinExecInterface.STL_SCRE
STL_SBR = _MicroWinExecInterface.STL_SBR
STL_CRET = _MicroWinExecInterface.STL_CRET
STL_RET = _MicroWinExecInterface.STL_RET
STL_END = _MicroWinExecInterface.STL_END
STL_MEND = _MicroWinExecInterface.STL_MEND
STL_STOP = _MicroWinExecInterface.STL_STOP
STL_WDR = _MicroWinExecInterface.STL_WDR
STL_HIDE = _MicroWinExecInterface.STL_HIDE
STL_INFO = _MicroWinExecInterface.STL_INFO
STL_CSCRE = _MicroWinExecInterface.STL_CSCRE
STL_DIAG_LED = _MicroWinExecInterface.STL_DIAG_LED
STL_IM_CMD = _MicroWinExecInterface.STL_IM_CMD
STL_XTIME = _MicroWinExecInterface.STL_XTIME
STL_CAXIS = _MicroWinExecInterface.STL_CAXIS
STL_GERR = _MicroWinExecInterface.STL_GERR
STL_RDPOS = _MicroWinExecInterface.STL_RDPOS
STL_SHIFT_BEGIN = _MicroWinExecInterface.STL_SHIFT_BEGIN
STL_SLB = _MicroWinExecInterface.STL_SLB
STL_SLW = _MicroWinExecInterface.STL_SLW
STL_SLD = _MicroWinExecInterface.STL_SLD
STL_SRB = _MicroWinExecInterface.STL_SRB
STL_SRW = _MicroWinExecInterface.STL_SRW
STL_SRD = _MicroWinExecInterface.STL_SRD
STL_RLB = _MicroWinExecInterface.STL_RLB
STL_RLW = _MicroWinExecInterface.STL_RLW
STL_RLD = _MicroWinExecInterface.STL_RLD
STL_RRB = _MicroWinExecInterface.STL_RRB
STL_RRW = _MicroWinExecInterface.STL_RRW
STL_RRD = _MicroWinExecInterface.STL_RRD
STL_SHRB = _MicroWinExecInterface.STL_SHRB
STL_TABLE_BEGIN = _MicroWinExecInterface.STL_TABLE_BEGIN
STL_FILL = _MicroWinExecInterface.STL_FILL
STL_ATT = _MicroWinExecInterface.STL_ATT
STL_FNDE = _MicroWinExecInterface.STL_FNDE
STL_FNDNE = _MicroWinExecInterface.STL_FNDNE
STL_FNDL = _MicroWinExecInterface.STL_FNDL
STL_FNDG = _MicroWinExecInterface.STL_FNDG
STL_LIFO = _MicroWinExecInterface.STL_LIFO
STL_FIFO = _MicroWinExecInterface.STL_FIFO
STL_TIMER_BEGIN = _MicroWinExecInterface.STL_TIMER_BEGIN
STL_TON = _MicroWinExecInterface.STL_TON
STL_TONR = _MicroWinExecInterface.STL_TONR
STL_TOF = _MicroWinExecInterface.STL_TOF
STL_BGN_ITIME = _MicroWinExecInterface.STL_BGN_ITIME
STL_CAL_ITIME = _MicroWinExecInterface.STL_CAL_ITIME
STL_ENO_BEGIN = _MicroWinExecInterface.STL_ENO_BEGIN
STL_AENO = _MicroWinExecInterface.STL_AENO
STL_NON_SIGS_BEGIN = _MicroWinExecInterface.STL_NON_SIGS_BEGIN
STL_IEC_SR = _MicroWinExecInterface.STL_IEC_SR
STL_IEC_RS = _MicroWinExecInterface.STL_IEC_RS
STL_IEC_CTU = _MicroWinExecInterface.STL_IEC_CTU
STL_IEC_CTD = _MicroWinExecInterface.STL_IEC_CTD
STL_IEC_CTUD = _MicroWinExecInterface.STL_IEC_CTUD
LEN_BOX = _MicroWinExecInterface.LEN_BOX
COPY_BOX = _MicroWinExecInterface.COPY_BOX
SUB_COPY_BOX = _MicroWinExecInterface.SUB_COPY_BOX
CONCAT_BOX = _MicroWinExecInterface.CONCAT_BOX
FIND_STR_BOX = _MicroWinExecInterface.FIND_STR_BOX
FIND_CHAR_BOX = _MicroWinExecInterface.FIND_CHAR_BOX
STL_SLEN = _MicroWinExecInterface.STL_SLEN
STL_SCPY = _MicroWinExecInterface.STL_SCPY
STL_SCPYS = _MicroWinExecInterface.STL_SCPYS
STL_SAPP = _MicroWinExecInterface.STL_SAPP
STL_FNDS = _MicroWinExecInterface.STL_FNDS
STL_FNDC = _MicroWinExecInterface.STL_FNDC
DB_BYTE = _MicroWinExecInterface.DB_BYTE
DB_WORD = _MicroWinExecInterface.DB_WORD
DB_DWORD = _MicroWinExecInterface.DB_DWORD
DB_BYTE_VAR = _MicroWinExecInterface.DB_BYTE_VAR
STL_CALL = _MicroWinExecInterface.STL_CALL
LAST_INSTRUCTION_SIGNATURE = _MicroWinExecInterface.LAST_INSTRUCTION_SIGNATURE
class sSIGCOMPASS_DATA_TYPE_MASK(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ANY_BIT = property(_MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_ANY_BIT_get, _MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_ANY_BIT_set)
    BOOL = property(_MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_BOOL_get, _MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_BOOL_set)
    BYTE = property(_MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_BYTE_get, _MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_BYTE_set)
    WORD = property(_MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_WORD_get, _MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_WORD_set)
    DWORD = property(_MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_DWORD_get, _MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_DWORD_set)
    ANY_INT = property(_MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_ANY_INT_get, _MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_ANY_INT_set)
    INT = property(_MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_INT_get, _MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_INT_set)
    DINT = property(_MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_DINT_get, _MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_DINT_set)
    USINT = property(_MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_USINT_get, _MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_USINT_set)
    UINT = property(_MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_UINT_get, _MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_UINT_set)
    UDINT = property(_MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_UDINT_get, _MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_UDINT_set)
    ANY_REAL = property(_MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_ANY_REAL_get, _MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_ANY_REAL_set)
    REAL = property(_MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_REAL_get, _MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_REAL_set)
    ANY_TIME = property(_MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_ANY_TIME_get, _MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_ANY_TIME_set)
    TIME = property(_MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_TIME_get, _MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_TIME_set)
    SUBROUTINE = property(_MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_SUBROUTINE_get, _MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_SUBROUTINE_set)
    INTERRUPT = property(_MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_INTERRUPT_get, _MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_INTERRUPT_set)
    ORGANIZATION = property(_MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_ORGANIZATION_get, _MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_ORGANIZATION_set)
    CHAR = property(_MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_CHAR_get, _MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_CHAR_set)
    ANY_STRING = property(_MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_ANY_STRING_get, _MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_ANY_STRING_set)
    STRING = property(_MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_STRING_get, _MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_STRING_set)
    NETR_STRUCT = property(_MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_NETR_STRUCT_get, _MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_NETR_STRUCT_set)
    PID_STRUCT = property(_MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_PID_STRUCT_get, _MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_PID_STRUCT_set)
    TON = property(_MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_TON_get, _MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_TON_set)
    TOF = property(_MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_TOF_get, _MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_TOF_set)
    TP = property(_MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_TP_get, _MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_TP_set)
    CTU = property(_MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_CTU_get, _MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_CTU_set)
    CTD = property(_MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_CTD_get, _MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_CTD_set)
    CTUD = property(_MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_CTUD_get, _MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_CTUD_set)
    RS = property(_MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_RS_get, _MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_RS_set)
    SR = property(_MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_SR_get, _MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_SR_set)
    POWER_FLOW = property(_MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_POWER_FLOW_get, _MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_POWER_FLOW_set)

    def __init__(self):
        _MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_swiginit(self, _MicroWinExecInterface.new_sSIGCOMPASS_DATA_TYPE_MASK())
    __swig_destroy__ = _MicroWinExecInterface.delete_sSIGCOMPASS_DATA_TYPE_MASK

# Register sSIGCOMPASS_DATA_TYPE_MASK in _MicroWinExecInterface:
_MicroWinExecInterface.sSIGCOMPASS_DATA_TYPE_MASK_swigregister(sSIGCOMPASS_DATA_TYPE_MASK)

class sSIGCOMPASS_VAR_TYPE_MASK(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    VAR_IN = property(_MicroWinExecInterface.sSIGCOMPASS_VAR_TYPE_MASK_VAR_IN_get, _MicroWinExecInterface.sSIGCOMPASS_VAR_TYPE_MASK_VAR_IN_set)
    VAR_IN_OUT = property(_MicroWinExecInterface.sSIGCOMPASS_VAR_TYPE_MASK_VAR_IN_OUT_get, _MicroWinExecInterface.sSIGCOMPASS_VAR_TYPE_MASK_VAR_IN_OUT_set)
    VAR_OUT = property(_MicroWinExecInterface.sSIGCOMPASS_VAR_TYPE_MASK_VAR_OUT_get, _MicroWinExecInterface.sSIGCOMPASS_VAR_TYPE_MASK_VAR_OUT_set)
    VAR = property(_MicroWinExecInterface.sSIGCOMPASS_VAR_TYPE_MASK_VAR_get, _MicroWinExecInterface.sSIGCOMPASS_VAR_TYPE_MASK_VAR_set)
    VAR_EXTERN = property(_MicroWinExecInterface.sSIGCOMPASS_VAR_TYPE_MASK_VAR_EXTERN_get, _MicroWinExecInterface.sSIGCOMPASS_VAR_TYPE_MASK_VAR_EXTERN_set)
    UNUSED = property(_MicroWinExecInterface.sSIGCOMPASS_VAR_TYPE_MASK_UNUSED_get, _MicroWinExecInterface.sSIGCOMPASS_VAR_TYPE_MASK_UNUSED_set)

    def __init__(self):
        _MicroWinExecInterface.sSIGCOMPASS_VAR_TYPE_MASK_swiginit(self, _MicroWinExecInterface.new_sSIGCOMPASS_VAR_TYPE_MASK())
    __swig_destroy__ = _MicroWinExecInterface.delete_sSIGCOMPASS_VAR_TYPE_MASK

# Register sSIGCOMPASS_VAR_TYPE_MASK in _MicroWinExecInterface:
_MicroWinExecInterface.sSIGCOMPASS_VAR_TYPE_MASK_swigregister(sSIGCOMPASS_VAR_TYPE_MASK)

class sSIGCOMPASS_OPERAND_SIZE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    BIT_SIZE = property(_MicroWinExecInterface.sSIGCOMPASS_OPERAND_SIZE_BIT_SIZE_get, _MicroWinExecInterface.sSIGCOMPASS_OPERAND_SIZE_BIT_SIZE_set)
    BYTE_SIZE = property(_MicroWinExecInterface.sSIGCOMPASS_OPERAND_SIZE_BYTE_SIZE_get, _MicroWinExecInterface.sSIGCOMPASS_OPERAND_SIZE_BYTE_SIZE_set)
    WORD_SIZE = property(_MicroWinExecInterface.sSIGCOMPASS_OPERAND_SIZE_WORD_SIZE_get, _MicroWinExecInterface.sSIGCOMPASS_OPERAND_SIZE_WORD_SIZE_set)
    DWORD_SIZE = property(_MicroWinExecInterface.sSIGCOMPASS_OPERAND_SIZE_DWORD_SIZE_get, _MicroWinExecInterface.sSIGCOMPASS_OPERAND_SIZE_DWORD_SIZE_set)
    STRING_SIZE = property(_MicroWinExecInterface.sSIGCOMPASS_OPERAND_SIZE_STRING_SIZE_get, _MicroWinExecInterface.sSIGCOMPASS_OPERAND_SIZE_STRING_SIZE_set)
    UNUSED = property(_MicroWinExecInterface.sSIGCOMPASS_OPERAND_SIZE_UNUSED_get, _MicroWinExecInterface.sSIGCOMPASS_OPERAND_SIZE_UNUSED_set)

    def __init__(self):
        _MicroWinExecInterface.sSIGCOMPASS_OPERAND_SIZE_swiginit(self, _MicroWinExecInterface.new_sSIGCOMPASS_OPERAND_SIZE())
    __swig_destroy__ = _MicroWinExecInterface.delete_sSIGCOMPASS_OPERAND_SIZE

# Register sSIGCOMPASS_OPERAND_SIZE in _MicroWinExecInterface:
_MicroWinExecInterface.sSIGCOMPASS_OPERAND_SIZE_swigregister(sSIGCOMPASS_OPERAND_SIZE)

class sSIGCOMPASS_EDITOR(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    LAD = property(_MicroWinExecInterface.sSIGCOMPASS_EDITOR_LAD_get, _MicroWinExecInterface.sSIGCOMPASS_EDITOR_LAD_set)
    FBD = property(_MicroWinExecInterface.sSIGCOMPASS_EDITOR_FBD_get, _MicroWinExecInterface.sSIGCOMPASS_EDITOR_FBD_set)
    STL = property(_MicroWinExecInterface.sSIGCOMPASS_EDITOR_STL_get, _MicroWinExecInterface.sSIGCOMPASS_EDITOR_STL_set)
    UNUSED = property(_MicroWinExecInterface.sSIGCOMPASS_EDITOR_UNUSED_get, _MicroWinExecInterface.sSIGCOMPASS_EDITOR_UNUSED_set)

    def __init__(self):
        _MicroWinExecInterface.sSIGCOMPASS_EDITOR_swiginit(self, _MicroWinExecInterface.new_sSIGCOMPASS_EDITOR())
    __swig_destroy__ = _MicroWinExecInterface.delete_sSIGCOMPASS_EDITOR

# Register sSIGCOMPASS_EDITOR in _MicroWinExecInterface:
_MicroWinExecInterface.sSIGCOMPASS_EDITOR_swigregister(sSIGCOMPASS_EDITOR)

class sSIGCOMPASS_INSTRUCTION_SETS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SIMATIC = property(_MicroWinExecInterface.sSIGCOMPASS_INSTRUCTION_SETS_SIMATIC_get, _MicroWinExecInterface.sSIGCOMPASS_INSTRUCTION_SETS_SIMATIC_set)
    IEC = property(_MicroWinExecInterface.sSIGCOMPASS_INSTRUCTION_SETS_IEC_get, _MicroWinExecInterface.sSIGCOMPASS_INSTRUCTION_SETS_IEC_set)
    IEC_NON_STANDARD = property(_MicroWinExecInterface.sSIGCOMPASS_INSTRUCTION_SETS_IEC_NON_STANDARD_get, _MicroWinExecInterface.sSIGCOMPASS_INSTRUCTION_SETS_IEC_NON_STANDARD_set)
    UNUSED = property(_MicroWinExecInterface.sSIGCOMPASS_INSTRUCTION_SETS_UNUSED_get, _MicroWinExecInterface.sSIGCOMPASS_INSTRUCTION_SETS_UNUSED_set)

    def __init__(self):
        _MicroWinExecInterface.sSIGCOMPASS_INSTRUCTION_SETS_swiginit(self, _MicroWinExecInterface.new_sSIGCOMPASS_INSTRUCTION_SETS())
    __swig_destroy__ = _MicroWinExecInterface.delete_sSIGCOMPASS_INSTRUCTION_SETS

# Register sSIGCOMPASS_INSTRUCTION_SETS in _MicroWinExecInterface:
_MicroWinExecInterface.sSIGCOMPASS_INSTRUCTION_SETS_swigregister(sSIGCOMPASS_INSTRUCTION_SETS)

class sSIGCOMPASS_MEMORY_AREA_MASK(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    discreteInputMask = property(_MicroWinExecInterface.sSIGCOMPASS_MEMORY_AREA_MASK_discreteInputMask_get, _MicroWinExecInterface.sSIGCOMPASS_MEMORY_AREA_MASK_discreteInputMask_set)
    discreteOutputMask = property(_MicroWinExecInterface.sSIGCOMPASS_MEMORY_AREA_MASK_discreteOutputMask_get, _MicroWinExecInterface.sSIGCOMPASS_MEMORY_AREA_MASK_discreteOutputMask_set)
    analogInputMask = property(_MicroWinExecInterface.sSIGCOMPASS_MEMORY_AREA_MASK_analogInputMask_get, _MicroWinExecInterface.sSIGCOMPASS_MEMORY_AREA_MASK_analogInputMask_set)
    analogOutputMask = property(_MicroWinExecInterface.sSIGCOMPASS_MEMORY_AREA_MASK_analogOutputMask_get, _MicroWinExecInterface.sSIGCOMPASS_MEMORY_AREA_MASK_analogOutputMask_set)
    dataMask = property(_MicroWinExecInterface.sSIGCOMPASS_MEMORY_AREA_MASK_dataMask_get, _MicroWinExecInterface.sSIGCOMPASS_MEMORY_AREA_MASK_dataMask_set)
    flagMask = property(_MicroWinExecInterface.sSIGCOMPASS_MEMORY_AREA_MASK_flagMask_get, _MicroWinExecInterface.sSIGCOMPASS_MEMORY_AREA_MASK_flagMask_set)
    timerMask = property(_MicroWinExecInterface.sSIGCOMPASS_MEMORY_AREA_MASK_timerMask_get, _MicroWinExecInterface.sSIGCOMPASS_MEMORY_AREA_MASK_timerMask_set)
    counterMask = property(_MicroWinExecInterface.sSIGCOMPASS_MEMORY_AREA_MASK_counterMask_get, _MicroWinExecInterface.sSIGCOMPASS_MEMORY_AREA_MASK_counterMask_set)
    highSpeedCounterMask = property(_MicroWinExecInterface.sSIGCOMPASS_MEMORY_AREA_MASK_highSpeedCounterMask_get, _MicroWinExecInterface.sSIGCOMPASS_MEMORY_AREA_MASK_highSpeedCounterMask_set)
    systemMask = property(_MicroWinExecInterface.sSIGCOMPASS_MEMORY_AREA_MASK_systemMask_get, _MicroWinExecInterface.sSIGCOMPASS_MEMORY_AREA_MASK_systemMask_set)
    stageMask = property(_MicroWinExecInterface.sSIGCOMPASS_MEMORY_AREA_MASK_stageMask_get, _MicroWinExecInterface.sSIGCOMPASS_MEMORY_AREA_MASK_stageMask_set)
    systemDataMask = property(_MicroWinExecInterface.sSIGCOMPASS_MEMORY_AREA_MASK_systemDataMask_get, _MicroWinExecInterface.sSIGCOMPASS_MEMORY_AREA_MASK_systemDataMask_set)
    accumulatorMask = property(_MicroWinExecInterface.sSIGCOMPASS_MEMORY_AREA_MASK_accumulatorMask_get, _MicroWinExecInterface.sSIGCOMPASS_MEMORY_AREA_MASK_accumulatorMask_set)
    localMask = property(_MicroWinExecInterface.sSIGCOMPASS_MEMORY_AREA_MASK_localMask_get, _MicroWinExecInterface.sSIGCOMPASS_MEMORY_AREA_MASK_localMask_set)
    indirectAddressingMask = property(_MicroWinExecInterface.sSIGCOMPASS_MEMORY_AREA_MASK_indirectAddressingMask_get, _MicroWinExecInterface.sSIGCOMPASS_MEMORY_AREA_MASK_indirectAddressingMask_set)
    addressOfMask = property(_MicroWinExecInterface.sSIGCOMPASS_MEMORY_AREA_MASK_addressOfMask_get, _MicroWinExecInterface.sSIGCOMPASS_MEMORY_AREA_MASK_addressOfMask_set)
    literalMask = property(_MicroWinExecInterface.sSIGCOMPASS_MEMORY_AREA_MASK_literalMask_get, _MicroWinExecInterface.sSIGCOMPASS_MEMORY_AREA_MASK_literalMask_set)
    subroutine = property(_MicroWinExecInterface.sSIGCOMPASS_MEMORY_AREA_MASK_subroutine_get, _MicroWinExecInterface.sSIGCOMPASS_MEMORY_AREA_MASK_subroutine_set)
    interrupt = property(_MicroWinExecInterface.sSIGCOMPASS_MEMORY_AREA_MASK_interrupt_get, _MicroWinExecInterface.sSIGCOMPASS_MEMORY_AREA_MASK_interrupt_set)
    organization = property(_MicroWinExecInterface.sSIGCOMPASS_MEMORY_AREA_MASK_organization_get, _MicroWinExecInterface.sSIGCOMPASS_MEMORY_AREA_MASK_organization_set)
    empty = property(_MicroWinExecInterface.sSIGCOMPASS_MEMORY_AREA_MASK_empty_get, _MicroWinExecInterface.sSIGCOMPASS_MEMORY_AREA_MASK_empty_set)

    def __init__(self):
        _MicroWinExecInterface.sSIGCOMPASS_MEMORY_AREA_MASK_swiginit(self, _MicroWinExecInterface.new_sSIGCOMPASS_MEMORY_AREA_MASK())
    __swig_destroy__ = _MicroWinExecInterface.delete_sSIGCOMPASS_MEMORY_AREA_MASK

# Register sSIGCOMPASS_MEMORY_AREA_MASK in _MicroWinExecInterface:
_MicroWinExecInterface.sSIGCOMPASS_MEMORY_AREA_MASK_swigregister(sSIGCOMPASS_MEMORY_AREA_MASK)

class sSIGCOMPASS_TREE_CATEGORY_MASK(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    BIT_LOGIC = property(_MicroWinExecInterface.sSIGCOMPASS_TREE_CATEGORY_MASK_BIT_LOGIC_get, _MicroWinExecInterface.sSIGCOMPASS_TREE_CATEGORY_MASK_BIT_LOGIC_set)
    COMMUNICATIONS = property(_MicroWinExecInterface.sSIGCOMPASS_TREE_CATEGORY_MASK_COMMUNICATIONS_get, _MicroWinExecInterface.sSIGCOMPASS_TREE_CATEGORY_MASK_COMMUNICATIONS_set)
    COMPARE = property(_MicroWinExecInterface.sSIGCOMPASS_TREE_CATEGORY_MASK_COMPARE_get, _MicroWinExecInterface.sSIGCOMPASS_TREE_CATEGORY_MASK_COMPARE_set)
    CONVERT = property(_MicroWinExecInterface.sSIGCOMPASS_TREE_CATEGORY_MASK_CONVERT_get, _MicroWinExecInterface.sSIGCOMPASS_TREE_CATEGORY_MASK_CONVERT_set)
    TIMER = property(_MicroWinExecInterface.sSIGCOMPASS_TREE_CATEGORY_MASK_TIMER_get, _MicroWinExecInterface.sSIGCOMPASS_TREE_CATEGORY_MASK_TIMER_set)
    COUNTER = property(_MicroWinExecInterface.sSIGCOMPASS_TREE_CATEGORY_MASK_COUNTER_get, _MicroWinExecInterface.sSIGCOMPASS_TREE_CATEGORY_MASK_COUNTER_set)
    CLOCK = property(_MicroWinExecInterface.sSIGCOMPASS_TREE_CATEGORY_MASK_CLOCK_get, _MicroWinExecInterface.sSIGCOMPASS_TREE_CATEGORY_MASK_CLOCK_set)
    PROGRAM_CONTROL = property(_MicroWinExecInterface.sSIGCOMPASS_TREE_CATEGORY_MASK_PROGRAM_CONTROL_get, _MicroWinExecInterface.sSIGCOMPASS_TREE_CATEGORY_MASK_PROGRAM_CONTROL_set)
    INTEGER_MATH = property(_MicroWinExecInterface.sSIGCOMPASS_TREE_CATEGORY_MASK_INTEGER_MATH_get, _MicroWinExecInterface.sSIGCOMPASS_TREE_CATEGORY_MASK_INTEGER_MATH_set)
    REAL_MATH = property(_MicroWinExecInterface.sSIGCOMPASS_TREE_CATEGORY_MASK_REAL_MATH_get, _MicroWinExecInterface.sSIGCOMPASS_TREE_CATEGORY_MASK_REAL_MATH_set)
    MATH = property(_MicroWinExecInterface.sSIGCOMPASS_TREE_CATEGORY_MASK_MATH_get, _MicroWinExecInterface.sSIGCOMPASS_TREE_CATEGORY_MASK_MATH_set)
    MOVE = property(_MicroWinExecInterface.sSIGCOMPASS_TREE_CATEGORY_MASK_MOVE_get, _MicroWinExecInterface.sSIGCOMPASS_TREE_CATEGORY_MASK_MOVE_set)
    TABLE = property(_MicroWinExecInterface.sSIGCOMPASS_TREE_CATEGORY_MASK_TABLE_get, _MicroWinExecInterface.sSIGCOMPASS_TREE_CATEGORY_MASK_TABLE_set)
    SHIFT_ROTATE = property(_MicroWinExecInterface.sSIGCOMPASS_TREE_CATEGORY_MASK_SHIFT_ROTATE_get, _MicroWinExecInterface.sSIGCOMPASS_TREE_CATEGORY_MASK_SHIFT_ROTATE_set)
    LOGICAL_OPS = property(_MicroWinExecInterface.sSIGCOMPASS_TREE_CATEGORY_MASK_LOGICAL_OPS_get, _MicroWinExecInterface.sSIGCOMPASS_TREE_CATEGORY_MASK_LOGICAL_OPS_set)
    SUBROUTINE = property(_MicroWinExecInterface.sSIGCOMPASS_TREE_CATEGORY_MASK_SUBROUTINE_get, _MicroWinExecInterface.sSIGCOMPASS_TREE_CATEGORY_MASK_SUBROUTINE_set)
    NOT_VISIBLE = property(_MicroWinExecInterface.sSIGCOMPASS_TREE_CATEGORY_MASK_NOT_VISIBLE_get, _MicroWinExecInterface.sSIGCOMPASS_TREE_CATEGORY_MASK_NOT_VISIBLE_set)
    INTERRUPT = property(_MicroWinExecInterface.sSIGCOMPASS_TREE_CATEGORY_MASK_INTERRUPT_get, _MicroWinExecInterface.sSIGCOMPASS_TREE_CATEGORY_MASK_INTERRUPT_set)
    STRING = property(_MicroWinExecInterface.sSIGCOMPASS_TREE_CATEGORY_MASK_STRING_get, _MicroWinExecInterface.sSIGCOMPASS_TREE_CATEGORY_MASK_STRING_set)
    NUMERIC = property(_MicroWinExecInterface.sSIGCOMPASS_TREE_CATEGORY_MASK_NUMERIC_get, _MicroWinExecInterface.sSIGCOMPASS_TREE_CATEGORY_MASK_NUMERIC_set)
    reserved = property(_MicroWinExecInterface.sSIGCOMPASS_TREE_CATEGORY_MASK_reserved_get, _MicroWinExecInterface.sSIGCOMPASS_TREE_CATEGORY_MASK_reserved_set)

    def __init__(self):
        _MicroWinExecInterface.sSIGCOMPASS_TREE_CATEGORY_MASK_swiginit(self, _MicroWinExecInterface.new_sSIGCOMPASS_TREE_CATEGORY_MASK())
    __swig_destroy__ = _MicroWinExecInterface.delete_sSIGCOMPASS_TREE_CATEGORY_MASK

# Register sSIGCOMPASS_TREE_CATEGORY_MASK in _MicroWinExecInterface:
_MicroWinExecInterface.sSIGCOMPASS_TREE_CATEGORY_MASK_swigregister(sSIGCOMPASS_TREE_CATEGORY_MASK)

class sSIGCOMPASS_LITERAL_STRUCT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    eLiteralType = property(_MicroWinExecInterface.sSIGCOMPASS_LITERAL_STRUCT_eLiteralType_get, _MicroWinExecInterface.sSIGCOMPASS_LITERAL_STRUCT_eLiteralType_set)
    eOperandSize = property(_MicroWinExecInterface.sSIGCOMPASS_LITERAL_STRUCT_eOperandSize_get, _MicroWinExecInterface.sSIGCOMPASS_LITERAL_STRUCT_eOperandSize_set)
    lValue = property(_MicroWinExecInterface.sSIGCOMPASS_LITERAL_STRUCT_lValue_get, _MicroWinExecInterface.sSIGCOMPASS_LITERAL_STRUCT_lValue_set)

    def __init__(self):
        _MicroWinExecInterface.sSIGCOMPASS_LITERAL_STRUCT_swiginit(self, _MicroWinExecInterface.new_sSIGCOMPASS_LITERAL_STRUCT())
    __swig_destroy__ = _MicroWinExecInterface.delete_sSIGCOMPASS_LITERAL_STRUCT

# Register sSIGCOMPASS_LITERAL_STRUCT in _MicroWinExecInterface:
_MicroWinExecInterface.sSIGCOMPASS_LITERAL_STRUCT_swigregister(sSIGCOMPASS_LITERAL_STRUCT)

class sSIGCOMPASS_ADDRESS_STRUCT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    eAddrMode = property(_MicroWinExecInterface.sSIGCOMPASS_ADDRESS_STRUCT_eAddrMode_get, _MicroWinExecInterface.sSIGCOMPASS_ADDRESS_STRUCT_eAddrMode_set)
    eOpSize = property(_MicroWinExecInterface.sSIGCOMPASS_ADDRESS_STRUCT_eOpSize_get, _MicroWinExecInterface.sSIGCOMPASS_ADDRESS_STRUCT_eOpSize_set)
    mMemoryArea = property(_MicroWinExecInterface.sSIGCOMPASS_ADDRESS_STRUCT_mMemoryArea_get, _MicroWinExecInterface.sSIGCOMPASS_ADDRESS_STRUCT_mMemoryArea_set)
    lOffset = property(_MicroWinExecInterface.sSIGCOMPASS_ADDRESS_STRUCT_lOffset_get, _MicroWinExecInterface.sSIGCOMPASS_ADDRESS_STRUCT_lOffset_set)

    def __init__(self):
        _MicroWinExecInterface.sSIGCOMPASS_ADDRESS_STRUCT_swiginit(self, _MicroWinExecInterface.new_sSIGCOMPASS_ADDRESS_STRUCT())
    __swig_destroy__ = _MicroWinExecInterface.delete_sSIGCOMPASS_ADDRESS_STRUCT

# Register sSIGCOMPASS_ADDRESS_STRUCT in _MicroWinExecInterface:
_MicroWinExecInterface.sSIGCOMPASS_ADDRESS_STRUCT_swigregister(sSIGCOMPASS_ADDRESS_STRUCT)

class IMPORT_MW_3_1_SIGNATURE_PARAM_BUFFER(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    paramLabel = property(_MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_PARAM_BUFFER_paramLabel_get, _MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_PARAM_BUFFER_paramLabel_set)
    varType = property(_MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_PARAM_BUFFER_varType_get, _MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_PARAM_BUFFER_varType_set)
    dataType = property(_MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_PARAM_BUFFER_dataType_get, _MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_PARAM_BUFFER_dataType_set)
    memArea = property(_MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_PARAM_BUFFER_memArea_get, _MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_PARAM_BUFFER_memArea_set)
    statusFormat = property(_MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_PARAM_BUFFER_statusFormat_get, _MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_PARAM_BUFFER_statusFormat_set)

    def __init__(self):
        _MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_PARAM_BUFFER_swiginit(self, _MicroWinExecInterface.new_IMPORT_MW_3_1_SIGNATURE_PARAM_BUFFER())
    __swig_destroy__ = _MicroWinExecInterface.delete_IMPORT_MW_3_1_SIGNATURE_PARAM_BUFFER

# Register IMPORT_MW_3_1_SIGNATURE_PARAM_BUFFER in _MicroWinExecInterface:
_MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_PARAM_BUFFER_swigregister(IMPORT_MW_3_1_SIGNATURE_PARAM_BUFFER)

class IMPORT_MW_3_1_SIGNATURE_BUFFER(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    instId = property(_MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_BUFFER_instId_get, _MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_BUFFER_instId_set)
    intlLabel = property(_MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_BUFFER_intlLabel_get, _MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_BUFFER_intlLabel_set)
    simaticLabel = property(_MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_BUFFER_simaticLabel_get, _MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_BUFFER_simaticLabel_set)
    instSet = property(_MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_BUFFER_instSet_get, _MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_BUFFER_instSet_set)
    instEditor = property(_MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_BUFFER_instEditor_get, _MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_BUFFER_instEditor_set)
    instType = property(_MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_BUFFER_instType_get, _MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_BUFFER_instType_set)
    validCPUs = property(_MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_BUFFER_validCPUs_get, _MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_BUFFER_validCPUs_set)
    compFormat = property(_MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_BUFFER_compFormat_get, _MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_BUFFER_compFormat_set)
    opcode = property(_MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_BUFFER_opcode_get, _MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_BUFFER_opcode_set)
    treeCategory = property(_MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_BUFFER_treeCategory_get, _MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_BUFFER_treeCategory_set)
    stlVersion = property(_MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_BUFFER_stlVersion_get, _MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_BUFFER_stlVersion_set)
    ladVersion = property(_MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_BUFFER_ladVersion_get, _MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_BUFFER_ladVersion_set)
    fbdVersion = property(_MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_BUFFER_fbdVersion_get, _MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_BUFFER_fbdVersion_set)
    helpId = property(_MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_BUFFER_helpId_get, _MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_BUFFER_helpId_set)
    numParams = property(_MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_BUFFER_numParams_get, _MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_BUFFER_numParams_set)
    param = property(_MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_BUFFER_param_get, _MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_BUFFER_param_set)

    def __init__(self):
        _MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_BUFFER_swiginit(self, _MicroWinExecInterface.new_IMPORT_MW_3_1_SIGNATURE_BUFFER())
    __swig_destroy__ = _MicroWinExecInterface.delete_IMPORT_MW_3_1_SIGNATURE_BUFFER

# Register IMPORT_MW_3_1_SIGNATURE_BUFFER in _MicroWinExecInterface:
_MicroWinExecInterface.IMPORT_MW_3_1_SIGNATURE_BUFFER_swigregister(IMPORT_MW_3_1_SIGNATURE_BUFFER)

class CStringEx(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MicroWinExecInterface.CStringEx_swiginit(self, _MicroWinExecInterface.new_CStringEx(*args))
    __swig_destroy__ = _MicroWinExecInterface.delete_CStringEx

    def FreeAll(self):
        return _MicroWinExecInterface.CStringEx_FreeAll(self)

    def GetBSTR(self):
        return _MicroWinExecInterface.CStringEx_GetBSTR(self)

    def __and__(self):
        return _MicroWinExecInterface.CStringEx___and__(self)

    def GetWCLength(self):
        return _MicroWinExecInterface.CStringEx_GetWCLength(self)

    def ConvertAndFreeString(self):
        return _MicroWinExecInterface.CStringEx_ConvertAndFreeString(self)

    def AsBSTR(self):
        return _MicroWinExecInterface.CStringEx_AsBSTR(self)

    def AsLPWSTR(self):
        return _MicroWinExecInterface.CStringEx_AsLPWSTR(self)

    def GetCopyAsLPWSTR(self):
        return _MicroWinExecInterface.CStringEx_GetCopyAsLPWSTR(self)

    def GetCopyAsBSTR(self):
        return _MicroWinExecInterface.CStringEx_GetCopyAsBSTR(self)

    def __iadd__(self, *args):
        return _MicroWinExecInterface.CStringEx___iadd__(self, *args)

    def Initialize(self):
        return _MicroWinExecInterface.CStringEx_Initialize(self)

# Register CStringEx in _MicroWinExecInterface:
_MicroWinExecInterface.CStringEx_swigregister(CStringEx)

class SDBIOBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MicroWinExecInterface.delete_SDBIOBase

    def __eq__(self, rSrc):
        return _MicroWinExecInterface.SDBIOBase___eq__(self, rSrc)

    def Empty(self):
        return _MicroWinExecInterface.SDBIOBase_Empty(self)

    def IsFreezeOutputsInLastState(self):
        return _MicroWinExecInterface.SDBIOBase_IsFreezeOutputsInLastState(self)

    def SetFreezeOutputsInLastState(self, bState):
        return _MicroWinExecInterface.SDBIOBase_SetFreezeOutputsInLastState(self, bState)

    def SetPLCFeaturesAccess(self, pIProProfile, pIComm, cMWNetInfo):
        return _MicroWinExecInterface.SDBIOBase_SetPLCFeaturesAccess(self, pIProProfile, pIComm, cMWNetInfo)

    def Store(self, rDest):
        return _MicroWinExecInterface.SDBIOBase_Store(self, rDest)

    def Retrieve(self, rSrc, bInitVer):
        return _MicroWinExecInterface.SDBIOBase_Retrieve(self, rSrc, bInitVer)

    def GetNetInfo(self):
        return _MicroWinExecInterface.SDBIOBase_GetNetInfo(self)

    def IsVisible(self):
        return _MicroWinExecInterface.SDBIOBase_IsVisible(self)

    def SetDefaults(self):
        return _MicroWinExecInterface.SDBIOBase_SetDefaults(self)

# Register SDBIOBase in _MicroWinExecInterface:
_MicroWinExecInterface.SDBIOBase_swigregister(SDBIOBase)

class SDBDigitalInputs(SDBIOBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MicroWinExecInterface.SDBDigitalInputs_swiginit(self, _MicroWinExecInterface.new_SDBDigitalInputs(*args))
    __swig_destroy__ = _MicroWinExecInterface.delete_SDBDigitalInputs

    def __eq__(self, rSrc):
        return _MicroWinExecInterface.SDBDigitalInputs___eq__(self, rSrc)

    def Empty(self):
        return _MicroWinExecInterface.SDBDigitalInputs_Empty(self)

    def IsVisible(self):
        return _MicroWinExecInterface.SDBDigitalInputs_IsVisible(self)

    def GetCount(self):
        return _MicroWinExecInterface.SDBDigitalInputs_GetCount(self)

    def SetCount(self, nSize):
        return _MicroWinExecInterface.SDBDigitalInputs_SetCount(self, nSize)

    def GetPulseCatchBitsCount(self):
        return _MicroWinExecInterface.SDBDigitalInputs_GetPulseCatchBitsCount(self)

    def GetInputFiltersCount(self):
        return _MicroWinExecInterface.SDBDigitalInputs_GetInputFiltersCount(self)

    def GetSubModuleInputDataLength(self):
        return _MicroWinExecInterface.SDBDigitalInputs_GetSubModuleInputDataLength(self)

    def GetByteCount(self):
        return _MicroWinExecInterface.SDBDigitalInputs_GetByteCount(self)

    def SetDefaults(self):
        return _MicroWinExecInterface.SDBDigitalInputs_SetDefaults(self)

    def IsDefaultPulseCatchBits(self, *args):
        return _MicroWinExecInterface.SDBDigitalInputs_IsDefaultPulseCatchBits(self, *args)

    def IsDefaultInputFilters(self, *args):
        return _MicroWinExecInterface.SDBDigitalInputs_IsDefaultInputFilters(self, *args)

    def GetPulseCatchBit(self, nIndex):
        return _MicroWinExecInterface.SDBDigitalInputs_GetPulseCatchBit(self, nIndex)

    def SetPulseCatchBit(self, nIndex, bState):
        return _MicroWinExecInterface.SDBDigitalInputs_SetPulseCatchBit(self, nIndex, bState)

    def GetInputFilter(self, nIndex):
        return _MicroWinExecInterface.SDBDigitalInputs_GetInputFilter(self, nIndex)

    def SetInputFilter(self, nIndex, filter):
        return _MicroWinExecInterface.SDBDigitalInputs_SetInputFilter(self, nIndex, filter)

    def SetParamSegmentBlockData(self, nParamLength, ppbyParamData):
        return _MicroWinExecInterface.SDBDigitalInputs_SetParamSegmentBlockData(self, nParamLength, ppbyParamData)

    def GetParamSegmentBlockData(self, pnParamBytes, ppbyParamData):
        return _MicroWinExecInterface.SDBDigitalInputs_GetParamSegmentBlockData(self, pnParamBytes, ppbyParamData)

    def Compare(self, sInputs, nSlot, nMaxErrors, pErrors):
        return _MicroWinExecInterface.SDBDigitalInputs_Compare(self, sInputs, nSlot, nMaxErrors, pErrors)

    def Store(self, rDest):
        return _MicroWinExecInterface.SDBDigitalInputs_Store(self, rDest)

    def Retrieve(self, *args):
        return _MicroWinExecInterface.SDBDigitalInputs_Retrieve(self, *args)

    def ValidateRanges(self):
        return _MicroWinExecInterface.SDBDigitalInputs_ValidateRanges(self)

# Register SDBDigitalInputs in _MicroWinExecInterface:
_MicroWinExecInterface.SDBDigitalInputs_swigregister(SDBDigitalInputs)
MAX_PULSE_CATCH_BITS = cvar.MAX_PULSE_CATCH_BITS
MAX_INPUT_FILTERS = cvar.MAX_INPUT_FILTERS
MAX_DIGITAL_INPUTS = cvar.MAX_DIGITAL_INPUTS

class SDBDigitalOutputPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MicroWinExecInterface.SDBDigitalOutputPoint_swiginit(self, _MicroWinExecInterface.new_SDBDigitalOutputPoint())

    def GetBit(self, nBit):
        return _MicroWinExecInterface.SDBDigitalOutputPoint_GetBit(self, nBit)

    def SetBit(self, nBit, bValue):
        return _MicroWinExecInterface.SDBDigitalOutputPoint_SetBit(self, nBit, bValue)

    def GetByte(self):
        return _MicroWinExecInterface.SDBDigitalOutputPoint_GetByte(self)

    def SetByte(self, byBuffer):
        return _MicroWinExecInterface.SDBDigitalOutputPoint_SetByte(self, byBuffer)
    m_bBits = property(_MicroWinExecInterface.SDBDigitalOutputPoint_m_bBits_get, _MicroWinExecInterface.SDBDigitalOutputPoint_m_bBits_set)
    __swig_destroy__ = _MicroWinExecInterface.delete_SDBDigitalOutputPoint

# Register SDBDigitalOutputPoint in _MicroWinExecInterface:
_MicroWinExecInterface.SDBDigitalOutputPoint_swigregister(SDBDigitalOutputPoint)
MAX_DIGITAL_OUTPUTS = cvar.MAX_DIGITAL_OUTPUTS

class SDBDigitalOutputs(SDBIOBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MicroWinExecInterface.SDBDigitalOutputs_swiginit(self, _MicroWinExecInterface.new_SDBDigitalOutputs(*args))
    __swig_destroy__ = _MicroWinExecInterface.delete_SDBDigitalOutputs

    def __eq__(self, rSrc):
        return _MicroWinExecInterface.SDBDigitalOutputs___eq__(self, rSrc)

    def Empty(self):
        return _MicroWinExecInterface.SDBDigitalOutputs_Empty(self)

    def SetDefaults(self):
        return _MicroWinExecInterface.SDBDigitalOutputs_SetDefaults(self)

    def IsDefaults(self):
        return _MicroWinExecInterface.SDBDigitalOutputs_IsDefaults(self)

    def IsVisible(self):
        return _MicroWinExecInterface.SDBDigitalOutputs_IsVisible(self)

    def GetSubModuleOutputDataLength(self):
        return _MicroWinExecInterface.SDBDigitalOutputs_GetSubModuleOutputDataLength(self)

    def GetCount(self):
        return _MicroWinExecInterface.SDBDigitalOutputs_GetCount(self)

    def GetBitCount(self):
        return _MicroWinExecInterface.SDBDigitalOutputs_GetBitCount(self)

    def GetByteCount(self):
        return _MicroWinExecInterface.SDBDigitalOutputs_GetByteCount(self)

    def SetBitCount(self, nBits):
        return _MicroWinExecInterface.SDBDigitalOutputs_SetBitCount(self, nBits)

    def GetOutputTableBit(self, nBit):
        return _MicroWinExecInterface.SDBDigitalOutputs_GetOutputTableBit(self, nBit)

    def SetOutputTableBit(self, nBit, bValue):
        return _MicroWinExecInterface.SDBDigitalOutputs_SetOutputTableBit(self, nBit, bValue)

    def GetStartingBit(self):
        return _MicroWinExecInterface.SDBDigitalOutputs_GetStartingBit(self)

    def SetOutputTableBlockData(self, nParamLength, ppbyParamData):
        return _MicroWinExecInterface.SDBDigitalOutputs_SetOutputTableBlockData(self, nParamLength, ppbyParamData)

    def SetParamSegmentBlockData(self, nParamLength, ppbyParamData):
        return _MicroWinExecInterface.SDBDigitalOutputs_SetParamSegmentBlockData(self, nParamLength, ppbyParamData)

    def GetOutputTableBlockData(self, pnParamBytes, ppbyParamData):
        return _MicroWinExecInterface.SDBDigitalOutputs_GetOutputTableBlockData(self, pnParamBytes, ppbyParamData)

    def GetParamSegmentBlockData(self, pnParamBytes, ppbyParamData):
        return _MicroWinExecInterface.SDBDigitalOutputs_GetParamSegmentBlockData(self, pnParamBytes, ppbyParamData)

    def Compare(self, sOutputs, nSlot, nMaxErrors, pErrors):
        return _MicroWinExecInterface.SDBDigitalOutputs_Compare(self, sOutputs, nSlot, nMaxErrors, pErrors)

    def Store(self, rDest):
        return _MicroWinExecInterface.SDBDigitalOutputs_Store(self, rDest)

    def Retrieve(self, *args):
        return _MicroWinExecInterface.SDBDigitalOutputs_Retrieve(self, *args)

    def ValidateRanges(self):
        return _MicroWinExecInterface.SDBDigitalOutputs_ValidateRanges(self)

# Register SDBDigitalOutputs in _MicroWinExecInterface:
_MicroWinExecInterface.SDBDigitalOutputs_swigregister(SDBDigitalOutputs)

class SDBAnalogInputs(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MicroWinExecInterface.SDBAnalogInputs_swiginit(self, _MicroWinExecInterface.new_SDBAnalogInputs(*args))
    __swig_destroy__ = _MicroWinExecInterface.delete_SDBAnalogInputs

    def __eq__(self, rSrc):
        return _MicroWinExecInterface.SDBAnalogInputs___eq__(self, rSrc)

    def SetDefaults(self):
        return _MicroWinExecInterface.SDBAnalogInputs_SetDefaults(self)

    def IsDefault(self):
        return _MicroWinExecInterface.SDBAnalogInputs_IsDefault(self)

    def IsDefaultChannel(self, nChannel):
        return _MicroWinExecInterface.SDBAnalogInputs_IsDefaultChannel(self, nChannel)

    def Empty(self):
        return _MicroWinExecInterface.SDBAnalogInputs_Empty(self)

    def GetCount(self):
        return _MicroWinExecInterface.SDBAnalogInputs_GetCount(self)

    def SetCount(self, nSize):
        return _MicroWinExecInterface.SDBAnalogInputs_SetCount(self, nSize)

    def IsVisible(self):
        return _MicroWinExecInterface.SDBAnalogInputs_IsVisible(self)

    def GetSubModuleInputDataLength(self):
        return _MicroWinExecInterface.SDBAnalogInputs_GetSubModuleInputDataLength(self)

    def GetType(self, nChannel):
        return _MicroWinExecInterface.SDBAnalogInputs_GetType(self, nChannel)

    def SetType(self, nChannel, eType):
        return _MicroWinExecInterface.SDBAnalogInputs_SetType(self, nChannel, eType)

    def GetRange(self, nChannel):
        return _MicroWinExecInterface.SDBAnalogInputs_GetRange(self, nChannel)

    def SetRange(self, nChannel, eRange):
        return _MicroWinExecInterface.SDBAnalogInputs_SetRange(self, nChannel, eRange)

    def GetIntegrationTime(self, nChannel):
        return _MicroWinExecInterface.SDBAnalogInputs_GetIntegrationTime(self, nChannel)

    def SetIntegrationTime(self, nChannel, eTime):
        return _MicroWinExecInterface.SDBAnalogInputs_SetIntegrationTime(self, nChannel, eTime)

    def GetSmoothing(self, nChannel):
        return _MicroWinExecInterface.SDBAnalogInputs_GetSmoothing(self, nChannel)

    def SetSmoothing(self, nChannel, ePeriod):
        return _MicroWinExecInterface.SDBAnalogInputs_SetSmoothing(self, nChannel, ePeriod)

    def IsUserPowerEnabled(self):
        return _MicroWinExecInterface.SDBAnalogInputs_IsUserPowerEnabled(self)

    def EnableUserPower(self, bEnable):
        return _MicroWinExecInterface.SDBAnalogInputs_EnableUserPower(self, bEnable)

    def IsOverflowEnabled(self, nChannel):
        return _MicroWinExecInterface.SDBAnalogInputs_IsOverflowEnabled(self, nChannel)

    def EnableOverflow(self, nChannel, bEnable):
        return _MicroWinExecInterface.SDBAnalogInputs_EnableOverflow(self, nChannel, bEnable)

    def IsUnderflowEnabled(self, nChannel):
        return _MicroWinExecInterface.SDBAnalogInputs_IsUnderflowEnabled(self, nChannel)

    def EnableUnderflow(self, nChannel, bEnable):
        return _MicroWinExecInterface.SDBAnalogInputs_EnableUnderflow(self, nChannel, bEnable)

    def IsDefaultAlarms(self, nChannel):
        return _MicroWinExecInterface.SDBAnalogInputs_IsDefaultAlarms(self, nChannel)

    def SetDefaultAlarms(self, nChannel):
        return _MicroWinExecInterface.SDBAnalogInputs_SetDefaultAlarms(self, nChannel)

    def SetParamSegmentBlockData(self, nParamLength, ppbyParamData):
        return _MicroWinExecInterface.SDBAnalogInputs_SetParamSegmentBlockData(self, nParamLength, ppbyParamData)

    def GetParamSegmentBlockData(self, pnParamBytes, ppbyParamData):
        return _MicroWinExecInterface.SDBAnalogInputs_GetParamSegmentBlockData(self, pnParamBytes, ppbyParamData)

    def Compare(self, sInputs, nSlot, nMaxErrors, pErrors):
        return _MicroWinExecInterface.SDBAnalogInputs_Compare(self, sInputs, nSlot, nMaxErrors, pErrors)

    def Store(self, rDest):
        return _MicroWinExecInterface.SDBAnalogInputs_Store(self, rDest)

    def Retrieve(self, *args):
        return _MicroWinExecInterface.SDBAnalogInputs_Retrieve(self, *args)

    def ValidateRanges(self):
        return _MicroWinExecInterface.SDBAnalogInputs_ValidateRanges(self)

    def GetAlarm(self, nChannel):
        return _MicroWinExecInterface.SDBAnalogInputs_GetAlarm(self, nChannel)

# Register SDBAnalogInputs in _MicroWinExecInterface:
_MicroWinExecInterface.SDBAnalogInputs_swigregister(SDBAnalogInputs)
ANALOG_INPUT_PARAM_SEG_SIZE = cvar.ANALOG_INPUT_PARAM_SEG_SIZE

class SDBAnalogOutputs(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MicroWinExecInterface.SDBAnalogOutputs_swiginit(self, _MicroWinExecInterface.new_SDBAnalogOutputs(*args))
    __swig_destroy__ = _MicroWinExecInterface.delete_SDBAnalogOutputs

    def __eq__(self, rSrc):
        return _MicroWinExecInterface.SDBAnalogOutputs___eq__(self, rSrc)

    def SetDefaults(self):
        return _MicroWinExecInterface.SDBAnalogOutputs_SetDefaults(self)

    def IsDefault(self):
        return _MicroWinExecInterface.SDBAnalogOutputs_IsDefault(self)

    def IsDefaultChannel(self, nChannel):
        return _MicroWinExecInterface.SDBAnalogOutputs_IsDefaultChannel(self, nChannel)

    def IsSignalBoard(self):
        return _MicroWinExecInterface.SDBAnalogOutputs_IsSignalBoard(self)

    def Empty(self):
        return _MicroWinExecInterface.SDBAnalogOutputs_Empty(self)

    def GetCount(self):
        return _MicroWinExecInterface.SDBAnalogOutputs_GetCount(self)

    def SetCount(self, nSize):
        return _MicroWinExecInterface.SDBAnalogOutputs_SetCount(self, nSize)

    def IsVisible(self):
        return _MicroWinExecInterface.SDBAnalogOutputs_IsVisible(self)

    def GetSubModuleOutputDataLength(self):
        return _MicroWinExecInterface.SDBAnalogOutputs_GetSubModuleOutputDataLength(self)

    def GetType(self, nChannel):
        return _MicroWinExecInterface.SDBAnalogOutputs_GetType(self, nChannel)

    def SetType(self, nChannel, eType):
        return _MicroWinExecInterface.SDBAnalogOutputs_SetType(self, nChannel, eType)

    def GetRange(self, nChannel):
        return _MicroWinExecInterface.SDBAnalogOutputs_GetRange(self, nChannel)

    def SetRange(self, nChannel, eRange):
        return _MicroWinExecInterface.SDBAnalogOutputs_SetRange(self, nChannel, eRange)

    def GetSubstituteValue(self, nChannel):
        return _MicroWinExecInterface.SDBAnalogOutputs_GetSubstituteValue(self, nChannel)

    def SetSubstituteValue(self, nChannel, wValue):
        return _MicroWinExecInterface.SDBAnalogOutputs_SetSubstituteValue(self, nChannel, wValue)

    def GetBehavior(self, nChannel):
        return _MicroWinExecInterface.SDBAnalogOutputs_GetBehavior(self, nChannel)

    def SetBehavior(self, nChannel, eBehavior):
        return _MicroWinExecInterface.SDBAnalogOutputs_SetBehavior(self, nChannel, eBehavior)

    def IsFreezeOutputsInLastState(self):
        return _MicroWinExecInterface.SDBAnalogOutputs_IsFreezeOutputsInLastState(self)

    def IsUserPowerEnabled(self):
        return _MicroWinExecInterface.SDBAnalogOutputs_IsUserPowerEnabled(self)

    def EnableUserPower(self, bEnable):
        return _MicroWinExecInterface.SDBAnalogOutputs_EnableUserPower(self, bEnable)

    def IsOverflowEnabled(self, nChannel):
        return _MicroWinExecInterface.SDBAnalogOutputs_IsOverflowEnabled(self, nChannel)

    def EnableOverflow(self, nChannel, bEnable):
        return _MicroWinExecInterface.SDBAnalogOutputs_EnableOverflow(self, nChannel, bEnable)

    def IsUnderflowEnabled(self, nChannel):
        return _MicroWinExecInterface.SDBAnalogOutputs_IsUnderflowEnabled(self, nChannel)

    def EnableUnderflow(self, nChannel, bEnable):
        return _MicroWinExecInterface.SDBAnalogOutputs_EnableUnderflow(self, nChannel, bEnable)

    def IsWireBreakEnabled(self, nChannel):
        return _MicroWinExecInterface.SDBAnalogOutputs_IsWireBreakEnabled(self, nChannel)

    def EnableWireBreak(self, nChannel, bEnable):
        return _MicroWinExecInterface.SDBAnalogOutputs_EnableWireBreak(self, nChannel, bEnable)

    def IsShortCircuitEnabled(self, nChannel):
        return _MicroWinExecInterface.SDBAnalogOutputs_IsShortCircuitEnabled(self, nChannel)

    def EnableShortCircuit(self, nChannel, bEnable):
        return _MicroWinExecInterface.SDBAnalogOutputs_EnableShortCircuit(self, nChannel, bEnable)

    def IsDefaultAlarms(self, nChannel):
        return _MicroWinExecInterface.SDBAnalogOutputs_IsDefaultAlarms(self, nChannel)

    def SetDefaultAlarms(self, nChannel):
        return _MicroWinExecInterface.SDBAnalogOutputs_SetDefaultAlarms(self, nChannel)

    def SetOutputTableBlockData(self, nParamLength, ppbyParamData):
        return _MicroWinExecInterface.SDBAnalogOutputs_SetOutputTableBlockData(self, nParamLength, ppbyParamData)

    def SetParamSegmentBlockData(self, nParamLength, ppbyParamData):
        return _MicroWinExecInterface.SDBAnalogOutputs_SetParamSegmentBlockData(self, nParamLength, ppbyParamData)

    def GetOutputTableBlockData(self, pnParamBytes, ppbyParamData):
        return _MicroWinExecInterface.SDBAnalogOutputs_GetOutputTableBlockData(self, pnParamBytes, ppbyParamData)

    def GetParamSegmentBlockData(self, pnParamBytes, ppbyParamData):
        return _MicroWinExecInterface.SDBAnalogOutputs_GetParamSegmentBlockData(self, pnParamBytes, ppbyParamData)

    def Compare(self, sOutputs, nSlot, nMaxErrors, pErrors):
        return _MicroWinExecInterface.SDBAnalogOutputs_Compare(self, sOutputs, nSlot, nMaxErrors, pErrors)

    def Store(self, rDest):
        return _MicroWinExecInterface.SDBAnalogOutputs_Store(self, rDest)

    def Retrieve(self, *args):
        return _MicroWinExecInterface.SDBAnalogOutputs_Retrieve(self, *args)

    def ValidateRanges(self):
        return _MicroWinExecInterface.SDBAnalogOutputs_ValidateRanges(self)

    def GetAlarm(self, nChannel):
        return _MicroWinExecInterface.SDBAnalogOutputs_GetAlarm(self, nChannel)

# Register SDBAnalogOutputs in _MicroWinExecInterface:
_MicroWinExecInterface.SDBAnalogOutputs_swigregister(SDBAnalogOutputs)

MIN_BACKGROUND_TIME = _MicroWinExecInterface.MIN_BACKGROUND_TIME
MIN_BACKGROUND_TIME_WITH_PN = _MicroWinExecInterface.MIN_BACKGROUND_TIME_WITH_PN
MAX_BACKGROUND_TIME = _MicroWinExecInterface.MAX_BACKGROUND_TIME
DEFAULT_BACKGROUND_TIME = _MicroWinExecInterface.DEFAULT_BACKGROUND_TIME
class SDBBackgroundTime(SDBIOBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MicroWinExecInterface.SDBBackgroundTime_swiginit(self, _MicroWinExecInterface.new_SDBBackgroundTime(*args))
    __swig_destroy__ = _MicroWinExecInterface.delete_SDBBackgroundTime

    def __eq__(self, rSrc):
        return _MicroWinExecInterface.SDBBackgroundTime___eq__(self, rSrc)

    def Empty(self):
        return _MicroWinExecInterface.SDBBackgroundTime_Empty(self)

    def IsDefaults(self):
        return _MicroWinExecInterface.SDBBackgroundTime_IsDefaults(self)

    def SetDefaults(self):
        return _MicroWinExecInterface.SDBBackgroundTime_SetDefaults(self)

    def IsVisible(self):
        return _MicroWinExecInterface.SDBBackgroundTime_IsVisible(self)

    def GetBackgroundTime(self):
        return _MicroWinExecInterface.SDBBackgroundTime_GetBackgroundTime(self)

    def SetBackgroundTime(self, time):
        return _MicroWinExecInterface.SDBBackgroundTime_SetBackgroundTime(self, time)

    def GetParamId(self):
        return _MicroWinExecInterface.SDBBackgroundTime_GetParamId(self)

    def ValidateRanges(self):
        return _MicroWinExecInterface.SDBBackgroundTime_ValidateRanges(self)

    def Store(self, rDest):
        return _MicroWinExecInterface.SDBBackgroundTime_Store(self, rDest)

    def Retrieve(self, *args):
        return _MicroWinExecInterface.SDBBackgroundTime_Retrieve(self, *args)

    def SetBlockData(self, ppbyParamData):
        return _MicroWinExecInterface.SDBBackgroundTime_SetBlockData(self, ppbyParamData)

    def GetBlockData(self, pnParamBytes, ppbyParamData):
        return _MicroWinExecInterface.SDBBackgroundTime_GetBlockData(self, pnParamBytes, ppbyParamData)

    def Compare(self, sBackgroundTime, nMaxErrors, pErrors):
        return _MicroWinExecInterface.SDBBackgroundTime_Compare(self, sBackgroundTime, nMaxErrors, pErrors)

# Register SDBBackgroundTime in _MicroWinExecInterface:
_MicroWinExecInterface.SDBBackgroundTime_swigregister(SDBBackgroundTime)

class SDBStartup(SDBIOBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MicroWinExecInterface.SDBStartup_swiginit(self, _MicroWinExecInterface.new_SDBStartup(*args))
    __swig_destroy__ = _MicroWinExecInterface.delete_SDBStartup

    def __eq__(self, rSrc):
        return _MicroWinExecInterface.SDBStartup___eq__(self, rSrc)

    def Empty(self):
        return _MicroWinExecInterface.SDBStartup_Empty(self)

    def IsDefaultMode(self):
        return _MicroWinExecInterface.SDBStartup_IsDefaultMode(self)

    def IsDefaultHardware(self):
        return _MicroWinExecInterface.SDBStartup_IsDefaultHardware(self)

    def SetDefaults(self):
        return _MicroWinExecInterface.SDBStartup_SetDefaults(self)

    def IsVisible(self):
        return _MicroWinExecInterface.SDBStartup_IsVisible(self)

    def GetCPUMode(self):
        return _MicroWinExecInterface.SDBStartup_GetCPUMode(self)

    def SetCPUMode(self, eCPUMode):
        return _MicroWinExecInterface.SDBStartup_SetCPUMode(self, eCPUMode)

    def AllowMissingHardware(self):
        return _MicroWinExecInterface.SDBStartup_AllowMissingHardware(self)

    def SetAllowMissingHardware(self, bAllow):
        return _MicroWinExecInterface.SDBStartup_SetAllowMissingHardware(self, bAllow)

    def AllowConfigErrors(self):
        return _MicroWinExecInterface.SDBStartup_AllowConfigErrors(self)

    def SetAllowConfigErrors(self, bAllow):
        return _MicroWinExecInterface.SDBStartup_SetAllowConfigErrors(self, bAllow)

    def GetParamId(self):
        return _MicroWinExecInterface.SDBStartup_GetParamId(self)

    def ValidateRanges(self):
        return _MicroWinExecInterface.SDBStartup_ValidateRanges(self)

    def Store(self, rDest):
        return _MicroWinExecInterface.SDBStartup_Store(self, rDest)

    def Retrieve(self, *args):
        return _MicroWinExecInterface.SDBStartup_Retrieve(self, *args)

    def SetBlockData(self, ppbyParamData):
        return _MicroWinExecInterface.SDBStartup_SetBlockData(self, ppbyParamData)

    def GetBlockData(self, pnParamBytes, ppbyParamData):
        return _MicroWinExecInterface.SDBStartup_GetBlockData(self, pnParamBytes, ppbyParamData)

    def Compare(self, sStartup, nMaxErrors, pErrors):
        return _MicroWinExecInterface.SDBStartup_Compare(self, sStartup, nMaxErrors, pErrors)

# Register SDBStartup in _MicroWinExecInterface:
_MicroWinExecInterface.SDBStartup_swigregister(SDBStartup)

FULL_PRIVILEDGES = _MicroWinExecInterface.FULL_PRIVILEDGES
READ_PRIVILEDGES = _MicroWinExecInterface.READ_PRIVILEDGES
NO_PRIVILEDGES = _MicroWinExecInterface.NO_PRIVILEDGES
RESTRICT_UPLOAD = _MicroWinExecInterface.RESTRICT_UPLOAD
class SDBSecurity(SDBIOBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MicroWinExecInterface.SDBSecurity_swiginit(self, _MicroWinExecInterface.new_SDBSecurity(*args))
    __swig_destroy__ = _MicroWinExecInterface.delete_SDBSecurity

    def __eq__(self, rSrc):
        return _MicroWinExecInterface.SDBSecurity___eq__(self, rSrc)

    def Empty(self):
        return _MicroWinExecInterface.SDBSecurity_Empty(self)

    def IsDefaults(self):
        return _MicroWinExecInterface.SDBSecurity_IsDefaults(self)

    def SetDefaults(self):
        return _MicroWinExecInterface.SDBSecurity_SetDefaults(self)

    def IsVisible(self):
        return _MicroWinExecInterface.SDBSecurity_IsVisible(self)

    def GetPasswordLevel(self):
        return _MicroWinExecInterface.SDBSecurity_GetPasswordLevel(self)

    def SetPasswordLevel(self, nLevel):
        return _MicroWinExecInterface.SDBSecurity_SetPasswordLevel(self, nLevel)

    def SetPassword(self, *args):
        return _MicroWinExecInterface.SDBSecurity_SetPassword(self, *args)

    def GetPassword(self):
        return _MicroWinExecInterface.SDBSecurity_GetPassword(self)

    def ConvertPassword(self):
        return _MicroWinExecInterface.SDBSecurity_ConvertPassword(self)

    def IsPasswordModified(self):
        return _MicroWinExecInterface.SDBSecurity_IsPasswordModified(self)

    def SetPasswordModified(self, bModified):
        return _MicroWinExecInterface.SDBSecurity_SetPasswordModified(self, bModified)

    def IsAllowSerialWrites(self):
        return _MicroWinExecInterface.SDBSecurity_IsAllowSerialWrites(self)

    def SetAllowSerialWrites(self, bAllow):
        return _MicroWinExecInterface.SDBSecurity_SetAllowSerialWrites(self, bAllow)

    def GetParamId(self):
        return _MicroWinExecInterface.SDBSecurity_GetParamId(self)

    def ValidateRanges(self):
        return _MicroWinExecInterface.SDBSecurity_ValidateRanges(self)

    def Store(self, rDest):
        return _MicroWinExecInterface.SDBSecurity_Store(self, rDest)

    def Retrieve(self, *args):
        return _MicroWinExecInterface.SDBSecurity_Retrieve(self, *args)

    def SetBlockData(self, ppbyParamData):
        return _MicroWinExecInterface.SDBSecurity_SetBlockData(self, ppbyParamData)

    def GetBlockData(self, pnParamBytes, ppbyParamData):
        return _MicroWinExecInterface.SDBSecurity_GetBlockData(self, pnParamBytes, ppbyParamData)

    def Compare(self, sSecurity, nMaxErrors, pErrors):
        return _MicroWinExecInterface.SDBSecurity_Compare(self, sSecurity, nMaxErrors, pErrors)

# Register SDBSecurity in _MicroWinExecInterface:
_MicroWinExecInterface.SDBSecurity_swigregister(SDBSecurity)
MAX_PASSWORD_LENGTH = cvar.MAX_PASSWORD_LENGTH
OLD_PASSWORD_LENGTH = cvar.OLD_PASSWORD_LENGTH
OLD_PASSWORD_KEY = cvar.OLD_PASSWORD_KEY
DEFAULT_CLASS = cvar.DEFAULT_CLASS
MAX_SALT_SIZE = cvar.MAX_SALT_SIZE
MAX_HASH_SIZE = cvar.MAX_HASH_SIZE
MAX_SHA512_SIZE = cvar.MAX_SHA512_SIZE
MAX_SHA512_MESS_SIZE = cvar.MAX_SHA512_MESS_SIZE

class VER_0_PROTECTION_LEVEL_STRUCT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    restrictionClass = property(_MicroWinExecInterface.VER_0_PROTECTION_LEVEL_STRUCT_restrictionClass_get, _MicroWinExecInterface.VER_0_PROTECTION_LEVEL_STRUCT_restrictionClass_set)
    password = property(_MicroWinExecInterface.VER_0_PROTECTION_LEVEL_STRUCT_password_get, _MicroWinExecInterface.VER_0_PROTECTION_LEVEL_STRUCT_password_set)

    def __init__(self):
        _MicroWinExecInterface.VER_0_PROTECTION_LEVEL_STRUCT_swiginit(self, _MicroWinExecInterface.new_VER_0_PROTECTION_LEVEL_STRUCT())
    __swig_destroy__ = _MicroWinExecInterface.delete_VER_0_PROTECTION_LEVEL_STRUCT

# Register VER_0_PROTECTION_LEVEL_STRUCT in _MicroWinExecInterface:
_MicroWinExecInterface.VER_0_PROTECTION_LEVEL_STRUCT_swigregister(VER_0_PROTECTION_LEVEL_STRUCT)

NUMBER_RETENTIVE_RANGES = _MicroWinExecInterface.NUMBER_RETENTIVE_RANGES
SIZE_ANY_POINTER = _MicroWinExecInterface.SIZE_ANY_POINTER
MIN_RETENTIVE_RANGE = _MicroWinExecInterface.MIN_RETENTIVE_RANGE
MAX_RETENTIVE_RANGE = _MicroWinExecInterface.MAX_RETENTIVE_RANGE
class SDBRetentiveRanges(SDBIOBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MicroWinExecInterface.SDBRetentiveRanges_swiginit(self, _MicroWinExecInterface.new_SDBRetentiveRanges(*args))
    __swig_destroy__ = _MicroWinExecInterface.delete_SDBRetentiveRanges

    def __eq__(self, rSrc):
        return _MicroWinExecInterface.SDBRetentiveRanges___eq__(self, rSrc)

    def Empty(self):
        return _MicroWinExecInterface.SDBRetentiveRanges_Empty(self)

    def SetDefaults(self):
        return _MicroWinExecInterface.SDBRetentiveRanges_SetDefaults(self)

    def IsDefaults(self, *args):
        return _MicroWinExecInterface.SDBRetentiveRanges_IsDefaults(self, *args)

    def IsVisible(self):
        return _MicroWinExecInterface.SDBRetentiveRanges_IsVisible(self)

    def GetAddress(self, nIndex):
        return _MicroWinExecInterface.SDBRetentiveRanges_GetAddress(self, nIndex)

    def SetAddress(self, nIndex, sAddr):
        return _MicroWinExecInterface.SDBRetentiveRanges_SetAddress(self, nIndex, sAddr)

    def GetMemoryArea(self, nIndex):
        return _MicroWinExecInterface.SDBRetentiveRanges_GetMemoryArea(self, nIndex)

    def SetMemoryArea(self, nIndex, area):
        return _MicroWinExecInterface.SDBRetentiveRanges_SetMemoryArea(self, nIndex, area)

    def GetSize(self, nIndex):
        return _MicroWinExecInterface.SDBRetentiveRanges_GetSize(self, nIndex)

    def SetSize(self, nIndex, nSize):
        return _MicroWinExecInterface.SDBRetentiveRanges_SetSize(self, nIndex, nSize)

    def GetOffset(self, nIndex):
        return _MicroWinExecInterface.SDBRetentiveRanges_GetOffset(self, nIndex)

    def SetOffset(self, nIndex, nOffset):
        return _MicroWinExecInterface.SDBRetentiveRanges_SetOffset(self, nIndex, nOffset)

    def GetNumberOfElements(self, nIndex):
        return _MicroWinExecInterface.SDBRetentiveRanges_GetNumberOfElements(self, nIndex)

    def SetNumberOfElements(self, nIndex, nElements):
        return _MicroWinExecInterface.SDBRetentiveRanges_SetNumberOfElements(self, nIndex, nElements)

    def GetParamId(self):
        return _MicroWinExecInterface.SDBRetentiveRanges_GetParamId(self)

    def ValidateRanges(self):
        return _MicroWinExecInterface.SDBRetentiveRanges_ValidateRanges(self)

    def GetDefaultCPU(self, nIndex, rAddr, rRange):
        return _MicroWinExecInterface.SDBRetentiveRanges_GetDefaultCPU(self, nIndex, rAddr, rRange)

    def Store(self, rDest):
        return _MicroWinExecInterface.SDBRetentiveRanges_Store(self, rDest)

    def Retrieve(self, *args):
        return _MicroWinExecInterface.SDBRetentiveRanges_Retrieve(self, *args)

    def SetBlockData(self, ppbyParamData):
        return _MicroWinExecInterface.SDBRetentiveRanges_SetBlockData(self, ppbyParamData)

    def GetBlockData(self, pnParamBytes, ppbyParamData):
        return _MicroWinExecInterface.SDBRetentiveRanges_GetBlockData(self, pnParamBytes, ppbyParamData)

    def Compare(self, sRanges, nMaxErrors, pErrors):
        return _MicroWinExecInterface.SDBRetentiveRanges_Compare(self, sRanges, nMaxErrors, pErrors)

# Register SDBRetentiveRanges in _MicroWinExecInterface:
_MicroWinExecInterface.SDBRetentiveRanges_swigregister(SDBRetentiveRanges)

class VER_0_SINGLE_RETENTIVE_RANGE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    address = property(_MicroWinExecInterface.VER_0_SINGLE_RETENTIVE_RANGE_address_get, _MicroWinExecInterface.VER_0_SINGLE_RETENTIVE_RANGE_address_set)
    numElements = property(_MicroWinExecInterface.VER_0_SINGLE_RETENTIVE_RANGE_numElements_get, _MicroWinExecInterface.VER_0_SINGLE_RETENTIVE_RANGE_numElements_set)

    def __init__(self):
        _MicroWinExecInterface.VER_0_SINGLE_RETENTIVE_RANGE_swiginit(self, _MicroWinExecInterface.new_VER_0_SINGLE_RETENTIVE_RANGE())
    __swig_destroy__ = _MicroWinExecInterface.delete_VER_0_SINGLE_RETENTIVE_RANGE

# Register VER_0_SINGLE_RETENTIVE_RANGE in _MicroWinExecInterface:
_MicroWinExecInterface.VER_0_SINGLE_RETENTIVE_RANGE_swigregister(VER_0_SINGLE_RETENTIVE_RANGE)

class VER_0_RETENTIVE_RANGE_STRUCT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_aRange = property(_MicroWinExecInterface.VER_0_RETENTIVE_RANGE_STRUCT_m_aRange_get, _MicroWinExecInterface.VER_0_RETENTIVE_RANGE_STRUCT_m_aRange_set)
    m_bDoesNotExistAnymore = property(_MicroWinExecInterface.VER_0_RETENTIVE_RANGE_STRUCT_m_bDoesNotExistAnymore_get, _MicroWinExecInterface.VER_0_RETENTIVE_RANGE_STRUCT_m_bDoesNotExistAnymore_set)

    def __init__(self):
        _MicroWinExecInterface.VER_0_RETENTIVE_RANGE_STRUCT_swiginit(self, _MicroWinExecInterface.new_VER_0_RETENTIVE_RANGE_STRUCT())
    __swig_destroy__ = _MicroWinExecInterface.delete_VER_0_RETENTIVE_RANGE_STRUCT

# Register VER_0_RETENTIVE_RANGE_STRUCT in _MicroWinExecInterface:
_MicroWinExecInterface.VER_0_RETENTIVE_RANGE_STRUCT_swigregister(VER_0_RETENTIVE_RANGE_STRUCT)

class SDBEthernet(SDBIOBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MicroWinExecInterface.SDBEthernet_swiginit(self, _MicroWinExecInterface.new_SDBEthernet(*args))
    __swig_destroy__ = _MicroWinExecInterface.delete_SDBEthernet

    def __eq__(self, rSrc):
        return _MicroWinExecInterface.SDBEthernet___eq__(self, rSrc)

    def Empty(self):
        return _MicroWinExecInterface.SDBEthernet_Empty(self)

    def IsDefaults(self):
        return _MicroWinExecInterface.SDBEthernet_IsDefaults(self)

    def SetDefaults(self):
        return _MicroWinExecInterface.SDBEthernet_SetDefaults(self)

    def IsVisible(self):
        return _MicroWinExecInterface.SDBEthernet_IsVisible(self)

    def IsStoreInProject(self):
        return _MicroWinExecInterface.SDBEthernet_IsStoreInProject(self)

    def SetStoreInProject(self, bStore):
        return _MicroWinExecInterface.SDBEthernet_SetStoreInProject(self, bStore)

    def GetIP(self):
        return _MicroWinExecInterface.SDBEthernet_GetIP(self)

    def SetIP(self, address):
        return _MicroWinExecInterface.SDBEthernet_SetIP(self, address)

    def GetSubnetMask(self):
        return _MicroWinExecInterface.SDBEthernet_GetSubnetMask(self)

    def SetSubnetMask(self, address):
        return _MicroWinExecInterface.SDBEthernet_SetSubnetMask(self, address)

    def GetDefaultGateway(self):
        return _MicroWinExecInterface.SDBEthernet_GetDefaultGateway(self)

    def SetDefaultGateway(self, address):
        return _MicroWinExecInterface.SDBEthernet_SetDefaultGateway(self, address)

    def GetStationName(self):
        return _MicroWinExecInterface.SDBEthernet_GetStationName(self)

    def SetStationName(self, strName):
        return _MicroWinExecInterface.SDBEthernet_SetStationName(self, strName)

    def GetParamId(self):
        return _MicroWinExecInterface.SDBEthernet_GetParamId(self)

    def ValidateRanges(self):
        return _MicroWinExecInterface.SDBEthernet_ValidateRanges(self)

    def Store(self, rDest):
        return _MicroWinExecInterface.SDBEthernet_Store(self, rDest)

    def Retrieve(self, *args):
        return _MicroWinExecInterface.SDBEthernet_Retrieve(self, *args)

    def SetBlockData(self, ppbyParamData):
        return _MicroWinExecInterface.SDBEthernet_SetBlockData(self, ppbyParamData)

    def GetBlockData(self, pnParamBytes, ppbyParamData):
        return _MicroWinExecInterface.SDBEthernet_GetBlockData(self, pnParamBytes, ppbyParamData)

    def Compare(self, sEthernet, nMaxErrors, pErrors):
        return _MicroWinExecInterface.SDBEthernet_Compare(self, sEthernet, nMaxErrors, pErrors)

# Register SDBEthernet in _MicroWinExecInterface:
_MicroWinExecInterface.SDBEthernet_swigregister(SDBEthernet)
DEFAULT_IP_ADDRESS = cvar.DEFAULT_IP_ADDRESS
DEFAULT_SUBNET_MASK = cvar.DEFAULT_SUBNET_MASK
DEFAULT_GATEWAY = cvar.DEFAULT_GATEWAY
DEFAULT_STATION_NAME_SIZE = cvar.DEFAULT_STATION_NAME_SIZE

BAUD_RATE_9600 = _MicroWinExecInterface.BAUD_RATE_9600
BAUD_RATE_19200 = _MicroWinExecInterface.BAUD_RATE_19200
BAUD_RATE_187K = _MicroWinExecInterface.BAUD_RATE_187K
MEDIA_TYPE_RS_485 = _MicroWinExecInterface.MEDIA_TYPE_RS_485
MEDIA_TYPE_RS_232 = _MicroWinExecInterface.MEDIA_TYPE_RS_232
class SDBCommunicationPorts(SDBIOBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MicroWinExecInterface.SDBCommunicationPorts_swiginit(self, _MicroWinExecInterface.new_SDBCommunicationPorts(*args))
    __swig_destroy__ = _MicroWinExecInterface.delete_SDBCommunicationPorts

    def __eq__(self, rSrc):
        return _MicroWinExecInterface.SDBCommunicationPorts___eq__(self, rSrc)

    def Empty(self):
        return _MicroWinExecInterface.SDBCommunicationPorts_Empty(self)

    def IsDefaults(self):
        return _MicroWinExecInterface.SDBCommunicationPorts_IsDefaults(self)

    def SetDefaults(self):
        return _MicroWinExecInterface.SDBCommunicationPorts_SetDefaults(self)

    def IsVisible(self):
        return _MicroWinExecInterface.SDBCommunicationPorts_IsVisible(self)

    def GetAddress(self):
        return _MicroWinExecInterface.SDBCommunicationPorts_GetAddress(self)

    def SetAddress(self, nAddress):
        return _MicroWinExecInterface.SDBCommunicationPorts_SetAddress(self, nAddress)

    def GetPort(self):
        return _MicroWinExecInterface.SDBCommunicationPorts_GetPort(self)

    def SetPort(self, *args):
        return _MicroWinExecInterface.SDBCommunicationPorts_SetPort(self, *args)

    def GetBaudRate(self):
        return _MicroWinExecInterface.SDBCommunicationPorts_GetBaudRate(self)

    def SetBaudRate(self, eRate=BAUD_RATE_9600):
        return _MicroWinExecInterface.SDBCommunicationPorts_SetBaudRate(self, eRate)

    def GetMediaType(self):
        return _MicroWinExecInterface.SDBCommunicationPorts_GetMediaType(self)

    def SetMediaType(self, type):
        return _MicroWinExecInterface.SDBCommunicationPorts_SetMediaType(self, type)

    def GetParamId(self, *args):
        return _MicroWinExecInterface.SDBCommunicationPorts_GetParamId(self, *args)

    def SetBlockData(self, ppbyParamData, bIsCommSB):
        return _MicroWinExecInterface.SDBCommunicationPorts_SetBlockData(self, ppbyParamData, bIsCommSB)

    def GetBlockData(self, pnParamBytes, ppbyParamData, bIsCommSB):
        return _MicroWinExecInterface.SDBCommunicationPorts_GetBlockData(self, pnParamBytes, ppbyParamData, bIsCommSB)

    def Store(self, rDest):
        return _MicroWinExecInterface.SDBCommunicationPorts_Store(self, rDest)

    def Retrieve(self, *args):
        return _MicroWinExecInterface.SDBCommunicationPorts_Retrieve(self, *args)

    def Compare(self, sPorts, nSlot, nMaxErrors, pErrors):
        return _MicroWinExecInterface.SDBCommunicationPorts_Compare(self, sPorts, nSlot, nMaxErrors, pErrors)

    def ValidateRanges(self):
        return _MicroWinExecInterface.SDBCommunicationPorts_ValidateRanges(self)

    def IsPortSupported(self, nPort):
        return _MicroWinExecInterface.SDBCommunicationPorts_IsPortSupported(self, nPort)

# Register SDBCommunicationPorts in _MicroWinExecInterface:
_MicroWinExecInterface.SDBCommunicationPorts_swigregister(SDBCommunicationPorts)
PORT_0 = cvar.PORT_0
PORT_1 = cvar.PORT_1
DEFAULT_ADDRESS = cvar.DEFAULT_ADDRESS
MAX_PORTS = cvar.MAX_PORTS

class VER_0_COMM_PARAMS_STRUCT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nodeAddr = property(_MicroWinExecInterface.VER_0_COMM_PARAMS_STRUCT_nodeAddr_get, _MicroWinExecInterface.VER_0_COMM_PARAMS_STRUCT_nodeAddr_set)
    highAddr = property(_MicroWinExecInterface.VER_0_COMM_PARAMS_STRUCT_highAddr_get, _MicroWinExecInterface.VER_0_COMM_PARAMS_STRUCT_highAddr_set)
    baudRate = property(_MicroWinExecInterface.VER_0_COMM_PARAMS_STRUCT_baudRate_get, _MicroWinExecInterface.VER_0_COMM_PARAMS_STRUCT_baudRate_set)
    retryCnt = property(_MicroWinExecInterface.VER_0_COMM_PARAMS_STRUCT_retryCnt_get, _MicroWinExecInterface.VER_0_COMM_PARAMS_STRUCT_retryCnt_set)
    GUF = property(_MicroWinExecInterface.VER_0_COMM_PARAMS_STRUCT_GUF_get, _MicroWinExecInterface.VER_0_COMM_PARAMS_STRUCT_GUF_set)
    changed = property(_MicroWinExecInterface.VER_0_COMM_PARAMS_STRUCT_changed_get, _MicroWinExecInterface.VER_0_COMM_PARAMS_STRUCT_changed_set)

    def __init__(self):
        _MicroWinExecInterface.VER_0_COMM_PARAMS_STRUCT_swiginit(self, _MicroWinExecInterface.new_VER_0_COMM_PARAMS_STRUCT())
    __swig_destroy__ = _MicroWinExecInterface.delete_VER_0_COMM_PARAMS_STRUCT

# Register VER_0_COMM_PARAMS_STRUCT in _MicroWinExecInterface:
_MicroWinExecInterface.VER_0_COMM_PARAMS_STRUCT_swigregister(VER_0_COMM_PARAMS_STRUCT)

class SDBBatteryBoard(SDBIOBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MicroWinExecInterface.SDBBatteryBoard_swiginit(self, _MicroWinExecInterface.new_SDBBatteryBoard(*args))
    __swig_destroy__ = _MicroWinExecInterface.delete_SDBBatteryBoard

    def __eq__(self, rSrc):
        return _MicroWinExecInterface.SDBBatteryBoard___eq__(self, rSrc)

    def Empty(self):
        return _MicroWinExecInterface.SDBBatteryBoard_Empty(self)

    def IsDefaults(self):
        return _MicroWinExecInterface.SDBBatteryBoard_IsDefaults(self)

    def SetDefaults(self):
        return _MicroWinExecInterface.SDBBatteryBoard_SetDefaults(self)

    def IsVisible(self):
        return _MicroWinExecInterface.SDBBatteryBoard_IsVisible(self)

    def IsDiagnostics(self):
        return _MicroWinExecInterface.SDBBatteryBoard_IsDiagnostics(self)

    def SetDiagnostics(self, bEnabled):
        return _MicroWinExecInterface.SDBBatteryBoard_SetDiagnostics(self, bEnabled)

    def IsStatusDI(self):
        return _MicroWinExecInterface.SDBBatteryBoard_IsStatusDI(self)

    def SetStatusDI(self, bEnabled):
        return _MicroWinExecInterface.SDBBatteryBoard_SetStatusDI(self, bEnabled)

    def SetBlockData(self, ppbyParamData):
        return _MicroWinExecInterface.SDBBatteryBoard_SetBlockData(self, ppbyParamData)

    def GetBlockData(self, pnParamBytes, ppbyParamData):
        return _MicroWinExecInterface.SDBBatteryBoard_GetBlockData(self, pnParamBytes, ppbyParamData)

    def Store(self, rDest):
        return _MicroWinExecInterface.SDBBatteryBoard_Store(self, rDest)

    def Retrieve(self, *args):
        return _MicroWinExecInterface.SDBBatteryBoard_Retrieve(self, *args)

    def Compare(self, sBoard, nSlot, nMaxErrors, pErrors):
        return _MicroWinExecInterface.SDBBatteryBoard_Compare(self, sBoard, nSlot, nMaxErrors, pErrors)

# Register SDBBatteryBoard in _MicroWinExecInterface:
_MicroWinExecInterface.SDBBatteryBoard_swigregister(SDBBatteryBoard)

class SDBDataWrite(SDBIOBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MicroWinExecInterface.SDBDataWrite_swiginit(self, _MicroWinExecInterface.new_SDBDataWrite(*args))
    __swig_destroy__ = _MicroWinExecInterface.delete_SDBDataWrite

    def __eq__(self, rSrc):
        return _MicroWinExecInterface.SDBDataWrite___eq__(self, rSrc)

    def Empty(self):
        return _MicroWinExecInterface.SDBDataWrite_Empty(self)

    def IsDefaults(self):
        return _MicroWinExecInterface.SDBDataWrite_IsDefaults(self)

    def SetDefaults(self):
        return _MicroWinExecInterface.SDBDataWrite_SetDefaults(self)

    def IsVisible(self):
        return _MicroWinExecInterface.SDBDataWrite_IsVisible(self)

    def IsRestrictMemoryWrites(self):
        return _MicroWinExecInterface.SDBDataWrite_IsRestrictMemoryWrites(self)

    def SetRestrictMemoryWrites(self, bRestrict):
        return _MicroWinExecInterface.SDBDataWrite_SetRestrictMemoryWrites(self, bRestrict)

    def GetMemoryOffset(self):
        return _MicroWinExecInterface.SDBDataWrite_GetMemoryOffset(self)

    def SetMemoryOffset(self, nOffset):
        return _MicroWinExecInterface.SDBDataWrite_SetMemoryOffset(self, nOffset)

    def GetMemorySize(self):
        return _MicroWinExecInterface.SDBDataWrite_GetMemorySize(self)

    def SetMemorySize(self, nSize):
        return _MicroWinExecInterface.SDBDataWrite_SetMemorySize(self, nSize)

    def GetParamId(self):
        return _MicroWinExecInterface.SDBDataWrite_GetParamId(self)

    def ValidateRanges(self):
        return _MicroWinExecInterface.SDBDataWrite_ValidateRanges(self)

    def Store(self, rDest):
        return _MicroWinExecInterface.SDBDataWrite_Store(self, rDest)

    def Retrieve(self, *args):
        return _MicroWinExecInterface.SDBDataWrite_Retrieve(self, *args)

    def SetBlockData(self, ppbyParamData):
        return _MicroWinExecInterface.SDBDataWrite_SetBlockData(self, ppbyParamData)

    def GetBlockData(self, pnParamBytes, ppbyParamData):
        return _MicroWinExecInterface.SDBDataWrite_GetBlockData(self, pnParamBytes, ppbyParamData)

    def Compare(self, sDataWrite, nMaxErrors, pErrors):
        return _MicroWinExecInterface.SDBDataWrite_Compare(self, sDataWrite, nMaxErrors, pErrors)

# Register SDBDataWrite in _MicroWinExecInterface:
_MicroWinExecInterface.SDBDataWrite_swigregister(SDBDataWrite)

class SDBBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MicroWinExecInterface.delete_SDBBase

    def __eq__(self, rSrc):
        return _MicroWinExecInterface.SDBBase___eq__(self, rSrc)

    def Empty(self):
        return _MicroWinExecInterface.SDBBase_Empty(self)

    def SetPLCFeaturesAccess(self, pIProProfile, pIComm, cMWNetInfo):
        return _MicroWinExecInterface.SDBBase_SetPLCFeaturesAccess(self, pIProProfile, pIComm, cMWNetInfo)

    def SetTargetAddr(self, cMWNetInfo):
        return _MicroWinExecInterface.SDBBase_SetTargetAddr(self, cMWNetInfo)

    def GetTotalMotionAxis(self):
        return _MicroWinExecInterface.SDBBase_GetTotalMotionAxis(self)

    def GetSDBElement(self, rElement):
        return _MicroWinExecInterface.SDBBase_GetSDBElement(self, rElement)

    def SetSDBElement(self, rElement):
        return _MicroWinExecInterface.SDBBase_SetSDBElement(self, rElement)

    def GetModuleType(self, *args):
        return _MicroWinExecInterface.SDBBase_GetModuleType(self, *args)

    def SetDeviceVersion(self, strVersion):
        return _MicroWinExecInterface.SDBBase_SetDeviceVersion(self, strVersion)

    def GetDeviceVersion(self):
        return _MicroWinExecInterface.SDBBase_GetDeviceVersion(self)

    def GetModuleVersions(self, rItems):
        return _MicroWinExecInterface.SDBBase_GetModuleVersions(self, rItems)

    def GetLatestVersion(self, rElement):
        return _MicroWinExecInterface.SDBBase_GetLatestVersion(self, rElement)

    def SetActualVersion(self, cMWNetInfo):
        return _MicroWinExecInterface.SDBBase_SetActualVersion(self, cMWNetInfo)

    def SetDeviceType(self, strDevice):
        return _MicroWinExecInterface.SDBBase_SetDeviceType(self, strDevice)

    def SetModuleIDent(self, *args):
        return _MicroWinExecInterface.SDBBase_SetModuleIDent(self, *args)

    def GetModuleIDent(self):
        return _MicroWinExecInterface.SDBBase_GetModuleIDent(self)

    def UpdateConfig(self, dwSubModuleIDent):
        return _MicroWinExecInterface.SDBBase_UpdateConfig(self, dwSubModuleIDent)

    def GetSlot(self):
        return _MicroWinExecInterface.SDBBase_GetSlot(self)

    def SetSlot(self, nSlot):
        return _MicroWinExecInterface.SDBBase_SetSlot(self, nSlot)

    def IsConfigured(self):
        return _MicroWinExecInterface.SDBBase_IsConfigured(self)

    def SetIsConfigured(self, bIsConfigured):
        return _MicroWinExecInterface.SDBBase_SetIsConfigured(self, bIsConfigured)

    def IsUserPowerEnabled(self):
        return _MicroWinExecInterface.SDBBase_IsUserPowerEnabled(self)

    def EnableUserPower(self, bEnable):
        return _MicroWinExecInterface.SDBBase_EnableUserPower(self, bEnable)

    def Store(self, rDest):
        return _MicroWinExecInterface.SDBBase_Store(self, rDest)

    def Retrieve(self, rSrc, bInitVer):
        return _MicroWinExecInterface.SDBBase_Retrieve(self, rSrc, bInitVer)

    def SetIOConfiguration(self, ppbyParamData):
        return _MicroWinExecInterface.SDBBase_SetIOConfiguration(self, ppbyParamData)

    def GetIOConfiguration(self, pnParamBytes, ppbyParamData):
        return _MicroWinExecInterface.SDBBase_GetIOConfiguration(self, pnParamBytes, ppbyParamData)

    def GetModuleTypes(self, *args):
        return _MicroWinExecInterface.SDBBase_GetModuleTypes(self, *args)

    def IsCompact(self):
        return _MicroWinExecInterface.SDBBase_IsCompact(self)

    def IsExtendedFiltersSupported(self):
        return _MicroWinExecInterface.SDBBase_IsExtendedFiltersSupported(self)

    def IsDP01(self):
        return _MicroWinExecInterface.SDBBase_IsDP01(self)

    def IsSmartModuleDataFileFound(self):
        return _MicroWinExecInterface.SDBBase_IsSmartModuleDataFileFound(self)

    def GetType(self):
        return _MicroWinExecInterface.SDBBase_GetType(self)

    def GetCPUIdentNumByCPUType(self, strDeviceType):
        return _MicroWinExecInterface.SDBBase_GetCPUIdentNumByCPUType(self, strDeviceType)

    def GetStartingInput(self):
        return _MicroWinExecInterface.SDBBase_GetStartingInput(self)

    def SetStartingInput(self, wValue):
        return _MicroWinExecInterface.SDBBase_SetStartingInput(self, wValue)

    def GetEndingInput(self):
        return _MicroWinExecInterface.SDBBase_GetEndingInput(self)

    def SetEndingInput(self, wValue):
        return _MicroWinExecInterface.SDBBase_SetEndingInput(self, wValue)

    def GetStartingOutput(self):
        return _MicroWinExecInterface.SDBBase_GetStartingOutput(self)

    def SetStartingOutput(self, wValue):
        return _MicroWinExecInterface.SDBBase_SetStartingOutput(self, wValue)

    def GetEndingOutput(self):
        return _MicroWinExecInterface.SDBBase_GetEndingOutput(self)

    def SetEndingOutput(self, wValue):
        return _MicroWinExecInterface.SDBBase_SetEndingOutput(self, wValue)

    def IsDigital(self):
        return _MicroWinExecInterface.SDBBase_IsDigital(self)

    def IsAnalog(self):
        return _MicroWinExecInterface.SDBBase_IsAnalog(self)

    def IsRTD(self):
        return _MicroWinExecInterface.SDBBase_IsRTD(self)

    def IsTC(self):
        return _MicroWinExecInterface.SDBBase_IsTC(self)

    def GetCountInputs(self):
        return _MicroWinExecInterface.SDBBase_GetCountInputs(self)

    def GetCountOutputs(self):
        return _MicroWinExecInterface.SDBBase_GetCountOutputs(self)

    def GetAnalogInputs(self):
        return _MicroWinExecInterface.SDBBase_GetAnalogInputs(self)

    def GetAnalogOutputs(self):
        return _MicroWinExecInterface.SDBBase_GetAnalogOutputs(self)

    def GetDigitalInputs(self):
        return _MicroWinExecInterface.SDBBase_GetDigitalInputs(self)

    def GetDigitalOutputs(self):
        return _MicroWinExecInterface.SDBBase_GetDigitalOutputs(self)

    def GetRTDInputs(self):
        return _MicroWinExecInterface.SDBBase_GetRTDInputs(self)

    def GetTCInputs(self):
        return _MicroWinExecInterface.SDBBase_GetTCInputs(self)

    def GetCommunicationPorts(self):
        return _MicroWinExecInterface.SDBBase_GetCommunicationPorts(self)

    def GetBatteryBoard(self):
        return _MicroWinExecInterface.SDBBase_GetBatteryBoard(self)

    def GetDP01(self):
        return _MicroWinExecInterface.SDBBase_GetDP01(self)

# Register SDBBase in _MicroWinExecInterface:
_MicroWinExecInterface.SDBBase_swigregister(SDBBase)

class SDBCommon(SDBBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MicroWinExecInterface.SDBCommon_swiginit(self, _MicroWinExecInterface.new_SDBCommon(*args))
    __swig_destroy__ = _MicroWinExecInterface.delete_SDBCommon

    def __eq__(self, rSrc):
        return _MicroWinExecInterface.SDBCommon___eq__(self, rSrc)

    def Empty(self):
        return _MicroWinExecInterface.SDBCommon_Empty(self)

    def SetPLCFeaturesAccess(self, pIProProfile, pIComm, cMWNetInfo):
        return _MicroWinExecInterface.SDBCommon_SetPLCFeaturesAccess(self, pIProProfile, pIComm, cMWNetInfo)

    def UpdateConfig(self, arg2):
        return _MicroWinExecInterface.SDBCommon_UpdateConfig(self, arg2)

    def Store(self, rDest):
        return _MicroWinExecInterface.SDBCommon_Store(self, rDest)

    def Retrieve(self, rSrc, bInitVer):
        return _MicroWinExecInterface.SDBCommon_Retrieve(self, rSrc, bInitVer)

    def SetBlockData(self, ppbyParamData):
        return _MicroWinExecInterface.SDBCommon_SetBlockData(self, ppbyParamData)

    def GetBlockData(self, pnParamBytes, ppbyParamData):
        return _MicroWinExecInterface.SDBCommon_GetBlockData(self, pnParamBytes, ppbyParamData)

    def GetType(self):
        return _MicroWinExecInterface.SDBCommon_GetType(self)

    def IsDigital(self):
        return _MicroWinExecInterface.SDBCommon_IsDigital(self)

    def IsAnalog(self):
        return _MicroWinExecInterface.SDBCommon_IsAnalog(self)

    def GetCountInputs(self):
        return _MicroWinExecInterface.SDBCommon_GetCountInputs(self)

    def GetCountOutputs(self):
        return _MicroWinExecInterface.SDBCommon_GetCountOutputs(self)

    def GetAnalogInputs(self):
        return _MicroWinExecInterface.SDBCommon_GetAnalogInputs(self)

    def GetAnalogOutputs(self):
        return _MicroWinExecInterface.SDBCommon_GetAnalogOutputs(self)

    def GetDigitalInputs(self):
        return _MicroWinExecInterface.SDBCommon_GetDigitalInputs(self)

    def GetDigitalOutputs(self):
        return _MicroWinExecInterface.SDBCommon_GetDigitalOutputs(self)

    def GetRTDInputs(self):
        return _MicroWinExecInterface.SDBCommon_GetRTDInputs(self)

    def GetTCInputs(self):
        return _MicroWinExecInterface.SDBCommon_GetTCInputs(self)

    def GetCommunicationPorts(self):
        return _MicroWinExecInterface.SDBCommon_GetCommunicationPorts(self)

    def GetBatteryBoard(self):
        return _MicroWinExecInterface.SDBCommon_GetBatteryBoard(self)

    def GetDP01(self):
        return _MicroWinExecInterface.SDBCommon_GetDP01(self)
    m_communicationPorts = property(_MicroWinExecInterface.SDBCommon_m_communicationPorts_get, _MicroWinExecInterface.SDBCommon_m_communicationPorts_set)
    m_retentiveRanges = property(_MicroWinExecInterface.SDBCommon_m_retentiveRanges_get, _MicroWinExecInterface.SDBCommon_m_retentiveRanges_set)
    m_password = property(_MicroWinExecInterface.SDBCommon_m_password_get, _MicroWinExecInterface.SDBCommon_m_password_set)
    m_backgroundTime = property(_MicroWinExecInterface.SDBCommon_m_backgroundTime_get, _MicroWinExecInterface.SDBCommon_m_backgroundTime_set)
    m_startup = property(_MicroWinExecInterface.SDBCommon_m_startup_get, _MicroWinExecInterface.SDBCommon_m_startup_set)
    m_ethernet = property(_MicroWinExecInterface.SDBCommon_m_ethernet_get, _MicroWinExecInterface.SDBCommon_m_ethernet_set)
    m_dataWrite = property(_MicroWinExecInterface.SDBCommon_m_dataWrite_get, _MicroWinExecInterface.SDBCommon_m_dataWrite_set)

# Register SDBCommon in _MicroWinExecInterface:
_MicroWinExecInterface.SDBCommon_swigregister(SDBCommon)

class SDBCPU(SDBBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MicroWinExecInterface.SDBCPU_swiginit(self, _MicroWinExecInterface.new_SDBCPU(*args))
    __swig_destroy__ = _MicroWinExecInterface.delete_SDBCPU

    def __eq__(self, rSrc):
        return _MicroWinExecInterface.SDBCPU___eq__(self, rSrc)

    def Empty(self):
        return _MicroWinExecInterface.SDBCPU_Empty(self)

    def SetPLCFeaturesAccess(self, pIProProfile, pIComm, cMWNetInfo):
        return _MicroWinExecInterface.SDBCPU_SetPLCFeaturesAccess(self, pIProProfile, pIComm, cMWNetInfo)

    def UpdateConfig(self, dwSubModuleIDent):
        return _MicroWinExecInterface.SDBCPU_UpdateConfig(self, dwSubModuleIDent)

    def GetParamId(self):
        return _MicroWinExecInterface.SDBCPU_GetParamId(self)

    def ValidateRanges(self):
        return _MicroWinExecInterface.SDBCPU_ValidateRanges(self)

    def Store(self, rDest):
        return _MicroWinExecInterface.SDBCPU_Store(self, rDest)

    def Retrieve(self, *args):
        return _MicroWinExecInterface.SDBCPU_Retrieve(self, *args)

    def SetBlockData(self, ppbyParamData):
        return _MicroWinExecInterface.SDBCPU_SetBlockData(self, ppbyParamData)

    def GetBlockData(self, pnParamBytes, ppbyParamData):
        return _MicroWinExecInterface.SDBCPU_GetBlockData(self, pnParamBytes, ppbyParamData)

    def GetType(self):
        return _MicroWinExecInterface.SDBCPU_GetType(self)

    def IsDigital(self):
        return _MicroWinExecInterface.SDBCPU_IsDigital(self)

    def IsAnalog(self):
        return _MicroWinExecInterface.SDBCPU_IsAnalog(self)

    def IsBatteryBoardSupported(self):
        return _MicroWinExecInterface.SDBCPU_IsBatteryBoardSupported(self)

    def IsExtendedFiltersSupported(self):
        return _MicroWinExecInterface.SDBCPU_IsExtendedFiltersSupported(self)

    def GetCountInputs(self):
        return _MicroWinExecInterface.SDBCPU_GetCountInputs(self)

    def GetCountOutputs(self):
        return _MicroWinExecInterface.SDBCPU_GetCountOutputs(self)

    def GetAnalogInputs(self):
        return _MicroWinExecInterface.SDBCPU_GetAnalogInputs(self)

    def GetAnalogOutputs(self):
        return _MicroWinExecInterface.SDBCPU_GetAnalogOutputs(self)

    def GetDigitalInputs(self):
        return _MicroWinExecInterface.SDBCPU_GetDigitalInputs(self)

    def GetDigitalOutputs(self):
        return _MicroWinExecInterface.SDBCPU_GetDigitalOutputs(self)

    def GetRTDInputs(self):
        return _MicroWinExecInterface.SDBCPU_GetRTDInputs(self)

    def GetTCInputs(self):
        return _MicroWinExecInterface.SDBCPU_GetTCInputs(self)

    def GetCommunicationPorts(self):
        return _MicroWinExecInterface.SDBCPU_GetCommunicationPorts(self)

    def GetBatteryBoard(self):
        return _MicroWinExecInterface.SDBCPU_GetBatteryBoard(self)

    def GetDP01(self):
        return _MicroWinExecInterface.SDBCPU_GetDP01(self)

    def GetName(self):
        return _MicroWinExecInterface.SDBCPU_GetName(self)

    def GetVersion(self):
        return _MicroWinExecInterface.SDBCPU_GetVersion(self)

    def IsVersion1(self):
        return _MicroWinExecInterface.SDBCPU_IsVersion1(self)
    m_digitalInputs = property(_MicroWinExecInterface.SDBCPU_m_digitalInputs_get, _MicroWinExecInterface.SDBCPU_m_digitalInputs_set)
    m_digitalOutputs = property(_MicroWinExecInterface.SDBCPU_m_digitalOutputs_get, _MicroWinExecInterface.SDBCPU_m_digitalOutputs_set)
    m_analogInputs = property(_MicroWinExecInterface.SDBCPU_m_analogInputs_get, _MicroWinExecInterface.SDBCPU_m_analogInputs_set)
    m_analogOutputs = property(_MicroWinExecInterface.SDBCPU_m_analogOutputs_get, _MicroWinExecInterface.SDBCPU_m_analogOutputs_set)

# Register SDBCPU in _MicroWinExecInterface:
_MicroWinExecInterface.SDBCPU_swigregister(SDBCPU)

class SDBSignalBoard(SDBBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MicroWinExecInterface.SDBSignalBoard_swiginit(self, _MicroWinExecInterface.new_SDBSignalBoard(*args))
    __swig_destroy__ = _MicroWinExecInterface.delete_SDBSignalBoard

    def __eq__(self, rSrc):
        return _MicroWinExecInterface.SDBSignalBoard___eq__(self, rSrc)

    def Empty(self):
        return _MicroWinExecInterface.SDBSignalBoard_Empty(self)

    def SetPLCFeaturesAccess(self, pIProProfile, pIComm, cMWNetInfo):
        return _MicroWinExecInterface.SDBSignalBoard_SetPLCFeaturesAccess(self, pIProProfile, pIComm, cMWNetInfo)

    def UpdateConfig(self, dwSubModuleIDent):
        return _MicroWinExecInterface.SDBSignalBoard_UpdateConfig(self, dwSubModuleIDent)

    def GetParamId(self):
        return _MicroWinExecInterface.SDBSignalBoard_GetParamId(self)

    def ValidateRanges(self):
        return _MicroWinExecInterface.SDBSignalBoard_ValidateRanges(self)

    def Store(self, rDest):
        return _MicroWinExecInterface.SDBSignalBoard_Store(self, rDest)

    def Retrieve(self, *args):
        return _MicroWinExecInterface.SDBSignalBoard_Retrieve(self, *args)

    def SetBlockData(self, ppbyParamData):
        return _MicroWinExecInterface.SDBSignalBoard_SetBlockData(self, ppbyParamData)

    def GetBlockData(self, pnParamBytes, ppbyParamData):
        return _MicroWinExecInterface.SDBSignalBoard_GetBlockData(self, pnParamBytes, ppbyParamData)

    def GetType(self):
        return _MicroWinExecInterface.SDBSignalBoard_GetType(self)

    def IsDigital(self):
        return _MicroWinExecInterface.SDBSignalBoard_IsDigital(self)

    def IsAnalog(self):
        return _MicroWinExecInterface.SDBSignalBoard_IsAnalog(self)

    def IsCommunication(self):
        return _MicroWinExecInterface.SDBSignalBoard_IsCommunication(self)

    def IsBatteryBoard(self):
        return _MicroWinExecInterface.SDBSignalBoard_IsBatteryBoard(self)

    def IsRTD(self):
        return _MicroWinExecInterface.SDBSignalBoard_IsRTD(self)

    def GetCountInputs(self):
        return _MicroWinExecInterface.SDBSignalBoard_GetCountInputs(self)

    def GetCountOutputs(self):
        return _MicroWinExecInterface.SDBSignalBoard_GetCountOutputs(self)

    def GetAnalogInputs(self):
        return _MicroWinExecInterface.SDBSignalBoard_GetAnalogInputs(self)

    def GetAnalogOutputs(self):
        return _MicroWinExecInterface.SDBSignalBoard_GetAnalogOutputs(self)

    def GetDigitalInputs(self):
        return _MicroWinExecInterface.SDBSignalBoard_GetDigitalInputs(self)

    def GetDigitalOutputs(self):
        return _MicroWinExecInterface.SDBSignalBoard_GetDigitalOutputs(self)

    def GetRTDInputs(self):
        return _MicroWinExecInterface.SDBSignalBoard_GetRTDInputs(self)

    def GetTCInputs(self):
        return _MicroWinExecInterface.SDBSignalBoard_GetTCInputs(self)

    def GetCommunicationPorts(self):
        return _MicroWinExecInterface.SDBSignalBoard_GetCommunicationPorts(self)

    def GetBatteryBoard(self):
        return _MicroWinExecInterface.SDBSignalBoard_GetBatteryBoard(self)

    def GetDP01(self):
        return _MicroWinExecInterface.SDBSignalBoard_GetDP01(self)
    m_digitalInputs = property(_MicroWinExecInterface.SDBSignalBoard_m_digitalInputs_get, _MicroWinExecInterface.SDBSignalBoard_m_digitalInputs_set)
    m_digitalOutputs = property(_MicroWinExecInterface.SDBSignalBoard_m_digitalOutputs_get, _MicroWinExecInterface.SDBSignalBoard_m_digitalOutputs_set)
    m_analogInputs = property(_MicroWinExecInterface.SDBSignalBoard_m_analogInputs_get, _MicroWinExecInterface.SDBSignalBoard_m_analogInputs_set)
    m_analogOutputs = property(_MicroWinExecInterface.SDBSignalBoard_m_analogOutputs_get, _MicroWinExecInterface.SDBSignalBoard_m_analogOutputs_set)
    m_RTDInputs = property(_MicroWinExecInterface.SDBSignalBoard_m_RTDInputs_get, _MicroWinExecInterface.SDBSignalBoard_m_RTDInputs_set)
    m_TCInputs = property(_MicroWinExecInterface.SDBSignalBoard_m_TCInputs_get, _MicroWinExecInterface.SDBSignalBoard_m_TCInputs_set)
    m_communicationPorts = property(_MicroWinExecInterface.SDBSignalBoard_m_communicationPorts_get, _MicroWinExecInterface.SDBSignalBoard_m_communicationPorts_set)
    m_batteryBoard = property(_MicroWinExecInterface.SDBSignalBoard_m_batteryBoard_get, _MicroWinExecInterface.SDBSignalBoard_m_batteryBoard_set)

# Register SDBSignalBoard in _MicroWinExecInterface:
_MicroWinExecInterface.SDBSignalBoard_swigregister(SDBSignalBoard)

class SDBSignalModule(SDBBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MicroWinExecInterface.SDBSignalModule_swiginit(self, _MicroWinExecInterface.new_SDBSignalModule(*args))
    __swig_destroy__ = _MicroWinExecInterface.delete_SDBSignalModule

    def __eq__(self, rSrc):
        return _MicroWinExecInterface.SDBSignalModule___eq__(self, rSrc)

    def Empty(self):
        return _MicroWinExecInterface.SDBSignalModule_Empty(self)

    def SetPLCFeaturesAccess(self, pIProProfile, pIComm, cMWNetInfo):
        return _MicroWinExecInterface.SDBSignalModule_SetPLCFeaturesAccess(self, pIProProfile, pIComm, cMWNetInfo)

    def UpdateConfig(self, dwSubModuleIDent):
        return _MicroWinExecInterface.SDBSignalModule_UpdateConfig(self, dwSubModuleIDent)

    def ValidateRanges(self):
        return _MicroWinExecInterface.SDBSignalModule_ValidateRanges(self)

    def IsUserPowerEnabled(self):
        return _MicroWinExecInterface.SDBSignalModule_IsUserPowerEnabled(self)

    def EnableUserPower(self, bEnable):
        return _MicroWinExecInterface.SDBSignalModule_EnableUserPower(self, bEnable)

    def Store(self, rDest):
        return _MicroWinExecInterface.SDBSignalModule_Store(self, rDest)

    def Retrieve(self, *args):
        return _MicroWinExecInterface.SDBSignalModule_Retrieve(self, *args)

    def SetBlockData(self, ppbyParamData):
        return _MicroWinExecInterface.SDBSignalModule_SetBlockData(self, ppbyParamData)

    def GetBlockData(self, eParamID, pnParamBytes, ppbyParamData):
        return _MicroWinExecInterface.SDBSignalModule_GetBlockData(self, eParamID, pnParamBytes, ppbyParamData)

    def GetType(self):
        return _MicroWinExecInterface.SDBSignalModule_GetType(self)

    def IsDigital(self):
        return _MicroWinExecInterface.SDBSignalModule_IsDigital(self)

    def IsAnalog(self):
        return _MicroWinExecInterface.SDBSignalModule_IsAnalog(self)

    def IsRTD(self):
        return _MicroWinExecInterface.SDBSignalModule_IsRTD(self)

    def IsTC(self):
        return _MicroWinExecInterface.SDBSignalModule_IsTC(self)

    def GetCountInputs(self):
        return _MicroWinExecInterface.SDBSignalModule_GetCountInputs(self)

    def GetCountOutputs(self):
        return _MicroWinExecInterface.SDBSignalModule_GetCountOutputs(self)

    def GetAnalogInputs(self):
        return _MicroWinExecInterface.SDBSignalModule_GetAnalogInputs(self)

    def GetAnalogOutputs(self):
        return _MicroWinExecInterface.SDBSignalModule_GetAnalogOutputs(self)

    def GetDigitalInputs(self):
        return _MicroWinExecInterface.SDBSignalModule_GetDigitalInputs(self)

    def GetDigitalOutputs(self):
        return _MicroWinExecInterface.SDBSignalModule_GetDigitalOutputs(self)

    def GetRTDInputs(self):
        return _MicroWinExecInterface.SDBSignalModule_GetRTDInputs(self)

    def GetTCInputs(self):
        return _MicroWinExecInterface.SDBSignalModule_GetTCInputs(self)

    def GetCommunicationPorts(self):
        return _MicroWinExecInterface.SDBSignalModule_GetCommunicationPorts(self)

    def GetBatteryBoard(self):
        return _MicroWinExecInterface.SDBSignalModule_GetBatteryBoard(self)

    def GetDP01(self):
        return _MicroWinExecInterface.SDBSignalModule_GetDP01(self)

    def GetTotalModules(self, *args):
        return _MicroWinExecInterface.SDBSignalModule_GetTotalModules(self, *args)

    def GetDeviceType(self):
        return _MicroWinExecInterface.SDBSignalModule_GetDeviceType(self)

    def GetDeviceVersion(self):
        return _MicroWinExecInterface.SDBSignalModule_GetDeviceVersion(self)
    m_digitalInputs = property(_MicroWinExecInterface.SDBSignalModule_m_digitalInputs_get, _MicroWinExecInterface.SDBSignalModule_m_digitalInputs_set)
    m_digitalOutputs = property(_MicroWinExecInterface.SDBSignalModule_m_digitalOutputs_get, _MicroWinExecInterface.SDBSignalModule_m_digitalOutputs_set)
    m_analogInputs = property(_MicroWinExecInterface.SDBSignalModule_m_analogInputs_get, _MicroWinExecInterface.SDBSignalModule_m_analogInputs_set)
    m_analogOutputs = property(_MicroWinExecInterface.SDBSignalModule_m_analogOutputs_get, _MicroWinExecInterface.SDBSignalModule_m_analogOutputs_set)
    m_RTDInputs = property(_MicroWinExecInterface.SDBSignalModule_m_RTDInputs_get, _MicroWinExecInterface.SDBSignalModule_m_RTDInputs_set)
    m_TCInputs = property(_MicroWinExecInterface.SDBSignalModule_m_TCInputs_get, _MicroWinExecInterface.SDBSignalModule_m_TCInputs_set)
    m_DP01 = property(_MicroWinExecInterface.SDBSignalModule_m_DP01_get, _MicroWinExecInterface.SDBSignalModule_m_DP01_set)

# Register SDBSignalModule in _MicroWinExecInterface:
_MicroWinExecInterface.SDBSignalModule_swigregister(SDBSignalModule)

class SCAN_TIMES_STRUCT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    last = property(_MicroWinExecInterface.SCAN_TIMES_STRUCT_last_get, _MicroWinExecInterface.SCAN_TIMES_STRUCT_last_set)
    min = property(_MicroWinExecInterface.SCAN_TIMES_STRUCT_min_get, _MicroWinExecInterface.SCAN_TIMES_STRUCT_min_set)
    max = property(_MicroWinExecInterface.SCAN_TIMES_STRUCT_max_get, _MicroWinExecInterface.SCAN_TIMES_STRUCT_max_set)

    def __init__(self):
        _MicroWinExecInterface.SCAN_TIMES_STRUCT_swiginit(self, _MicroWinExecInterface.new_SCAN_TIMES_STRUCT())
    __swig_destroy__ = _MicroWinExecInterface.delete_SCAN_TIMES_STRUCT

# Register SCAN_TIMES_STRUCT in _MicroWinExecInterface:
_MicroWinExecInterface.SCAN_TIMES_STRUCT_swigregister(SCAN_TIMES_STRUCT)
PORT_0_PARAM = cvar.PORT_0_PARAM
PORT_1_PARAM = cvar.PORT_1_PARAM
RET_RANGES_PARAM = cvar.RET_RANGES_PARAM
INPUT_DELAY_PARAM = cvar.INPUT_DELAY_PARAM
AI_FILTER_PARAM = cvar.AI_FILTER_PARAM
PULSE_BITS_PARAM = cvar.PULSE_BITS_PARAM
PROTECT_PARAM = cvar.PROTECT_PARAM
COM_BACKGROUND_PARAM = cvar.COM_BACKGROUND_PARAM
OLD_COMM_PARAM_LENGTH = cvar.OLD_COMM_PARAM_LENGTH
STATION_ADDR_OFFS = cvar.STATION_ADDR_OFFS
CUR_COMM_PARAM_LENGTH = cvar.CUR_COMM_PARAM_LENGTH
NODE_ADDR_OFFS = cvar.NODE_ADDR_OFFS
RET_RANGES_LEN = cvar.RET_RANGES_LEN
DELAY_PARAM_LEN = cvar.DELAY_PARAM_LEN
DELAY_PARAM_LEN_216 = cvar.DELAY_PARAM_LEN_216
PORT_1_ADD_FACTOR = cvar.PORT_1_ADD_FACTOR
HIGH_ADDR_OFFS = cvar.HIGH_ADDR_OFFS
RETRY_COUNT_OFFS = cvar.RETRY_COUNT_OFFS
BAUD_RATE_OFFS = cvar.BAUD_RATE_OFFS
UPDATE_FACTOR_OFFS = cvar.UPDATE_FACTOR_OFFS
ANALOG_INPUT_FILTER_LEN = cvar.ANALOG_INPUT_FILTER_LEN
COM_BACKGROUND_LEN = cvar.COM_BACKGROUND_LEN
PROTECTION_LEVEL_LEN = cvar.PROTECTION_LEVEL_LEN
PULSE_CATCH_ENABLE_LEN = cvar.PULSE_CATCH_ENABLE_LEN

class CPU_ERRORS_STRUCT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    errCode = property(_MicroWinExecInterface.CPU_ERRORS_STRUCT_errCode_get, _MicroWinExecInterface.CPU_ERRORS_STRUCT_errCode_set)
    errStr = property(_MicroWinExecInterface.CPU_ERRORS_STRUCT_errStr_get, _MicroWinExecInterface.CPU_ERRORS_STRUCT_errStr_set)
    pathStr = property(_MicroWinExecInterface.CPU_ERRORS_STRUCT_pathStr_get, _MicroWinExecInterface.CPU_ERRORS_STRUCT_pathStr_set)

    def __init__(self):
        _MicroWinExecInterface.CPU_ERRORS_STRUCT_swiginit(self, _MicroWinExecInterface.new_CPU_ERRORS_STRUCT())
    __swig_destroy__ = _MicroWinExecInterface.delete_CPU_ERRORS_STRUCT

# Register CPU_ERRORS_STRUCT in _MicroWinExecInterface:
_MicroWinExecInterface.CPU_ERRORS_STRUCT_swigregister(CPU_ERRORS_STRUCT)
CPU_ERROR_STR_SIZE = cvar.CPU_ERROR_STR_SIZE

class MODULE_ERRORS_STRUCT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    errStr = property(_MicroWinExecInterface.MODULE_ERRORS_STRUCT_errStr_get, _MicroWinExecInterface.MODULE_ERRORS_STRUCT_errStr_set)

    def __init__(self):
        _MicroWinExecInterface.MODULE_ERRORS_STRUCT_swiginit(self, _MicroWinExecInterface.new_MODULE_ERRORS_STRUCT())
    __swig_destroy__ = _MicroWinExecInterface.delete_MODULE_ERRORS_STRUCT

# Register MODULE_ERRORS_STRUCT in _MicroWinExecInterface:
_MicroWinExecInterface.MODULE_ERRORS_STRUCT_swigregister(MODULE_ERRORS_STRUCT)
MAX_MODULES = cvar.MAX_MODULES
MOD_ERROR_STR_SIZE = cvar.MOD_ERROR_STR_SIZE
MOD_CFG_ERROR = cvar.MOD_CFG_ERROR
MOD_INT_ERROR = cvar.MOD_INT_ERROR
MOD_RNG_ERROR = cvar.MOD_RNG_ERROR
MOD_PWR_ERROR = cvar.MOD_PWR_ERROR
MOD_FUZ_ERROR = cvar.MOD_FUZ_ERROR
MOD_LTB_ERROR = cvar.MOD_LTB_ERROR

class MODULE_DATA_STRUCT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    modType = property(_MicroWinExecInterface.MODULE_DATA_STRUCT_modType_get, _MicroWinExecInterface.MODULE_DATA_STRUCT_modType_set)
    modPoints = property(_MicroWinExecInterface.MODULE_DATA_STRUCT_modPoints_get, _MicroWinExecInterface.MODULE_DATA_STRUCT_modPoints_set)
    modStart = property(_MicroWinExecInterface.MODULE_DATA_STRUCT_modStart_get, _MicroWinExecInterface.MODULE_DATA_STRUCT_modStart_set)
    bIsIntelligent = property(_MicroWinExecInterface.MODULE_DATA_STRUCT_bIsIntelligent_get, _MicroWinExecInterface.MODULE_DATA_STRUCT_bIsIntelligent_set)

    def __init__(self):
        _MicroWinExecInterface.MODULE_DATA_STRUCT_swiginit(self, _MicroWinExecInterface.new_MODULE_DATA_STRUCT())
    __swig_destroy__ = _MicroWinExecInterface.delete_MODULE_DATA_STRUCT

# Register MODULE_DATA_STRUCT in _MicroWinExecInterface:
_MicroWinExecInterface.MODULE_DATA_STRUCT_swigregister(MODULE_DATA_STRUCT)
MOD_TYPE_STR_SIZE = cvar.MOD_TYPE_STR_SIZE
MOD_POINTS_STR_SIZE = cvar.MOD_POINTS_STR_SIZE
MOD_START_STR_SIZE = cvar.MOD_START_STR_SIZE
INT_MOD_NAME_SIZE = cvar.INT_MOD_NAME_SIZE
INT_MOD_REV_SIZE = cvar.INT_MOD_REV_SIZE
INT_MOD_OTHER_SIZE = cvar.INT_MOD_OTHER_SIZE

class SMART_MODULE_INFO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    moduleName = property(_MicroWinExecInterface.SMART_MODULE_INFO_moduleName_get, _MicroWinExecInterface.SMART_MODULE_INFO_moduleName_set)
    moduleRevision = property(_MicroWinExecInterface.SMART_MODULE_INFO_moduleRevision_get, _MicroWinExecInterface.SMART_MODULE_INFO_moduleRevision_set)
    wModuleError = property(_MicroWinExecInterface.SMART_MODULE_INFO_wModuleError_get, _MicroWinExecInterface.SMART_MODULE_INFO_wModuleError_set)
    moduleOther = property(_MicroWinExecInterface.SMART_MODULE_INFO_moduleOther_get, _MicroWinExecInterface.SMART_MODULE_INFO_moduleOther_set)

    def __init__(self):
        _MicroWinExecInterface.SMART_MODULE_INFO_swiginit(self, _MicroWinExecInterface.new_SMART_MODULE_INFO())
    __swig_destroy__ = _MicroWinExecInterface.delete_SMART_MODULE_INFO

# Register SMART_MODULE_INFO in _MicroWinExecInterface:
_MicroWinExecInterface.SMART_MODULE_INFO_swigregister(SMART_MODULE_INFO)

class FORCED_POINT_STRUCT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    address = property(_MicroWinExecInterface.FORCED_POINT_STRUCT_address_get, _MicroWinExecInterface.FORCED_POINT_STRUCT_address_set)
    value = property(_MicroWinExecInterface.FORCED_POINT_STRUCT_value_get, _MicroWinExecInterface.FORCED_POINT_STRUCT_value_set)

    def __init__(self):
        _MicroWinExecInterface.FORCED_POINT_STRUCT_swiginit(self, _MicroWinExecInterface.new_FORCED_POINT_STRUCT())
    __swig_destroy__ = _MicroWinExecInterface.delete_FORCED_POINT_STRUCT

# Register FORCED_POINT_STRUCT in _MicroWinExecInterface:
_MicroWinExecInterface.FORCED_POINT_STRUCT_swigregister(FORCED_POINT_STRUCT)

class FORCE_DATA_STRUCT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    outFlags = property(_MicroWinExecInterface.FORCE_DATA_STRUCT_outFlags_get, _MicroWinExecInterface.FORCE_DATA_STRUCT_outFlags_set)
    outValues = property(_MicroWinExecInterface.FORCE_DATA_STRUCT_outValues_get, _MicroWinExecInterface.FORCE_DATA_STRUCT_outValues_set)
    inFlags = property(_MicroWinExecInterface.FORCE_DATA_STRUCT_inFlags_get, _MicroWinExecInterface.FORCE_DATA_STRUCT_inFlags_set)
    inValues = property(_MicroWinExecInterface.FORCE_DATA_STRUCT_inValues_get, _MicroWinExecInterface.FORCE_DATA_STRUCT_inValues_set)
    point = property(_MicroWinExecInterface.FORCE_DATA_STRUCT_point_get, _MicroWinExecInterface.FORCE_DATA_STRUCT_point_set)

    def __init__(self):
        _MicroWinExecInterface.FORCE_DATA_STRUCT_swiginit(self, _MicroWinExecInterface.new_FORCE_DATA_STRUCT())
    __swig_destroy__ = _MicroWinExecInterface.delete_FORCE_DATA_STRUCT

# Register FORCE_DATA_STRUCT in _MicroWinExecInterface:
_MicroWinExecInterface.FORCE_DATA_STRUCT_swigregister(FORCE_DATA_STRUCT)
MAX_FORCED_SIZE = cvar.MAX_FORCED_SIZE

class TIME_DATE_STRUCT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    status = property(_MicroWinExecInterface.TIME_DATE_STRUCT_status_get, _MicroWinExecInterface.TIME_DATE_STRUCT_status_set)
    year = property(_MicroWinExecInterface.TIME_DATE_STRUCT_year_get, _MicroWinExecInterface.TIME_DATE_STRUCT_year_set)
    month = property(_MicroWinExecInterface.TIME_DATE_STRUCT_month_get, _MicroWinExecInterface.TIME_DATE_STRUCT_month_set)
    date = property(_MicroWinExecInterface.TIME_DATE_STRUCT_date_get, _MicroWinExecInterface.TIME_DATE_STRUCT_date_set)
    hour = property(_MicroWinExecInterface.TIME_DATE_STRUCT_hour_get, _MicroWinExecInterface.TIME_DATE_STRUCT_hour_set)
    minutes = property(_MicroWinExecInterface.TIME_DATE_STRUCT_minutes_get, _MicroWinExecInterface.TIME_DATE_STRUCT_minutes_set)
    seconds = property(_MicroWinExecInterface.TIME_DATE_STRUCT_seconds_get, _MicroWinExecInterface.TIME_DATE_STRUCT_seconds_set)
    spare = property(_MicroWinExecInterface.TIME_DATE_STRUCT_spare_get, _MicroWinExecInterface.TIME_DATE_STRUCT_spare_set)
    weekDay = property(_MicroWinExecInterface.TIME_DATE_STRUCT_weekDay_get, _MicroWinExecInterface.TIME_DATE_STRUCT_weekDay_set)

    def __init__(self):
        _MicroWinExecInterface.TIME_DATE_STRUCT_swiginit(self, _MicroWinExecInterface.new_TIME_DATE_STRUCT())
    __swig_destroy__ = _MicroWinExecInterface.delete_TIME_DATE_STRUCT

# Register TIME_DATE_STRUCT in _MicroWinExecInterface:
_MicroWinExecInterface.TIME_DATE_STRUCT_swigregister(TIME_DATE_STRUCT)

cDEVICECOMPASS_MAX_RET_RANGES = _MicroWinExecInterface.cDEVICECOMPASS_MAX_RET_RANGES
cDEVICECOMPASS_MAX_STATION_NAME_SIZE = _MicroWinExecInterface.cDEVICECOMPASS_MAX_STATION_NAME_SIZE
cDEVICECOMPASS_SALT_SIZE = _MicroWinExecInterface.cDEVICECOMPASS_SALT_SIZE
cDEVICECOMPASS_HASH_SIZE = _MicroWinExecInterface.cDEVICECOMPASS_HASH_SIZE
cDEVICECOMPASS_ANY_POINTER_SIZE = _MicroWinExecInterface.cDEVICECOMPASS_ANY_POINTER_SIZE
cDEVICECOMPASS_EXTENDED_BLOCK_FORMAT = _MicroWinExecInterface.cDEVICECOMPASS_EXTENDED_BLOCK_FORMAT
eDEVICECOMPASS_SDBPARAM_COMMPORT0_ID = _MicroWinExecInterface.eDEVICECOMPASS_SDBPARAM_COMMPORT0_ID
eDEVICECOMPASS_SDBPARAM_RETENTIVERANGE_ID = _MicroWinExecInterface.eDEVICECOMPASS_SDBPARAM_RETENTIVERANGE_ID
eDEVICECOMPASS_SDBPARAM_COM_BACKGROUND_ID = _MicroWinExecInterface.eDEVICECOMPASS_SDBPARAM_COM_BACKGROUND_ID
eDEVICECOMPASS_SDBPARAM_COMMPORT1_ID = _MicroWinExecInterface.eDEVICECOMPASS_SDBPARAM_COMMPORT1_ID
eDEVICECOMPASS_SDBPARAM_ETHERNET_ID = _MicroWinExecInterface.eDEVICECOMPASS_SDBPARAM_ETHERNET_ID
eDEVICECOMPASS_SDBPARAM_STARTUP_ID = _MicroWinExecInterface.eDEVICECOMPASS_SDBPARAM_STARTUP_ID
eDEVICECOMPASS_SDBPARAM_PASSWORD_ID = _MicroWinExecInterface.eDEVICECOMPASS_SDBPARAM_PASSWORD_ID
eDEVICECOMPASS_SDBPARAM_DATA_WRITE_ID = _MicroWinExecInterface.eDEVICECOMPASS_SDBPARAM_DATA_WRITE_ID
eDEVICECOMPASS_SDBPARAM_CPU_ONBOARD_IO_ID = _MicroWinExecInterface.eDEVICECOMPASS_SDBPARAM_CPU_ONBOARD_IO_ID
eDEVICECOMPASS_SDBPARAM_CPU_ONBOARD_ANALOG_IO_ID = _MicroWinExecInterface.eDEVICECOMPASS_SDBPARAM_CPU_ONBOARD_ANALOG_IO_ID
eDEVICECOMPASS_SDBPARAM_SIGNAL_BOARD_IO_ID = _MicroWinExecInterface.eDEVICECOMPASS_SDBPARAM_SIGNAL_BOARD_IO_ID
eDEVICECOMPASS_SDBPARAM_SIGNAL_MODULE_0_IO_ID = _MicroWinExecInterface.eDEVICECOMPASS_SDBPARAM_SIGNAL_MODULE_0_IO_ID
eDEVICECOMPASS_SDBPARAM_SIGNAL_MODULE_1_IO_ID = _MicroWinExecInterface.eDEVICECOMPASS_SDBPARAM_SIGNAL_MODULE_1_IO_ID
eDEVICECOMPASS_SDBPARAM_SIGNAL_MODULE_2_IO_ID = _MicroWinExecInterface.eDEVICECOMPASS_SDBPARAM_SIGNAL_MODULE_2_IO_ID
eDEVICECOMPASS_SDBPARAM_SIGNAL_MODULE_3_IO_ID = _MicroWinExecInterface.eDEVICECOMPASS_SDBPARAM_SIGNAL_MODULE_3_IO_ID
eDEVICECOMPASS_SDBPARAM_SIGNAL_MODULE_4_IO_ID = _MicroWinExecInterface.eDEVICECOMPASS_SDBPARAM_SIGNAL_MODULE_4_IO_ID
eDEVICECOMPASS_SDBPARAM_SIGNAL_MODULE_5_IO_ID = _MicroWinExecInterface.eDEVICECOMPASS_SDBPARAM_SIGNAL_MODULE_5_IO_ID
eDEVICECOMPASS_SDBPARAM_DATA_LOG_0_IO_ID = _MicroWinExecInterface.eDEVICECOMPASS_SDBPARAM_DATA_LOG_0_IO_ID
eDEVICECOMPASS_SDBPARAM_DATA_LOG_1_IO_ID = _MicroWinExecInterface.eDEVICECOMPASS_SDBPARAM_DATA_LOG_1_IO_ID
eDEVICECOMPASS_SDBPARAM_DATA_LOG_2_IO_ID = _MicroWinExecInterface.eDEVICECOMPASS_SDBPARAM_DATA_LOG_2_IO_ID
eDEVICECOMPASS_SDBPARAM_DATA_LOG_3_IO_ID = _MicroWinExecInterface.eDEVICECOMPASS_SDBPARAM_DATA_LOG_3_IO_ID
eDEVICECOMPASS_SDBPARAM_MOTION_AXIS_0_IO_ID = _MicroWinExecInterface.eDEVICECOMPASS_SDBPARAM_MOTION_AXIS_0_IO_ID
eDEVICECOMPASS_SDBPARAM_MOTION_AXIS_1_IO_ID = _MicroWinExecInterface.eDEVICECOMPASS_SDBPARAM_MOTION_AXIS_1_IO_ID
eDEVICECOMPASS_SDBPARAM_MOTION_AXIS_2_IO_ID = _MicroWinExecInterface.eDEVICECOMPASS_SDBPARAM_MOTION_AXIS_2_IO_ID
eDEVICECOMPASS_PROTOCOL_PPI = _MicroWinExecInterface.eDEVICECOMPASS_PROTOCOL_PPI
eDEVICECOMPASS_PROTOCOL_DPT = _MicroWinExecInterface.eDEVICECOMPASS_PROTOCOL_DPT
eDEVICECOMPASS_PROTOCOL_DP = _MicroWinExecInterface.eDEVICECOMPASS_PROTOCOL_DP
eDEVICECOMPASS_PROTOCOL_MPI = _MicroWinExecInterface.eDEVICECOMPASS_PROTOCOL_MPI
eDEVICECOMPASS_DEVICE_TYPE_MASTER = _MicroWinExecInterface.eDEVICECOMPASS_DEVICE_TYPE_MASTER
eDEVICECOMPASS_DEVICE_TYPE_SLAVE = _MicroWinExecInterface.eDEVICECOMPASS_DEVICE_TYPE_SLAVE
eDEVICECOMPASS_PROTOCOL_TYPE_10BIT = _MicroWinExecInterface.eDEVICECOMPASS_PROTOCOL_TYPE_10BIT
eDEVICECOMPASS_PROTOCOL_TYPE_11BIT = _MicroWinExecInterface.eDEVICECOMPASS_PROTOCOL_TYPE_11BIT
eDEVICECOMPASS_PORT0 = _MicroWinExecInterface.eDEVICECOMPASS_PORT0
eDEVICECOMPASS_PORT1 = _MicroWinExecInterface.eDEVICECOMPASS_PORT1
eDEVICECOMPASS_ERROR_NONE = _MicroWinExecInterface.eDEVICECOMPASS_ERROR_NONE
eDEVICECOMPASS_ERROR_DUPLICATE_INSERT = _MicroWinExecInterface.eDEVICECOMPASS_ERROR_DUPLICATE_INSERT
eDEVICECOMPASS_ERROR_INVALID_FILE_VERSION = _MicroWinExecInterface.eDEVICECOMPASS_ERROR_INVALID_FILE_VERSION
eDEVICECOMPASS_ERROR_DUPLICATE_TYPE_AND_VERSION = _MicroWinExecInterface.eDEVICECOMPASS_ERROR_DUPLICATE_TYPE_AND_VERSION
eDEVICECOMPASS_ERROR_INVALID_INDEX = _MicroWinExecInterface.eDEVICECOMPASS_ERROR_INVALID_INDEX
eDEVICECOMPASS_ERROR_TYPE_VERSION_NOT_FOUND = _MicroWinExecInterface.eDEVICECOMPASS_ERROR_TYPE_VERSION_NOT_FOUND
eDEVICECOMPASS_ERROR_NEW_FL_NOT_COMPATIBLE = _MicroWinExecInterface.eDEVICECOMPASS_ERROR_NEW_FL_NOT_COMPATIBLE
eDEVICECOMPASS_ERROR_FILE_NOT_FOUND = _MicroWinExecInterface.eDEVICECOMPASS_ERROR_FILE_NOT_FOUND
eDEVICECOMPASS_BAUD_PROFIBUS_9600BPS = _MicroWinExecInterface.eDEVICECOMPASS_BAUD_PROFIBUS_9600BPS
eDEVICECOMPASS_BAUD_PROFIBUS_19200BPS = _MicroWinExecInterface.eDEVICECOMPASS_BAUD_PROFIBUS_19200BPS
eDEVICECOMPASS_BAUD_PROFIBUS_187500BPS = _MicroWinExecInterface.eDEVICECOMPASS_BAUD_PROFIBUS_187500BPS
eDEVICECOMPASS_BAUD_PROFIBUS_38400BPS = _MicroWinExecInterface.eDEVICECOMPASS_BAUD_PROFIBUS_38400BPS
eDEVICECOMPASS_BAUD_PROFIBUS_45450BPS = _MicroWinExecInterface.eDEVICECOMPASS_BAUD_PROFIBUS_45450BPS
eDEVICECOMPASS_BAUD_PROFIBUS_93750BPS = _MicroWinExecInterface.eDEVICECOMPASS_BAUD_PROFIBUS_93750BPS
eDEVICECOMPASS_BAUD_PROFIBUS_115200BPS = _MicroWinExecInterface.eDEVICECOMPASS_BAUD_PROFIBUS_115200BPS
eDEVICECOMPASS_BAUD_PROFIBUS_500000BPS = _MicroWinExecInterface.eDEVICECOMPASS_BAUD_PROFIBUS_500000BPS
eDEVICECOMPASS_BAUD_PROFIBUS_1000KBPS = _MicroWinExecInterface.eDEVICECOMPASS_BAUD_PROFIBUS_1000KBPS
eDEVICECOMPASS_BAUD_PROFIBUS_1500KBPS = _MicroWinExecInterface.eDEVICECOMPASS_BAUD_PROFIBUS_1500KBPS
eDEVICECOMPASS_BAUD_PROFIBUS_3000KBPS = _MicroWinExecInterface.eDEVICECOMPASS_BAUD_PROFIBUS_3000KBPS
eDEVICECOMPASS_BAUD_PROFIBUS_6000KBPS = _MicroWinExecInterface.eDEVICECOMPASS_BAUD_PROFIBUS_6000KBPS
eDEVICECOMPASS_BAUD_PROFIBUS_12000KBPS = _MicroWinExecInterface.eDEVICECOMPASS_BAUD_PROFIBUS_12000KBPS
eDEVICECOMPASS_BAUD_FREEPORT_300BPS = _MicroWinExecInterface.eDEVICECOMPASS_BAUD_FREEPORT_300BPS
eDEVICECOMPASS_BAUD_FREEPORT_600BPS = _MicroWinExecInterface.eDEVICECOMPASS_BAUD_FREEPORT_600BPS
eDEVICECOMPASS_BAUD_FREEPORT_1200BPS = _MicroWinExecInterface.eDEVICECOMPASS_BAUD_FREEPORT_1200BPS
eDEVICECOMPASS_BAUD_FREEPORT_2400BPS = _MicroWinExecInterface.eDEVICECOMPASS_BAUD_FREEPORT_2400BPS
eDEVICECOMPASS_BAUD_FREEPORT_4800BPS = _MicroWinExecInterface.eDEVICECOMPASS_BAUD_FREEPORT_4800BPS
eDEVICECOMPASS_BAUD_FREEPORT_9600BPS = _MicroWinExecInterface.eDEVICECOMPASS_BAUD_FREEPORT_9600BPS
eDEVICECOMPASS_BAUD_FREEPORT_19200BPS = _MicroWinExecInterface.eDEVICECOMPASS_BAUD_FREEPORT_19200BPS
eDEVICECOMPASS_BAUD_FREEPORT_38400BPS = _MicroWinExecInterface.eDEVICECOMPASS_BAUD_FREEPORT_38400BPS
eDEVICECOMPASS_BAUD_FREEPORT_57600BPS = _MicroWinExecInterface.eDEVICECOMPASS_BAUD_FREEPORT_57600BPS
eDEVICECOMPASS_BAUD_FREEPORT_115200BPS = _MicroWinExecInterface.eDEVICECOMPASS_BAUD_FREEPORT_115200BPS
eDEVICECOMPASS_SDB_COMM_STRUCT_V1 = _MicroWinExecInterface.eDEVICECOMPASS_SDB_COMM_STRUCT_V1
eDEVICECOMPASS_SDB_COMM_STRUCT_V2 = _MicroWinExecInterface.eDEVICECOMPASS_SDB_COMM_STRUCT_V2
eDEVICECOMPASS_SDB_PULSE_CATCH_STRUCT_V1 = _MicroWinExecInterface.eDEVICECOMPASS_SDB_PULSE_CATCH_STRUCT_V1
eDEVICECOMPASS_SDB_PULSE_CATCH_STRUCT_V2 = _MicroWinExecInterface.eDEVICECOMPASS_SDB_PULSE_CATCH_STRUCT_V2
eDEVICECOMPASS_SDB_DI_FILTER_STRUCT_V1 = _MicroWinExecInterface.eDEVICECOMPASS_SDB_DI_FILTER_STRUCT_V1
eDEVICECOMPASS_SDB_DI_FILTER_STRUCT_V2 = _MicroWinExecInterface.eDEVICECOMPASS_SDB_DI_FILTER_STRUCT_V2
eDEVICECOMPASS_MEM_TYPE_DI = _MicroWinExecInterface.eDEVICECOMPASS_MEM_TYPE_DI
eDEVICECOMPASS_MEM_TYPE_DO = _MicroWinExecInterface.eDEVICECOMPASS_MEM_TYPE_DO
eDEVICECOMPASS_MEM_TYPE_M = _MicroWinExecInterface.eDEVICECOMPASS_MEM_TYPE_M
eDEVICECOMPASS_MEM_TYPE_SM = _MicroWinExecInterface.eDEVICECOMPASS_MEM_TYPE_SM
eDEVICECOMPASS_MEM_TYPE_SCR = _MicroWinExecInterface.eDEVICECOMPASS_MEM_TYPE_SCR
eDEVICECOMPASS_MEM_TYPE_V = _MicroWinExecInterface.eDEVICECOMPASS_MEM_TYPE_V
eDEVICECOMPASS_MEM_TYPE_NVV = _MicroWinExecInterface.eDEVICECOMPASS_MEM_TYPE_NVV
eDEVICECOMPASS_MEM_TYPE_T = _MicroWinExecInterface.eDEVICECOMPASS_MEM_TYPE_T
eDEVICECOMPASS_MEM_TYPE_C = _MicroWinExecInterface.eDEVICECOMPASS_MEM_TYPE_C
eDEVICECOMPASS_MEM_TYPE_AI = _MicroWinExecInterface.eDEVICECOMPASS_MEM_TYPE_AI
eDEVICECOMPASS_MEM_TYPE_AQ = _MicroWinExecInterface.eDEVICECOMPASS_MEM_TYPE_AQ
eDEVICECOMPASS_MEM_TYPE_L = _MicroWinExecInterface.eDEVICECOMPASS_MEM_TYPE_L
eDEVICECOMPASS_MEM_TYPE_SD = _MicroWinExecInterface.eDEVICECOMPASS_MEM_TYPE_SD
eDEVICECOMPASS_MEM_TYPE_LD = _MicroWinExecInterface.eDEVICECOMPASS_MEM_TYPE_LD
eDEVICECOMPASS_MEM_TYPE_CL = _MicroWinExecInterface.eDEVICECOMPASS_MEM_TYPE_CL
eDEVICECOMPASS_MEM_TYPE_ALL = _MicroWinExecInterface.eDEVICECOMPASS_MEM_TYPE_ALL
eDEVICECOMPASS_MEM_TYPE_LD_NO_RME = _MicroWinExecInterface.eDEVICECOMPASS_MEM_TYPE_LD_NO_RME
eDEVICECOMPASS_MEM_TYPE_CL_NO_RME = _MicroWinExecInterface.eDEVICECOMPASS_MEM_TYPE_CL_NO_RME
eDEVICECOMPASS_MEM_TYPE_DI_BUILT_IN = _MicroWinExecInterface.eDEVICECOMPASS_MEM_TYPE_DI_BUILT_IN
eDEVICECOMPASS_MEM_TYPE_DO_BUILT_IN = _MicroWinExecInterface.eDEVICECOMPASS_MEM_TYPE_DO_BUILT_IN
eDEVICECOMPASS_MEM_TYPE_AI_BUILT_IN = _MicroWinExecInterface.eDEVICECOMPASS_MEM_TYPE_AI_BUILT_IN
eDEVICECOMPASS_MEM_TYPE_AQ_BUILT_IN = _MicroWinExecInterface.eDEVICECOMPASS_MEM_TYPE_AQ_BUILT_IN
eDEVICECOMPASS_MEM_TYPE_RETENTIVE = _MicroWinExecInterface.eDEVICECOMPASS_MEM_TYPE_RETENTIVE
eDEVICECOMPASS_OPCODE_000x_007x = _MicroWinExecInterface.eDEVICECOMPASS_OPCODE_000x_007x
eDEVICECOMPASS_OPCODE_0080_008F = _MicroWinExecInterface.eDEVICECOMPASS_OPCODE_0080_008F
eDEVICECOMPASS_OPCODE_0090_009F = _MicroWinExecInterface.eDEVICECOMPASS_OPCODE_0090_009F
eDEVICECOMPASS_OPCODE_00A0_00AF = _MicroWinExecInterface.eDEVICECOMPASS_OPCODE_00A0_00AF
eDEVICECOMPASS_OPCODE_00B0_00BF = _MicroWinExecInterface.eDEVICECOMPASS_OPCODE_00B0_00BF
eDEVICECOMPASS_OPCODE_00C0_00CF = _MicroWinExecInterface.eDEVICECOMPASS_OPCODE_00C0_00CF
eDEVICECOMPASS_OPCODE_00D0_00DF = _MicroWinExecInterface.eDEVICECOMPASS_OPCODE_00D0_00DF
eDEVICECOMPASS_OPCODE_00E0_00EF = _MicroWinExecInterface.eDEVICECOMPASS_OPCODE_00E0_00EF
eDEVICECOMPASS_OPCODE_00F0_00FF = _MicroWinExecInterface.eDEVICECOMPASS_OPCODE_00F0_00FF
eDEVICECOMPASS_OPCODE_FE00_FE0F = _MicroWinExecInterface.eDEVICECOMPASS_OPCODE_FE00_FE0F
eDEVICECOMPASS_OPCODE_FE10_FE1F = _MicroWinExecInterface.eDEVICECOMPASS_OPCODE_FE10_FE1F
eDEVICECOMPASS_OPCODE_FE20_FE2F = _MicroWinExecInterface.eDEVICECOMPASS_OPCODE_FE20_FE2F
eDEVICECOMPASS_OPCODE_FE30_FE3F = _MicroWinExecInterface.eDEVICECOMPASS_OPCODE_FE30_FE3F
eDEVICECOMPASS_OPCODE_FE40_FE4F = _MicroWinExecInterface.eDEVICECOMPASS_OPCODE_FE40_FE4F
eDEVICECOMPASS_OPCODE_FE50_FE5F = _MicroWinExecInterface.eDEVICECOMPASS_OPCODE_FE50_FE5F
eDEVICECOMPASS_OPCODE_FE60_FE6F = _MicroWinExecInterface.eDEVICECOMPASS_OPCODE_FE60_FE6F
eDEVICECOMPASS_OPCODE_FE70_FE7F = _MicroWinExecInterface.eDEVICECOMPASS_OPCODE_FE70_FE7F
eDEVICECOMPASS_OPCODE_FE80_FE8F = _MicroWinExecInterface.eDEVICECOMPASS_OPCODE_FE80_FE8F
eDEVICECOMPASS_OPCODE_FE90_FE9F = _MicroWinExecInterface.eDEVICECOMPASS_OPCODE_FE90_FE9F
eDEVICECOMPASS_OPCODE_FEA0_FEAF = _MicroWinExecInterface.eDEVICECOMPASS_OPCODE_FEA0_FEAF
eDEVICECOMPASS_OPCODE_FEB0_FEBF = _MicroWinExecInterface.eDEVICECOMPASS_OPCODE_FEB0_FEBF
eDEVICECOMPASS_OPCODE_FEC0_FECF = _MicroWinExecInterface.eDEVICECOMPASS_OPCODE_FEC0_FECF
eDEVICECOMPASS_OPCODE_FED0_FEDF = _MicroWinExecInterface.eDEVICECOMPASS_OPCODE_FED0_FEDF
eDEVICECOMPASS_OPCODE_FEE0_FEEF = _MicroWinExecInterface.eDEVICECOMPASS_OPCODE_FEE0_FEEF
eDEVICECOMPASS_OPCODE_FEF0_FEFF = _MicroWinExecInterface.eDEVICECOMPASS_OPCODE_FEF0_FEFF
eDEVICECOMPASS_INVALID_TIMER = _MicroWinExecInterface.eDEVICECOMPASS_INVALID_TIMER
eDEVICECOMPASS_TIMER_1MS = _MicroWinExecInterface.eDEVICECOMPASS_TIMER_1MS
eDEVICECOMPASS_TIMER_10MS = _MicroWinExecInterface.eDEVICECOMPASS_TIMER_10MS
eDEVICECOMPASS_TIMER_100MS = _MicroWinExecInterface.eDEVICECOMPASS_TIMER_100MS
eDEVICECOMPASS_MC_32K = _MicroWinExecInterface.eDEVICECOMPASS_MC_32K
eDEVICECOMPASS_MC_64K = _MicroWinExecInterface.eDEVICECOMPASS_MC_64K
eDEVICECOMPASS_MC_128K = _MicroWinExecInterface.eDEVICECOMPASS_MC_128K
cDEVICECOMPASS_TYPE_SIZE = _MicroWinExecInterface.cDEVICECOMPASS_TYPE_SIZE
cDEVICECOMPASS_VERSION_SIZE = _MicroWinExecInterface.cDEVICECOMPASS_VERSION_SIZE
cDEVICECOMPASS_MODULE_LIMIT = _MicroWinExecInterface.cDEVICECOMPASS_MODULE_LIMIT
class sDEVICECOMPASS_TYPE_AND_VERSION(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    aszDeviceType = property(_MicroWinExecInterface.sDEVICECOMPASS_TYPE_AND_VERSION_aszDeviceType_get, _MicroWinExecInterface.sDEVICECOMPASS_TYPE_AND_VERSION_aszDeviceType_set)
    aszDeviceVersion = property(_MicroWinExecInterface.sDEVICECOMPASS_TYPE_AND_VERSION_aszDeviceVersion_get, _MicroWinExecInterface.sDEVICECOMPASS_TYPE_AND_VERSION_aszDeviceVersion_set)

    def __init__(self):
        _MicroWinExecInterface.sDEVICECOMPASS_TYPE_AND_VERSION_swiginit(self, _MicroWinExecInterface.new_sDEVICECOMPASS_TYPE_AND_VERSION())
    __swig_destroy__ = _MicroWinExecInterface.delete_sDEVICECOMPASS_TYPE_AND_VERSION

# Register sDEVICECOMPASS_TYPE_AND_VERSION in _MicroWinExecInterface:
_MicroWinExecInterface.sDEVICECOMPASS_TYPE_AND_VERSION_swigregister(sDEVICECOMPASS_TYPE_AND_VERSION)

class sDEVICECOMPASS_SDB_PORT0(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    paramLen = property(_MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_paramLen_get, _MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_paramLen_set)
    paraID = property(_MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_paraID_get, _MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_paraID_set)
    totalNodes = property(_MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_totalNodes_get, _MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_totalNodes_set)
    fixedNodes = property(_MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_fixedNodes_get, _MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_fixedNodes_set)
    numberPG = property(_MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_numberPG_get, _MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_numberPG_set)
    numberOP_OS = property(_MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_numberOP_OS_get, _MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_numberOP_OS_set)
    nodeType = property(_MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_nodeType_get, _MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_nodeType_set)
    mediaBU = property(_MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_mediaBU_get, _MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_mediaBU_set)
    highAddr = property(_MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_highAddr_get, _MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_highAddr_set)
    nodeAddr = property(_MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_nodeAddr_get, _MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_nodeAddr_set)
    retryCnt = property(_MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_retryCnt_get, _MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_retryCnt_set)
    baudRate = property(_MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_baudRate_get, _MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_baudRate_set)
    mediaType = property(_MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_mediaType_get, _MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_mediaType_set)
    inRing = property(_MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_inRing_get, _MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_inRing_set)
    lsapID = property(_MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_lsapID_get, _MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_lsapID_set)
    GUF = property(_MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_GUF_get, _MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_GUF_set)
    reserved = property(_MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_reserved_get, _MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_reserved_set)
    rdyTime = property(_MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_rdyTime_get, _MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_rdyTime_set)
    modulatorFadeTime = property(_MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_modulatorFadeTime_get, _MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_modulatorFadeTime_set)
    slotTime = property(_MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_slotTime_get, _MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_slotTime_set)
    idleTime1 = property(_MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_idleTime1_get, _MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_idleTime1_set)
    idleTime2 = property(_MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_idleTime2_get, _MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_idleTime2_set)
    multiplier = property(_MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_multiplier_get, _MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_multiplier_set)

    def __init__(self):
        _MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_swiginit(self, _MicroWinExecInterface.new_sDEVICECOMPASS_SDB_PORT0())
    __swig_destroy__ = _MicroWinExecInterface.delete_sDEVICECOMPASS_SDB_PORT0

# Register sDEVICECOMPASS_SDB_PORT0 in _MicroWinExecInterface:
_MicroWinExecInterface.sDEVICECOMPASS_SDB_PORT0_swigregister(sDEVICECOMPASS_SDB_PORT0)

class sDEVICECOMPASS_INPUT_DELAY_PARAMS_V1(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    paramLen = property(_MicroWinExecInterface.sDEVICECOMPASS_INPUT_DELAY_PARAMS_V1_paramLen_get, _MicroWinExecInterface.sDEVICECOMPASS_INPUT_DELAY_PARAMS_V1_paramLen_set)
    paraID = property(_MicroWinExecInterface.sDEVICECOMPASS_INPUT_DELAY_PARAMS_V1_paraID_get, _MicroWinExecInterface.sDEVICECOMPASS_INPUT_DELAY_PARAMS_V1_paraID_set)
    delay10_17 = property(_MicroWinExecInterface.sDEVICECOMPASS_INPUT_DELAY_PARAMS_V1_delay10_17_get, _MicroWinExecInterface.sDEVICECOMPASS_INPUT_DELAY_PARAMS_V1_delay10_17_set)
    delay00_07 = property(_MicroWinExecInterface.sDEVICECOMPASS_INPUT_DELAY_PARAMS_V1_delay00_07_get, _MicroWinExecInterface.sDEVICECOMPASS_INPUT_DELAY_PARAMS_V1_delay00_07_set)

    def __init__(self):
        _MicroWinExecInterface.sDEVICECOMPASS_INPUT_DELAY_PARAMS_V1_swiginit(self, _MicroWinExecInterface.new_sDEVICECOMPASS_INPUT_DELAY_PARAMS_V1())
    __swig_destroy__ = _MicroWinExecInterface.delete_sDEVICECOMPASS_INPUT_DELAY_PARAMS_V1

# Register sDEVICECOMPASS_INPUT_DELAY_PARAMS_V1 in _MicroWinExecInterface:
_MicroWinExecInterface.sDEVICECOMPASS_INPUT_DELAY_PARAMS_V1_swigregister(sDEVICECOMPASS_INPUT_DELAY_PARAMS_V1)

class sDEVICECOMPASS_INPUT_DELAY_PARAMS_V2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    paramLen = property(_MicroWinExecInterface.sDEVICECOMPASS_INPUT_DELAY_PARAMS_V2_paramLen_get, _MicroWinExecInterface.sDEVICECOMPASS_INPUT_DELAY_PARAMS_V2_paramLen_set)
    paraID = property(_MicroWinExecInterface.sDEVICECOMPASS_INPUT_DELAY_PARAMS_V2_paraID_get, _MicroWinExecInterface.sDEVICECOMPASS_INPUT_DELAY_PARAMS_V2_paraID_set)
    delay10_17 = property(_MicroWinExecInterface.sDEVICECOMPASS_INPUT_DELAY_PARAMS_V2_delay10_17_get, _MicroWinExecInterface.sDEVICECOMPASS_INPUT_DELAY_PARAMS_V2_delay10_17_set)
    delay00_07 = property(_MicroWinExecInterface.sDEVICECOMPASS_INPUT_DELAY_PARAMS_V2_delay00_07_get, _MicroWinExecInterface.sDEVICECOMPASS_INPUT_DELAY_PARAMS_V2_delay00_07_set)
    reserved = property(_MicroWinExecInterface.sDEVICECOMPASS_INPUT_DELAY_PARAMS_V2_reserved_get, _MicroWinExecInterface.sDEVICECOMPASS_INPUT_DELAY_PARAMS_V2_reserved_set)
    delay20_27 = property(_MicroWinExecInterface.sDEVICECOMPASS_INPUT_DELAY_PARAMS_V2_delay20_27_get, _MicroWinExecInterface.sDEVICECOMPASS_INPUT_DELAY_PARAMS_V2_delay20_27_set)

    def __init__(self):
        _MicroWinExecInterface.sDEVICECOMPASS_INPUT_DELAY_PARAMS_V2_swiginit(self, _MicroWinExecInterface.new_sDEVICECOMPASS_INPUT_DELAY_PARAMS_V2())
    __swig_destroy__ = _MicroWinExecInterface.delete_sDEVICECOMPASS_INPUT_DELAY_PARAMS_V2

# Register sDEVICECOMPASS_INPUT_DELAY_PARAMS_V2 in _MicroWinExecInterface:
_MicroWinExecInterface.sDEVICECOMPASS_INPUT_DELAY_PARAMS_V2_swigregister(sDEVICECOMPASS_INPUT_DELAY_PARAMS_V2)

class sDEVICECOMPASS_ANALOG_INPUT_FILTER(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    paramLen = property(_MicroWinExecInterface.sDEVICECOMPASS_ANALOG_INPUT_FILTER_paramLen_get, _MicroWinExecInterface.sDEVICECOMPASS_ANALOG_INPUT_FILTER_paramLen_set)
    paraID = property(_MicroWinExecInterface.sDEVICECOMPASS_ANALOG_INPUT_FILTER_paraID_get, _MicroWinExecInterface.sDEVICECOMPASS_ANALOG_INPUT_FILTER_paraID_set)
    aIfiltersMask0 = property(_MicroWinExecInterface.sDEVICECOMPASS_ANALOG_INPUT_FILTER_aIfiltersMask0_get, _MicroWinExecInterface.sDEVICECOMPASS_ANALOG_INPUT_FILTER_aIfiltersMask0_set)
    aIfiltersMask1 = property(_MicroWinExecInterface.sDEVICECOMPASS_ANALOG_INPUT_FILTER_aIfiltersMask1_get, _MicroWinExecInterface.sDEVICECOMPASS_ANALOG_INPUT_FILTER_aIfiltersMask1_set)
    numberSamples = property(_MicroWinExecInterface.sDEVICECOMPASS_ANALOG_INPUT_FILTER_numberSamples_get, _MicroWinExecInterface.sDEVICECOMPASS_ANALOG_INPUT_FILTER_numberSamples_set)
    deadBand = property(_MicroWinExecInterface.sDEVICECOMPASS_ANALOG_INPUT_FILTER_deadBand_get, _MicroWinExecInterface.sDEVICECOMPASS_ANALOG_INPUT_FILTER_deadBand_set)

    def __init__(self):
        _MicroWinExecInterface.sDEVICECOMPASS_ANALOG_INPUT_FILTER_swiginit(self, _MicroWinExecInterface.new_sDEVICECOMPASS_ANALOG_INPUT_FILTER())
    __swig_destroy__ = _MicroWinExecInterface.delete_sDEVICECOMPASS_ANALOG_INPUT_FILTER

# Register sDEVICECOMPASS_ANALOG_INPUT_FILTER in _MicroWinExecInterface:
_MicroWinExecInterface.sDEVICECOMPASS_ANALOG_INPUT_FILTER_swigregister(sDEVICECOMPASS_ANALOG_INPUT_FILTER)

class sDEVICECOMPASS_COM_BACKGROUND_PARAM(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    paramLen = property(_MicroWinExecInterface.sDEVICECOMPASS_COM_BACKGROUND_PARAM_paramLen_get, _MicroWinExecInterface.sDEVICECOMPASS_COM_BACKGROUND_PARAM_paramLen_set)
    paraID = property(_MicroWinExecInterface.sDEVICECOMPASS_COM_BACKGROUND_PARAM_paraID_get, _MicroWinExecInterface.sDEVICECOMPASS_COM_BACKGROUND_PARAM_paraID_set)
    percentComm = property(_MicroWinExecInterface.sDEVICECOMPASS_COM_BACKGROUND_PARAM_percentComm_get, _MicroWinExecInterface.sDEVICECOMPASS_COM_BACKGROUND_PARAM_percentComm_set)
    reserved = property(_MicroWinExecInterface.sDEVICECOMPASS_COM_BACKGROUND_PARAM_reserved_get, _MicroWinExecInterface.sDEVICECOMPASS_COM_BACKGROUND_PARAM_reserved_set)

    def __init__(self):
        _MicroWinExecInterface.sDEVICECOMPASS_COM_BACKGROUND_PARAM_swiginit(self, _MicroWinExecInterface.new_sDEVICECOMPASS_COM_BACKGROUND_PARAM())
    __swig_destroy__ = _MicroWinExecInterface.delete_sDEVICECOMPASS_COM_BACKGROUND_PARAM

# Register sDEVICECOMPASS_COM_BACKGROUND_PARAM in _MicroWinExecInterface:
_MicroWinExecInterface.sDEVICECOMPASS_COM_BACKGROUND_PARAM_swigregister(sDEVICECOMPASS_COM_BACKGROUND_PARAM)

class sDEVICECOMPASS_SECURITY(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    paramLen = property(_MicroWinExecInterface.sDEVICECOMPASS_SECURITY_paramLen_get, _MicroWinExecInterface.sDEVICECOMPASS_SECURITY_paramLen_set)
    paraID = property(_MicroWinExecInterface.sDEVICECOMPASS_SECURITY_paraID_get, _MicroWinExecInterface.sDEVICECOMPASS_SECURITY_paraID_set)
    RS485_Compat = property(_MicroWinExecInterface.sDEVICECOMPASS_SECURITY_RS485_Compat_get, _MicroWinExecInterface.sDEVICECOMPASS_SECURITY_RS485_Compat_set)
    restrictionClass = property(_MicroWinExecInterface.sDEVICECOMPASS_SECURITY_restrictionClass_get, _MicroWinExecInterface.sDEVICECOMPASS_SECURITY_restrictionClass_set)
    salt = property(_MicroWinExecInterface.sDEVICECOMPASS_SECURITY_salt_get, _MicroWinExecInterface.sDEVICECOMPASS_SECURITY_salt_set)
    hashPwd = property(_MicroWinExecInterface.sDEVICECOMPASS_SECURITY_hashPwd_get, _MicroWinExecInterface.sDEVICECOMPASS_SECURITY_hashPwd_set)

    def __init__(self):
        _MicroWinExecInterface.sDEVICECOMPASS_SECURITY_swiginit(self, _MicroWinExecInterface.new_sDEVICECOMPASS_SECURITY())
    __swig_destroy__ = _MicroWinExecInterface.delete_sDEVICECOMPASS_SECURITY

# Register sDEVICECOMPASS_SECURITY in _MicroWinExecInterface:
_MicroWinExecInterface.sDEVICECOMPASS_SECURITY_swigregister(sDEVICECOMPASS_SECURITY)

class sDEVICECOMPASS_DATA_WRITE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    paramLen = property(_MicroWinExecInterface.sDEVICECOMPASS_DATA_WRITE_paramLen_get, _MicroWinExecInterface.sDEVICECOMPASS_DATA_WRITE_paramLen_set)
    paraID = property(_MicroWinExecInterface.sDEVICECOMPASS_DATA_WRITE_paraID_get, _MicroWinExecInterface.sDEVICECOMPASS_DATA_WRITE_paraID_set)
    protectEnable = property(_MicroWinExecInterface.sDEVICECOMPASS_DATA_WRITE_protectEnable_get, _MicroWinExecInterface.sDEVICECOMPASS_DATA_WRITE_protectEnable_set)
    reserved = property(_MicroWinExecInterface.sDEVICECOMPASS_DATA_WRITE_reserved_get, _MicroWinExecInterface.sDEVICECOMPASS_DATA_WRITE_reserved_set)
    any_pointer = property(_MicroWinExecInterface.sDEVICECOMPASS_DATA_WRITE_any_pointer_get, _MicroWinExecInterface.sDEVICECOMPASS_DATA_WRITE_any_pointer_set)

    def __init__(self):
        _MicroWinExecInterface.sDEVICECOMPASS_DATA_WRITE_swiginit(self, _MicroWinExecInterface.new_sDEVICECOMPASS_DATA_WRITE())
    __swig_destroy__ = _MicroWinExecInterface.delete_sDEVICECOMPASS_DATA_WRITE

# Register sDEVICECOMPASS_DATA_WRITE in _MicroWinExecInterface:
_MicroWinExecInterface.sDEVICECOMPASS_DATA_WRITE_swigregister(sDEVICECOMPASS_DATA_WRITE)

class sDEVICECOMPASS_BATTERY_BOARD(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    paramVersion = property(_MicroWinExecInterface.sDEVICECOMPASS_BATTERY_BOARD_paramVersion_get, _MicroWinExecInterface.sDEVICECOMPASS_BATTERY_BOARD_paramVersion_set)
    paramLen = property(_MicroWinExecInterface.sDEVICECOMPASS_BATTERY_BOARD_paramLen_get, _MicroWinExecInterface.sDEVICECOMPASS_BATTERY_BOARD_paramLen_set)
    status = property(_MicroWinExecInterface.sDEVICECOMPASS_BATTERY_BOARD_status_get, _MicroWinExecInterface.sDEVICECOMPASS_BATTERY_BOARD_status_set)
    reserved = property(_MicroWinExecInterface.sDEVICECOMPASS_BATTERY_BOARD_reserved_get, _MicroWinExecInterface.sDEVICECOMPASS_BATTERY_BOARD_reserved_set)

    def __init__(self):
        _MicroWinExecInterface.sDEVICECOMPASS_BATTERY_BOARD_swiginit(self, _MicroWinExecInterface.new_sDEVICECOMPASS_BATTERY_BOARD())
    __swig_destroy__ = _MicroWinExecInterface.delete_sDEVICECOMPASS_BATTERY_BOARD

# Register sDEVICECOMPASS_BATTERY_BOARD in _MicroWinExecInterface:
_MicroWinExecInterface.sDEVICECOMPASS_BATTERY_BOARD_swigregister(sDEVICECOMPASS_BATTERY_BOARD)

eDEVICECOMPASS_POWER_UP_IN_STOP = _MicroWinExecInterface.eDEVICECOMPASS_POWER_UP_IN_STOP
eDEVICECOMPASS_POWER_UP_IN_RUN = _MicroWinExecInterface.eDEVICECOMPASS_POWER_UP_IN_RUN
eDEVICECOMPASS_POWER_UP_IN_LAST = _MicroWinExecInterface.eDEVICECOMPASS_POWER_UP_IN_LAST
class sDEVICECOMPASS_STARTUP_PARAM(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    paramLen = property(_MicroWinExecInterface.sDEVICECOMPASS_STARTUP_PARAM_paramLen_get, _MicroWinExecInterface.sDEVICECOMPASS_STARTUP_PARAM_paramLen_set)
    paraID = property(_MicroWinExecInterface.sDEVICECOMPASS_STARTUP_PARAM_paraID_get, _MicroWinExecInterface.sDEVICECOMPASS_STARTUP_PARAM_paraID_set)
    cpuMode = property(_MicroWinExecInterface.sDEVICECOMPASS_STARTUP_PARAM_cpuMode_get, _MicroWinExecInterface.sDEVICECOMPASS_STARTUP_PARAM_cpuMode_set)
    hardware = property(_MicroWinExecInterface.sDEVICECOMPASS_STARTUP_PARAM_hardware_get, _MicroWinExecInterface.sDEVICECOMPASS_STARTUP_PARAM_hardware_set)
    reserved = property(_MicroWinExecInterface.sDEVICECOMPASS_STARTUP_PARAM_reserved_get, _MicroWinExecInterface.sDEVICECOMPASS_STARTUP_PARAM_reserved_set)
    reserved2 = property(_MicroWinExecInterface.sDEVICECOMPASS_STARTUP_PARAM_reserved2_get, _MicroWinExecInterface.sDEVICECOMPASS_STARTUP_PARAM_reserved2_set)

    def __init__(self):
        _MicroWinExecInterface.sDEVICECOMPASS_STARTUP_PARAM_swiginit(self, _MicroWinExecInterface.new_sDEVICECOMPASS_STARTUP_PARAM())
    __swig_destroy__ = _MicroWinExecInterface.delete_sDEVICECOMPASS_STARTUP_PARAM

# Register sDEVICECOMPASS_STARTUP_PARAM in _MicroWinExecInterface:
_MicroWinExecInterface.sDEVICECOMPASS_STARTUP_PARAM_swigregister(sDEVICECOMPASS_STARTUP_PARAM)

eDEVICECOMPASS_DCP = _MicroWinExecInterface.eDEVICECOMPASS_DCP
eDEVICECOMPASS_SDB = _MicroWinExecInterface.eDEVICECOMPASS_SDB
class sDEVICECOMPASS_ETHERNET_PARAM(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    paramLen = property(_MicroWinExecInterface.sDEVICECOMPASS_ETHERNET_PARAM_paramLen_get, _MicroWinExecInterface.sDEVICECOMPASS_ETHERNET_PARAM_paramLen_set)
    paraID = property(_MicroWinExecInterface.sDEVICECOMPASS_ETHERNET_PARAM_paraID_get, _MicroWinExecInterface.sDEVICECOMPASS_ETHERNET_PARAM_paraID_set)
    reserved = property(_MicroWinExecInterface.sDEVICECOMPASS_ETHERNET_PARAM_reserved_get, _MicroWinExecInterface.sDEVICECOMPASS_ETHERNET_PARAM_reserved_set)
    fixedIP = property(_MicroWinExecInterface.sDEVICECOMPASS_ETHERNET_PARAM_fixedIP_get, _MicroWinExecInterface.sDEVICECOMPASS_ETHERNET_PARAM_fixedIP_set)
    ipaddress = property(_MicroWinExecInterface.sDEVICECOMPASS_ETHERNET_PARAM_ipaddress_get, _MicroWinExecInterface.sDEVICECOMPASS_ETHERNET_PARAM_ipaddress_set)
    subnet = property(_MicroWinExecInterface.sDEVICECOMPASS_ETHERNET_PARAM_subnet_get, _MicroWinExecInterface.sDEVICECOMPASS_ETHERNET_PARAM_subnet_set)
    gateway = property(_MicroWinExecInterface.sDEVICECOMPASS_ETHERNET_PARAM_gateway_get, _MicroWinExecInterface.sDEVICECOMPASS_ETHERNET_PARAM_gateway_set)
    stationName = property(_MicroWinExecInterface.sDEVICECOMPASS_ETHERNET_PARAM_stationName_get, _MicroWinExecInterface.sDEVICECOMPASS_ETHERNET_PARAM_stationName_set)

    def __init__(self):
        _MicroWinExecInterface.sDEVICECOMPASS_ETHERNET_PARAM_swiginit(self, _MicroWinExecInterface.new_sDEVICECOMPASS_ETHERNET_PARAM())
    __swig_destroy__ = _MicroWinExecInterface.delete_sDEVICECOMPASS_ETHERNET_PARAM

# Register sDEVICECOMPASS_ETHERNET_PARAM in _MicroWinExecInterface:
_MicroWinExecInterface.sDEVICECOMPASS_ETHERNET_PARAM_swigregister(sDEVICECOMPASS_ETHERNET_PARAM)

class sDEVICECOMPASS_SDB_IO_MAPPING_SEGMENT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    segLen = property(_MicroWinExecInterface.sDEVICECOMPASS_SDB_IO_MAPPING_SEGMENT_segLen_get, _MicroWinExecInterface.sDEVICECOMPASS_SDB_IO_MAPPING_SEGMENT_segLen_set)
    versionHighLow = property(_MicroWinExecInterface.sDEVICECOMPASS_SDB_IO_MAPPING_SEGMENT_versionHighLow_get, _MicroWinExecInterface.sDEVICECOMPASS_SDB_IO_MAPPING_SEGMENT_versionHighLow_set)
    startingInput = property(_MicroWinExecInterface.sDEVICECOMPASS_SDB_IO_MAPPING_SEGMENT_startingInput_get, _MicroWinExecInterface.sDEVICECOMPASS_SDB_IO_MAPPING_SEGMENT_startingInput_set)
    startingOutput = property(_MicroWinExecInterface.sDEVICECOMPASS_SDB_IO_MAPPING_SEGMENT_startingOutput_get, _MicroWinExecInterface.sDEVICECOMPASS_SDB_IO_MAPPING_SEGMENT_startingOutput_set)

    def __init__(self):
        _MicroWinExecInterface.sDEVICECOMPASS_SDB_IO_MAPPING_SEGMENT_swiginit(self, _MicroWinExecInterface.new_sDEVICECOMPASS_SDB_IO_MAPPING_SEGMENT())
    __swig_destroy__ = _MicroWinExecInterface.delete_sDEVICECOMPASS_SDB_IO_MAPPING_SEGMENT

# Register sDEVICECOMPASS_SDB_IO_MAPPING_SEGMENT in _MicroWinExecInterface:
_MicroWinExecInterface.sDEVICECOMPASS_SDB_IO_MAPPING_SEGMENT_swigregister(sDEVICECOMPASS_SDB_IO_MAPPING_SEGMENT)

class sDEVICECOMPASS_SDB_OUTPUT_TABLE_SEGMENT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    segLen = property(_MicroWinExecInterface.sDEVICECOMPASS_SDB_OUTPUT_TABLE_SEGMENT_segLen_get, _MicroWinExecInterface.sDEVICECOMPASS_SDB_OUTPUT_TABLE_SEGMENT_segLen_set)
    versionHighLow = property(_MicroWinExecInterface.sDEVICECOMPASS_SDB_OUTPUT_TABLE_SEGMENT_versionHighLow_get, _MicroWinExecInterface.sDEVICECOMPASS_SDB_OUTPUT_TABLE_SEGMENT_versionHighLow_set)
    behavior = property(_MicroWinExecInterface.sDEVICECOMPASS_SDB_OUTPUT_TABLE_SEGMENT_behavior_get, _MicroWinExecInterface.sDEVICECOMPASS_SDB_OUTPUT_TABLE_SEGMENT_behavior_set)

    def __init__(self):
        _MicroWinExecInterface.sDEVICECOMPASS_SDB_OUTPUT_TABLE_SEGMENT_swiginit(self, _MicroWinExecInterface.new_sDEVICECOMPASS_SDB_OUTPUT_TABLE_SEGMENT())
    __swig_destroy__ = _MicroWinExecInterface.delete_sDEVICECOMPASS_SDB_OUTPUT_TABLE_SEGMENT

# Register sDEVICECOMPASS_SDB_OUTPUT_TABLE_SEGMENT in _MicroWinExecInterface:
_MicroWinExecInterface.sDEVICECOMPASS_SDB_OUTPUT_TABLE_SEGMENT_swigregister(sDEVICECOMPASS_SDB_OUTPUT_TABLE_SEGMENT)

class sDEVICECOMPASS_SDB_PARAMETERIZATION_SEGMENT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    segLen = property(_MicroWinExecInterface.sDEVICECOMPASS_SDB_PARAMETERIZATION_SEGMENT_segLen_get, _MicroWinExecInterface.sDEVICECOMPASS_SDB_PARAMETERIZATION_SEGMENT_segLen_set)
    versionHighLow = property(_MicroWinExecInterface.sDEVICECOMPASS_SDB_PARAMETERIZATION_SEGMENT_versionHighLow_get, _MicroWinExecInterface.sDEVICECOMPASS_SDB_PARAMETERIZATION_SEGMENT_versionHighLow_set)

    def __init__(self):
        _MicroWinExecInterface.sDEVICECOMPASS_SDB_PARAMETERIZATION_SEGMENT_swiginit(self, _MicroWinExecInterface.new_sDEVICECOMPASS_SDB_PARAMETERIZATION_SEGMENT())
    __swig_destroy__ = _MicroWinExecInterface.delete_sDEVICECOMPASS_SDB_PARAMETERIZATION_SEGMENT

# Register sDEVICECOMPASS_SDB_PARAMETERIZATION_SEGMENT in _MicroWinExecInterface:
_MicroWinExecInterface.sDEVICECOMPASS_SDB_PARAMETERIZATION_SEGMENT_swigregister(sDEVICECOMPASS_SDB_PARAMETERIZATION_SEGMENT)

class sDEVICECOMPASS_SDB_IO_CONFIG(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    paramLen = property(_MicroWinExecInterface.sDEVICECOMPASS_SDB_IO_CONFIG_paramLen_get, _MicroWinExecInterface.sDEVICECOMPASS_SDB_IO_CONFIG_paramLen_set)
    paraID = property(_MicroWinExecInterface.sDEVICECOMPASS_SDB_IO_CONFIG_paraID_get, _MicroWinExecInterface.sDEVICECOMPASS_SDB_IO_CONFIG_paraID_set)
    reserved = property(_MicroWinExecInterface.sDEVICECOMPASS_SDB_IO_CONFIG_reserved_get, _MicroWinExecInterface.sDEVICECOMPASS_SDB_IO_CONFIG_reserved_set)
    isConfigured = property(_MicroWinExecInterface.sDEVICECOMPASS_SDB_IO_CONFIG_isConfigured_get, _MicroWinExecInterface.sDEVICECOMPASS_SDB_IO_CONFIG_isConfigured_set)

    def __init__(self):
        _MicroWinExecInterface.sDEVICECOMPASS_SDB_IO_CONFIG_swiginit(self, _MicroWinExecInterface.new_sDEVICECOMPASS_SDB_IO_CONFIG())
    __swig_destroy__ = _MicroWinExecInterface.delete_sDEVICECOMPASS_SDB_IO_CONFIG

# Register sDEVICECOMPASS_SDB_IO_CONFIG in _MicroWinExecInterface:
_MicroWinExecInterface.sDEVICECOMPASS_SDB_IO_CONFIG_swigregister(sDEVICECOMPASS_SDB_IO_CONFIG)

class sDEVICECOMPASS_SDB_IO_CONFIG_EXT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    paramLen = property(_MicroWinExecInterface.sDEVICECOMPASS_SDB_IO_CONFIG_EXT_paramLen_get, _MicroWinExecInterface.sDEVICECOMPASS_SDB_IO_CONFIG_EXT_paramLen_set)
    paraID = property(_MicroWinExecInterface.sDEVICECOMPASS_SDB_IO_CONFIG_EXT_paraID_get, _MicroWinExecInterface.sDEVICECOMPASS_SDB_IO_CONFIG_EXT_paraID_set)
    expansionParamLen = property(_MicroWinExecInterface.sDEVICECOMPASS_SDB_IO_CONFIG_EXT_expansionParamLen_get, _MicroWinExecInterface.sDEVICECOMPASS_SDB_IO_CONFIG_EXT_expansionParamLen_set)
    reserved = property(_MicroWinExecInterface.sDEVICECOMPASS_SDB_IO_CONFIG_EXT_reserved_get, _MicroWinExecInterface.sDEVICECOMPASS_SDB_IO_CONFIG_EXT_reserved_set)
    isConfigured = property(_MicroWinExecInterface.sDEVICECOMPASS_SDB_IO_CONFIG_EXT_isConfigured_get, _MicroWinExecInterface.sDEVICECOMPASS_SDB_IO_CONFIG_EXT_isConfigured_set)

    def __init__(self):
        _MicroWinExecInterface.sDEVICECOMPASS_SDB_IO_CONFIG_EXT_swiginit(self, _MicroWinExecInterface.new_sDEVICECOMPASS_SDB_IO_CONFIG_EXT())
    __swig_destroy__ = _MicroWinExecInterface.delete_sDEVICECOMPASS_SDB_IO_CONFIG_EXT

# Register sDEVICECOMPASS_SDB_IO_CONFIG_EXT in _MicroWinExecInterface:
_MicroWinExecInterface.sDEVICECOMPASS_SDB_IO_CONFIG_EXT_swigregister(sDEVICECOMPASS_SDB_IO_CONFIG_EXT)

class sDEVICECOMPASS_PULSE_CATCH_ENABLE_V1(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    paramLen = property(_MicroWinExecInterface.sDEVICECOMPASS_PULSE_CATCH_ENABLE_V1_paramLen_get, _MicroWinExecInterface.sDEVICECOMPASS_PULSE_CATCH_ENABLE_V1_paramLen_set)
    paraID = property(_MicroWinExecInterface.sDEVICECOMPASS_PULSE_CATCH_ENABLE_V1_paraID_get, _MicroWinExecInterface.sDEVICECOMPASS_PULSE_CATCH_ENABLE_V1_paraID_set)
    byPulseByte1 = property(_MicroWinExecInterface.sDEVICECOMPASS_PULSE_CATCH_ENABLE_V1_byPulseByte1_get, _MicroWinExecInterface.sDEVICECOMPASS_PULSE_CATCH_ENABLE_V1_byPulseByte1_set)
    byPulseByte0 = property(_MicroWinExecInterface.sDEVICECOMPASS_PULSE_CATCH_ENABLE_V1_byPulseByte0_get, _MicroWinExecInterface.sDEVICECOMPASS_PULSE_CATCH_ENABLE_V1_byPulseByte0_set)

    def __init__(self):
        _MicroWinExecInterface.sDEVICECOMPASS_PULSE_CATCH_ENABLE_V1_swiginit(self, _MicroWinExecInterface.new_sDEVICECOMPASS_PULSE_CATCH_ENABLE_V1())
    __swig_destroy__ = _MicroWinExecInterface.delete_sDEVICECOMPASS_PULSE_CATCH_ENABLE_V1

# Register sDEVICECOMPASS_PULSE_CATCH_ENABLE_V1 in _MicroWinExecInterface:
_MicroWinExecInterface.sDEVICECOMPASS_PULSE_CATCH_ENABLE_V1_swigregister(sDEVICECOMPASS_PULSE_CATCH_ENABLE_V1)

class sDEVICECOMPASS_PULSE_CATCH_ENABLE_V2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    paramLen = property(_MicroWinExecInterface.sDEVICECOMPASS_PULSE_CATCH_ENABLE_V2_paramLen_get, _MicroWinExecInterface.sDEVICECOMPASS_PULSE_CATCH_ENABLE_V2_paramLen_set)
    paraID = property(_MicroWinExecInterface.sDEVICECOMPASS_PULSE_CATCH_ENABLE_V2_paraID_get, _MicroWinExecInterface.sDEVICECOMPASS_PULSE_CATCH_ENABLE_V2_paraID_set)
    byPulseByte1 = property(_MicroWinExecInterface.sDEVICECOMPASS_PULSE_CATCH_ENABLE_V2_byPulseByte1_get, _MicroWinExecInterface.sDEVICECOMPASS_PULSE_CATCH_ENABLE_V2_byPulseByte1_set)
    byPulseByte0 = property(_MicroWinExecInterface.sDEVICECOMPASS_PULSE_CATCH_ENABLE_V2_byPulseByte0_get, _MicroWinExecInterface.sDEVICECOMPASS_PULSE_CATCH_ENABLE_V2_byPulseByte0_set)
    reserved = property(_MicroWinExecInterface.sDEVICECOMPASS_PULSE_CATCH_ENABLE_V2_reserved_get, _MicroWinExecInterface.sDEVICECOMPASS_PULSE_CATCH_ENABLE_V2_reserved_set)
    byPulseByte2 = property(_MicroWinExecInterface.sDEVICECOMPASS_PULSE_CATCH_ENABLE_V2_byPulseByte2_get, _MicroWinExecInterface.sDEVICECOMPASS_PULSE_CATCH_ENABLE_V2_byPulseByte2_set)

    def __init__(self):
        _MicroWinExecInterface.sDEVICECOMPASS_PULSE_CATCH_ENABLE_V2_swiginit(self, _MicroWinExecInterface.new_sDEVICECOMPASS_PULSE_CATCH_ENABLE_V2())
    __swig_destroy__ = _MicroWinExecInterface.delete_sDEVICECOMPASS_PULSE_CATCH_ENABLE_V2

# Register sDEVICECOMPASS_PULSE_CATCH_ENABLE_V2 in _MicroWinExecInterface:
_MicroWinExecInterface.sDEVICECOMPASS_PULSE_CATCH_ENABLE_V2_swigregister(sDEVICECOMPASS_PULSE_CATCH_ENABLE_V2)

class sDEVICECOMPASS_RETENTIVE_RANGE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    paramLen = property(_MicroWinExecInterface.sDEVICECOMPASS_RETENTIVE_RANGE_paramLen_get, _MicroWinExecInterface.sDEVICECOMPASS_RETENTIVE_RANGE_paramLen_set)
    paraID = property(_MicroWinExecInterface.sDEVICECOMPASS_RETENTIVE_RANGE_paraID_get, _MicroWinExecInterface.sDEVICECOMPASS_RETENTIVE_RANGE_paraID_set)

    def __init__(self):
        _MicroWinExecInterface.sDEVICECOMPASS_RETENTIVE_RANGE_swiginit(self, _MicroWinExecInterface.new_sDEVICECOMPASS_RETENTIVE_RANGE())
    __swig_destroy__ = _MicroWinExecInterface.delete_sDEVICECOMPASS_RETENTIVE_RANGE

# Register sDEVICECOMPASS_RETENTIVE_RANGE in _MicroWinExecInterface:
_MicroWinExecInterface.sDEVICECOMPASS_RETENTIVE_RANGE_swigregister(sDEVICECOMPASS_RETENTIVE_RANGE)

class sDEVICECOMPASS_AO_TABLE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    paramLen = property(_MicroWinExecInterface.sDEVICECOMPASS_AO_TABLE_paramLen_get, _MicroWinExecInterface.sDEVICECOMPASS_AO_TABLE_paramLen_set)
    paraID = property(_MicroWinExecInterface.sDEVICECOMPASS_AO_TABLE_paraID_get, _MicroWinExecInterface.sDEVICECOMPASS_AO_TABLE_paraID_set)
    reserved = property(_MicroWinExecInterface.sDEVICECOMPASS_AO_TABLE_reserved_get, _MicroWinExecInterface.sDEVICECOMPASS_AO_TABLE_reserved_set)
    freeze = property(_MicroWinExecInterface.sDEVICECOMPASS_AO_TABLE_freeze_get, _MicroWinExecInterface.sDEVICECOMPASS_AO_TABLE_freeze_set)
    values = property(_MicroWinExecInterface.sDEVICECOMPASS_AO_TABLE_values_get, _MicroWinExecInterface.sDEVICECOMPASS_AO_TABLE_values_set)

    def __init__(self):
        _MicroWinExecInterface.sDEVICECOMPASS_AO_TABLE_swiginit(self, _MicroWinExecInterface.new_sDEVICECOMPASS_AO_TABLE())
    __swig_destroy__ = _MicroWinExecInterface.delete_sDEVICECOMPASS_AO_TABLE

# Register sDEVICECOMPASS_AO_TABLE in _MicroWinExecInterface:
_MicroWinExecInterface.sDEVICECOMPASS_AO_TABLE_swigregister(sDEVICECOMPASS_AO_TABLE)

class sDEVICECOMPASS_RME_SELECT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    paramLen = property(_MicroWinExecInterface.sDEVICECOMPASS_RME_SELECT_paramLen_get, _MicroWinExecInterface.sDEVICECOMPASS_RME_SELECT_paramLen_set)
    paraID = property(_MicroWinExecInterface.sDEVICECOMPASS_RME_SELECT_paraID_get, _MicroWinExecInterface.sDEVICECOMPASS_RME_SELECT_paraID_set)
    reserved = property(_MicroWinExecInterface.sDEVICECOMPASS_RME_SELECT_reserved_get, _MicroWinExecInterface.sDEVICECOMPASS_RME_SELECT_reserved_set)
    select = property(_MicroWinExecInterface.sDEVICECOMPASS_RME_SELECT_select_get, _MicroWinExecInterface.sDEVICECOMPASS_RME_SELECT_select_set)

    def __init__(self):
        _MicroWinExecInterface.sDEVICECOMPASS_RME_SELECT_swiginit(self, _MicroWinExecInterface.new_sDEVICECOMPASS_RME_SELECT())
    __swig_destroy__ = _MicroWinExecInterface.delete_sDEVICECOMPASS_RME_SELECT

# Register sDEVICECOMPASS_RME_SELECT in _MicroWinExecInterface:
_MicroWinExecInterface.sDEVICECOMPASS_RME_SELECT_swigregister(sDEVICECOMPASS_RME_SELECT)

class sDEVICECOMPASS_LED_CONFIG(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    paramLen = property(_MicroWinExecInterface.sDEVICECOMPASS_LED_CONFIG_paramLen_get, _MicroWinExecInterface.sDEVICECOMPASS_LED_CONFIG_paramLen_set)
    paraID = property(_MicroWinExecInterface.sDEVICECOMPASS_LED_CONFIG_paraID_get, _MicroWinExecInterface.sDEVICECOMPASS_LED_CONFIG_paraID_set)
    force = property(_MicroWinExecInterface.sDEVICECOMPASS_LED_CONFIG_force_get, _MicroWinExecInterface.sDEVICECOMPASS_LED_CONFIG_force_set)
    io = property(_MicroWinExecInterface.sDEVICECOMPASS_LED_CONFIG_io_get, _MicroWinExecInterface.sDEVICECOMPASS_LED_CONFIG_io_set)

    def __init__(self):
        _MicroWinExecInterface.sDEVICECOMPASS_LED_CONFIG_swiginit(self, _MicroWinExecInterface.new_sDEVICECOMPASS_LED_CONFIG())
    __swig_destroy__ = _MicroWinExecInterface.delete_sDEVICECOMPASS_LED_CONFIG

# Register sDEVICECOMPASS_LED_CONFIG in _MicroWinExecInterface:
_MicroWinExecInterface.sDEVICECOMPASS_LED_CONFIG_swigregister(sDEVICECOMPASS_LED_CONFIG)

class sDEVICECOMPASS_TOD_ADJUSTMENT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    paramLen = property(_MicroWinExecInterface.sDEVICECOMPASS_TOD_ADJUSTMENT_paramLen_get, _MicroWinExecInterface.sDEVICECOMPASS_TOD_ADJUSTMENT_paramLen_set)
    paraID = property(_MicroWinExecInterface.sDEVICECOMPASS_TOD_ADJUSTMENT_paraID_get, _MicroWinExecInterface.sDEVICECOMPASS_TOD_ADJUSTMENT_paraID_set)
    enabled = property(_MicroWinExecInterface.sDEVICECOMPASS_TOD_ADJUSTMENT_enabled_get, _MicroWinExecInterface.sDEVICECOMPASS_TOD_ADJUSTMENT_enabled_set)
    selection = property(_MicroWinExecInterface.sDEVICECOMPASS_TOD_ADJUSTMENT_selection_get, _MicroWinExecInterface.sDEVICECOMPASS_TOD_ADJUSTMENT_selection_set)
    startMonth = property(_MicroWinExecInterface.sDEVICECOMPASS_TOD_ADJUSTMENT_startMonth_get, _MicroWinExecInterface.sDEVICECOMPASS_TOD_ADJUSTMENT_startMonth_set)
    startDay = property(_MicroWinExecInterface.sDEVICECOMPASS_TOD_ADJUSTMENT_startDay_get, _MicroWinExecInterface.sDEVICECOMPASS_TOD_ADJUSTMENT_startDay_set)
    endMonth = property(_MicroWinExecInterface.sDEVICECOMPASS_TOD_ADJUSTMENT_endMonth_get, _MicroWinExecInterface.sDEVICECOMPASS_TOD_ADJUSTMENT_endMonth_set)
    endDay = property(_MicroWinExecInterface.sDEVICECOMPASS_TOD_ADJUSTMENT_endDay_get, _MicroWinExecInterface.sDEVICECOMPASS_TOD_ADJUSTMENT_endDay_set)
    deltaTime = property(_MicroWinExecInterface.sDEVICECOMPASS_TOD_ADJUSTMENT_deltaTime_get, _MicroWinExecInterface.sDEVICECOMPASS_TOD_ADJUSTMENT_deltaTime_set)
    reserved = property(_MicroWinExecInterface.sDEVICECOMPASS_TOD_ADJUSTMENT_reserved_get, _MicroWinExecInterface.sDEVICECOMPASS_TOD_ADJUSTMENT_reserved_set)

    def __init__(self):
        _MicroWinExecInterface.sDEVICECOMPASS_TOD_ADJUSTMENT_swiginit(self, _MicroWinExecInterface.new_sDEVICECOMPASS_TOD_ADJUSTMENT())
    __swig_destroy__ = _MicroWinExecInterface.delete_sDEVICECOMPASS_TOD_ADJUSTMENT

# Register sDEVICECOMPASS_TOD_ADJUSTMENT in _MicroWinExecInterface:
_MicroWinExecInterface.sDEVICECOMPASS_TOD_ADJUSTMENT_swigregister(sDEVICECOMPASS_TOD_ADJUSTMENT)

cDEVICECOMPASS_FW_FULL_LEN = _MicroWinExecInterface.cDEVICECOMPASS_FW_FULL_LEN
cDEVICECOMPASS_FULL_KEY_LEN = _MicroWinExecInterface.cDEVICECOMPASS_FULL_KEY_LEN
cDEVICECOMPASS_CPU_ID_LEN = _MicroWinExecInterface.cDEVICECOMPASS_CPU_ID_LEN
cDEVICECOMPASS_FW_REV_LEN = _MicroWinExecInterface.cDEVICECOMPASS_FW_REV_LEN
cDEVICECOMPASS_FW_REV_CNT_LEN = _MicroWinExecInterface.cDEVICECOMPASS_FW_REV_CNT_LEN
cDEVICECOMPASS_ASIC_REV_LEN = _MicroWinExecInterface.cDEVICECOMPASS_ASIC_REV_LEN
cDEVICECOMPASS_ASIC_OFFSET = _MicroWinExecInterface.cDEVICECOMPASS_ASIC_OFFSET
DEF_SDBELEMENT_VERSION = _MicroWinExecInterface.DEF_SDBELEMENT_VERSION
class sSDBIOBase_SDB_SUBMODULE_IDENT_NUMBER(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    AQ = property(_MicroWinExecInterface.sSDBIOBase_SDB_SUBMODULE_IDENT_NUMBER_AQ_get, _MicroWinExecInterface.sSDBIOBase_SDB_SUBMODULE_IDENT_NUMBER_AQ_set)
    AI = property(_MicroWinExecInterface.sSDBIOBase_SDB_SUBMODULE_IDENT_NUMBER_AI_get, _MicroWinExecInterface.sSDBIOBase_SDB_SUBMODULE_IDENT_NUMBER_AI_set)
    DQ = property(_MicroWinExecInterface.sSDBIOBase_SDB_SUBMODULE_IDENT_NUMBER_DQ_get, _MicroWinExecInterface.sSDBIOBase_SDB_SUBMODULE_IDENT_NUMBER_DQ_set)
    DI = property(_MicroWinExecInterface.sSDBIOBase_SDB_SUBMODULE_IDENT_NUMBER_DI_get, _MicroWinExecInterface.sSDBIOBase_SDB_SUBMODULE_IDENT_NUMBER_DI_set)
    AQT = property(_MicroWinExecInterface.sSDBIOBase_SDB_SUBMODULE_IDENT_NUMBER_AQT_get, _MicroWinExecInterface.sSDBIOBase_SDB_SUBMODULE_IDENT_NUMBER_AQT_set)
    AIT = property(_MicroWinExecInterface.sSDBIOBase_SDB_SUBMODULE_IDENT_NUMBER_AIT_get, _MicroWinExecInterface.sSDBIOBase_SDB_SUBMODULE_IDENT_NUMBER_AIT_set)
    DQT = property(_MicroWinExecInterface.sSDBIOBase_SDB_SUBMODULE_IDENT_NUMBER_DQT_get, _MicroWinExecInterface.sSDBIOBase_SDB_SUBMODULE_IDENT_NUMBER_DQT_set)
    DIT = property(_MicroWinExecInterface.sSDBIOBase_SDB_SUBMODULE_IDENT_NUMBER_DIT_get, _MicroWinExecInterface.sSDBIOBase_SDB_SUBMODULE_IDENT_NUMBER_DIT_set)
    fill = property(_MicroWinExecInterface.sSDBIOBase_SDB_SUBMODULE_IDENT_NUMBER_fill_get, _MicroWinExecInterface.sSDBIOBase_SDB_SUBMODULE_IDENT_NUMBER_fill_set)

    def __init__(self):
        _MicroWinExecInterface.sSDBIOBase_SDB_SUBMODULE_IDENT_NUMBER_swiginit(self, _MicroWinExecInterface.new_sSDBIOBase_SDB_SUBMODULE_IDENT_NUMBER())
    __swig_destroy__ = _MicroWinExecInterface.delete_sSDBIOBase_SDB_SUBMODULE_IDENT_NUMBER

# Register sSDBIOBase_SDB_SUBMODULE_IDENT_NUMBER in _MicroWinExecInterface:
_MicroWinExecInterface.sSDBIOBase_SDB_SUBMODULE_IDENT_NUMBER_swigregister(sSDBIOBase_SDB_SUBMODULE_IDENT_NUMBER)
BITS_IN_BYTE = cvar.BITS_IN_BYTE
BITS_IN_WORD = cvar.BITS_IN_WORD
EXT_BUFFER_SIZE = cvar.EXT_BUFFER_SIZE
MAX_EM_SLOTS = cvar.MAX_EM_SLOTS
V1_EM_SLOTS = cvar.V1_EM_SLOTS
TEMP_BUFFER_SIZE = cvar.TEMP_BUFFER_SIZE

class sSDBIOBase_SDB_BATTERY_STATUS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    reserved = property(_MicroWinExecInterface.sSDBIOBase_SDB_BATTERY_STATUS_reserved_get, _MicroWinExecInterface.sSDBIOBase_SDB_BATTERY_STATUS_reserved_set)
    status = property(_MicroWinExecInterface.sSDBIOBase_SDB_BATTERY_STATUS_status_get, _MicroWinExecInterface.sSDBIOBase_SDB_BATTERY_STATUS_status_set)
    diagnostic = property(_MicroWinExecInterface.sSDBIOBase_SDB_BATTERY_STATUS_diagnostic_get, _MicroWinExecInterface.sSDBIOBase_SDB_BATTERY_STATUS_diagnostic_set)

    def __init__(self):
        _MicroWinExecInterface.sSDBIOBase_SDB_BATTERY_STATUS_swiginit(self, _MicroWinExecInterface.new_sSDBIOBase_SDB_BATTERY_STATUS())
    __swig_destroy__ = _MicroWinExecInterface.delete_sSDBIOBase_SDB_BATTERY_STATUS

# Register sSDBIOBase_SDB_BATTERY_STATUS in _MicroWinExecInterface:
_MicroWinExecInterface.sSDBIOBase_SDB_BATTERY_STATUS_swigregister(sSDBIOBase_SDB_BATTERY_STATUS)

eSDBIOBase_INPUT_FILTER_0_2MSEC = _MicroWinExecInterface.eSDBIOBase_INPUT_FILTER_0_2MSEC
eSDBIOBase_INPUT_FILTER_0_4MSEC = _MicroWinExecInterface.eSDBIOBase_INPUT_FILTER_0_4MSEC
eSDBIOBase_INPUT_FILTER_0_8MSEC = _MicroWinExecInterface.eSDBIOBase_INPUT_FILTER_0_8MSEC
eSDBIOBase_INPUT_FILTER_1_6MSEC = _MicroWinExecInterface.eSDBIOBase_INPUT_FILTER_1_6MSEC
eSDBIOBase_INPUT_FILTER_3_2MSEC = _MicroWinExecInterface.eSDBIOBase_INPUT_FILTER_3_2MSEC
eSDBIOBase_INPUT_FILTER_6_4MSEC = _MicroWinExecInterface.eSDBIOBase_INPUT_FILTER_6_4MSEC
eSDBIOBase_INPUT_FILTER_12_8MSEC = _MicroWinExecInterface.eSDBIOBase_INPUT_FILTER_12_8MSEC
eSDBIOBase_INPUT_FILTER_NONE = _MicroWinExecInterface.eSDBIOBase_INPUT_FILTER_NONE
eSDBIOBase_INPUT_FILTER_0_2USEC = _MicroWinExecInterface.eSDBIOBase_INPUT_FILTER_0_2USEC
eSDBIOBase_INPUT_FILTER_0_4USEC = _MicroWinExecInterface.eSDBIOBase_INPUT_FILTER_0_4USEC
eSDBIOBase_INPUT_FILTER_0_8USEC = _MicroWinExecInterface.eSDBIOBase_INPUT_FILTER_0_8USEC
eSDBIOBase_INPUT_FILTER_1_6USEC = _MicroWinExecInterface.eSDBIOBase_INPUT_FILTER_1_6USEC
eSDBIOBase_INPUT_FILTER_3_2USEC = _MicroWinExecInterface.eSDBIOBase_INPUT_FILTER_3_2USEC
eSDBIOBase_INPUT_FILTER_6_4USEC = _MicroWinExecInterface.eSDBIOBase_INPUT_FILTER_6_4USEC
eSDBIOBase_INPUT_FILTER_12_8USEC = _MicroWinExecInterface.eSDBIOBase_INPUT_FILTER_12_8USEC
eSDBIOBase_DELAY_TIME_BASE_MSEC = _MicroWinExecInterface.eSDBIOBase_DELAY_TIME_BASE_MSEC
eSDBIOBase_DELAY_TIME_BASE_USEC = _MicroWinExecInterface.eSDBIOBase_DELAY_TIME_BASE_USEC
eSDBIOBase_NO_SPECIAL_FUNCTION = _MicroWinExecInterface.eSDBIOBase_NO_SPECIAL_FUNCTION
eSDBIOBase_PULSE_CATCH_ENABLE = _MicroWinExecInterface.eSDBIOBase_PULSE_CATCH_ENABLE
class sSDBIOBase_SDB_PARAM_DIGITAL_INPUT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    reserved = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_DIGITAL_INPUT_reserved_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_DIGITAL_INPUT_reserved_set)
    inputDelayTime = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_DIGITAL_INPUT_inputDelayTime_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_DIGITAL_INPUT_inputDelayTime_set)
    channelFunc = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_DIGITAL_INPUT_channelFunc_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_DIGITAL_INPUT_channelFunc_set)
    inputDelayBase = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_DIGITAL_INPUT_inputDelayBase_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_DIGITAL_INPUT_inputDelayBase_set)

    def __init__(self):
        _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_DIGITAL_INPUT_swiginit(self, _MicroWinExecInterface.new_sSDBIOBase_SDB_PARAM_DIGITAL_INPUT())
    __swig_destroy__ = _MicroWinExecInterface.delete_sSDBIOBase_SDB_PARAM_DIGITAL_INPUT

# Register sSDBIOBase_SDB_PARAM_DIGITAL_INPUT in _MicroWinExecInterface:
_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_DIGITAL_INPUT_swigregister(sSDBIOBase_SDB_PARAM_DIGITAL_INPUT)

eSDBIOBase_HOLD_LAST_VALUE = _MicroWinExecInterface.eSDBIOBase_HOLD_LAST_VALUE
eSDBIOBase_USE_SUBSTITUTE = _MicroWinExecInterface.eSDBIOBase_USE_SUBSTITUTE
class sSDBIOBase_SDB_PARAM_DIGITAL_OUTPUT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    reserved = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_DIGITAL_OUTPUT_reserved_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_DIGITAL_OUTPUT_reserved_set)
    channelFunc = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_DIGITAL_OUTPUT_channelFunc_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_DIGITAL_OUTPUT_channelFunc_set)
    fill2 = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_DIGITAL_OUTPUT_fill2_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_DIGITAL_OUTPUT_fill2_set)
    behavior = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_DIGITAL_OUTPUT_behavior_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_DIGITAL_OUTPUT_behavior_set)
    fill1 = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_DIGITAL_OUTPUT_fill1_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_DIGITAL_OUTPUT_fill1_set)
    substituteValue = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_DIGITAL_OUTPUT_substituteValue_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_DIGITAL_OUTPUT_substituteValue_set)

    def __init__(self):
        _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_DIGITAL_OUTPUT_swiginit(self, _MicroWinExecInterface.new_sSDBIOBase_SDB_PARAM_DIGITAL_OUTPUT())
    __swig_destroy__ = _MicroWinExecInterface.delete_sSDBIOBase_SDB_PARAM_DIGITAL_OUTPUT

# Register sSDBIOBase_SDB_PARAM_DIGITAL_OUTPUT in _MicroWinExecInterface:
_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_DIGITAL_OUTPUT_swigregister(sSDBIOBase_SDB_PARAM_DIGITAL_OUTPUT)

class sSDBIOBase_SDB_PARAM_SEGMENT_HEADER(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    version = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_SEGMENT_HEADER_version_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_SEGMENT_HEADER_version_set)
    paramLen = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_SEGMENT_HEADER_paramLen_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_SEGMENT_HEADER_paramLen_set)

    def __init__(self):
        _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_SEGMENT_HEADER_swiginit(self, _MicroWinExecInterface.new_sSDBIOBase_SDB_PARAM_SEGMENT_HEADER())
    __swig_destroy__ = _MicroWinExecInterface.delete_sSDBIOBase_SDB_PARAM_SEGMENT_HEADER

# Register sSDBIOBase_SDB_PARAM_SEGMENT_HEADER in _MicroWinExecInterface:
_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_SEGMENT_HEADER_swigregister(sSDBIOBase_SDB_PARAM_SEGMENT_HEADER)

eSDBIOBase_RTD_DEACTIVATED = _MicroWinExecInterface.eSDBIOBase_RTD_DEACTIVATED
eSDBIOBase_VOLTAGE = _MicroWinExecInterface.eSDBIOBase_VOLTAGE
eSDBIOBase_2_WIRE_CURRENT = _MicroWinExecInterface.eSDBIOBase_2_WIRE_CURRENT
eSDBIOBase_RTD_RESISTANCE_4_WIRE = _MicroWinExecInterface.eSDBIOBase_RTD_RESISTANCE_4_WIRE
eSDBIOBase_RTD_RESISTANCE_3_WIRE = _MicroWinExecInterface.eSDBIOBase_RTD_RESISTANCE_3_WIRE
eSDBIOBase_RTD_RESISTANCE_2_WIRE = _MicroWinExecInterface.eSDBIOBase_RTD_RESISTANCE_2_WIRE
eSDBIOBase_RTD_THERMAL_4_WIRE = _MicroWinExecInterface.eSDBIOBase_RTD_THERMAL_4_WIRE
eSDBIOBase_RTD_THERMAL_3_WIRE = _MicroWinExecInterface.eSDBIOBase_RTD_THERMAL_3_WIRE
eSDBIOBase_RTD_THERMAL_2_WIRE = _MicroWinExecInterface.eSDBIOBase_RTD_THERMAL_2_WIRE
eSDBIOBase_RTD_3_WIRE_OFFSET = _MicroWinExecInterface.eSDBIOBase_RTD_3_WIRE_OFFSET
eSDBIOBase_OUT_PLUS_OR_MINUS_10v = _MicroWinExecInterface.eSDBIOBase_OUT_PLUS_OR_MINUS_10v
eSDBIOBase_OUT_ZERO_TO_20ma = _MicroWinExecInterface.eSDBIOBase_OUT_ZERO_TO_20ma
eSDBIOBase_OUT_LAST_VALUE = _MicroWinExecInterface.eSDBIOBase_OUT_LAST_VALUE
eSDBIOBASE_OUT_SUBSTITUTE_VALUE = _MicroWinExecInterface.eSDBIOBASE_OUT_SUBSTITUTE_VALUE
eSDBIOBase_IN_ZERO_TO_20ma = _MicroWinExecInterface.eSDBIOBase_IN_ZERO_TO_20ma
eSDBIOBase_IN_PLUS_OR_MINUS_2_5v = _MicroWinExecInterface.eSDBIOBase_IN_PLUS_OR_MINUS_2_5v
eSDBIOBase_IN_PLUS_OR_MINUS_5v = _MicroWinExecInterface.eSDBIOBase_IN_PLUS_OR_MINUS_5v
eSDBIOBase_IN_PLUS_OR_MINUS_10v = _MicroWinExecInterface.eSDBIOBase_IN_PLUS_OR_MINUS_10v
eSDBIOBase_400_Hz = _MicroWinExecInterface.eSDBIOBase_400_Hz
eSDBIOBase_60_Hz = _MicroWinExecInterface.eSDBIOBase_60_Hz
eSDBIOBase_50_Hz = _MicroWinExecInterface.eSDBIOBase_50_Hz
eSDBIOBase_10_Hz = _MicroWinExecInterface.eSDBIOBase_10_Hz
eSDBIOBase_1X_REJECTION = _MicroWinExecInterface.eSDBIOBase_1X_REJECTION
eSDBIOBase_4X_REJECTION = _MicroWinExecInterface.eSDBIOBase_4X_REJECTION
eSDBIOBase_16X_REJECTION = _MicroWinExecInterface.eSDBIOBase_16X_REJECTION
eSDBIOBase_32X_REJECTION = _MicroWinExecInterface.eSDBIOBase_32X_REJECTION
eSDBIOBase_RESISTANCE_4WIRE = _MicroWinExecInterface.eSDBIOBase_RESISTANCE_4WIRE
eSDBIOBase_RESISTANCE_3WIRE = _MicroWinExecInterface.eSDBIOBase_RESISTANCE_3WIRE
eSDBIOBase_RESISTANCE_2WIRE = _MicroWinExecInterface.eSDBIOBase_RESISTANCE_2WIRE
eSDBIOBase_THERMAL_RESISTANCE_LINEAR_4WIRE = _MicroWinExecInterface.eSDBIOBase_THERMAL_RESISTANCE_LINEAR_4WIRE
eSDBIOBase_THERMAL_RESISTANCE_LINEAR_3WIRE = _MicroWinExecInterface.eSDBIOBase_THERMAL_RESISTANCE_LINEAR_3WIRE
eSDBIOBase_THERMAL_RESISTANCE_LINEAR_2WIRE = _MicroWinExecInterface.eSDBIOBase_THERMAL_RESISTANCE_LINEAR_2WIRE
eSDBIOBase_48ohms = _MicroWinExecInterface.eSDBIOBase_48ohms
eSDBIOBase_150ohms = _MicroWinExecInterface.eSDBIOBase_150ohms
eSDBIOBase_300ohms = _MicroWinExecInterface.eSDBIOBase_300ohms
eSDBIOBase_600ohms = _MicroWinExecInterface.eSDBIOBase_600ohms
eSDBIOBase_3000ohms = _MicroWinExecInterface.eSDBIOBase_3000ohms
eSDBIOBase_StandardRange_Pt100 = _MicroWinExecInterface.eSDBIOBase_StandardRange_Pt100
eSDBIOBase_StandardRange_Ni100 = _MicroWinExecInterface.eSDBIOBase_StandardRange_Ni100
eSDBIOBase_StandardRange_Pt500 = _MicroWinExecInterface.eSDBIOBase_StandardRange_Pt500
eSDBIOBase_StandardRange_Pt1000 = _MicroWinExecInterface.eSDBIOBase_StandardRange_Pt1000
eSDBIOBase_StandardRange_Ni1000 = _MicroWinExecInterface.eSDBIOBase_StandardRange_Ni1000
eSDBIOBase_StandardRange_Pt200 = _MicroWinExecInterface.eSDBIOBase_StandardRange_Pt200
eSDBIOBase_StandardRange_Ni120 = _MicroWinExecInterface.eSDBIOBase_StandardRange_Ni120
eSDBIOBase_StandardRange_Cu10 = _MicroWinExecInterface.eSDBIOBase_StandardRange_Cu10
eSDBIOBase_StandardRange_Ni200 = _MicroWinExecInterface.eSDBIOBase_StandardRange_Ni200
eSDBIOBase_StandardRange_Ni500 = _MicroWinExecInterface.eSDBIOBase_StandardRange_Ni500
eSDBIOBase_StandardRange_Pt10 = _MicroWinExecInterface.eSDBIOBase_StandardRange_Pt10
eSDBIOBase_StandardRange_Pt50 = _MicroWinExecInterface.eSDBIOBase_StandardRange_Pt50
eSDBIOBase_StandardRange_Cu50 = _MicroWinExecInterface.eSDBIOBase_StandardRange_Cu50
eSDBIOBase_StandardRange_Cu100 = _MicroWinExecInterface.eSDBIOBase_StandardRange_Cu100
eSDBIOBase_StandardRange_LgNi1000 = _MicroWinExecInterface.eSDBIOBase_StandardRange_LgNi1000
eSDBIOBase_Pt0_00385055 = _MicroWinExecInterface.eSDBIOBase_Pt0_00385055
eSDBIOBase_Pt0_003916 = _MicroWinExecInterface.eSDBIOBase_Pt0_003916
eSDBIOBase_Pt0_003902 = _MicroWinExecInterface.eSDBIOBase_Pt0_003902
eSDBIOBase_Pt0_003920 = _MicroWinExecInterface.eSDBIOBase_Pt0_003920
eSDBIOBase_Pt0_003910 = _MicroWinExecInterface.eSDBIOBase_Pt0_003910
eSDBIOBase_Ni0_006170 = _MicroWinExecInterface.eSDBIOBase_Ni0_006170
eSDBIOBase_Ni0_006180 = _MicroWinExecInterface.eSDBIOBase_Ni0_006180
eSDBIOBase_Ni0_006720 = _MicroWinExecInterface.eSDBIOBase_Ni0_006720
eSDBIOBase_LgNi0_005000 = _MicroWinExecInterface.eSDBIOBase_LgNi0_005000
eSDBIOBase_Cu0_00426 = _MicroWinExecInterface.eSDBIOBase_Cu0_00426
eSDBIOBase_Cu0_00427 = _MicroWinExecInterface.eSDBIOBase_Cu0_00427
eSDBIOBase_Cu0_00428 = _MicroWinExecInterface.eSDBIOBase_Cu0_00428
eSDBIOBase_Celcius = _MicroWinExecInterface.eSDBIOBase_Celcius
eSDBIOBase_Fahrenheit = _MicroWinExecInterface.eSDBIOBase_Fahrenheit
eSDBIOBase_MEASUREMENT_Voltage = _MicroWinExecInterface.eSDBIOBase_MEASUREMENT_Voltage
eSDBIOBase_MEASUREMENT_Thermocouple = _MicroWinExecInterface.eSDBIOBase_MEASUREMENT_Thermocouple
eSDBIOBase_MEASUREMENT_Type_B = _MicroWinExecInterface.eSDBIOBase_MEASUREMENT_Type_B
eSDBIOBase_MEASUREMENT_Type_N = _MicroWinExecInterface.eSDBIOBase_MEASUREMENT_Type_N
eSDBIOBase_MEASUREMENT_Type_E_OR_80mv = _MicroWinExecInterface.eSDBIOBase_MEASUREMENT_Type_E_OR_80mv
eSDBIOBase_MEASUREMENT_Type_R = _MicroWinExecInterface.eSDBIOBase_MEASUREMENT_Type_R
eSDBIOBase_MEASUREMENT_Type_S = _MicroWinExecInterface.eSDBIOBase_MEASUREMENT_Type_S
eSDBIOBase_MEASUREMENT_Type_J = _MicroWinExecInterface.eSDBIOBase_MEASUREMENT_Type_J
eSDBIOBase_MEASUREMENT_Type_T = _MicroWinExecInterface.eSDBIOBase_MEASUREMENT_Type_T
eSDBIOBase_MEASUREMENT_Type_K = _MicroWinExecInterface.eSDBIOBase_MEASUREMENT_Type_K
eSDBIOBase_MEASUREMENT_Type_C = _MicroWinExecInterface.eSDBIOBase_MEASUREMENT_Type_C
eSDBIOBase_MEASUREMENT_Type_TXK_Xk_L = _MicroWinExecInterface.eSDBIOBase_MEASUREMENT_Type_TXK_Xk_L
eSDBIOBase_SOURCE_REF_SET_BY_PARAM = _MicroWinExecInterface.eSDBIOBase_SOURCE_REF_SET_BY_PARAM
eSDBIOBase_SOURCE_REF_INTERNAL = _MicroWinExecInterface.eSDBIOBase_SOURCE_REF_INTERNAL
eSDBIOBase_SOURCE_REF_0C = _MicroWinExecInterface.eSDBIOBase_SOURCE_REF_0C
eSDBIOBase_SOURCE_REF_50C = _MicroWinExecInterface.eSDBIOBase_SOURCE_REF_50C
class sSDBIOBase_SDB_PARAM_ALARMS_MASK(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    userPower = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ALARMS_MASK_userPower_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ALARMS_MASK_userPower_set)
    fill = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ALARMS_MASK_fill_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ALARMS_MASK_fill_set)
    shortCircuit = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ALARMS_MASK_shortCircuit_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ALARMS_MASK_shortCircuit_set)
    fill1 = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ALARMS_MASK_fill1_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ALARMS_MASK_fill1_set)
    wireBreak = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ALARMS_MASK_wireBreak_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ALARMS_MASK_wireBreak_set)
    fill2 = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ALARMS_MASK_fill2_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ALARMS_MASK_fill2_set)
    underFlow = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ALARMS_MASK_underFlow_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ALARMS_MASK_underFlow_set)
    overFlow = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ALARMS_MASK_overFlow_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ALARMS_MASK_overFlow_set)

    def __eq__(self, rSrc):
        return _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ALARMS_MASK___eq__(self, rSrc)

    def __init__(self):
        _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ALARMS_MASK_swiginit(self, _MicroWinExecInterface.new_sSDBIOBase_SDB_PARAM_ALARMS_MASK())
    __swig_destroy__ = _MicroWinExecInterface.delete_sSDBIOBase_SDB_PARAM_ALARMS_MASK

# Register sSDBIOBase_SDB_PARAM_ALARMS_MASK in _MicroWinExecInterface:
_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ALARMS_MASK_swigregister(sSDBIOBase_SDB_PARAM_ALARMS_MASK)

class sSDBIOBase_SDB_PARAM_RTD_INPUT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    measurementType = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_RTD_INPUT_measurementType_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_RTD_INPUT_measurementType_set)
    measurementRange = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_RTD_INPUT_measurementRange_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_RTD_INPUT_measurementRange_set)
    temperatureCoefficient = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_RTD_INPUT_temperatureCoefficient_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_RTD_INPUT_temperatureCoefficient_set)
    smoothing = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_RTD_INPUT_smoothing_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_RTD_INPUT_smoothing_set)
    integrationTime = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_RTD_INPUT_integrationTime_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_RTD_INPUT_integrationTime_set)
    temperatureUnits = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_RTD_INPUT_temperatureUnits_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_RTD_INPUT_temperatureUnits_set)
    reserved = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_RTD_INPUT_reserved_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_RTD_INPUT_reserved_set)
    alarm = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_RTD_INPUT_alarm_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_RTD_INPUT_alarm_set)
    reserved1 = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_RTD_INPUT_reserved1_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_RTD_INPUT_reserved1_set)
    fill1 = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_RTD_INPUT_fill1_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_RTD_INPUT_fill1_set)
    fill2 = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_RTD_INPUT_fill2_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_RTD_INPUT_fill2_set)
    fill3 = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_RTD_INPUT_fill3_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_RTD_INPUT_fill3_set)
    fill4 = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_RTD_INPUT_fill4_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_RTD_INPUT_fill4_set)
    fill5 = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_RTD_INPUT_fill5_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_RTD_INPUT_fill5_set)
    fill6 = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_RTD_INPUT_fill6_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_RTD_INPUT_fill6_set)
    fill7 = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_RTD_INPUT_fill7_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_RTD_INPUT_fill7_set)
    fill8 = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_RTD_INPUT_fill8_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_RTD_INPUT_fill8_set)
    fill9 = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_RTD_INPUT_fill9_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_RTD_INPUT_fill9_set)

    def __init__(self):
        _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_RTD_INPUT_swiginit(self, _MicroWinExecInterface.new_sSDBIOBase_SDB_PARAM_RTD_INPUT())
    __swig_destroy__ = _MicroWinExecInterface.delete_sSDBIOBase_SDB_PARAM_RTD_INPUT

# Register sSDBIOBase_SDB_PARAM_RTD_INPUT in _MicroWinExecInterface:
_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_RTD_INPUT_swigregister(sSDBIOBase_SDB_PARAM_RTD_INPUT)

class sSDBIOBase_SDB_PARAM_TC_INPUT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    measurementType = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_TC_INPUT_measurementType_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_TC_INPUT_measurementType_set)
    measurementRange = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_TC_INPUT_measurementRange_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_TC_INPUT_measurementRange_set)
    reserved = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_TC_INPUT_reserved_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_TC_INPUT_reserved_set)
    smoothing = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_TC_INPUT_smoothing_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_TC_INPUT_smoothing_set)
    integrationTime = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_TC_INPUT_integrationTime_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_TC_INPUT_integrationTime_set)
    temperatureUnits = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_TC_INPUT_temperatureUnits_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_TC_INPUT_temperatureUnits_set)
    sourceRefTemperature = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_TC_INPUT_sourceRefTemperature_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_TC_INPUT_sourceRefTemperature_set)
    reserved1 = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_TC_INPUT_reserved1_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_TC_INPUT_reserved1_set)
    alarm = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_TC_INPUT_alarm_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_TC_INPUT_alarm_set)
    reserved2 = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_TC_INPUT_reserved2_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_TC_INPUT_reserved2_set)
    referenceTemperature = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_TC_INPUT_referenceTemperature_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_TC_INPUT_referenceTemperature_set)
    fill2 = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_TC_INPUT_fill2_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_TC_INPUT_fill2_set)
    fill3 = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_TC_INPUT_fill3_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_TC_INPUT_fill3_set)
    fill4 = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_TC_INPUT_fill4_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_TC_INPUT_fill4_set)
    fill5 = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_TC_INPUT_fill5_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_TC_INPUT_fill5_set)
    fill6 = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_TC_INPUT_fill6_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_TC_INPUT_fill6_set)
    fill7 = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_TC_INPUT_fill7_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_TC_INPUT_fill7_set)
    fill8 = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_TC_INPUT_fill8_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_TC_INPUT_fill8_set)
    fill9 = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_TC_INPUT_fill9_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_TC_INPUT_fill9_set)

    def __init__(self):
        _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_TC_INPUT_swiginit(self, _MicroWinExecInterface.new_sSDBIOBase_SDB_PARAM_TC_INPUT())
    __swig_destroy__ = _MicroWinExecInterface.delete_sSDBIOBase_SDB_PARAM_TC_INPUT

# Register sSDBIOBase_SDB_PARAM_TC_INPUT in _MicroWinExecInterface:
_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_TC_INPUT_swigregister(sSDBIOBase_SDB_PARAM_TC_INPUT)

class sSDBIOBase_SDB_PARAM_ANALOG_OUTPUT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    outputType = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_OUTPUT_outputType_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_OUTPUT_outputType_set)
    outputRange = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_OUTPUT_outputRange_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_OUTPUT_outputRange_set)
    alarm = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_OUTPUT_alarm_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_OUTPUT_alarm_set)
    fill = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_OUTPUT_fill_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_OUTPUT_fill_set)
    behavior = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_OUTPUT_behavior_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_OUTPUT_behavior_set)
    fill2 = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_OUTPUT_fill2_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_OUTPUT_fill2_set)
    substituteValue = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_OUTPUT_substituteValue_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_OUTPUT_substituteValue_set)

    def __init__(self):
        _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_OUTPUT_swiginit(self, _MicroWinExecInterface.new_sSDBIOBase_SDB_PARAM_ANALOG_OUTPUT())
    __swig_destroy__ = _MicroWinExecInterface.delete_sSDBIOBase_SDB_PARAM_ANALOG_OUTPUT

# Register sSDBIOBase_SDB_PARAM_ANALOG_OUTPUT in _MicroWinExecInterface:
_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_OUTPUT_swigregister(sSDBIOBase_SDB_PARAM_ANALOG_OUTPUT)

class sSDBIOBase_SDB_PARAM_ANALOG_INPUT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    measurementType = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_INPUT_measurementType_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_INPUT_measurementType_set)
    measurementRange = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_INPUT_measurementRange_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_INPUT_measurementRange_set)
    reserved1 = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_INPUT_reserved1_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_INPUT_reserved1_set)
    smoothing = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_INPUT_smoothing_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_INPUT_smoothing_set)
    integrationTime = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_INPUT_integrationTime_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_INPUT_integrationTime_set)
    reserved2 = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_INPUT_reserved2_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_INPUT_reserved2_set)
    reserved3 = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_INPUT_reserved3_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_INPUT_reserved3_set)
    alarm = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_INPUT_alarm_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_INPUT_alarm_set)
    reserved4 = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_INPUT_reserved4_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_INPUT_reserved4_set)
    fill1 = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_INPUT_fill1_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_INPUT_fill1_set)
    fill2 = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_INPUT_fill2_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_INPUT_fill2_set)
    fill3 = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_INPUT_fill3_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_INPUT_fill3_set)
    fill4 = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_INPUT_fill4_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_INPUT_fill4_set)
    fill5 = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_INPUT_fill5_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_INPUT_fill5_set)
    fill6 = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_INPUT_fill6_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_INPUT_fill6_set)
    fill7 = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_INPUT_fill7_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_INPUT_fill7_set)
    fill8 = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_INPUT_fill8_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_INPUT_fill8_set)
    fill9 = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_INPUT_fill9_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_INPUT_fill9_set)

    def __init__(self):
        _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_INPUT_swiginit(self, _MicroWinExecInterface.new_sSDBIOBase_SDB_PARAM_ANALOG_INPUT())
    __swig_destroy__ = _MicroWinExecInterface.delete_sSDBIOBase_SDB_PARAM_ANALOG_INPUT

# Register sSDBIOBase_SDB_PARAM_ANALOG_INPUT in _MicroWinExecInterface:
_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_ANALOG_INPUT_swigregister(sSDBIOBase_SDB_PARAM_ANALOG_INPUT)

INPUT_PIN_0_I0_0 = _MicroWinExecInterface.INPUT_PIN_0_I0_0
INPUT_PIN_1_I0_1 = _MicroWinExecInterface.INPUT_PIN_1_I0_1
INPUT_PIN_2_I0_2 = _MicroWinExecInterface.INPUT_PIN_2_I0_2
INPUT_PIN_3_I0_3 = _MicroWinExecInterface.INPUT_PIN_3_I0_3
INPUT_PIN_4_I0_4 = _MicroWinExecInterface.INPUT_PIN_4_I0_4
INPUT_PIN_5_I0_5 = _MicroWinExecInterface.INPUT_PIN_5_I0_5
INPUT_PIN_6_I0_6 = _MicroWinExecInterface.INPUT_PIN_6_I0_6
INPUT_PIN_7_I0_7 = _MicroWinExecInterface.INPUT_PIN_7_I0_7
INPUT_PIN_8_I1_0 = _MicroWinExecInterface.INPUT_PIN_8_I1_0
INPUT_PIN_9_I1_1 = _MicroWinExecInterface.INPUT_PIN_9_I1_1
INPUT_PIN_10_I1_2 = _MicroWinExecInterface.INPUT_PIN_10_I1_2
INPUT_PIN_11_I1_3 = _MicroWinExecInterface.INPUT_PIN_11_I1_3
OUTPUT_PIN_0_Q0_0 = _MicroWinExecInterface.OUTPUT_PIN_0_Q0_0
OUTPUT_PIN_1_Q0_1 = _MicroWinExecInterface.OUTPUT_PIN_1_Q0_1
OUTPUT_PIN_2_Q0_2 = _MicroWinExecInterface.OUTPUT_PIN_2_Q0_2
OUTPUT_PIN_3_Q0_3 = _MicroWinExecInterface.OUTPUT_PIN_3_Q0_3
OUTPUT_PIN_4_Q0_4 = _MicroWinExecInterface.OUTPUT_PIN_4_Q0_4
OUTPUT_PIN_5_Q0_5 = _MicroWinExecInterface.OUTPUT_PIN_5_Q0_5
OUTPUT_PIN_6_Q0_6 = _MicroWinExecInterface.OUTPUT_PIN_6_Q0_6
OUTPUT_PIN_7_Q0_7 = _MicroWinExecInterface.OUTPUT_PIN_7_Q0_7
OUTPUT_PIN_8_Q1_0 = _MicroWinExecInterface.OUTPUT_PIN_8_Q1_0
OUTPUT_PIN_9_Q1_1 = _MicroWinExecInterface.OUTPUT_PIN_9_Q1_1
OUTPUT_PIN_10_Q1_2 = _MicroWinExecInterface.OUTPUT_PIN_10_Q1_2
OUTPUT_PIN_11_Q1_3 = _MicroWinExecInterface.OUTPUT_PIN_11_Q1_3
FILTER_200micro = _MicroWinExecInterface.FILTER_200micro
FILTER_400micro = _MicroWinExecInterface.FILTER_400micro
FILTER_800micro = _MicroWinExecInterface.FILTER_800micro
FILTER_1600micro = _MicroWinExecInterface.FILTER_1600micro
FILTER_3200micro = _MicroWinExecInterface.FILTER_3200micro
FILTER_6400micro = _MicroWinExecInterface.FILTER_6400micro
FILTER_12800micro = _MicroWinExecInterface.FILTER_12800micro
FILTER_NONE = _MicroWinExecInterface.FILTER_NONE
PHASE_SINGLE = _MicroWinExecInterface.PHASE_SINGLE
PHASE_TWO = _MicroWinExecInterface.PHASE_TWO
PHASE_QUADRATURE = _MicroWinExecInterface.PHASE_QUADRATURE
PHASE_SINGLE_PHASE_NO_DIRECTION = _MicroWinExecInterface.PHASE_SINGLE_PHASE_NO_DIRECTION
POLARITY_POSITIVE = _MicroWinExecInterface.POLARITY_POSITIVE
POLARITY_NEGATIVE = _MicroWinExecInterface.POLARITY_NEGATIVE
ACTIVE_HIGH = _MicroWinExecInterface.ACTIVE_HIGH
ACTIVE_LOW = _MicroWinExecInterface.ACTIVE_LOW
LEVEL = _MicroWinExecInterface.LEVEL
EDGE = _MicroWinExecInterface.EDGE
HSC0_I0_0 = _MicroWinExecInterface.HSC0_I0_0
HSC1_I0_1 = _MicroWinExecInterface.HSC1_I0_1
HSC2_I0_2 = _MicroWinExecInterface.HSC2_I0_2
HSC3_I0_3 = _MicroWinExecInterface.HSC3_I0_3
class sSDBIOBase_SDB_PARAM_MOTION_AXIS_HEADER(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    paramLen = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_HEADER_paramLen_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_HEADER_paramLen_set)
    paramID = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_HEADER_paramID_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_HEADER_paramID_set)
    reserved = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_HEADER_reserved_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_HEADER_reserved_set)
    configured = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_HEADER_configured_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_HEADER_configured_set)

    def __init__(self):
        _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_HEADER_swiginit(self, _MicroWinExecInterface.new_sSDBIOBase_SDB_PARAM_MOTION_AXIS_HEADER())
    __swig_destroy__ = _MicroWinExecInterface.delete_sSDBIOBase_SDB_PARAM_MOTION_AXIS_HEADER

# Register sSDBIOBase_SDB_PARAM_MOTION_AXIS_HEADER in _MicroWinExecInterface:
_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_HEADER_swigregister(sSDBIOBase_SDB_PARAM_MOTION_AXIS_HEADER)

class sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    input_LMT_pos = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_input_LMT_pos_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_input_LMT_pos_set)
    input_LMT_neg = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_input_LMT_neg_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_input_LMT_neg_set)
    input_STP = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_input_STP_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_input_STP_set)
    input_RPS = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_input_RPS_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_input_RPS_set)
    input_ZP = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_input_ZP_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_input_ZP_set)
    input_TRIG = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_input_TRIG_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_input_TRIG_set)
    output_CLR = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_output_CLR_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_output_CLR_set)
    output_DIS = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_output_DIS_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_output_DIS_set)
    LMT_pos_PinDef = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_LMT_pos_PinDef_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_LMT_pos_PinDef_set)
    LMT_neg_PinDef = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_LMT_neg_PinDef_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_LMT_neg_PinDef_set)
    STP_PinDef = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_STP_PinDef_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_STP_PinDef_set)
    RPS_PinDef = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_RPS_PinDef_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_RPS_PinDef_set)
    ZP_InputFilter_HSCDef = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_ZP_InputFilter_HSCDef_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_ZP_InputFilter_HSCDef_set)
    phase_polarity_level = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_phase_polarity_level_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_phase_polarity_level_set)
    TRIG_PinDef = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_TRIG_PinDef_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_TRIG_PinDef_set)
    phaseA_pins = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_phaseA_pins_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_phaseA_pins_set)
    phaseB_pins = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_phaseB_pins_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_phaseB_pins_set)
    DIS_pins = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_DIS_pins_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_DIS_pins_set)
    CLR_pins = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_CLR_pins_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_CLR_pins_set)
    any_pointer = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_any_pointer_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_any_pointer_set)

    def __eq__(self, rSrc):
        return _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG___eq__(self, rSrc)

    def __init__(self):
        _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_swiginit(self, _MicroWinExecInterface.new_sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG())
    __swig_destroy__ = _MicroWinExecInterface.delete_sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG

# Register sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG in _MicroWinExecInterface:
_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_swigregister(sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG)
ANY_POINTER_SIZE = cvar.ANY_POINTER_SIZE
STP_INPUT_ACTIVE_TRIGGER = cvar.STP_INPUT_ACTIVE_TRIGGER

class sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    input_LMT_pos = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1_input_LMT_pos_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1_input_LMT_pos_set)
    input_LMT_neg = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1_input_LMT_neg_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1_input_LMT_neg_set)
    input_STP = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1_input_STP_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1_input_STP_set)
    input_RPS = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1_input_RPS_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1_input_RPS_set)
    input_ZP = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1_input_ZP_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1_input_ZP_set)
    input_TRIG = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1_input_TRIG_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1_input_TRIG_set)
    output_CLR = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1_output_CLR_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1_output_CLR_set)
    output_DIS = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1_output_DIS_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1_output_DIS_set)
    LMT_pos_PinDef = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1_LMT_pos_PinDef_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1_LMT_pos_PinDef_set)
    LMT_neg_PinDef = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1_LMT_neg_PinDef_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1_LMT_neg_PinDef_set)
    STP_PinDef = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1_STP_PinDef_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1_STP_PinDef_set)
    RPS_PinDef = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1_RPS_PinDef_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1_RPS_PinDef_set)
    ZP_InputFilter_HSCDef = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1_ZP_InputFilter_HSCDef_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1_ZP_InputFilter_HSCDef_set)
    phase_polarity_level = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1_phase_polarity_level_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1_phase_polarity_level_set)
    TRIG_PinDef = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1_TRIG_PinDef_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1_TRIG_PinDef_set)
    phaseA_pins = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1_phaseA_pins_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1_phaseA_pins_set)
    phaseB_pins = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1_phaseB_pins_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1_phaseB_pins_set)
    DIS_pins = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1_DIS_pins_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1_DIS_pins_set)
    CLR_pins = property(_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1_CLR_pins_get, _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1_CLR_pins_set)

    def __init__(self):
        _MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1_swiginit(self, _MicroWinExecInterface.new_sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1())
    __swig_destroy__ = _MicroWinExecInterface.delete_sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1

# Register sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1 in _MicroWinExecInterface:
_MicroWinExecInterface.sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1_swigregister(sSDBIOBase_SDB_PARAM_MOTION_AXIS_IO_CONFIG_V1)

eSDBBase_USE_SPECIFIED_VALUE = _MicroWinExecInterface.eSDBBase_USE_SPECIFIED_VALUE
eSDBBase_FREEZE_OUTPUTS = _MicroWinExecInterface.eSDBBase_FREEZE_OUTPUTS
eSDBBase_NO_OUTPUTS = _MicroWinExecInterface.eSDBBase_NO_OUTPUTS
class SDB_ELEMENT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_strModuleDescription = property(_MicroWinExecInterface.SDB_ELEMENT_m_strModuleDescription_get, _MicroWinExecInterface.SDB_ELEMENT_m_strModuleDescription_set)
    m_strModule = property(_MicroWinExecInterface.SDB_ELEMENT_m_strModule_get, _MicroWinExecInterface.SDB_ELEMENT_m_strModule_set)
    m_strInput = property(_MicroWinExecInterface.SDB_ELEMENT_m_strInput_get, _MicroWinExecInterface.SDB_ELEMENT_m_strInput_set)
    m_strOutput = property(_MicroWinExecInterface.SDB_ELEMENT_m_strOutput_get, _MicroWinExecInterface.SDB_ELEMENT_m_strOutput_set)
    m_strMLFB = property(_MicroWinExecInterface.SDB_ELEMENT_m_strMLFB_get, _MicroWinExecInterface.SDB_ELEMENT_m_strMLFB_set)
    m_strFirmwareVersion = property(_MicroWinExecInterface.SDB_ELEMENT_m_strFirmwareVersion_get, _MicroWinExecInterface.SDB_ELEMENT_m_strFirmwareVersion_set)
    m_nSubmoduleIdentNumber = property(_MicroWinExecInterface.SDB_ELEMENT_m_nSubmoduleIdentNumber_get, _MicroWinExecInterface.SDB_ELEMENT_m_nSubmoduleIdentNumber_set)

    def __init__(self):
        _MicroWinExecInterface.SDB_ELEMENT_swiginit(self, _MicroWinExecInterface.new_SDB_ELEMENT())
    __swig_destroy__ = _MicroWinExecInterface.delete_SDB_ELEMENT

# Register SDB_ELEMENT in _MicroWinExecInterface:
_MicroWinExecInterface.SDB_ELEMENT_swigregister(SDB_ELEMENT)

class SDB_EXPECTED_CONFIG_SEGMENT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    segLen = property(_MicroWinExecInterface.SDB_EXPECTED_CONFIG_SEGMENT_segLen_get, _MicroWinExecInterface.SDB_EXPECTED_CONFIG_SEGMENT_segLen_set)
    versionHighLow = property(_MicroWinExecInterface.SDB_EXPECTED_CONFIG_SEGMENT_versionHighLow_get, _MicroWinExecInterface.SDB_EXPECTED_CONFIG_SEGMENT_versionHighLow_set)
    apiCount = property(_MicroWinExecInterface.SDB_EXPECTED_CONFIG_SEGMENT_apiCount_get, _MicroWinExecInterface.SDB_EXPECTED_CONFIG_SEGMENT_apiCount_set)
    apiCode = property(_MicroWinExecInterface.SDB_EXPECTED_CONFIG_SEGMENT_apiCode_get, _MicroWinExecInterface.SDB_EXPECTED_CONFIG_SEGMENT_apiCode_set)
    moduleIdent = property(_MicroWinExecInterface.SDB_EXPECTED_CONFIG_SEGMENT_moduleIdent_get, _MicroWinExecInterface.SDB_EXPECTED_CONFIG_SEGMENT_moduleIdent_set)
    moduleProps = property(_MicroWinExecInterface.SDB_EXPECTED_CONFIG_SEGMENT_moduleProps_get, _MicroWinExecInterface.SDB_EXPECTED_CONFIG_SEGMENT_moduleProps_set)
    subMods = property(_MicroWinExecInterface.SDB_EXPECTED_CONFIG_SEGMENT_subMods_get, _MicroWinExecInterface.SDB_EXPECTED_CONFIG_SEGMENT_subMods_set)
    subSlot = property(_MicroWinExecInterface.SDB_EXPECTED_CONFIG_SEGMENT_subSlot_get, _MicroWinExecInterface.SDB_EXPECTED_CONFIG_SEGMENT_subSlot_set)
    subModProps = property(_MicroWinExecInterface.SDB_EXPECTED_CONFIG_SEGMENT_subModProps_get, _MicroWinExecInterface.SDB_EXPECTED_CONFIG_SEGMENT_subModProps_set)
    subModIdent = property(_MicroWinExecInterface.SDB_EXPECTED_CONFIG_SEGMENT_subModIdent_get, _MicroWinExecInterface.SDB_EXPECTED_CONFIG_SEGMENT_subModIdent_set)
    subModInputDataLen = property(_MicroWinExecInterface.SDB_EXPECTED_CONFIG_SEGMENT_subModInputDataLen_get, _MicroWinExecInterface.SDB_EXPECTED_CONFIG_SEGMENT_subModInputDataLen_set)
    subModOutputDataLen = property(_MicroWinExecInterface.SDB_EXPECTED_CONFIG_SEGMENT_subModOutputDataLen_get, _MicroWinExecInterface.SDB_EXPECTED_CONFIG_SEGMENT_subModOutputDataLen_set)

    def __init__(self):
        _MicroWinExecInterface.SDB_EXPECTED_CONFIG_SEGMENT_swiginit(self, _MicroWinExecInterface.new_SDB_EXPECTED_CONFIG_SEGMENT())
    __swig_destroy__ = _MicroWinExecInterface.delete_SDB_EXPECTED_CONFIG_SEGMENT

# Register SDB_EXPECTED_CONFIG_SEGMENT in _MicroWinExecInterface:
_MicroWinExecInterface.SDB_EXPECTED_CONFIG_SEGMENT_swigregister(SDB_EXPECTED_CONFIG_SEGMENT)

MODULE_COMMON = _MicroWinExecInterface.MODULE_COMMON
MODULE_CPU = _MicroWinExecInterface.MODULE_CPU
MODULE_SIGNAL_BOARD = _MicroWinExecInterface.MODULE_SIGNAL_BOARD
MODULE_SIGNAL_MODULE = _MicroWinExecInterface.MODULE_SIGNAL_MODULE
MODULE_MOTION = _MicroWinExecInterface.MODULE_MOTION
class COMPASS_MODULE_DATA(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_ShortDevice = property(_MicroWinExecInterface.COMPASS_MODULE_DATA_m_ShortDevice_get, _MicroWinExecInterface.COMPASS_MODULE_DATA_m_ShortDevice_set)
    m_Device = property(_MicroWinExecInterface.COMPASS_MODULE_DATA_m_Device_get, _MicroWinExecInterface.COMPASS_MODULE_DATA_m_Device_set)
    m_Version = property(_MicroWinExecInterface.COMPASS_MODULE_DATA_m_Version_get, _MicroWinExecInterface.COMPASS_MODULE_DATA_m_Version_set)
    m_MLFB = property(_MicroWinExecInterface.COMPASS_MODULE_DATA_m_MLFB_get, _MicroWinExecInterface.COMPASS_MODULE_DATA_m_MLFB_set)
    m_ModuleIDent = property(_MicroWinExecInterface.COMPASS_MODULE_DATA_m_ModuleIDent_get, _MicroWinExecInterface.COMPASS_MODULE_DATA_m_ModuleIDent_set)
    m_SubModuleIDent = property(_MicroWinExecInterface.COMPASS_MODULE_DATA_m_SubModuleIDent_get, _MicroWinExecInterface.COMPASS_MODULE_DATA_m_SubModuleIDent_set)
    m_IsCompact = property(_MicroWinExecInterface.COMPASS_MODULE_DATA_m_IsCompact_get, _MicroWinExecInterface.COMPASS_MODULE_DATA_m_IsCompact_set)
    m_Type = property(_MicroWinExecInterface.COMPASS_MODULE_DATA_m_Type_get, _MicroWinExecInterface.COMPASS_MODULE_DATA_m_Type_set)
    m_IsCommSB = property(_MicroWinExecInterface.COMPASS_MODULE_DATA_m_IsCommSB_get, _MicroWinExecInterface.COMPASS_MODULE_DATA_m_IsCommSB_set)
    m_IsDP01 = property(_MicroWinExecInterface.COMPASS_MODULE_DATA_m_IsDP01_get, _MicroWinExecInterface.COMPASS_MODULE_DATA_m_IsDP01_set)
    m_IsSerialOnly = property(_MicroWinExecInterface.COMPASS_MODULE_DATA_m_IsSerialOnly_get, _MicroWinExecInterface.COMPASS_MODULE_DATA_m_IsSerialOnly_set)

    def __eq__(self, rSrc):
        return _MicroWinExecInterface.COMPASS_MODULE_DATA___eq__(self, rSrc)

    def __init__(self):
        _MicroWinExecInterface.COMPASS_MODULE_DATA_swiginit(self, _MicroWinExecInterface.new_COMPASS_MODULE_DATA())
    __swig_destroy__ = _MicroWinExecInterface.delete_COMPASS_MODULE_DATA

# Register COMPASS_MODULE_DATA in _MicroWinExecInterface:
_MicroWinExecInterface.COMPASS_MODULE_DATA_swigregister(COMPASS_MODULE_DATA)
COMPASS_MAX_MODULES = cvar.COMPASS_MAX_MODULES
COMPASS_MAX_MAPPINGS = cvar.COMPASS_MAX_MAPPINGS
COMPASS_MAX_CURRENTS = cvar.COMPASS_MAX_CURRENTS

class COMPASS_MAPPING_DATA(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_Type = property(_MicroWinExecInterface.COMPASS_MAPPING_DATA_m_Type_get, _MicroWinExecInterface.COMPASS_MAPPING_DATA_m_Type_set)
    m_Slot = property(_MicroWinExecInterface.COMPASS_MAPPING_DATA_m_Slot_get, _MicroWinExecInterface.COMPASS_MAPPING_DATA_m_Slot_set)
    m_StartingAI = property(_MicroWinExecInterface.COMPASS_MAPPING_DATA_m_StartingAI_get, _MicroWinExecInterface.COMPASS_MAPPING_DATA_m_StartingAI_set)
    m_EndingAI = property(_MicroWinExecInterface.COMPASS_MAPPING_DATA_m_EndingAI_get, _MicroWinExecInterface.COMPASS_MAPPING_DATA_m_EndingAI_set)
    m_StartingAQ = property(_MicroWinExecInterface.COMPASS_MAPPING_DATA_m_StartingAQ_get, _MicroWinExecInterface.COMPASS_MAPPING_DATA_m_StartingAQ_set)
    m_EndingAQ = property(_MicroWinExecInterface.COMPASS_MAPPING_DATA_m_EndingAQ_get, _MicroWinExecInterface.COMPASS_MAPPING_DATA_m_EndingAQ_set)
    m_StartingDI = property(_MicroWinExecInterface.COMPASS_MAPPING_DATA_m_StartingDI_get, _MicroWinExecInterface.COMPASS_MAPPING_DATA_m_StartingDI_set)
    m_StartingDQ = property(_MicroWinExecInterface.COMPASS_MAPPING_DATA_m_StartingDQ_get, _MicroWinExecInterface.COMPASS_MAPPING_DATA_m_StartingDQ_set)

    def __eq__(self, rSrc):
        return _MicroWinExecInterface.COMPASS_MAPPING_DATA___eq__(self, rSrc)

    def __init__(self):
        _MicroWinExecInterface.COMPASS_MAPPING_DATA_swiginit(self, _MicroWinExecInterface.new_COMPASS_MAPPING_DATA())
    __swig_destroy__ = _MicroWinExecInterface.delete_COMPASS_MAPPING_DATA

# Register COMPASS_MAPPING_DATA in _MicroWinExecInterface:
_MicroWinExecInterface.COMPASS_MAPPING_DATA_swigregister(COMPASS_MAPPING_DATA)

class COMPASS_ELEMENT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_ModuleData = property(_MicroWinExecInterface.COMPASS_ELEMENT_m_ModuleData_get, _MicroWinExecInterface.COMPASS_ELEMENT_m_ModuleData_set)
    m_MappingData = property(_MicroWinExecInterface.COMPASS_ELEMENT_m_MappingData_get, _MicroWinExecInterface.COMPASS_ELEMENT_m_MappingData_set)

    def __eq__(self, rSrc):
        return _MicroWinExecInterface.COMPASS_ELEMENT___eq__(self, rSrc)

    def __init__(self):
        _MicroWinExecInterface.COMPASS_ELEMENT_swiginit(self, _MicroWinExecInterface.new_COMPASS_ELEMENT())
    __swig_destroy__ = _MicroWinExecInterface.delete_COMPASS_ELEMENT

# Register COMPASS_ELEMENT in _MicroWinExecInterface:
_MicroWinExecInterface.COMPASS_ELEMENT_swigregister(COMPASS_ELEMENT)

class COMPASS_MODULE_TYPES(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    shortDevice = property(_MicroWinExecInterface.COMPASS_MODULE_TYPES_shortDevice_get, _MicroWinExecInterface.COMPASS_MODULE_TYPES_shortDevice_set)
    device = property(_MicroWinExecInterface.COMPASS_MODULE_TYPES_device_get, _MicroWinExecInterface.COMPASS_MODULE_TYPES_device_set)
    moduleIDent = property(_MicroWinExecInterface.COMPASS_MODULE_TYPES_moduleIDent_get, _MicroWinExecInterface.COMPASS_MODULE_TYPES_moduleIDent_set)

    def __eq__(self, rSrc):
        return _MicroWinExecInterface.COMPASS_MODULE_TYPES___eq__(self, rSrc)

    def __init__(self):
        _MicroWinExecInterface.COMPASS_MODULE_TYPES_swiginit(self, _MicroWinExecInterface.new_COMPASS_MODULE_TYPES())
    __swig_destroy__ = _MicroWinExecInterface.delete_COMPASS_MODULE_TYPES

# Register COMPASS_MODULE_TYPES in _MicroWinExecInterface:
_MicroWinExecInterface.COMPASS_MODULE_TYPES_swigregister(COMPASS_MODULE_TYPES)

class COMPASS_MODULE_DATA_TRASH(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_ShortDevice = property(_MicroWinExecInterface.COMPASS_MODULE_DATA_TRASH_m_ShortDevice_get, _MicroWinExecInterface.COMPASS_MODULE_DATA_TRASH_m_ShortDevice_set)
    m_Device = property(_MicroWinExecInterface.COMPASS_MODULE_DATA_TRASH_m_Device_get, _MicroWinExecInterface.COMPASS_MODULE_DATA_TRASH_m_Device_set)
    m_MLFB = property(_MicroWinExecInterface.COMPASS_MODULE_DATA_TRASH_m_MLFB_get, _MicroWinExecInterface.COMPASS_MODULE_DATA_TRASH_m_MLFB_set)
    m_ModuleIDent = property(_MicroWinExecInterface.COMPASS_MODULE_DATA_TRASH_m_ModuleIDent_get, _MicroWinExecInterface.COMPASS_MODULE_DATA_TRASH_m_ModuleIDent_set)
    m_SubModuleIDent = property(_MicroWinExecInterface.COMPASS_MODULE_DATA_TRASH_m_SubModuleIDent_get, _MicroWinExecInterface.COMPASS_MODULE_DATA_TRASH_m_SubModuleIDent_set)
    m_IsCompact = property(_MicroWinExecInterface.COMPASS_MODULE_DATA_TRASH_m_IsCompact_get, _MicroWinExecInterface.COMPASS_MODULE_DATA_TRASH_m_IsCompact_set)
    m_Type = property(_MicroWinExecInterface.COMPASS_MODULE_DATA_TRASH_m_Type_get, _MicroWinExecInterface.COMPASS_MODULE_DATA_TRASH_m_Type_set)
    m_IsCommSB = property(_MicroWinExecInterface.COMPASS_MODULE_DATA_TRASH_m_IsCommSB_get, _MicroWinExecInterface.COMPASS_MODULE_DATA_TRASH_m_IsCommSB_set)

    def __init__(self):
        _MicroWinExecInterface.COMPASS_MODULE_DATA_TRASH_swiginit(self, _MicroWinExecInterface.new_COMPASS_MODULE_DATA_TRASH())
    __swig_destroy__ = _MicroWinExecInterface.delete_COMPASS_MODULE_DATA_TRASH

# Register COMPASS_MODULE_DATA_TRASH in _MicroWinExecInterface:
_MicroWinExecInterface.COMPASS_MODULE_DATA_TRASH_swigregister(COMPASS_MODULE_DATA_TRASH)

class COMPASS_MODULE_DATA_PRE_TRASH(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_Device = property(_MicroWinExecInterface.COMPASS_MODULE_DATA_PRE_TRASH_m_Device_get, _MicroWinExecInterface.COMPASS_MODULE_DATA_PRE_TRASH_m_Device_set)
    m_MLFB = property(_MicroWinExecInterface.COMPASS_MODULE_DATA_PRE_TRASH_m_MLFB_get, _MicroWinExecInterface.COMPASS_MODULE_DATA_PRE_TRASH_m_MLFB_set)
    m_ModuleIDent = property(_MicroWinExecInterface.COMPASS_MODULE_DATA_PRE_TRASH_m_ModuleIDent_get, _MicroWinExecInterface.COMPASS_MODULE_DATA_PRE_TRASH_m_ModuleIDent_set)
    m_SubModuleIDent = property(_MicroWinExecInterface.COMPASS_MODULE_DATA_PRE_TRASH_m_SubModuleIDent_get, _MicroWinExecInterface.COMPASS_MODULE_DATA_PRE_TRASH_m_SubModuleIDent_set)
    m_IsCompact = property(_MicroWinExecInterface.COMPASS_MODULE_DATA_PRE_TRASH_m_IsCompact_get, _MicroWinExecInterface.COMPASS_MODULE_DATA_PRE_TRASH_m_IsCompact_set)
    m_Type = property(_MicroWinExecInterface.COMPASS_MODULE_DATA_PRE_TRASH_m_Type_get, _MicroWinExecInterface.COMPASS_MODULE_DATA_PRE_TRASH_m_Type_set)
    m_IsCommSB = property(_MicroWinExecInterface.COMPASS_MODULE_DATA_PRE_TRASH_m_IsCommSB_get, _MicroWinExecInterface.COMPASS_MODULE_DATA_PRE_TRASH_m_IsCommSB_set)

    def __init__(self):
        _MicroWinExecInterface.COMPASS_MODULE_DATA_PRE_TRASH_swiginit(self, _MicroWinExecInterface.new_COMPASS_MODULE_DATA_PRE_TRASH())
    __swig_destroy__ = _MicroWinExecInterface.delete_COMPASS_MODULE_DATA_PRE_TRASH

# Register COMPASS_MODULE_DATA_PRE_TRASH in _MicroWinExecInterface:
_MicroWinExecInterface.COMPASS_MODULE_DATA_PRE_TRASH_swigregister(COMPASS_MODULE_DATA_PRE_TRASH)

class COMPASS_MAPPING_DATA_TRASH(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_Type = property(_MicroWinExecInterface.COMPASS_MAPPING_DATA_TRASH_m_Type_get, _MicroWinExecInterface.COMPASS_MAPPING_DATA_TRASH_m_Type_set)
    m_Slot = property(_MicroWinExecInterface.COMPASS_MAPPING_DATA_TRASH_m_Slot_get, _MicroWinExecInterface.COMPASS_MAPPING_DATA_TRASH_m_Slot_set)
    m_StartingAI = property(_MicroWinExecInterface.COMPASS_MAPPING_DATA_TRASH_m_StartingAI_get, _MicroWinExecInterface.COMPASS_MAPPING_DATA_TRASH_m_StartingAI_set)
    m_EndingAI = property(_MicroWinExecInterface.COMPASS_MAPPING_DATA_TRASH_m_EndingAI_get, _MicroWinExecInterface.COMPASS_MAPPING_DATA_TRASH_m_EndingAI_set)
    m_StartingAQ = property(_MicroWinExecInterface.COMPASS_MAPPING_DATA_TRASH_m_StartingAQ_get, _MicroWinExecInterface.COMPASS_MAPPING_DATA_TRASH_m_StartingAQ_set)
    m_EndingAQ = property(_MicroWinExecInterface.COMPASS_MAPPING_DATA_TRASH_m_EndingAQ_get, _MicroWinExecInterface.COMPASS_MAPPING_DATA_TRASH_m_EndingAQ_set)
    m_StartingDI = property(_MicroWinExecInterface.COMPASS_MAPPING_DATA_TRASH_m_StartingDI_get, _MicroWinExecInterface.COMPASS_MAPPING_DATA_TRASH_m_StartingDI_set)
    m_StartingDQ = property(_MicroWinExecInterface.COMPASS_MAPPING_DATA_TRASH_m_StartingDQ_get, _MicroWinExecInterface.COMPASS_MAPPING_DATA_TRASH_m_StartingDQ_set)

    def __init__(self):
        _MicroWinExecInterface.COMPASS_MAPPING_DATA_TRASH_swiginit(self, _MicroWinExecInterface.new_COMPASS_MAPPING_DATA_TRASH())
    __swig_destroy__ = _MicroWinExecInterface.delete_COMPASS_MAPPING_DATA_TRASH

# Register COMPASS_MAPPING_DATA_TRASH in _MicroWinExecInterface:
_MicroWinExecInterface.COMPASS_MAPPING_DATA_TRASH_swigregister(COMPASS_MAPPING_DATA_TRASH)

class COMPASS_ELEMENT_TRASH(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_ModuleData = property(_MicroWinExecInterface.COMPASS_ELEMENT_TRASH_m_ModuleData_get, _MicroWinExecInterface.COMPASS_ELEMENT_TRASH_m_ModuleData_set)
    m_MappingData = property(_MicroWinExecInterface.COMPASS_ELEMENT_TRASH_m_MappingData_get, _MicroWinExecInterface.COMPASS_ELEMENT_TRASH_m_MappingData_set)

    def __init__(self):
        _MicroWinExecInterface.COMPASS_ELEMENT_TRASH_swiginit(self, _MicroWinExecInterface.new_COMPASS_ELEMENT_TRASH())
    __swig_destroy__ = _MicroWinExecInterface.delete_COMPASS_ELEMENT_TRASH

# Register COMPASS_ELEMENT_TRASH in _MicroWinExecInterface:
_MicroWinExecInterface.COMPASS_ELEMENT_TRASH_swigregister(COMPASS_ELEMENT_TRASH)

class COMPASS_ELEMENT_TRACOMPASS_ELEMENT_PRE_TRASHSH(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_ModuleData = property(_MicroWinExecInterface.COMPASS_ELEMENT_TRACOMPASS_ELEMENT_PRE_TRASHSH_m_ModuleData_get, _MicroWinExecInterface.COMPASS_ELEMENT_TRACOMPASS_ELEMENT_PRE_TRASHSH_m_ModuleData_set)
    m_MappingData = property(_MicroWinExecInterface.COMPASS_ELEMENT_TRACOMPASS_ELEMENT_PRE_TRASHSH_m_MappingData_get, _MicroWinExecInterface.COMPASS_ELEMENT_TRACOMPASS_ELEMENT_PRE_TRASHSH_m_MappingData_set)

    def __init__(self):
        _MicroWinExecInterface.COMPASS_ELEMENT_TRACOMPASS_ELEMENT_PRE_TRASHSH_swiginit(self, _MicroWinExecInterface.new_COMPASS_ELEMENT_TRACOMPASS_ELEMENT_PRE_TRASHSH())
    __swig_destroy__ = _MicroWinExecInterface.delete_COMPASS_ELEMENT_TRACOMPASS_ELEMENT_PRE_TRASHSH

# Register COMPASS_ELEMENT_TRACOMPASS_ELEMENT_PRE_TRASHSH in _MicroWinExecInterface:
_MicroWinExecInterface.COMPASS_ELEMENT_TRACOMPASS_ELEMENT_PRE_TRASHSH_swigregister(COMPASS_ELEMENT_TRACOMPASS_ELEMENT_PRE_TRASHSH)

P1_ST20_MIDENT = _MicroWinExecInterface.P1_ST20_MIDENT
P1_SR20_MIDENT = _MicroWinExecInterface.P1_SR20_MIDENT
P1_CR20s_MIDENT = _MicroWinExecInterface.P1_CR20s_MIDENT
P1_ST30_MIDENT = _MicroWinExecInterface.P1_ST30_MIDENT
P1_SR30_MIDENT = _MicroWinExecInterface.P1_SR30_MIDENT
P1_CR30s_MIDENT = _MicroWinExecInterface.P1_CR30s_MIDENT
P1_ST40_MIDENT = _MicroWinExecInterface.P1_ST40_MIDENT
P1_SR40_MIDENT = _MicroWinExecInterface.P1_SR40_MIDENT
P1_CR40_MIDENT = _MicroWinExecInterface.P1_CR40_MIDENT
P1_CR40s_MIDENT = _MicroWinExecInterface.P1_CR40s_MIDENT
P1_ST60_MIDENT = _MicroWinExecInterface.P1_ST60_MIDENT
P1_SR60_MIDENT = _MicroWinExecInterface.P1_SR60_MIDENT
P1_CR60_MIDENT = _MicroWinExecInterface.P1_CR60_MIDENT
P1_CR60s_MIDENT = _MicroWinExecInterface.P1_CR60s_MIDENT
SOFTWARE_REVISION_TYPE = _MicroWinExecInterface.SOFTWARE_REVISION_TYPE
SOFTWARE_REVISION_MAJOR = _MicroWinExecInterface.SOFTWARE_REVISION_MAJOR
SOFTWARE_REVISION_MINOR = _MicroWinExecInterface.SOFTWARE_REVISION_MINOR
SOFTWARE_REVISION_SP = _MicroWinExecInterface.SOFTWARE_REVISION_SP
SOFTWARE_REVISION_HF = _MicroWinExecInterface.SOFTWARE_REVISION_HF
SOFTWARE_REVISION_INCREMENT = _MicroWinExecInterface.SOFTWARE_REVISION_INCREMENT
SOFTWARE_REVISION_BUILD = _MicroWinExecInterface.SOFTWARE_REVISION_BUILD
SOFTWARE_REVISION_FREE = _MicroWinExecInterface.SOFTWARE_REVISION_FREE
SOFTWARE_REVISION_REBUILD = _MicroWinExecInterface.SOFTWARE_REVISION_REBUILD
SP_VERSION = _MicroWinExecInterface.SP_VERSION
MAJOR_VERSION = _MicroWinExecInterface.MAJOR_VERSION
MINOR_VERSION = _MicroWinExecInterface.MINOR_VERSION
BUILD_NUMBER = _MicroWinExecInterface.BUILD_NUMBER
INSTALL_NUMBER = _MicroWinExecInterface.INSTALL_NUMBER
HKEY_FULL_VERSION = _MicroWinExecInterface.HKEY_FULL_VERSION
HKEY_ABOUT_VERSION = _MicroWinExecInterface.HKEY_ABOUT_VERSION
STRING_VERSION = _MicroWinExecInterface.STRING_VERSION
COMPANY_NAME = _MicroWinExecInterface.COMPANY_NAME
LEGAL_COPYRIGHT = _MicroWinExecInterface.LEGAL_COPYRIGHT
PRODUCT_NAME = _MicroWinExecInterface.PRODUCT_NAME
REGISTRY_NAME = _MicroWinExecInterface.REGISTRY_NAME
class Smart200PLCPDEV(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MicroWinExecInterface.Smart200PLCPDEV_swiginit(self, _MicroWinExecInterface.new_Smart200PLCPDEV(*args))

    def GetPLCRole(self, *args):
        return _MicroWinExecInterface.Smart200PLCPDEV_GetPLCRole(self, *args)

    def SetPLCRole(self, role):
        return _MicroWinExecInterface.Smart200PLCPDEV_SetPLCRole(self, role)

    def Store(self, rDest):
        return _MicroWinExecInterface.Smart200PLCPDEV_Store(self, rDest)

    def Retrieve(self, *args):
        return _MicroWinExecInterface.Smart200PLCPDEV_Retrieve(self, *args)

    def GetPDInterface(self, *args):
        return _MicroWinExecInterface.Smart200PLCPDEV_GetPDInterface(self, *args)

    def GetPDPorts(self):
        return _MicroWinExecInterface.Smart200PLCPDEV_GetPDPorts(self)

    def GetStationName(self):
        return _MicroWinExecInterface.Smart200PLCPDEV_GetStationName(self)

    def SetStationName(self, stationName):
        return _MicroWinExecInterface.Smart200PLCPDEV_SetStationName(self, stationName)

    def GetIPAddr(self):
        return _MicroWinExecInterface.Smart200PLCPDEV_GetIPAddr(self)

    def SetIPAddr(self, dwIPAddr):
        return _MicroWinExecInterface.Smart200PLCPDEV_SetIPAddr(self, dwIPAddr)

    def GetSubNetMask(self):
        return _MicroWinExecInterface.Smart200PLCPDEV_GetSubNetMask(self)

    def SetSubNetMask(self, dwSubNetMask):
        return _MicroWinExecInterface.Smart200PLCPDEV_SetSubNetMask(self, dwSubNetMask)

    def GetGateWay(self):
        return _MicroWinExecInterface.Smart200PLCPDEV_GetGateWay(self)

    def SetGateWay(self, dwGateWay):
        return _MicroWinExecInterface.Smart200PLCPDEV_SetGateWay(self, dwGateWay)

    def GetSendClock(self):
        return _MicroWinExecInterface.Smart200PLCPDEV_GetSendClock(self)

    def SetSendClock(self, fSendClock):
        return _MicroWinExecInterface.Smart200PLCPDEV_SetSendClock(self, fSendClock)

    def GetStartUpTime(self):
        return _MicroWinExecInterface.Smart200PLCPDEV_GetStartUpTime(self)

    def SetStartUpTime(self, DStartUpTime):
        return _MicroWinExecInterface.Smart200PLCPDEV_SetStartUpTime(self, DStartUpTime)

    def SetSuperordinatedLocked(self, isLocked):
        return _MicroWinExecInterface.Smart200PLCPDEV_SetSuperordinatedLocked(self, isLocked)

    def GetSuperordinatedLocked(self):
        return _MicroWinExecInterface.Smart200PLCPDEV_GetSuperordinatedLocked(self)
    m_bStoreInProject = property(_MicroWinExecInterface.Smart200PLCPDEV_m_bStoreInProject_get, _MicroWinExecInterface.Smart200PLCPDEV_m_bStoreInProject_set)
    m_iStartUpTime = property(_MicroWinExecInterface.Smart200PLCPDEV_m_iStartUpTime_get, _MicroWinExecInterface.Smart200PLCPDEV_m_iStartUpTime_set)
    m_MaxStartupTime = property(_MicroWinExecInterface.Smart200PLCPDEV_m_MaxStartupTime_get, _MicroWinExecInterface.Smart200PLCPDEV_m_MaxStartupTime_set)
    __swig_destroy__ = _MicroWinExecInterface.delete_Smart200PLCPDEV

# Register Smart200PLCPDEV in _MicroWinExecInterface:
_MicroWinExecInterface.Smart200PLCPDEV_swigregister(Smart200PLCPDEV)

MIN_DATA_HOLD_TIME = _MicroWinExecInterface.MIN_DATA_HOLD_TIME
MAX_DATA_HOLD_TIME = _MicroWinExecInterface.MAX_DATA_HOLD_TIME
DEFAULT_UPDATE_TIME = _MicroWinExecInterface.DEFAULT_UPDATE_TIME
MAX_PN_ALARM = _MicroWinExecInterface.MAX_PN_ALARM
MAX_PN_EVENT = _MicroWinExecInterface.MAX_PN_EVENT
PN_ALARM_MANUFACTURER_ERROR_DATA_SIZE = _MicroWinExecInterface.PN_ALARM_MANUFACTURER_ERROR_DATA_SIZE
INSTALL_LOG_FILE = _MicroWinExecInterface.INSTALL_LOG_FILE
MAX_IMPORT_GSD_FILE_COUNT = _MicroWinExecInterface.MAX_IMPORT_GSD_FILE_COUNT
PN_TRANSFER_AREA_MAX_COUNT = _MicroWinExecInterface.PN_TRANSFER_AREA_MAX_COUNT
PN_TRANSFER_AREA_SUBSLOT_START = _MicroWinExecInterface.PN_TRANSFER_AREA_SUBSLOT_START
PN_TRANSFER_AREA_MAX_NAMELEN = _MicroWinExecInterface.PN_TRANSFER_AREA_MAX_NAMELEN
PN_TRANSFER_AREA_MAX_LENGTH_LIMIT = _MicroWinExecInterface.PN_TRANSFER_AREA_MAX_LENGTH_LIMIT
PN_TRANSFER_AREA_MAX_ADDRLENG_LIMIT = _MicroWinExecInterface.PN_TRANSFER_AREA_MAX_ADDRLENG_LIMIT
PN_TRANSFER_AREA_MAX_COMMENTLEN = _MicroWinExecInterface.PN_TRANSFER_AREA_MAX_COMMENTLEN
PN_TRANSFER_AREA_MEMORY_RANGE_START = _MicroWinExecInterface.PN_TRANSFER_AREA_MEMORY_RANGE_START
PN_TRANSFER_AREA_MEMORY_RANGE_END = _MicroWinExecInterface.PN_TRANSFER_AREA_MEMORY_RANGE_END
PN_TRANSFER_AREA_MAX_AREA_LENGTH = _MicroWinExecInterface.PN_TRANSFER_AREA_MAX_AREA_LENGTH
WRITEABLE_IM_RECORD_1_Function = _MicroWinExecInterface.WRITEABLE_IM_RECORD_1_Function
WRITEABLE_IM_RECORD_1_Location = _MicroWinExecInterface.WRITEABLE_IM_RECORD_1_Location
WRITEABLE_IM_RECORD_1 = _MicroWinExecInterface.WRITEABLE_IM_RECORD_1
WRITEABLE_IM_RECORD_2 = _MicroWinExecInterface.WRITEABLE_IM_RECORD_2
WRITEABLE_IM_RECORD_3 = _MicroWinExecInterface.WRITEABLE_IM_RECORD_3
WRITEABLE_IM_RECORD_4 = _MicroWinExecInterface.WRITEABLE_IM_RECORD_4
UP = _MicroWinExecInterface.UP
DOWN = _MicroWinExecInterface.DOWN
UPDOWN = _MicroWinExecInterface.UPDOWN
PnIrtBandwidthLevelNone = _MicroWinExecInterface.PnIrtBandwidthLevelNone
MaximumNRT = _MicroWinExecInterface.MaximumNRT
MoreNRT = _MicroWinExecInterface.MoreNRT
Fair = _MicroWinExecInterface.Fair
RTClass1FrameIdNone = _MicroWinExecInterface.RTClass1FrameIdNone
RTClass1FrameIdMin = _MicroWinExecInterface.RTClass1FrameIdMin
RTClass1FrameIdMax = _MicroWinExecInterface.RTClass1FrameIdMax
RTClass2FrameIdNone = _MicroWinExecInterface.RTClass2FrameIdNone
RTClass2FrameIdMin = _MicroWinExecInterface.RTClass2FrameIdMin
RTClass2FrameIdMax = _MicroWinExecInterface.RTClass2FrameIdMax
RTClass3FrameIdNone = _MicroWinExecInterface.RTClass3FrameIdNone
RTClass3FrameIdNonRedundantMin = _MicroWinExecInterface.RTClass3FrameIdNonRedundantMin
RTClass3FrameIdNonRedundantMax = _MicroWinExecInterface.RTClass3FrameIdNonRedundantMax
RTClass3FrameIdRedundantMin = _MicroWinExecInterface.RTClass3FrameIdRedundantMin
RTClass3FrameIdRedundantMax = _MicroWinExecInterface.RTClass3FrameIdRedundantMax
NotSynchronized = _MicroWinExecInterface.NotSynchronized
SyncMaster = _MicroWinExecInterface.SyncMaster
SyncSlave = _MicroWinExecInterface.SyncSlave
PrimarySyncMaster = _MicroWinExecInterface.PrimarySyncMaster
SecondarySyncMaster = _MicroWinExecInterface.SecondarySyncMaster
PnStartupModeNSU = _MicroWinExecInterface.PnStartupModeNSU
PnStartupModeASU = _MicroWinExecInterface.PnStartupModeASU
PnStartupModeFSU = _MicroWinExecInterface.PnStartupModeFSU
PnSuppControllerStartupModeNSU = _MicroWinExecInterface.PnSuppControllerStartupModeNSU
PnSuppControllerStartupModeASU = _MicroWinExecInterface.PnSuppControllerStartupModeASU
PnSuppControllerStartupModeASUANDFSU = _MicroWinExecInterface.PnSuppControllerStartupModeASUANDFSU
PnIrtArStartupModeNone = _MicroWinExecInterface.PnIrtArStartupModeNone
PnIrtArStartupModeAdvanced = _MicroWinExecInterface.PnIrtArStartupModeAdvanced
PnIrtArStartupModeLegacy = _MicroWinExecInterface.PnIrtArStartupModeLegacy
PnIrtForwardingModeNone = _MicroWinExecInterface.PnIrtForwardingModeNone
PnIrtForwardingModeAbsolute = _MicroWinExecInterface.PnIrtForwardingModeAbsolute
PnIrtForwardingModeRelative = _MicroWinExecInterface.PnIrtForwardingModeRelative
PnIoArStartupModeNone = _MicroWinExecInterface.PnIoArStartupModeNone
Advanced = _MicroWinExecInterface.Advanced
Legacy = _MicroWinExecInterface.Legacy
PLCROLENONE = _MicroWinExecInterface.PLCROLENONE
PLCROLEIOCONTROLLER = _MicroWinExecInterface.PLCROLEIOCONTROLLER
PLCROLEIDEVICE = _MicroWinExecInterface.PLCROLEIDEVICE
PLCROLEIOCONTRLANDIDEVICE = _MicroWinExecInterface.PLCROLEIOCONTRLANDIDEVICE
OperationNone = _MicroWinExecInterface.OperationNone
OperationIODevice = _MicroWinExecInterface.OperationIODevice
OperationIOController = _MicroWinExecInterface.OperationIOController
OperationMultiIODevice = _MicroWinExecInterface.OperationMultiIODevice
OperationSupervisor = _MicroWinExecInterface.OperationSupervisor
IpConfigDcpSupported = _MicroWinExecInterface.IpConfigDcpSupported
IpConfigDhcpSupported = _MicroWinExecInterface.IpConfigDhcpSupported
IpConfigLocalSupported = _MicroWinExecInterface.IpConfigLocalSupported
IpConfigUnknownSupported = _MicroWinExecInterface.IpConfigUnknownSupported
Automatic = _MicroWinExecInterface.Automatic
FixedTime = _MicroWinExecInterface.FixedTime
FixedReduction = _MicroWinExecInterface.FixedReduction
GSDClassNone = _MicroWinExecInterface.GSDClassNone
GSDClass1 = _MicroWinExecInterface.GSDClass1
GSDClass2 = _MicroWinExecInterface.GSDClass2
GSDClass3 = _MicroWinExecInterface.GSDClass3
ClassNone = _MicroWinExecInterface.ClassNone
Class1Frame = _MicroWinExecInterface.Class1Frame
Class2Frame = _MicroWinExecInterface.Class2Frame
Class3Frame = _MicroWinExecInterface.Class3Frame
UNKNOWN = _MicroWinExecInterface.UNKNOWN
BIT = _MicroWinExecInterface.BIT
BITAREA = _MicroWinExecInterface.BITAREA
INTEGER8 = _MicroWinExecInterface.INTEGER8
INTEGER16 = _MicroWinExecInterface.INTEGER16
INTEGER32 = _MicroWinExecInterface.INTEGER32
INTEGER64 = _MicroWinExecInterface.INTEGER64
UNSIGNED8 = _MicroWinExecInterface.UNSIGNED8
UNSIGNED16 = _MicroWinExecInterface.UNSIGNED16
UNSIGNED32 = _MicroWinExecInterface.UNSIGNED32
UNSIGNED64 = _MicroWinExecInterface.UNSIGNED64
N2 = _MicroWinExecInterface.N2
N4 = _MicroWinExecInterface.N4
R2 = _MicroWinExecInterface.R2
T2 = _MicroWinExecInterface.T2
T4 = _MicroWinExecInterface.T4
D2 = _MicroWinExecInterface.D2
E2 = _MicroWinExecInterface.E2
C4 = _MicroWinExecInterface.C4
X2 = _MicroWinExecInterface.X2
X4 = _MicroWinExecInterface.X4
UNIPOLAR2POINT16 = _MicroWinExecInterface.UNIPOLAR2POINT16
FIXPOINTSPLIT = _MicroWinExecInterface.FIXPOINTSPLIT
FLOAT32 = _MicroWinExecInterface.FLOAT32
FLOAT64 = _MicroWinExecInterface.FLOAT64
FLOATSPLIT = _MicroWinExecInterface.FLOATSPLIT
BASICNUMBERICSPLIT = _MicroWinExecInterface.BASICNUMBERICSPLIT
GSDBOOLEAN = _MicroWinExecInterface.GSDBOOLEAN
BOOLEANSPLIT = _MicroWinExecInterface.BOOLEANSPLIT
VISIBLESTRING = _MicroWinExecInterface.VISIBLESTRING
UNICODESTRING8 = _MicroWinExecInterface.UNICODESTRING8
STRING61131 = _MicroWinExecInterface.STRING61131
WSTRING61131 = _MicroWinExecInterface.WSTRING61131
BASICSTRINGSPLIT = _MicroWinExecInterface.BASICSTRINGSPLIT
OCTETSTRING = _MicroWinExecInterface.OCTETSTRING
OCTETSTRING_S = _MicroWinExecInterface.OCTETSTRING_S
GSDDATE = _MicroWinExecInterface.GSDDATE
UNSIGNED8UNSIGNED8 = _MicroWinExecInterface.UNSIGNED8UNSIGNED8
FLOAT32UNSIGNED8 = _MicroWinExecInterface.FLOAT32UNSIGNED8
GSDTIMESTAMP = _MicroWinExecInterface.GSDTIMESTAMP
TIMESTAMPDIFFERENCE = _MicroWinExecInterface.TIMESTAMPDIFFERENCE
TIMESTAMPDIFFERENCESHORT = _MicroWinExecInterface.TIMESTAMPDIFFERENCESHORT
OCTETSTRING2UNSIGNED8 = _MicroWinExecInterface.OCTETSTRING2UNSIGNED8
UNSIGNED16_S = _MicroWinExecInterface.UNSIGNED16_S
INTEGER16_S = _MicroWinExecInterface.INTEGER16_S
UNSIGNED8_S = _MicroWinExecInterface.UNSIGNED8_S
V2 = _MicroWinExecInterface.V2
L2 = _MicroWinExecInterface.L2
MWPnWizCtrlrDevTabInxDeviceId = _MicroWinExecInterface.MWPnWizCtrlrDevTabInxDeviceId
MWPnWizCtrlrDevTabInxType = _MicroWinExecInterface.MWPnWizCtrlrDevTabInxType
MWPnWizCtrlrDevTabInxName = _MicroWinExecInterface.MWPnWizCtrlrDevTabInxName
MWPnWizCtrlrDevTabInxIsIPFixed = _MicroWinExecInterface.MWPnWizCtrlrDevTabInxIsIPFixed
MWPnWizCtrlrDevTabInxIPAddr = _MicroWinExecInterface.MWPnWizCtrlrDevTabInxIPAddr
MWPnWizCtrlrDevTabInxComments = _MicroWinExecInterface.MWPnWizCtrlrDevTabInxComments
MWPnWizCtrlrDevTabInxNull = _MicroWinExecInterface.MWPnWizCtrlrDevTabInxNull
class PNMODULESUBMODULEDROPINFO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_SelectedRow = property(_MicroWinExecInterface.PNMODULESUBMODULEDROPINFO_m_SelectedRow_get, _MicroWinExecInterface.PNMODULESUBMODULEDROPINFO_m_SelectedRow_set)

    def __init__(self):
        _MicroWinExecInterface.PNMODULESUBMODULEDROPINFO_swiginit(self, _MicroWinExecInterface.new_PNMODULESUBMODULEDROPINFO())
    __swig_destroy__ = _MicroWinExecInterface.delete_PNMODULESUBMODULEDROPINFO

# Register PNMODULESUBMODULEDROPINFO in _MicroWinExecInterface:
_MicroWinExecInterface.PNMODULESUBMODULEDROPINFO_swigregister(PNMODULESUBMODULEDROPINFO)
GSD_UI = cvar.GSD_UI
GSD_CATEGORY_UI = cvar.GSD_CATEGORY_UI
GSD_SUB_CATEGORY1_UI = cvar.GSD_SUB_CATEGORY1_UI
GSD_STATION_NAME_DEFAULT = cvar.GSD_STATION_NAME_DEFAULT
GSD_EXPORT_VENDORID = cvar.GSD_EXPORT_VENDORID
GSD_EXPORT_DEVICEID = cvar.GSD_EXPORT_DEVICEID
GSD_EXPORT_GSDMLVER = cvar.GSD_EXPORT_GSDMLVER
GSD_TRUE = cvar.GSD_TRUE
GSD_ID = cvar.GSD_ID
GSD_DEVICE_IDENTITY = cvar.GSD_DEVICE_IDENTITY
GSD_DEVICE_FUNCTION = cvar.GSD_DEVICE_FUNCTION
GSD_MAU_TYPE_VALUE = cvar.GSD_MAU_TYPE_VALUE
GSD_MAU_TYPE_EXTENSION = cvar.GSD_MAU_TYPE_EXTENSION
GSD_MAU_TYPE_ADJUST_SUPPORTED = cvar.GSD_MAU_TYPE_ADJUST_SUPPORTED
GSD_MAU_TYPE_LIST_EXT_SUPPRTED = cvar.GSD_MAU_TYPE_LIST_EXT_SUPPRTED
GSD_MAU_TYPE_ITEM = cvar.GSD_MAU_TYPE_ITEM
GSD_SUB_MODULE_IDENT_NUMBER = cvar.GSD_SUB_MODULE_IDENT_NUMBER
GSD_MAU_TYPE = cvar.GSD_MAU_TYPE
GSD_MAU_TYPES = cvar.GSD_MAU_TYPES
GSD_FIBER_OPTIC_TYPES = cvar.GSD_FIBER_OPTIC_TYPES
GSD_MAX_PORT_TX_DELAY = cvar.GSD_MAX_PORT_TX_DELAY
GSD_MAX_PORT_RX_DELAY = cvar.GSD_MAX_PORT_RX_DELAY
GSD_PORT_DEACTIVE_SUPPORTED = cvar.GSD_PORT_DEACTIVE_SUPPORTED
GSD_LINK_STATE_DIAG_CAP = cvar.GSD_LINK_STATE_DIAG_CAP
GSD_POWER_BUDGET_CONTROL_SUPPORTED = cvar.GSD_POWER_BUDGET_CONTROL_SUPPORTED
GSD_SUPPORTS_RINGPORT_CONFIG = cvar.GSD_SUPPORTS_RINGPORT_CONFIG
GSD_IS_DEFAULT_RINGPORT = cvar.GSD_IS_DEFAULT_RINGPORT
GSD_PARAMETERIZE_DISALLOWED = cvar.GSD_PARAMETERIZE_DISALLOWED
GSD_WRITEABLE_IM_RECORDS = cvar.GSD_WRITEABLE_IM_RECORDS
GSD_IM5_SUPPORTED = cvar.GSD_IM5_SUPPORTED
GSD_CHECK_MAU_TYPE_SUPPORTED = cvar.GSD_CHECK_MAU_TYPE_SUPPORTED
GSD_CHECK_MAU_TYPE_DIFFERENCE_SUPPORTED = cvar.GSD_CHECK_MAU_TYPE_DIFFERENCE_SUPPORTED
GSD_SHORT_PREAMBLE_100MBIT_SUPPORTED = cvar.GSD_SHORT_PREAMBLE_100MBIT_SUPPORTED
GSD_MAU_TYPE_LIST = cvar.GSD_MAU_TYPE_LIST
GSD_SUB_SLOT_NUMBER = cvar.GSD_SUB_SLOT_NUMBER
GSD_REQUIRED_SCHEMA_VERSION = cvar.GSD_REQUIRED_SCHEMA_VERSION
GSD_TRANSMISSION_MONITOR = cvar.GSD_TRANSMISSION_MONITOR
GSD_TRANSMISSION_RATE_AUTONEGOTIATION = cvar.GSD_TRANSMISSION_RATE_AUTONEGOTIATION
GSD_DETECTION_OF_ACCESS_DEV = cvar.GSD_DETECTION_OF_ACCESS_DEV
GSD_TOP_DESCOVERY = cvar.GSD_TOP_DESCOVERY
GSD_NAME = cvar.GSD_NAME
GSD_INFOTEXT = cvar.GSD_INFOTEXT
GSD_FAMILY = cvar.GSD_FAMILY
GSD_VENDORNAME = cvar.GSD_VENDORNAME
GSD_ORDERNUMBER = cvar.GSD_ORDERNUMBER
GSD_HARDWARERELEASE = cvar.GSD_HARDWARERELEASE
GSD_SOFTWARERELEASE = cvar.GSD_SOFTWARERELEASE
GSD_CATEGORY_REF = cvar.GSD_CATEGORY_REF
GSD_SUB_CATEGORY1_REF = cvar.GSD_SUB_CATEGORY1_REF
GSD_TEXTID = cvar.GSD_TEXTID
GSD_MAINFAMILY = cvar.GSD_MAINFAMILY
GSD_PRODUCTFAMILY = cvar.GSD_PRODUCTFAMILY
GSD_VALUE = cvar.GSD_VALUE
GSD_MODULE_INFO = cvar.GSD_MODULE_INFO
GSD_BYTEOFFSET = cvar.GSD_BYTEOFFSET
GSD_Data = cvar.GSD_Data
GSD_VALUEITEMTARGET = cvar.GSD_VALUEITEMTARGET
GSD_BITOFFSET = cvar.GSD_BITOFFSET
GSD_DATATYPE = cvar.GSD_DATATYPE
GSD_LENGTH = cvar.GSD_LENGTH
GSD_BITLENGTH = cvar.GSD_BITLENGTH
GSD_DEFAULTVALUE = cvar.GSD_DEFAULTVALUE
GSD_ALLOWEDVALUES = cvar.GSD_ALLOWEDVALUES
GSD_CHANGEABLE = cvar.GSD_CHANGEABLE
GSD_VISIBLE = cvar.GSD_VISIBLE
GSD_VENDORID = cvar.GSD_VENDORID
GSD_DEVICEID = cvar.GSD_DEVICEID
GSD_GRAPHICS = cvar.GSD_GRAPHICS
GSD_GRAPHIC_ITEM_REF = cvar.GSD_GRAPHIC_ITEM_REF
GSD_GRAPHIC_ITEM_REF_TYPE = cvar.GSD_GRAPHIC_ITEM_REF_TYPE
GSD_GRAPHIC_ITEM_TARGET = cvar.GSD_GRAPHIC_ITEM_TARGET
GSD_INTERFACE_SUB_MODULE_ID = cvar.GSD_INTERFACE_SUB_MODULE_ID
GSD_INTERFACE_SUB_MODULE_TEXT_ID = cvar.GSD_INTERFACE_SUB_MODULE_TEXT_ID
GSD_SUPPORTED_RT_CLASS = cvar.GSD_SUPPORTED_RT_CLASS
GSD_SUPPORTED_RT_CLASSES = cvar.GSD_SUPPORTED_RT_CLASSES
GSD_IS_OCHRONE_MODE_SUPPORTED = cvar.GSD_IS_OCHRONE_MODE_SUPPORTED
GSD_IS_OCHRONE_MODE_IN_RT_CLASSES = cvar.GSD_IS_OCHRONE_MODE_IN_RT_CLASSES
GSD_SUPPORTED_PROTOCOLS = cvar.GSD_SUPPORTED_PROTOCOLS
GSD_NETWORK_COMPONENT_DIAG_SUPPORTED = cvar.GSD_NETWORK_COMPONENT_DIAG_SUPPORTED
GSD_DCP_HELLO_SUPPORTED = cvar.GSD_DCP_HELLO_SUPPORTED
GSD_PTP_BOUNDARY_SUPPORTED = cvar.GSD_PTP_BOUNDARY_SUPPORTED
GSD_DCP_BOUNDARY_SUPPORTED = cvar.GSD_DCP_BOUNDARY_SUPPORTED
GSD_MULTICAST_BOUNDARY_SUPPORTED = cvar.GSD_MULTICAST_BOUNDARY_SUPPORTED
GSD_PARAMETERIZATION_DISALLOWED = cvar.GSD_PARAMETERIZATION_DISALLOWED
GSD_DELAY_MEASUREMENT_SUPPORTED = cvar.GSD_DELAY_MEASUREMENT_SUPPORTED
GSD_MAX_FRAME_START_TIME = cvar.GSD_MAX_FRAME_START_TIME
GSD_MINNRT_GAP = cvar.GSD_MINNRT_GAP
GSD_PDEV_COMBINED_OBJECT_SUPPORTED = cvar.GSD_PDEV_COMBINED_OBJECT_SUPPORTED
GSD_USES_STATIC_ARP_CACHE_ENTRIES = cvar.GSD_USES_STATIC_ARP_CACHE_ENTRIES
GSD_DCP_FLASH_ONCE_SIGNAL_UNIT = cvar.GSD_DCP_FLASH_ONCE_SIGNAL_UNIT
GSD_GENERAL = cvar.GSD_GENERAL
GSD_STARTUP_MODE = cvar.GSD_STARTUP_MODE
GSD_FORWARDING_MODE = cvar.GSD_FORWARDING_MODE
GSD_MAX_BRIDGE_DELAY = cvar.GSD_MAX_BRIDGE_DELAY
GSD_MAX_BRIDGE_DELAY_FFW = cvar.GSD_MAX_BRIDGE_DELAY_FFW
GSD_MAXDFP_FEED = cvar.GSD_MAXDFP_FEED
GSD_MAXDFP_FRAMES = cvar.GSD_MAXDFP_FRAMES
GSD_ALIGNDFP_SUBFRAMES = cvar.GSD_ALIGNDFP_SUBFRAMES
GSD_DFP_OUTBOUND_TRUNCATION_SUPPORTED = cvar.GSD_DFP_OUTBOUND_TRUNCATION_SUPPORTED
GSD_DFP_REDUNDANT_PATH_LAYOUT_SUPPORTED = cvar.GSD_DFP_REDUNDANT_PATH_LAYOUT_SUPPORTED
GSD_MAX_NUMBER_IR_FRAME_DATA = cvar.GSD_MAX_NUMBER_IR_FRAME_DATA
GSD_MAX_RANGE_IR_FRAME_ID = cvar.GSD_MAX_RANGE_IR_FRAME_ID
GSD_FRAGMENTATION_TYPE = cvar.GSD_FRAGMENTATION_TYPE
GSD_MAX_RED_PERIOD_LENGTH = cvar.GSD_MAX_RED_PERIOD_LENGTH
GSD_MIN_FSO = cvar.GSD_MIN_FSO
GSD_MIN_RTC3_GAP = cvar.GSD_MIN_RTC3_GAP
GSD_MIN_YELLOW_TIME = cvar.GSD_MIN_YELLOW_TIME
GSD_YELLOW_SAFETY_MARGIN = cvar.GSD_YELLOW_SAFETY_MARGIN
GSD_MAX_RETENTION_TIME = cvar.GSD_MAX_RETENTION_TIME
GSD_RT_CLASS3_PROPERTIES = cvar.GSD_RT_CLASS3_PROPERTIES
GSD_SUPPORTED_ROLE = cvar.GSD_SUPPORTED_ROLE
GSD_MAX_LOCAL_JITTER = cvar.GSD_MAX_LOCAL_JITTER
GSD_T_PLL_MAX = cvar.GSD_T_PLL_MAX
GSD_PEER_TO_PEER_JITTER = cvar.GSD_PEER_TO_PEER_JITTER
GSD_SUPPORTED_SYNC_PROTOCOLS = cvar.GSD_SUPPORTED_SYNC_PROTOCOLS
GSD_SYNCHRONISATION_MODE = cvar.GSD_SYNCHRONISATION_MODE
GSD_TIME_SYNCHRONISATION = cvar.GSD_TIME_SYNCHRONISATION
GSD_REPORTING_SYSTEM = cvar.GSD_REPORTING_SYSTEM
GSD_APPLICATION_RELATIONS = cvar.GSD_APPLICATION_RELATIONS
GSD_NUMBER_OF_ADDITIONAL_INPUT_CR = cvar.GSD_NUMBER_OF_ADDITIONAL_INPUT_CR
GSD_NUMBER_OF_ADDITIONAL_OUTPUT_CR = cvar.GSD_NUMBER_OF_ADDITIONAL_OUTPUT_CR
GSD_NUMBER_OF_ADDITIONAL_MULTICASTPROVIDERCR = cvar.GSD_NUMBER_OF_ADDITIONAL_MULTICASTPROVIDERCR
GSD_NUMBER_OF_MULTICAST_CONSUMER_CR = cvar.GSD_NUMBER_OF_MULTICAST_CONSUMER_CR
GSD_PULL_MODULE_ALARM_SUPPORTED = cvar.GSD_PULL_MODULE_ALARM_SUPPORTED
GSD_NUMBER_OF_AR = cvar.GSD_NUMBER_OF_AR
GSD_TIMING_PROPERTIES = cvar.GSD_TIMING_PROPERTIES
GSD_SEND_CLOCK = cvar.GSD_SEND_CLOCK
GSD_REDUCTION_RATIO = cvar.GSD_REDUCTION_RATIO
GSD_REDUCTION_RATIO_POW2 = cvar.GSD_REDUCTION_RATIO_POW2
GSD_REDUCTION_RATIO_NONPOW2 = cvar.GSD_REDUCTION_RATIO_NONPOW2
GSD_PREFERRED_SEND_CLOCK = cvar.GSD_PREFERRED_SEND_CLOCK
GSD_RT_CLASS3_TIMING_PROPERTIES = cvar.GSD_RT_CLASS3_TIMING_PROPERTIES
GSD_MAX_REDUCTION_RATIO_ISOCHRONEMODE = cvar.GSD_MAX_REDUCTION_RATIO_ISOCHRONEMODE
GSD_MEDIA_REDUNDANCY = cvar.GSD_MEDIA_REDUNDANCY
GSD_SUPPORTED_MULTIPLE_ROLE = cvar.GSD_SUPPORTED_MULTIPLE_ROLE
GSD_MAX_MRP_INSTANCES = cvar.GSD_MAX_MRP_INSTANCES
GSD_MRPD_SUPPORTED = cvar.GSD_MRPD_SUPPORTED
GSD_MRT_SUPPORTED = cvar.GSD_MRT_SUPPORTED
GSD_ADDITIONAL_PROTOCOLS_SUPPORTED = cvar.GSD_ADDITIONAL_PROTOCOLS_SUPPORTED
GSD_ADDITIONAL_FORWARDING_RULES_SUPPORTED = cvar.GSD_ADDITIONAL_FORWARDING_RULES_SUPPORTED
GSD_API = cvar.GSD_API
GSD_PROFISAFE_SUPPORTED = cvar.GSD_PROFISAFE_SUPPORTED
GSD_MAX_IPARAMETERSIZE = cvar.GSD_MAX_IPARAMETERSIZE
GSD_SUB_SYS_MODULE_DIR_INDEX = cvar.GSD_SUB_SYS_MODULE_DIR_INDEX
GSD_SUPPORTED_SUBSTITUTION_MODES = cvar.GSD_SUPPORTED_SUBSTITUTION_MODES
GSD_MAY_ISSUE_PROCESS_ALARM = cvar.GSD_MAY_ISSUE_PROCESS_ALARM
GSD_FIXED_IN_SUBSLOTS = cvar.GSD_FIXED_IN_SUBSLOTS
GSD_ISOCHRONE_MODE = cvar.GSD_ISOCHRONE_MODE
GSD_T_DC_BASE = cvar.GSD_T_DC_BASE
GSD_T_DC_MIN = cvar.GSD_T_DC_MIN
GSD_T_DC_MAX = cvar.GSD_T_DC_MAX
GSD_T_IO_BASE = cvar.GSD_T_IO_BASE
GSD_T_IO_INPUTMIN = cvar.GSD_T_IO_INPUTMIN
GSD_T_IO_OUTPUTMIN = cvar.GSD_T_IO_OUTPUTMIN
GSD_ISOCHRONE_MODE_REQUIRED = cvar.GSD_ISOCHRONE_MODE_REQUIRED
GSD_SLOT_CLUSTER = cvar.GSD_SLOT_CLUSTER
GSD_COUNT = cvar.GSD_COUNT
GSD_FIELD_BUS_TYPE = cvar.GSD_FIELD_BUS_TYPE
GSD_PROFI_ENERGY = cvar.GSD_PROFI_ENERGY
GSD_PROFILE_VERSION = cvar.GSD_PROFILE_VERSION
GSD_ENTITY_CLASS = cvar.GSD_ENTITY_CLASS
GSD_ENTITY_SUB_CLASS = cvar.GSD_ENTITY_SUB_CLASS
GSD_DYNAMIC_TIMEANDENERGYVALUES = cvar.GSD_DYNAMIC_TIMEANDENERGYVALUES
GSD_PESAP_USES_PROFIENERGYASE = cvar.GSD_PESAP_USES_PROFIENERGYASE
GSD_ENERGY_SAVING_MODE_LIST = cvar.GSD_ENERGY_SAVING_MODE_LIST
GSD_MEASUREMENT_LIST = cvar.GSD_MEASUREMENT_LIST
GSD_ENERGY_SAVING_MODE_ITEM = cvar.GSD_ENERGY_SAVING_MODE_ITEM
GSD_TIME_TO_PAUSE = cvar.GSD_TIME_TO_PAUSE
GSD_RTTO = cvar.GSD_RTTO
GSD_TIME_MIN_LENGTH_OF_STAY = cvar.GSD_TIME_MIN_LENGTH_OF_STAY
GSD_POWER_CONSUMPTION = cvar.GSD_POWER_CONSUMPTION
GSD_ENERGY_CONSUMPTION_TO_DESTINATION = cvar.GSD_ENERGY_CONSUMPTION_TO_DESTINATION
GSD_ENERGY_CONSUMPTION_TO_OPERATION = cvar.GSD_ENERGY_CONSUMPTION_TO_OPERATION
GSD_MEASUREMENT_ITEM = cvar.GSD_MEASUREMENT_ITEM
GSD_NUMBER = cvar.GSD_NUMBER
GSD_MEASUREMENT_VALUE = cvar.GSD_MEASUREMENT_VALUE
GSD_ACCURACY_DOMAIN = cvar.GSD_ACCURACY_DOMAIN
GSD_ACCURACY_CLASS = cvar.GSD_ACCURACY_CLASS
GSD_REPORTING_SYSTEM_EVENTS = cvar.GSD_REPORTING_SYSTEM_EVENTS
GSD_OBSERVER = cvar.GSD_OBSERVER
GSD_TYPE = cvar.GSD_TYPE
GSD_MODULE_ITEM = cvar.GSD_MODULE_ITEM
GSD_MODULE_IDENT_NUMBER = cvar.GSD_MODULE_IDENT_NUMBER
GSD_PHYSICAL_SUBSLOTS = cvar.GSD_PHYSICAL_SUBSLOTS
GSD_FIELDBUS_TYPE = cvar.GSD_FIELDBUS_TYPE
GSD_VIRTUAL_SUBMODULE_LIST = cvar.GSD_VIRTUAL_SUBMODULE_LIST
GSD_VIRTUAL_SUBMODULE_ITEM = cvar.GSD_VIRTUAL_SUBMODULE_ITEM
GSD_SUBSLOT_LIST = cvar.GSD_SUBSLOT_LIST
GSD_SUBSLOT_ITEM = cvar.GSD_SUBSLOT_ITEM
GSD_SUBSLOT_NUMBER = cvar.GSD_SUBSLOT_NUMBER
GSD_SYSTEM_DEFINED_SUBMODULE_LIST = cvar.GSD_SYSTEM_DEFINED_SUBMODULE_LIST
GSD_PORT_SUBMODULE_ITEM = cvar.GSD_PORT_SUBMODULE_ITEM
GSD_INTERFACE_SUBMODULE_ITEM = cvar.GSD_INTERFACE_SUBMODULE_ITEM
GSD_SUBMODULE_ITEM = cvar.GSD_SUBMODULE_ITEM
GSD_USEABLE_SUBMODULES = cvar.GSD_USEABLE_SUBMODULES
GSD_SUBMODULE_ITEM_REF = cvar.GSD_SUBMODULE_ITEM_REF
GSD_SUBMODULE_ITEM_TARGET = cvar.GSD_SUBMODULE_ITEM_TARGET
GSD_ALLOWED_IN_SUBSLOTS = cvar.GSD_ALLOWED_IN_SUBSLOTS
GSD_USED_IN_SUBSLOTS = cvar.GSD_USED_IN_SUBSLOTS
GSD_PNIO_VERSION = cvar.GSD_PNIO_VERSION
GSD_PHYSICAL_SLOTS = cvar.GSD_PHYSICAL_SLOTS
GSD_MIN_DEVICE_INTERVAL = cvar.GSD_MIN_DEVICE_INTERVAL
GSD_IMPLEMENTATION_TYPE = cvar.GSD_IMPLEMENTATION_TYPE
GSD_DNS_COMPATIBLE_NAME = cvar.GSD_DNS_COMPATIBLE_NAME
GSD_ADDRESS_ASSIGNMENT = cvar.GSD_ADDRESS_ASSIGNMENT
GSD_ALLOWED_IN_SLOTS = cvar.GSD_ALLOWED_IN_SLOTS
GSD_FIXED_IN_SLOTS = cvar.GSD_FIXED_IN_SLOTS
GSD_OBJECT_UUID_LOCAL_INDEX = cvar.GSD_OBJECT_UUID_LOCAL_INDEX
GSD_MULTIPLE_WRITE_SUPPORTED = cvar.GSD_MULTIPLE_WRITE_SUPPORTED
GSD_IOXS_REQUIRED = cvar.GSD_IOXS_REQUIRED
GSD_REMOTE_APPLICATION_TIMEOUT = cvar.GSD_REMOTE_APPLICATION_TIMEOUT
GSD_MAX_SUPPORTED_RECORD_SIZE = cvar.GSD_MAX_SUPPORTED_RECORD_SIZE
GSD_POWER_ON_TO_COMM_READY = cvar.GSD_POWER_ON_TO_COMM_READY
GSD_NUMBEROFSUBMODULES = cvar.GSD_NUMBEROFSUBMODULES
GSD_PARAMETERIZATION_SPEEDUP_SUPPORTED = cvar.GSD_PARAMETERIZATION_SPEEDUP_SUPPORTED
GSD_NAME_OF_STATION_NOT_TRANSFERABLE = cvar.GSD_NAME_OF_STATION_NOT_TRANSFERABLE
GSD_SHARED_DEVICE_SUPPORTED = cvar.GSD_SHARED_DEVICE_SUPPORTED
GSD_SHARED_INPUT_SUPPORTED = cvar.GSD_SHARED_INPUT_SUPPORTED
GSD_DEVICE_ACCESS_SUPPORTED = cvar.GSD_DEVICE_ACCESS_SUPPORTED
GSD_NUMBER_OF_DEVICE_ACCESS_AR = cvar.GSD_NUMBER_OF_DEVICE_ACCESS_AR
GSD_WEB_SERVER = cvar.GSD_WEB_SERVER
GSD_AUTO_CONFIGURATION_SUPPORTED = cvar.GSD_AUTO_CONFIGURATION_SUPPORTED
GSD_CIR_SUPPORTED = cvar.GSD_CIR_SUPPORTED
GSD_PRMBEGINPRMEND_SEQUENCESUPPORTED = cvar.GSD_PRMBEGINPRMEND_SEQUENCESUPPORTED
GSD_LLDP_NOD_SUPPORTED = cvar.GSD_LLDP_NOD_SUPPORTED
GSD_RESET_TO_FACTORY_MODES = cvar.GSD_RESET_TO_FACTORY_MODES
GSD_IO_SUPERVISOR_SUPPORTED = cvar.GSD_IO_SUPERVISOR_SUPPORTED
GSD_CHECK_DEVICE_ID_ALLOWED = cvar.GSD_CHECK_DEVICE_ID_ALLOWED
GSD_PROFI_ENERGY_ASE_SUPPORTED = cvar.GSD_PROFI_ENERGY_ASE_SUPPORTED
GSD_ADAPTS_REAL_IDENTIFICATION = cvar.GSD_ADAPTS_REAL_IDENTIFICATION
GSD_CERTIFICATION_INFO = cvar.GSD_CERTIFICATION_INFO
GSD_CONFORMANCE_CLASS = cvar.GSD_CONFORMANCE_CLASS
GSD_APPLICATION_CLASS = cvar.GSD_APPLICATION_CLASS
GSD_NETLOAD_CLASS = cvar.GSD_NETLOAD_CLASS
GSD_IO_CONFIG_DATA = cvar.GSD_IO_CONFIG_DATA
GSD_MAX_INPUT_LENGTH = cvar.GSD_MAX_INPUT_LENGTH
GSD_MAX_OUTPUT_LENGTH = cvar.GSD_MAX_OUTPUT_LENGTH
GSD_MAX_DATA_LENGTH = cvar.GSD_MAX_DATA_LENGTH
GSD_MAX_APPLICATION_INPUT_LENGTH = cvar.GSD_MAX_APPLICATION_INPUT_LENGTH
GSD_MAX_APPLICATION_OUTPUT_LENGTH = cvar.GSD_MAX_APPLICATION_OUTPUT_LENGTH
GSD_MAX_APPLICATION_DATA_LENGTH = cvar.GSD_MAX_APPLICATION_DATA_LENGTH
DefaultPnIoMaxDeviceNettoDataNotDefined = cvar.DefaultPnIoMaxDeviceNettoDataNotDefined
GSD_USEABLE_MODULES = cvar.GSD_USEABLE_MODULES
GSD_MODULE_ITEM_REF = cvar.GSD_MODULE_ITEM_REF
GSD_MODULE_ITEM_TARGET = cvar.GSD_MODULE_ITEM_TARGET
GSD_USED_IN_SLOTS = cvar.GSD_USED_IN_SLOTS
GSD_AR_VENDOR_BLOCK = cvar.GSD_AR_VENDOR_BLOCK
GSD_REQUEST = cvar.GSD_REQUEST
GSD_AP_STRUCTURE_IDENTIFIER = cvar.GSD_AP_STRUCTURE_IDENTIFIER
GSD_ASSET_MANAGEMENT = cvar.GSD_ASSET_MANAGEMENT
GSD_AR_BLOCK_VERSION = cvar.GSD_AR_BLOCK_VERSION
GSD_IOCR_BLOCK_VERSION = cvar.GSD_IOCR_BLOCK_VERSION
GSD_ALARM_CR_BLOCK_VERSION = cvar.GSD_ALARM_CR_BLOCK_VERSION
GSD_SUBMODULE_DATA_BLOCK_VERSION = cvar.GSD_SUBMODULE_DATA_BLOCK_VERSION
GSD_SYSTEM_REDUNDANCY = cvar.GSD_SYSTEM_REDUNDANCY
GSD_DEVICE_TYPE = cvar.GSD_DEVICE_TYPE
GSD_MAX_SWITCH_OVER_TIME = cvar.GSD_MAX_SWITCH_OVER_TIME
GSD_PRIMARYAR_ONBOTHNAPSSUPPORTED = cvar.GSD_PRIMARYAR_ONBOTHNAPSSUPPORTED
GSD_RT_INPUTONBACKUPAR_SUPPORTED = cvar.GSD_RT_INPUTONBACKUPAR_SUPPORTED
GSD_NUMBER_OF_AR_SETS = cvar.GSD_NUMBER_OF_AR_SETS
GSD_MINRDHT = cvar.GSD_MINRDHT
GSD_DATA_INVALID_ONBACKUPAR_SUPPORTED = cvar.GSD_DATA_INVALID_ONBACKUPAR_SUPPORTED
GSD_S2MAX_INPUT_ONBACKUP_DELAY = cvar.GSD_S2MAX_INPUT_ONBACKUP_DELAY
GSD_R2MAX_INPUT_ONBACKUP_DELAY = cvar.GSD_R2MAX_INPUT_ONBACKUP_DELAY
GSD_SLOT_LIST = cvar.GSD_SLOT_LIST
GSD_SLOT_ITEM = cvar.GSD_SLOT_ITEM
GSD_SLOT_NUMBER = cvar.GSD_SLOT_NUMBER
GSD_SLOT_GROUPS = cvar.GSD_SLOT_GROUPS
GSD_SLOT_GROUP = cvar.GSD_SLOT_GROUP
GSD_FIELDBUS_INTEGRATION_SLOTS = cvar.GSD_FIELDBUS_INTEGRATION_SLOTS
GSD_MAX_SUPPORTED = cvar.GSD_MAX_SUPPORTED
GSD_RANGE = cvar.GSD_RANGE
DEVICE_ADDRESS_RANGE = cvar.DEVICE_ADDRESS_RANGE
IDEVICE_MAPPING_START_ADDRESS = cvar.IDEVICE_MAPPING_START_ADDRESS
GSD_DATA = cvar.GSD_DATA
GSD_INDEX = cvar.GSD_INDEX
GSD_TRANSFERSEQUENCE = cvar.GSD_TRANSFERSEQUENCE
GSD_CHANGEABLEWITHBUMP = cvar.GSD_CHANGEABLEWITHBUMP
GSD_APSTRUCTUREIDENTIFIER = cvar.GSD_APSTRUCTUREIDENTIFIER
GSD_REF = cvar.GSD_REF
GSD_CONST = cvar.GSD_CONST
GSD_MENULIST = cvar.GSD_MENULIST
GSD_RECORDDATALIST = cvar.GSD_RECORDDATALIST
GSD_PARAMETERRECORDDATAITEM = cvar.GSD_PARAMETERRECORDDATAITEM
GSD_CONSISTENCY = cvar.GSD_CONSISTENCY
GSD_ITEMCONSISTENCY = cvar.GSD_ITEMCONSISTENCY
GSD_ALLITEMSCONSISTENCY = cvar.GSD_ALLITEMSCONSISTENCY
GSD_USEASBITS = cvar.GSD_USEASBITS
GSD_SUBORDINATE = cvar.GSD_SUBORDINATE
GSD_BITDATAITEM = cvar.GSD_BITDATAITEM
GSD_QUALITY = cvar.GSD_QUALITY
GSD_QUALIFIER = cvar.GSD_QUALIFIER
GSD_EMBEDDEDSTATUS = cvar.GSD_EMBEDDEDSTATUS
GSD_STATUS = cvar.GSD_STATUS
GSD_OPPOSITEDIRECTION = cvar.GSD_OPPOSITEDIRECTION
GSD_DATAITEM = cvar.GSD_DATAITEM
GSD_CHANNEL = cvar.GSD_CHANNEL
GSD_PARAMETERTARGET = cvar.GSD_PARAMETERTARGET
GSD_MENUREF = cvar.GSD_MENUREF
GSD_PARAMETERREF = cvar.GSD_PARAMETERREF
GSD_MENUITEM = cvar.GSD_MENUITEM
GSD_MENUTARGET = cvar.GSD_MENUTARGET
GSD_HELP = cvar.GSD_HELP
GSD_ASSIGNMENTS = cvar.GSD_ASSIGNMENTS
GSD_CONTENT = cvar.GSD_CONTENT
GSD_ASSIGN = cvar.GSD_ASSIGN
GSD_VALUEITEM = cvar.GSD_VALUEITEM
GSD_FORMAT = cvar.GSD_FORMAT
GSD_IOCS_LENGTH = cvar.GSD_IOCS_LENGTH
GSD_IOPS_LENGTH = cvar.GSD_IOPS_LENGTH
GSD_F_IO_STRUCTUREDESCVERSION = cvar.GSD_F_IO_STRUCTUREDESCVERSION
GSD_F_IO_STRUCTUREDESCCRC = cvar.GSD_F_IO_STRUCTUREDESCCRC
GSD_INPUT = cvar.GSD_INPUT
GSD_OUTPUT = cvar.GSD_OUTPUT
GSD_IODATA = cvar.GSD_IODATA
GSD_DCPASSIGNMENT = cvar.GSD_DCPASSIGNMENT
GSD_DHCPASSIGNMENT = cvar.GSD_DHCPASSIGNMENT
GSD_LOCALASSIGNMENT = cvar.GSD_LOCALASSIGNMENT
GSD_STARTUP_ADVANCED = cvar.GSD_STARTUP_ADVANCED
GSD_STARTUP_LEGACY = cvar.GSD_STARTUP_LEGACY
GSD_SUPPORTEDPROTOCOLS_LLDP = cvar.GSD_SUPPORTEDPROTOCOLS_LLDP
MaxIODataLengthDeviceindependent = cvar.MaxIODataLengthDeviceindependent
DefaultPnIoMaxDeviceInputDataLength = cvar.DefaultPnIoMaxDeviceInputDataLength
DefaultPnIoMaxDeviceOutputDataLength = cvar.DefaultPnIoMaxDeviceOutputDataLength
CPU_TYPE_ST20 = cvar.CPU_TYPE_ST20
CPU_TYPE_SR20 = cvar.CPU_TYPE_SR20
CPU_TYPE_ST30 = cvar.CPU_TYPE_ST30
CPU_TYPE_SR30 = cvar.CPU_TYPE_SR30
CPU_TYPE_ST40 = cvar.CPU_TYPE_ST40
CPU_TYPE_SR40 = cvar.CPU_TYPE_SR40
CPU_TYPE_ST60 = cvar.CPU_TYPE_ST60
CPU_TYPE_SR60 = cvar.CPU_TYPE_SR60

IONOTHING = _MicroWinExecInterface.IONOTHING
IOBOTH = _MicroWinExecInterface.IOBOTH
IOINPUT = _MicroWinExecInterface.IOINPUT
IOOUTPUT = _MicroWinExecInterface.IOOUTPUT
class PNPARTNERPORT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_DeviceName = property(_MicroWinExecInterface.PNPARTNERPORT_m_DeviceName_get, _MicroWinExecInterface.PNPARTNERPORT_m_DeviceName_set)
    m_PortNumber = property(_MicroWinExecInterface.PNPARTNERPORT_m_PortNumber_get, _MicroWinExecInterface.PNPARTNERPORT_m_PortNumber_set)

    def Store(self, rDest):
        return _MicroWinExecInterface.PNPARTNERPORT_Store(self, rDest)

    def Retrieve(self, rSrc):
        return _MicroWinExecInterface.PNPARTNERPORT_Retrieve(self, rSrc)

    def __init__(self):
        _MicroWinExecInterface.PNPARTNERPORT_swiginit(self, _MicroWinExecInterface.new_PNPARTNERPORT())
    __swig_destroy__ = _MicroWinExecInterface.delete_PNPARTNERPORT

# Register PNPARTNERPORT in _MicroWinExecInterface:
_MicroWinExecInterface.PNPARTNERPORT_swigregister(PNPARTNERPORT)

cBLOCKCOMPASS_NAMELEN = _MicroWinExecInterface.cBLOCKCOMPASS_NAMELEN
eGPB_RECIPE_DATALOG_MAX = _MicroWinExecInterface.eGPB_RECIPE_DATALOG_MAX
eGPB_RECIPE_DATALOG_NAME_MAX = _MicroWinExecInterface.eGPB_RECIPE_DATALOG_NAME_MAX
eGPB_RECIPE_USER_FILE_NAME_MAX = _MicroWinExecInterface.eGPB_RECIPE_USER_FILE_NAME_MAX
cBLOCKCOMPASS_SALT_SIZE = _MicroWinExecInterface.cBLOCKCOMPASS_SALT_SIZE
cBLOCKCOMPASS_HASH_SIZE = _MicroWinExecInterface.cBLOCKCOMPASS_HASH_SIZE
cBLOCKCOMPASS_SHA512_HASH_SIZE = _MicroWinExecInterface.cBLOCKCOMPASS_SHA512_HASH_SIZE
cBLOCKCOMPASS_SHA512_BIT_HASH_SIZE = _MicroWinExecInterface.cBLOCKCOMPASS_SHA512_BIT_HASH_SIZE
cBLOCKCOMPASS_OB_AREA_3_VER = _MicroWinExecInterface.cBLOCKCOMPASS_OB_AREA_3_VER
eBLOCKCOMPASS_DB_EXT_BLOCK_RECIPE0 = _MicroWinExecInterface.eBLOCKCOMPASS_DB_EXT_BLOCK_RECIPE0
eBLOCKCOMPASS_DB_EXT_BLOCK_RECIPE1 = _MicroWinExecInterface.eBLOCKCOMPASS_DB_EXT_BLOCK_RECIPE1
eBLOCKCOMPASS_DB_EXT_BLOCK_RECIPE2 = _MicroWinExecInterface.eBLOCKCOMPASS_DB_EXT_BLOCK_RECIPE2
eBLOCKCOMPASS_DB_EXT_BLOCK_RECIPE3 = _MicroWinExecInterface.eBLOCKCOMPASS_DB_EXT_BLOCK_RECIPE3
eBLOCKCOMPASS_DB_EXT_BLOCK_DATA_LOG0 = _MicroWinExecInterface.eBLOCKCOMPASS_DB_EXT_BLOCK_DATA_LOG0
eBLOCKCOMPASS_DB_EXT_BLOCK_DATA_LOG1 = _MicroWinExecInterface.eBLOCKCOMPASS_DB_EXT_BLOCK_DATA_LOG1
eBLOCKCOMPASS_DB_EXT_BLOCK_DATA_LOG2 = _MicroWinExecInterface.eBLOCKCOMPASS_DB_EXT_BLOCK_DATA_LOG2
eBLOCKCOMPASS_DB_EXT_BLOCK_DATA_LOG3 = _MicroWinExecInterface.eBLOCKCOMPASS_DB_EXT_BLOCK_DATA_LOG3
eBLOCKCOMPASS_DB_EXT_BLOCK_GPB = _MicroWinExecInterface.eBLOCKCOMPASS_DB_EXT_BLOCK_GPB
eBLOCKCOMPASS_UNKNOWN_BLOCK_ID_NO_TAB_INFO = _MicroWinExecInterface.eBLOCKCOMPASS_UNKNOWN_BLOCK_ID_NO_TAB_INFO
eBLOCKCOMPASS_UNKNOWN_BLOCK_ID_NO_ENTRY = _MicroWinExecInterface.eBLOCKCOMPASS_UNKNOWN_BLOCK_ID_NO_ENTRY
eBLOCKCOMPASS_PARAM_WIZ = _MicroWinExecInterface.eBLOCKCOMPASS_PARAM_WIZ
eBLOCKCOMPASS_PARAM_LIB_SYM_OFFSET = _MicroWinExecInterface.eBLOCKCOMPASS_PARAM_LIB_SYM_OFFSET
eBLOCKCOMPASS_PARAM_LIB = _MicroWinExecInterface.eBLOCKCOMPASS_PARAM_LIB
eBLOCKCOMPASS_PARAM_OB1_SIG_ATTR = _MicroWinExecInterface.eBLOCKCOMPASS_PARAM_OB1_SIG_ATTR
eBLOCKCOMPASS_PARAM_SBR_SIG_ATTR = _MicroWinExecInterface.eBLOCKCOMPASS_PARAM_SBR_SIG_ATTR
eBLOCKCOMPASS_PARAM_INT_SIG_ATTR = _MicroWinExecInterface.eBLOCKCOMPASS_PARAM_INT_SIG_ATTR
eBLOCKCOMPASS_PARAM_UNKNOWN = _MicroWinExecInterface.eBLOCKCOMPASS_PARAM_UNKNOWN
eBLOCKCOMPASS_PARAM_SECURITY = _MicroWinExecInterface.eBLOCKCOMPASS_PARAM_SECURITY
eBLOCKCOMPASS_PARAM_SHA512_SECURITY = _MicroWinExecInterface.eBLOCKCOMPASS_PARAM_SHA512_SECURITY
eBLOCKCOMPASS_SECTION_HEADER = _MicroWinExecInterface.eBLOCKCOMPASS_SECTION_HEADER
eBLOCKCOMPASS_SECTION_AREA1 = _MicroWinExecInterface.eBLOCKCOMPASS_SECTION_AREA1
eBLOCKCOMPASS_SECTION_AREA3 = _MicroWinExecInterface.eBLOCKCOMPASS_SECTION_AREA3
eBLOCKCOMPASS_OB_VERSION_1ST_GEN = _MicroWinExecInterface.eBLOCKCOMPASS_OB_VERSION_1ST_GEN
eBLOCKCOMPASS_OB_VERSION_2ND_GEN_0 = _MicroWinExecInterface.eBLOCKCOMPASS_OB_VERSION_2ND_GEN_0
eBLOCKCOMPASS_OB_VERSION_2ND_GEN_1 = _MicroWinExecInterface.eBLOCKCOMPASS_OB_VERSION_2ND_GEN_1
eBLOCKCOMPASS_OB_VERSION_I_CRASH_312 = _MicroWinExecInterface.eBLOCKCOMPASS_OB_VERSION_I_CRASH_312
eBLOCKCOMPASS_OB_VERSION_2ND_GEN_2 = _MicroWinExecInterface.eBLOCKCOMPASS_OB_VERSION_2ND_GEN_2
eBLOCKCOMPASS_OB_VERSION_2ND_GEN_3 = _MicroWinExecInterface.eBLOCKCOMPASS_OB_VERSION_2ND_GEN_3
eBLOCKCOMPASS_OB_VERSION_2ND_GEN_4 = _MicroWinExecInterface.eBLOCKCOMPASS_OB_VERSION_2ND_GEN_4
eBLOCKCOMPASS_OB_VERSION_2ND_GEN_5 = _MicroWinExecInterface.eBLOCKCOMPASS_OB_VERSION_2ND_GEN_5
eBLOCKCOMPASS_OB_VERSION_2ND_GEN_6 = _MicroWinExecInterface.eBLOCKCOMPASS_OB_VERSION_2ND_GEN_6
eBLOCKCOMPASS_OB_VERSION_2ND_GEN_7 = _MicroWinExecInterface.eBLOCKCOMPASS_OB_VERSION_2ND_GEN_7
eBLOCKCOMPASS_OB_VERSION_2ND_GEN_8 = _MicroWinExecInterface.eBLOCKCOMPASS_OB_VERSION_2ND_GEN_8
eBLOCKCOMPASS_OB_VERSION_2ND_GEN_9 = _MicroWinExecInterface.eBLOCKCOMPASS_OB_VERSION_2ND_GEN_9
eBLOCKCOMPASS_OB_VERSION_LATEST = _MicroWinExecInterface.eBLOCKCOMPASS_OB_VERSION_LATEST
eBLOCKCOMPASS_SDB_VERSION_0 = _MicroWinExecInterface.eBLOCKCOMPASS_SDB_VERSION_0
eBLOCKCOMPASS_SDB_VERSION_1 = _MicroWinExecInterface.eBLOCKCOMPASS_SDB_VERSION_1
eBLOCKCOMPASS_SDB_VERSION_LATEST = _MicroWinExecInterface.eBLOCKCOMPASS_SDB_VERSION_LATEST
eBLOCKCOMPASS_DB_VERSION_WIZ_0 = _MicroWinExecInterface.eBLOCKCOMPASS_DB_VERSION_WIZ_0
eBLOCKCOMPASS_DB_VERSION_0 = _MicroWinExecInterface.eBLOCKCOMPASS_DB_VERSION_0
eBLOCKCOMPASS_DB_VERSION_1 = _MicroWinExecInterface.eBLOCKCOMPASS_DB_VERSION_1
eBLOCKCOMPASS_DB_VERSION_2 = _MicroWinExecInterface.eBLOCKCOMPASS_DB_VERSION_2
eBLOCKCOMPASS_DB_VERSION_LATEST = _MicroWinExecInterface.eBLOCKCOMPASS_DB_VERSION_LATEST
eBLOCKCOMPASS_SPECIAL_INST_TYPE_NONE = _MicroWinExecInterface.eBLOCKCOMPASS_SPECIAL_INST_TYPE_NONE
eBLOCKCOMPASS_SPECIAL_INST_TYPE_INFO = _MicroWinExecInterface.eBLOCKCOMPASS_SPECIAL_INST_TYPE_INFO
eBLOCKCOMPASS_SPECIAL_INST_TYPE_HIDE = _MicroWinExecInterface.eBLOCKCOMPASS_SPECIAL_INST_TYPE_HIDE
eBLOCKCOMPASS_SPECIAL_INST_TYPE_MEND = _MicroWinExecInterface.eBLOCKCOMPASS_SPECIAL_INST_TYPE_MEND
eBLOCKCOMPASS_SPECIAL_INST_TYPE_SBR = _MicroWinExecInterface.eBLOCKCOMPASS_SPECIAL_INST_TYPE_SBR
eBLOCKCOMPASS_SPECIAL_INST_TYPE_RET = _MicroWinExecInterface.eBLOCKCOMPASS_SPECIAL_INST_TYPE_RET
eBLOCKCOMPASS_SPECIAL_INST_TYPE_INT = _MicroWinExecInterface.eBLOCKCOMPASS_SPECIAL_INST_TYPE_INT
eBLOCKCOMPASS_SPECIAL_INST_TYPE_RETI = _MicroWinExecInterface.eBLOCKCOMPASS_SPECIAL_INST_TYPE_RETI
eBLOCKCOMPASS_BAUD_RATE_9600 = _MicroWinExecInterface.eBLOCKCOMPASS_BAUD_RATE_9600
eBLOCKCOMPASS_BAUD_RATE_19200 = _MicroWinExecInterface.eBLOCKCOMPASS_BAUD_RATE_19200
eBLOCKCOMPASS_BAUD_RATE_187K = _MicroWinExecInterface.eBLOCKCOMPASS_BAUD_RATE_187K
eBLOCKCOMPASS_BAUD_RATE_38400 = _MicroWinExecInterface.eBLOCKCOMPASS_BAUD_RATE_38400
eBLOCKCOMPASS_BAUD_RATE_57600 = _MicroWinExecInterface.eBLOCKCOMPASS_BAUD_RATE_57600
eBLOCKCOMPASS_BAUD_RATE_115K = _MicroWinExecInterface.eBLOCKCOMPASS_BAUD_RATE_115K
eBLOCKCOMPASS_OPERAND_SIZE_BIT = _MicroWinExecInterface.eBLOCKCOMPASS_OPERAND_SIZE_BIT
eBLOCKCOMPASS_OPERAND_SIZE_BYTE = _MicroWinExecInterface.eBLOCKCOMPASS_OPERAND_SIZE_BYTE
eBLOCKCOMPASS_OPERAND_SIZE_WORD = _MicroWinExecInterface.eBLOCKCOMPASS_OPERAND_SIZE_WORD
eBLOCKCOMPASS_OPERAND_SIZE_DWORD = _MicroWinExecInterface.eBLOCKCOMPASS_OPERAND_SIZE_DWORD
eBLOCKCOMPASS_OPERAND_SIZE_STRING = _MicroWinExecInterface.eBLOCKCOMPASS_OPERAND_SIZE_STRING
eBLOCKCOMPASS_OPERAND_SIZE_UNUSED = _MicroWinExecInterface.eBLOCKCOMPASS_OPERAND_SIZE_UNUSED
eBLOCKCOMPASS_OPERAND_SIZE_UNDEFINED = _MicroWinExecInterface.eBLOCKCOMPASS_OPERAND_SIZE_UNDEFINED
eBLOCKCOMPASS_ADDRESSING_MODE_DIRECT_ADDRESS = _MicroWinExecInterface.eBLOCKCOMPASS_ADDRESSING_MODE_DIRECT_ADDRESS
eBLOCKCOMPASS_ADDRESSING_MODE_ADDRESS_OF = _MicroWinExecInterface.eBLOCKCOMPASS_ADDRESSING_MODE_ADDRESS_OF
eBLOCKCOMPASS_ADDRESSING_MODE_INDIRECT_ADDRESS = _MicroWinExecInterface.eBLOCKCOMPASS_ADDRESSING_MODE_INDIRECT_ADDRESS
eBLOCKCOMPASS_ADDRESSING_MODE_INVALID_MODE = _MicroWinExecInterface.eBLOCKCOMPASS_ADDRESSING_MODE_INVALID_MODE
eBLOCKCOMPASS_LITERAL_TYPE_BOOL = _MicroWinExecInterface.eBLOCKCOMPASS_LITERAL_TYPE_BOOL
eBLOCKCOMPASS_LITERAL_TYPE_UNSIGNED = _MicroWinExecInterface.eBLOCKCOMPASS_LITERAL_TYPE_UNSIGNED
eBLOCKCOMPASS_LITERAL_TYPE_SIGNED = _MicroWinExecInterface.eBLOCKCOMPASS_LITERAL_TYPE_SIGNED
eBLOCKCOMPASS_LITERAL_TYPE_TIME = _MicroWinExecInterface.eBLOCKCOMPASS_LITERAL_TYPE_TIME
eBLOCKCOMPASS_LITERAL_TYPE_HEXADECIMAL = _MicroWinExecInterface.eBLOCKCOMPASS_LITERAL_TYPE_HEXADECIMAL
eBLOCKCOMPASS_LITERAL_TYPE_BINARY = _MicroWinExecInterface.eBLOCKCOMPASS_LITERAL_TYPE_BINARY
eBLOCKCOMPASS_LITERAL_TYPE_ASCII = _MicroWinExecInterface.eBLOCKCOMPASS_LITERAL_TYPE_ASCII
eBLOCKCOMPASS_LITERAL_TYPE_REAL = _MicroWinExecInterface.eBLOCKCOMPASS_LITERAL_TYPE_REAL
eBLOCKCOMPASS_LITERAL_TYPE_STRING = _MicroWinExecInterface.eBLOCKCOMPASS_LITERAL_TYPE_STRING
eBLOCKCOMPASS_DB_TAB_ATTR_HIDDEN = _MicroWinExecInterface.eBLOCKCOMPASS_DB_TAB_ATTR_HIDDEN
eBLOCKCOMPASS_DB_TAB_ATTR_READ_ONLY = _MicroWinExecInterface.eBLOCKCOMPASS_DB_TAB_ATTR_READ_ONLY
eBLOCKCOMPASS_DB_TAB_ATTR_DB_WIZ = _MicroWinExecInterface.eBLOCKCOMPASS_DB_TAB_ATTR_DB_WIZ
eBLOCKCOMPASS_DB_TAB_ATTR_DB_LIB = _MicroWinExecInterface.eBLOCKCOMPASS_DB_TAB_ATTR_DB_LIB
class _eBLOCKCOMPASS_DB_TAB_ATTRS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bHidden = property(_MicroWinExecInterface._eBLOCKCOMPASS_DB_TAB_ATTRS_bHidden_get, _MicroWinExecInterface._eBLOCKCOMPASS_DB_TAB_ATTRS_bHidden_set)
    bReadOnly = property(_MicroWinExecInterface._eBLOCKCOMPASS_DB_TAB_ATTRS_bReadOnly_get, _MicroWinExecInterface._eBLOCKCOMPASS_DB_TAB_ATTRS_bReadOnly_set)
    bWizardCreated = property(_MicroWinExecInterface._eBLOCKCOMPASS_DB_TAB_ATTRS_bWizardCreated_get, _MicroWinExecInterface._eBLOCKCOMPASS_DB_TAB_ATTRS_bWizardCreated_set)
    bLibCreated = property(_MicroWinExecInterface._eBLOCKCOMPASS_DB_TAB_ATTRS_bLibCreated_get, _MicroWinExecInterface._eBLOCKCOMPASS_DB_TAB_ATTRS_bLibCreated_set)
    unused = property(_MicroWinExecInterface._eBLOCKCOMPASS_DB_TAB_ATTRS_unused_get, _MicroWinExecInterface._eBLOCKCOMPASS_DB_TAB_ATTRS_unused_set)

    def __init__(self):
        _MicroWinExecInterface._eBLOCKCOMPASS_DB_TAB_ATTRS_swiginit(self, _MicroWinExecInterface.new__eBLOCKCOMPASS_DB_TAB_ATTRS())
    __swig_destroy__ = _MicroWinExecInterface.delete__eBLOCKCOMPASS_DB_TAB_ATTRS

# Register _eBLOCKCOMPASS_DB_TAB_ATTRS in _MicroWinExecInterface:
_MicroWinExecInterface._eBLOCKCOMPASS_DB_TAB_ATTRS_swigregister(_eBLOCKCOMPASS_DB_TAB_ATTRS)

eBLOCKCOMPASS_IMPLICIT = _MicroWinExecInterface.eBLOCKCOMPASS_IMPLICIT
eBLOCKCOMPASS_POU_WIZ = _MicroWinExecInterface.eBLOCKCOMPASS_POU_WIZ
eBLOCKCOMPASS_POU_LIB = _MicroWinExecInterface.eBLOCKCOMPASS_POU_LIB
class _eBLOCKCOMPASS_POU_ATTRS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bImplicit = property(_MicroWinExecInterface._eBLOCKCOMPASS_POU_ATTRS_bImplicit_get, _MicroWinExecInterface._eBLOCKCOMPASS_POU_ATTRS_bImplicit_set)
    bWizardCreated = property(_MicroWinExecInterface._eBLOCKCOMPASS_POU_ATTRS_bWizardCreated_get, _MicroWinExecInterface._eBLOCKCOMPASS_POU_ATTRS_bWizardCreated_set)
    bLibCreated = property(_MicroWinExecInterface._eBLOCKCOMPASS_POU_ATTRS_bLibCreated_get, _MicroWinExecInterface._eBLOCKCOMPASS_POU_ATTRS_bLibCreated_set)
    unused = property(_MicroWinExecInterface._eBLOCKCOMPASS_POU_ATTRS_unused_get, _MicroWinExecInterface._eBLOCKCOMPASS_POU_ATTRS_unused_set)

    def __init__(self):
        _MicroWinExecInterface._eBLOCKCOMPASS_POU_ATTRS_swiginit(self, _MicroWinExecInterface.new__eBLOCKCOMPASS_POU_ATTRS())
    __swig_destroy__ = _MicroWinExecInterface.delete__eBLOCKCOMPASS_POU_ATTRS

# Register _eBLOCKCOMPASS_POU_ATTRS in _MicroWinExecInterface:
_MicroWinExecInterface._eBLOCKCOMPASS_POU_ATTRS_swigregister(_eBLOCKCOMPASS_POU_ATTRS)

class _eBLOCKCOMPASS_MEMORY_AREA_MASK(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    discreteInputMask = property(_MicroWinExecInterface._eBLOCKCOMPASS_MEMORY_AREA_MASK_discreteInputMask_get, _MicroWinExecInterface._eBLOCKCOMPASS_MEMORY_AREA_MASK_discreteInputMask_set)
    discreteOutputMask = property(_MicroWinExecInterface._eBLOCKCOMPASS_MEMORY_AREA_MASK_discreteOutputMask_get, _MicroWinExecInterface._eBLOCKCOMPASS_MEMORY_AREA_MASK_discreteOutputMask_set)
    analogInputMask = property(_MicroWinExecInterface._eBLOCKCOMPASS_MEMORY_AREA_MASK_analogInputMask_get, _MicroWinExecInterface._eBLOCKCOMPASS_MEMORY_AREA_MASK_analogInputMask_set)
    analogOutputMask = property(_MicroWinExecInterface._eBLOCKCOMPASS_MEMORY_AREA_MASK_analogOutputMask_get, _MicroWinExecInterface._eBLOCKCOMPASS_MEMORY_AREA_MASK_analogOutputMask_set)
    dataMask = property(_MicroWinExecInterface._eBLOCKCOMPASS_MEMORY_AREA_MASK_dataMask_get, _MicroWinExecInterface._eBLOCKCOMPASS_MEMORY_AREA_MASK_dataMask_set)
    flagMask = property(_MicroWinExecInterface._eBLOCKCOMPASS_MEMORY_AREA_MASK_flagMask_get, _MicroWinExecInterface._eBLOCKCOMPASS_MEMORY_AREA_MASK_flagMask_set)
    timerMask = property(_MicroWinExecInterface._eBLOCKCOMPASS_MEMORY_AREA_MASK_timerMask_get, _MicroWinExecInterface._eBLOCKCOMPASS_MEMORY_AREA_MASK_timerMask_set)
    counterMask = property(_MicroWinExecInterface._eBLOCKCOMPASS_MEMORY_AREA_MASK_counterMask_get, _MicroWinExecInterface._eBLOCKCOMPASS_MEMORY_AREA_MASK_counterMask_set)
    highSpeedCounterMask = property(_MicroWinExecInterface._eBLOCKCOMPASS_MEMORY_AREA_MASK_highSpeedCounterMask_get, _MicroWinExecInterface._eBLOCKCOMPASS_MEMORY_AREA_MASK_highSpeedCounterMask_set)
    systemMask = property(_MicroWinExecInterface._eBLOCKCOMPASS_MEMORY_AREA_MASK_systemMask_get, _MicroWinExecInterface._eBLOCKCOMPASS_MEMORY_AREA_MASK_systemMask_set)
    stageMask = property(_MicroWinExecInterface._eBLOCKCOMPASS_MEMORY_AREA_MASK_stageMask_get, _MicroWinExecInterface._eBLOCKCOMPASS_MEMORY_AREA_MASK_stageMask_set)
    systemDataMask = property(_MicroWinExecInterface._eBLOCKCOMPASS_MEMORY_AREA_MASK_systemDataMask_get, _MicroWinExecInterface._eBLOCKCOMPASS_MEMORY_AREA_MASK_systemDataMask_set)
    accumulatorMask = property(_MicroWinExecInterface._eBLOCKCOMPASS_MEMORY_AREA_MASK_accumulatorMask_get, _MicroWinExecInterface._eBLOCKCOMPASS_MEMORY_AREA_MASK_accumulatorMask_set)
    localMask = property(_MicroWinExecInterface._eBLOCKCOMPASS_MEMORY_AREA_MASK_localMask_get, _MicroWinExecInterface._eBLOCKCOMPASS_MEMORY_AREA_MASK_localMask_set)
    indirectAddressingMask = property(_MicroWinExecInterface._eBLOCKCOMPASS_MEMORY_AREA_MASK_indirectAddressingMask_get, _MicroWinExecInterface._eBLOCKCOMPASS_MEMORY_AREA_MASK_indirectAddressingMask_set)
    addressOfMask = property(_MicroWinExecInterface._eBLOCKCOMPASS_MEMORY_AREA_MASK_addressOfMask_get, _MicroWinExecInterface._eBLOCKCOMPASS_MEMORY_AREA_MASK_addressOfMask_set)
    literalMask = property(_MicroWinExecInterface._eBLOCKCOMPASS_MEMORY_AREA_MASK_literalMask_get, _MicroWinExecInterface._eBLOCKCOMPASS_MEMORY_AREA_MASK_literalMask_set)
    subroutine = property(_MicroWinExecInterface._eBLOCKCOMPASS_MEMORY_AREA_MASK_subroutine_get, _MicroWinExecInterface._eBLOCKCOMPASS_MEMORY_AREA_MASK_subroutine_set)
    interrupt = property(_MicroWinExecInterface._eBLOCKCOMPASS_MEMORY_AREA_MASK_interrupt_get, _MicroWinExecInterface._eBLOCKCOMPASS_MEMORY_AREA_MASK_interrupt_set)
    organization = property(_MicroWinExecInterface._eBLOCKCOMPASS_MEMORY_AREA_MASK_organization_get, _MicroWinExecInterface._eBLOCKCOMPASS_MEMORY_AREA_MASK_organization_set)
    empty = property(_MicroWinExecInterface._eBLOCKCOMPASS_MEMORY_AREA_MASK_empty_get, _MicroWinExecInterface._eBLOCKCOMPASS_MEMORY_AREA_MASK_empty_set)

    def __init__(self):
        _MicroWinExecInterface._eBLOCKCOMPASS_MEMORY_AREA_MASK_swiginit(self, _MicroWinExecInterface.new__eBLOCKCOMPASS_MEMORY_AREA_MASK())
    __swig_destroy__ = _MicroWinExecInterface.delete__eBLOCKCOMPASS_MEMORY_AREA_MASK

# Register _eBLOCKCOMPASS_MEMORY_AREA_MASK in _MicroWinExecInterface:
_MicroWinExecInterface._eBLOCKCOMPASS_MEMORY_AREA_MASK_swigregister(_eBLOCKCOMPASS_MEMORY_AREA_MASK)

eBLOCKCOMPASS_LANG_TYPE_S7_LAD = _MicroWinExecInterface.eBLOCKCOMPASS_LANG_TYPE_S7_LAD
eBLOCKCOMPASS_LANG_TYPE_S7_STL = _MicroWinExecInterface.eBLOCKCOMPASS_LANG_TYPE_S7_STL
eBLOCKCOMPASS_LANG_TYPE_S7_FBD = _MicroWinExecInterface.eBLOCKCOMPASS_LANG_TYPE_S7_FBD
eBLOCKCOMPASS_LANG_TYPE_IEC_LD = _MicroWinExecInterface.eBLOCKCOMPASS_LANG_TYPE_IEC_LD
eBLOCKCOMPASS_LANG_TYPE_IEC_FBD = _MicroWinExecInterface.eBLOCKCOMPASS_LANG_TYPE_IEC_FBD
eBLOCKCOMPASS_LANG_TYPE_S7_NONE = _MicroWinExecInterface.eBLOCKCOMPASS_LANG_TYPE_S7_NONE
eBLOCKCOMPASS_LANG_TYPE_MAX_EDITOR = _MicroWinExecInterface.eBLOCKCOMPASS_LANG_TYPE_MAX_EDITOR
eBLOCKCOMPASS_DB_ELEMENT_FORMAT_BYTE_EMPTY = _MicroWinExecInterface.eBLOCKCOMPASS_DB_ELEMENT_FORMAT_BYTE_EMPTY
eBLOCKCOMPASS_DB_ELEMENT_FORMAT_BYTE_BINARY = _MicroWinExecInterface.eBLOCKCOMPASS_DB_ELEMENT_FORMAT_BYTE_BINARY
eBLOCKCOMPASS_DB_ELEMENT_FORMAT_BYTE_HEX = _MicroWinExecInterface.eBLOCKCOMPASS_DB_ELEMENT_FORMAT_BYTE_HEX
eBLOCKCOMPASS_DB_ELEMENT_FORMAT_BYTE_UINT = _MicroWinExecInterface.eBLOCKCOMPASS_DB_ELEMENT_FORMAT_BYTE_UINT
eBLOCKCOMPASS_DB_ELEMENT_FORMAT_BYTE_SINT = _MicroWinExecInterface.eBLOCKCOMPASS_DB_ELEMENT_FORMAT_BYTE_SINT
eBLOCKCOMPASS_DB_ELEMENT_FORMAT_BYTE_ASCII_SINGLE = _MicroWinExecInterface.eBLOCKCOMPASS_DB_ELEMENT_FORMAT_BYTE_ASCII_SINGLE
eBLOCKCOMPASS_DB_ELEMENT_FORMAT_BYTE_ASCII_BEGIN = _MicroWinExecInterface.eBLOCKCOMPASS_DB_ELEMENT_FORMAT_BYTE_ASCII_BEGIN
eBLOCKCOMPASS_DB_ELEMENT_FORMAT_BYTE_ASCII_CONT = _MicroWinExecInterface.eBLOCKCOMPASS_DB_ELEMENT_FORMAT_BYTE_ASCII_CONT
eBLOCKCOMPASS_DB_ELEMENT_FORMAT_BYTE_ASCII_END = _MicroWinExecInterface.eBLOCKCOMPASS_DB_ELEMENT_FORMAT_BYTE_ASCII_END
eBLOCKCOMPASS_DB_ELEMENT_FORMAT_WORD_BINARY = _MicroWinExecInterface.eBLOCKCOMPASS_DB_ELEMENT_FORMAT_WORD_BINARY
eBLOCKCOMPASS_DB_ELEMENT_FORMAT_WORD_HEX = _MicroWinExecInterface.eBLOCKCOMPASS_DB_ELEMENT_FORMAT_WORD_HEX
eBLOCKCOMPASS_DB_ELEMENT_FORMAT_WORD_UINT = _MicroWinExecInterface.eBLOCKCOMPASS_DB_ELEMENT_FORMAT_WORD_UINT
eBLOCKCOMPASS_DB_ELEMENT_FORMAT_WORD_SINT = _MicroWinExecInterface.eBLOCKCOMPASS_DB_ELEMENT_FORMAT_WORD_SINT
eBLOCKCOMPASS_DB_ELEMENT_FORMAT_WORD_ASCII_SINGLE = _MicroWinExecInterface.eBLOCKCOMPASS_DB_ELEMENT_FORMAT_WORD_ASCII_SINGLE
eBLOCKCOMPASS_DB_ELEMENT_FORMAT_WORD_ASCII_BEGIN = _MicroWinExecInterface.eBLOCKCOMPASS_DB_ELEMENT_FORMAT_WORD_ASCII_BEGIN
eBLOCKCOMPASS_DB_ELEMENT_FORMAT_WORD_ASCII_CONT = _MicroWinExecInterface.eBLOCKCOMPASS_DB_ELEMENT_FORMAT_WORD_ASCII_CONT
eBLOCKCOMPASS_DB_ELEMENT_FORMAT_WORD_ASCII_END = _MicroWinExecInterface.eBLOCKCOMPASS_DB_ELEMENT_FORMAT_WORD_ASCII_END
eBLOCKCOMPASS_DB_ELEMENT_FORMAT_WORD_TIME = _MicroWinExecInterface.eBLOCKCOMPASS_DB_ELEMENT_FORMAT_WORD_TIME
eBLOCKCOMPASS_DB_ELEMENT_FORMAT_WORD_DATE_TIME = _MicroWinExecInterface.eBLOCKCOMPASS_DB_ELEMENT_FORMAT_WORD_DATE_TIME
eBLOCKCOMPASS_DB_ELEMENT_FORMAT_DWORD_BINARY = _MicroWinExecInterface.eBLOCKCOMPASS_DB_ELEMENT_FORMAT_DWORD_BINARY
eBLOCKCOMPASS_DB_ELEMENT_FORMAT_DWORD_HEX = _MicroWinExecInterface.eBLOCKCOMPASS_DB_ELEMENT_FORMAT_DWORD_HEX
eBLOCKCOMPASS_DB_ELEMENT_FORMAT_DWORD_UINT = _MicroWinExecInterface.eBLOCKCOMPASS_DB_ELEMENT_FORMAT_DWORD_UINT
eBLOCKCOMPASS_DB_ELEMENT_FORMAT_DWORD_SINT = _MicroWinExecInterface.eBLOCKCOMPASS_DB_ELEMENT_FORMAT_DWORD_SINT
eBLOCKCOMPASS_DB_ELEMENT_FORMAT_DWORD_REAL = _MicroWinExecInterface.eBLOCKCOMPASS_DB_ELEMENT_FORMAT_DWORD_REAL
eBLOCKCOMPASS_DB_ELEMENT_FORMAT_DWORD_ASCII_SINGLE = _MicroWinExecInterface.eBLOCKCOMPASS_DB_ELEMENT_FORMAT_DWORD_ASCII_SINGLE
eBLOCKCOMPASS_DB_ELEMENT_FORMAT_DWORD_ASCII_BEGIN = _MicroWinExecInterface.eBLOCKCOMPASS_DB_ELEMENT_FORMAT_DWORD_ASCII_BEGIN
eBLOCKCOMPASS_DB_ELEMENT_FORMAT_DWORD_ASCII_CONT = _MicroWinExecInterface.eBLOCKCOMPASS_DB_ELEMENT_FORMAT_DWORD_ASCII_CONT
eBLOCKCOMPASS_DB_ELEMENT_FORMAT_DWORD_ASCII_END = _MicroWinExecInterface.eBLOCKCOMPASS_DB_ELEMENT_FORMAT_DWORD_ASCII_END
eBLOCKCOMPASS_DB_ELEMENT_FORMAT_STRING = _MicroWinExecInterface.eBLOCKCOMPASS_DB_ELEMENT_FORMAT_STRING
eBLOCKCOMPASS_DB_ELEMENT_FORMAT_BYTE_STRING_ASCII = _MicroWinExecInterface.eBLOCKCOMPASS_DB_ELEMENT_FORMAT_BYTE_STRING_ASCII
eBLOCKCOMPASS_DB_ELEMENT_FORMAT_WORD_STRING_ASCII = _MicroWinExecInterface.eBLOCKCOMPASS_DB_ELEMENT_FORMAT_WORD_STRING_ASCII
eBLOCKCOMPASS_DB_ELEMENT_FORMAT_DWORD_STRING_ASCII = _MicroWinExecInterface.eBLOCKCOMPASS_DB_ELEMENT_FORMAT_DWORD_STRING_ASCII
eBLOCKCOMPASS_DB_LINETYPE_NEW_FIXED = _MicroWinExecInterface.eBLOCKCOMPASS_DB_LINETYPE_NEW_FIXED
eBLOCKCOMPASS_DB_LINETYPE_EXISTING = _MicroWinExecInterface.eBLOCKCOMPASS_DB_LINETYPE_EXISTING
eBLOCKCOMPASS_DB_LINETYPE_NEW_UNSIZED = _MicroWinExecInterface.eBLOCKCOMPASS_DB_LINETYPE_NEW_UNSIZED
eBLOCKCOMPASS_BLOCKTYPE_ALL = _MicroWinExecInterface.eBLOCKCOMPASS_BLOCKTYPE_ALL
eBLOCKCOMPASS_BLOCKTYPE_OB = _MicroWinExecInterface.eBLOCKCOMPASS_BLOCKTYPE_OB
eBLOCKCOMPASS_BLOCKTYPE_DB = _MicroWinExecInterface.eBLOCKCOMPASS_BLOCKTYPE_DB
eBLOCKCOMPASS_BLOCKTYPE_SDB = _MicroWinExecInterface.eBLOCKCOMPASS_BLOCKTYPE_SDB
eBLOCKCOMPASS_BLOCKTYPE_OB_802 = _MicroWinExecInterface.eBLOCKCOMPASS_BLOCKTYPE_OB_802
eBLOCKCOMPASS_BLOCKTYPE_DB_802 = _MicroWinExecInterface.eBLOCKCOMPASS_BLOCKTYPE_DB_802
eBLOCKCOMPASS_BLOCKTYPE_SDB_802 = _MicroWinExecInterface.eBLOCKCOMPASS_BLOCKTYPE_SDB_802
eBLOCKCOMPASS_OPSIZE_BIT = _MicroWinExecInterface.eBLOCKCOMPASS_OPSIZE_BIT
eBLOCKCOMPASS_OPSIZE_BYTE = _MicroWinExecInterface.eBLOCKCOMPASS_OPSIZE_BYTE
eBLOCKCOMPASS_OPSIZE_WORD = _MicroWinExecInterface.eBLOCKCOMPASS_OPSIZE_WORD
eBLOCKCOMPASS_OPSIZE_DWORD = _MicroWinExecInterface.eBLOCKCOMPASS_OPSIZE_DWORD
eBLOCKCOMPASS_OPERAND_TYPE_LITERAL = _MicroWinExecInterface.eBLOCKCOMPASS_OPERAND_TYPE_LITERAL
eBLOCKCOMPASS_OPERAND_TYPE_ADDRESS = _MicroWinExecInterface.eBLOCKCOMPASS_OPERAND_TYPE_ADDRESS
eBLOCKCOMPASS_OPERAND_MODE_DIRECT_ADDRESS = _MicroWinExecInterface.eBLOCKCOMPASS_OPERAND_MODE_DIRECT_ADDRESS
eBLOCKCOMPASS_OPERAND_MODE_ADDRESS_OF = _MicroWinExecInterface.eBLOCKCOMPASS_OPERAND_MODE_ADDRESS_OF
eBLOCKCOMPASS_OPERAND_MODE_INDIRECT_ADDRESS = _MicroWinExecInterface.eBLOCKCOMPASS_OPERAND_MODE_INDIRECT_ADDRESS
eBLOCKCOMPASS_OPERAND_MODE_LITERAL = _MicroWinExecInterface.eBLOCKCOMPASS_OPERAND_MODE_LITERAL
eBLOCKCOMPASS_POUTYPES_POU_ALL = _MicroWinExecInterface.eBLOCKCOMPASS_POUTYPES_POU_ALL
eBLOCKCOMPASS_POUTYPES_POU_INITIAL = _MicroWinExecInterface.eBLOCKCOMPASS_POUTYPES_POU_INITIAL
eBLOCKCOMPASS_POUTYPES_POU_INVALID = _MicroWinExecInterface.eBLOCKCOMPASS_POUTYPES_POU_INVALID
eBLOCKCOMPASS_POUTYPES_POU_DB = _MicroWinExecInterface.eBLOCKCOMPASS_POUTYPES_POU_DB
eBLOCKCOMPASS_POUTYPES_MAIN = _MicroWinExecInterface.eBLOCKCOMPASS_POUTYPES_MAIN
eBLOCKCOMPASS_POUTYPES_SUBROUTINE = _MicroWinExecInterface.eBLOCKCOMPASS_POUTYPES_SUBROUTINE
eBLOCKCOMPASS_POUTYPES_INTERRUPT = _MicroWinExecInterface.eBLOCKCOMPASS_POUTYPES_INTERRUPT
eBLOCKCOMPASS_POUTYPES_POU_VIEW_ALL = _MicroWinExecInterface.eBLOCKCOMPASS_POUTYPES_POU_VIEW_ALL
eBLOCKCOMPASS_MEM_TYPE_BOOL = _MicroWinExecInterface.eBLOCKCOMPASS_MEM_TYPE_BOOL
eBLOCKCOMPASS_MEM_TYPE_BYTE = _MicroWinExecInterface.eBLOCKCOMPASS_MEM_TYPE_BYTE
eBLOCKCOMPASS_MEM_TYPE_WORD = _MicroWinExecInterface.eBLOCKCOMPASS_MEM_TYPE_WORD
eBLOCKCOMPASS_MEM_TYPE_DWORD = _MicroWinExecInterface.eBLOCKCOMPASS_MEM_TYPE_DWORD
eBLOCKCOMPASS_MEM_TYPE_C_IEC = _MicroWinExecInterface.eBLOCKCOMPASS_MEM_TYPE_C_IEC
eBLOCKCOMPASS_MEM_TYPE_T_IEC = _MicroWinExecInterface.eBLOCKCOMPASS_MEM_TYPE_T_IEC
eBLOCKCOMPASS_MEM_TYPE_HC_IEC = _MicroWinExecInterface.eBLOCKCOMPASS_MEM_TYPE_HC_IEC
eBLOCKCOMPASS_VAR_TYPE_IN = _MicroWinExecInterface.eBLOCKCOMPASS_VAR_TYPE_IN
eBLOCKCOMPASS_VAR_TYPE_IN_OUT = _MicroWinExecInterface.eBLOCKCOMPASS_VAR_TYPE_IN_OUT
eBLOCKCOMPASS_VAR_TYPE_OUT = _MicroWinExecInterface.eBLOCKCOMPASS_VAR_TYPE_OUT
eBLOCKCOMPASS_VAR_TYPE_VAR = _MicroWinExecInterface.eBLOCKCOMPASS_VAR_TYPE_VAR
eBLOCKCOMPASS_VAR_TYPE_EXTERN = _MicroWinExecInterface.eBLOCKCOMPASS_VAR_TYPE_EXTERN
eBLOCKCOMPASS_DATA_TYPE_ANY_BIT = _MicroWinExecInterface.eBLOCKCOMPASS_DATA_TYPE_ANY_BIT
eBLOCKCOMPASS_DATA_TYPE_BOOL = _MicroWinExecInterface.eBLOCKCOMPASS_DATA_TYPE_BOOL
eBLOCKCOMPASS_DATA_TYPE_BYTE = _MicroWinExecInterface.eBLOCKCOMPASS_DATA_TYPE_BYTE
eBLOCKCOMPASS_DATA_TYPE_WORD = _MicroWinExecInterface.eBLOCKCOMPASS_DATA_TYPE_WORD
eBLOCKCOMPASS_DATA_TYPE_DWORD = _MicroWinExecInterface.eBLOCKCOMPASS_DATA_TYPE_DWORD
eBLOCKCOMPASS_DATA_TYPE_ANY_INT = _MicroWinExecInterface.eBLOCKCOMPASS_DATA_TYPE_ANY_INT
eBLOCKCOMPASS_DATA_TYPE_INT = _MicroWinExecInterface.eBLOCKCOMPASS_DATA_TYPE_INT
eBLOCKCOMPASS_DATA_TYPE_DINT = _MicroWinExecInterface.eBLOCKCOMPASS_DATA_TYPE_DINT
eBLOCKCOMPASS_DATA_TYPE_USINT = _MicroWinExecInterface.eBLOCKCOMPASS_DATA_TYPE_USINT
eBLOCKCOMPASS_DATA_TYPE_UINT = _MicroWinExecInterface.eBLOCKCOMPASS_DATA_TYPE_UINT
eBLOCKCOMPASS_DATA_TYPE_UDINT = _MicroWinExecInterface.eBLOCKCOMPASS_DATA_TYPE_UDINT
eBLOCKCOMPASS_DATA_TYPE_ANY_REAL = _MicroWinExecInterface.eBLOCKCOMPASS_DATA_TYPE_ANY_REAL
eBLOCKCOMPASS_DATA_TYPE_REAL = _MicroWinExecInterface.eBLOCKCOMPASS_DATA_TYPE_REAL
eBLOCKCOMPASS_DATA_TYPE_ANY_TIME = _MicroWinExecInterface.eBLOCKCOMPASS_DATA_TYPE_ANY_TIME
eBLOCKCOMPASS_DATA_TYPE_TIME = _MicroWinExecInterface.eBLOCKCOMPASS_DATA_TYPE_TIME
eBLOCKCOMPASS_DATA_TYPE_SUBROUTINE_TYPE = _MicroWinExecInterface.eBLOCKCOMPASS_DATA_TYPE_SUBROUTINE_TYPE
eBLOCKCOMPASS_DATA_TYPE_INTERRUPT_TYPE = _MicroWinExecInterface.eBLOCKCOMPASS_DATA_TYPE_INTERRUPT_TYPE
eBLOCKCOMPASS_DATA_TYPE_ORGANIZATION_TYPE = _MicroWinExecInterface.eBLOCKCOMPASS_DATA_TYPE_ORGANIZATION_TYPE
eBLOCKCOMPASS_DATA_TYPE_CHAR = _MicroWinExecInterface.eBLOCKCOMPASS_DATA_TYPE_CHAR
eBLOCKCOMPASS_DATA_TYPE_ANY_STRING = _MicroWinExecInterface.eBLOCKCOMPASS_DATA_TYPE_ANY_STRING
eBLOCKCOMPASS_DATA_TYPE_STRING = _MicroWinExecInterface.eBLOCKCOMPASS_DATA_TYPE_STRING
eBLOCKCOMPASS_DATA_TYPE_NETR_STRUCT = _MicroWinExecInterface.eBLOCKCOMPASS_DATA_TYPE_NETR_STRUCT
eBLOCKCOMPASS_DATA_TYPE_PID_STRUCT = _MicroWinExecInterface.eBLOCKCOMPASS_DATA_TYPE_PID_STRUCT
eBLOCKCOMPASS_DATA_TYPE_TON = _MicroWinExecInterface.eBLOCKCOMPASS_DATA_TYPE_TON
eBLOCKCOMPASS_DATA_TYPE_TOF = _MicroWinExecInterface.eBLOCKCOMPASS_DATA_TYPE_TOF
eBLOCKCOMPASS_DATA_TYPE_TP = _MicroWinExecInterface.eBLOCKCOMPASS_DATA_TYPE_TP
eBLOCKCOMPASS_DATA_TYPE_CTU = _MicroWinExecInterface.eBLOCKCOMPASS_DATA_TYPE_CTU
eBLOCKCOMPASS_DATA_TYPE_CTD = _MicroWinExecInterface.eBLOCKCOMPASS_DATA_TYPE_CTD
eBLOCKCOMPASS_DATA_TYPE_CTUD = _MicroWinExecInterface.eBLOCKCOMPASS_DATA_TYPE_CTUD
eBLOCKCOMPASS_DATA_TYPE_RS = _MicroWinExecInterface.eBLOCKCOMPASS_DATA_TYPE_RS
eBLOCKCOMPASS_DATA_TYPE_SR = _MicroWinExecInterface.eBLOCKCOMPASS_DATA_TYPE_SR
eBLOCKCOMPASS_DATA_TYPE_POWER_FLOW = _MicroWinExecInterface.eBLOCKCOMPASS_DATA_TYPE_POWER_FLOW
eBLOCKCOMPASS_AREAS_I = _MicroWinExecInterface.eBLOCKCOMPASS_AREAS_I
eBLOCKCOMPASS_AREAS_Q = _MicroWinExecInterface.eBLOCKCOMPASS_AREAS_Q
eBLOCKCOMPASS_AREAS_AI = _MicroWinExecInterface.eBLOCKCOMPASS_AREAS_AI
eBLOCKCOMPASS_AREAS_AQ = _MicroWinExecInterface.eBLOCKCOMPASS_AREAS_AQ
eBLOCKCOMPASS_AREAS_V = _MicroWinExecInterface.eBLOCKCOMPASS_AREAS_V
eBLOCKCOMPASS_AREAS_M = _MicroWinExecInterface.eBLOCKCOMPASS_AREAS_M
eBLOCKCOMPASS_AREAS_T = _MicroWinExecInterface.eBLOCKCOMPASS_AREAS_T
eBLOCKCOMPASS_AREAS_C = _MicroWinExecInterface.eBLOCKCOMPASS_AREAS_C
eBLOCKCOMPASS_AREAS_HC = _MicroWinExecInterface.eBLOCKCOMPASS_AREAS_HC
eBLOCKCOMPASS_AREAS_SM = _MicroWinExecInterface.eBLOCKCOMPASS_AREAS_SM
eBLOCKCOMPASS_AREAS_SCR = _MicroWinExecInterface.eBLOCKCOMPASS_AREAS_SCR
eBLOCKCOMPASS_AREAS_SD = _MicroWinExecInterface.eBLOCKCOMPASS_AREAS_SD
eBLOCKCOMPASS_AREAS_AC = _MicroWinExecInterface.eBLOCKCOMPASS_AREAS_AC
eBLOCKCOMPASS_AREAS_L = _MicroWinExecInterface.eBLOCKCOMPASS_AREAS_L
eBLOCKCOMPASS_AREAS_INDIRECT = _MicroWinExecInterface.eBLOCKCOMPASS_AREAS_INDIRECT
eBLOCKCOMPASS_AREAS_ADDRESSOF = _MicroWinExecInterface.eBLOCKCOMPASS_AREAS_ADDRESSOF
eBLOCKCOMPASS_AREAS_LITERAL = _MicroWinExecInterface.eBLOCKCOMPASS_AREAS_LITERAL
eBLOCKCOMPASS_AREAS_SBR = _MicroWinExecInterface.eBLOCKCOMPASS_AREAS_SBR
eBLOCKCOMPASS_AREAS_INT = _MicroWinExecInterface.eBLOCKCOMPASS_AREAS_INT
eBLOCKCOMPASS_AREAS_OB = _MicroWinExecInterface.eBLOCKCOMPASS_AREAS_OB
eBLOCKCOMPASS_MEM_AREA_SD = _MicroWinExecInterface.eBLOCKCOMPASS_MEM_AREA_SD
eBLOCKCOMPASS_MEM_AREA_S = _MicroWinExecInterface.eBLOCKCOMPASS_MEM_AREA_S
eBLOCKCOMPASS_MEM_AREA_SM = _MicroWinExecInterface.eBLOCKCOMPASS_MEM_AREA_SM
eBLOCKCOMPASS_MEM_AREA_AI = _MicroWinExecInterface.eBLOCKCOMPASS_MEM_AREA_AI
eBLOCKCOMPASS_MEM_AREA_AQ = _MicroWinExecInterface.eBLOCKCOMPASS_MEM_AREA_AQ
eBLOCKCOMPASS_MEM_AREA_C_IEC = _MicroWinExecInterface.eBLOCKCOMPASS_MEM_AREA_C_IEC
eBLOCKCOMPASS_MEM_AREA_T_IEC = _MicroWinExecInterface.eBLOCKCOMPASS_MEM_AREA_T_IEC
eBLOCKCOMPASS_MEM_AREA_HC_IEC = _MicroWinExecInterface.eBLOCKCOMPASS_MEM_AREA_HC_IEC
eBLOCKCOMPASS_MEM_AREA_I = _MicroWinExecInterface.eBLOCKCOMPASS_MEM_AREA_I
eBLOCKCOMPASS_MEM_AREA_Q = _MicroWinExecInterface.eBLOCKCOMPASS_MEM_AREA_Q
eBLOCKCOMPASS_MEM_AREA_M = _MicroWinExecInterface.eBLOCKCOMPASS_MEM_AREA_M
eBLOCKCOMPASS_MEM_AREA_DB = _MicroWinExecInterface.eBLOCKCOMPASS_MEM_AREA_DB
eBLOCKCOMPASS_FORMAT_SIGNED = _MicroWinExecInterface.eBLOCKCOMPASS_FORMAT_SIGNED
eBLOCKCOMPASS_FORMAT_UNSIGNED = _MicroWinExecInterface.eBLOCKCOMPASS_FORMAT_UNSIGNED
eBLOCKCOMPASS_FORMAT_HEXADECIMAL = _MicroWinExecInterface.eBLOCKCOMPASS_FORMAT_HEXADECIMAL
eBLOCKCOMPASS_FORMAT_BINARY = _MicroWinExecInterface.eBLOCKCOMPASS_FORMAT_BINARY
eBLOCKCOMPASS_FORMAT_REAL = _MicroWinExecInterface.eBLOCKCOMPASS_FORMAT_REAL
eBLOCKCOMPASS_FORMAT_ASCII = _MicroWinExecInterface.eBLOCKCOMPASS_FORMAT_ASCII
eBLOCKCOMPASS_FORMAT_STRING = _MicroWinExecInterface.eBLOCKCOMPASS_FORMAT_STRING
eBLOCKCOMPASS_FORMAT_TIME = _MicroWinExecInterface.eBLOCKCOMPASS_FORMAT_TIME
eBLOCKCOMPASS_FORMAT_BIT = _MicroWinExecInterface.eBLOCKCOMPASS_FORMAT_BIT
eBLOCKCOMPASS_FORMAT_NO_FORMAT = _MicroWinExecInterface.eBLOCKCOMPASS_FORMAT_NO_FORMAT
eBLOCKCOMPASS_COMMENT_UNKNOWN = _MicroWinExecInterface.eBLOCKCOMPASS_COMMENT_UNKNOWN
eBLOCKCOMPASS_COMMENT_LINE = _MicroWinExecInterface.eBLOCKCOMPASS_COMMENT_LINE
eBLOCKCOMPASS_COMMENT_INDENTED_LINE = _MicroWinExecInterface.eBLOCKCOMPASS_COMMENT_INDENTED_LINE
eBLOCKCOMPASS_COMMENT_CODE = _MicroWinExecInterface.eBLOCKCOMPASS_COMMENT_CODE
eBLOCKCOMPASS_COMMENT_EMPTY_LINE = _MicroWinExecInterface.eBLOCKCOMPASS_COMMENT_EMPTY_LINE
eBLOCKCOMPASS_COMMENT_ILLEGAL_LINE = _MicroWinExecInterface.eBLOCKCOMPASS_COMMENT_ILLEGAL_LINE
eBLOCKCOMPASS_ERROR_NONE = _MicroWinExecInterface.eBLOCKCOMPASS_ERROR_NONE
eBLOCKCOMPASS_ERROR_INVALID_BLOCK = _MicroWinExecInterface.eBLOCKCOMPASS_ERROR_INVALID_BLOCK
eBLOCKCOMPASS_ERROR_INVALID_CLIENT_STORAGE = _MicroWinExecInterface.eBLOCKCOMPASS_ERROR_INVALID_CLIENT_STORAGE
eBLOCKCOMPASS_ERROR_INVALID_CLIENT_RETRIEVE = _MicroWinExecInterface.eBLOCKCOMPASS_ERROR_INVALID_CLIENT_RETRIEVE
eBLOCKCOMPASS_ERROR_ASSEMBLE_ERROR = _MicroWinExecInterface.eBLOCKCOMPASS_ERROR_ASSEMBLE_ERROR
eBLOCKCOMPASS_ERROR_INVALID_PASSWORD = _MicroWinExecInterface.eBLOCKCOMPASS_ERROR_INVALID_PASSWORD
eBLOCKCOMPASS_ERROR_INVALID_BLOCK_TYPE = _MicroWinExecInterface.eBLOCKCOMPASS_ERROR_INVALID_BLOCK_TYPE
eBLOCKCOMPASS_ERROR_INVALID_BLOCK_NUMBER = _MicroWinExecInterface.eBLOCKCOMPASS_ERROR_INVALID_BLOCK_NUMBER
eBLOCKCOMPASS_ERROR_CANT_UPLOAD_BLOCK = _MicroWinExecInterface.eBLOCKCOMPASS_ERROR_CANT_UPLOAD_BLOCK
eBLOCKCOMPASS_ERROR_INVALID_SUBPARAM = _MicroWinExecInterface.eBLOCKCOMPASS_ERROR_INVALID_SUBPARAM
eBLOCKCOMPASS_UPLOAD_BINARY_CORRUPTION = _MicroWinExecInterface.eBLOCKCOMPASS_UPLOAD_BINARY_CORRUPTION
eBLOCKCOMPASS_UNKNOWN_PROGRAM_VERSION = _MicroWinExecInterface.eBLOCKCOMPASS_UNKNOWN_PROGRAM_VERSION
eBLOCKCOMPASS_UPLOAD_RME_POU_ORDER_ERROR = _MicroWinExecInterface.eBLOCKCOMPASS_UPLOAD_RME_POU_ORDER_ERROR
eBLOCKCOMPASS_ERROR_DISASSEMBLE_ERROR = _MicroWinExecInterface.eBLOCKCOMPASS_ERROR_DISASSEMBLE_ERROR
eBLOCKCOMPASS_ERROR_AUTHORIZE_ERROR = _MicroWinExecInterface.eBLOCKCOMPASS_ERROR_AUTHORIZE_ERROR
eBLOCKCOMPASS_ERROR_AUTHORIZE_IN_RME = _MicroWinExecInterface.eBLOCKCOMPASS_ERROR_AUTHORIZE_IN_RME
eBLOCKCOMPASS_ERROR_INVALID_CLIENT_DATA = _MicroWinExecInterface.eBLOCKCOMPASS_ERROR_INVALID_CLIENT_DATA
eBLOCKCOMPASS_ERROR_NOT_SUPPORTED = _MicroWinExecInterface.eBLOCKCOMPASS_ERROR_NOT_SUPPORTED
eBLOCKCOMPASS_CANNOT_OPEN_IEC1131_PRJ = _MicroWinExecInterface.eBLOCKCOMPASS_CANNOT_OPEN_IEC1131_PRJ
eBLOCKCOMPASS_CANNOT_OPEN_SIMATIC_PRJ = _MicroWinExecInterface.eBLOCKCOMPASS_CANNOT_OPEN_SIMATIC_PRJ
eBLOCKCOMPASS_ERROR_GPB_ALREADY_EXISTS = _MicroWinExecInterface.eBLOCKCOMPASS_ERROR_GPB_ALREADY_EXISTS
eBLOCKCOMPASS_ERROR_GPB_NOT_FOUND = _MicroWinExecInterface.eBLOCKCOMPASS_ERROR_GPB_NOT_FOUND
eBLOCKCOMPASS_ERROR_GPB_INVALID_REQUEST = _MicroWinExecInterface.eBLOCKCOMPASS_ERROR_GPB_INVALID_REQUEST
eBLOCKCOMPASS_ERROR_FILE_ACCESS = _MicroWinExecInterface.eBLOCKCOMPASS_ERROR_FILE_ACCESS
eBLOCKCOMPASS_ERROR_CORRUPTED_BLOCK = _MicroWinExecInterface.eBLOCKCOMPASS_ERROR_CORRUPTED_BLOCK
eBLOCKCOMPASS_DATAROW_TYPE_NORMAL = _MicroWinExecInterface.eBLOCKCOMPASS_DATAROW_TYPE_NORMAL
eBLOCKCOMPASS_DATAROW_TYPE_NORMAL_NOSIZE = _MicroWinExecInterface.eBLOCKCOMPASS_DATAROW_TYPE_NORMAL_NOSIZE
eBLOCKCOMPASS_DATAROW_TYPE_EXTENDED = _MicroWinExecInterface.eBLOCKCOMPASS_DATAROW_TYPE_EXTENDED
eBLOCKCOMPASS_DATAROW_TYPE_EXTENDED_NOSIZE = _MicroWinExecInterface.eBLOCKCOMPASS_DATAROW_TYPE_EXTENDED_NOSIZE
eBLOCKCOMPASS_UNKNOWN_PROTECTION = _MicroWinExecInterface.eBLOCKCOMPASS_UNKNOWN_PROTECTION
eBLOCKCOMPASS_USER_NO_PROTECTION = _MicroWinExecInterface.eBLOCKCOMPASS_USER_NO_PROTECTION
eBLOCKCOMPASS_LIB_NO_PROTECTION = _MicroWinExecInterface.eBLOCKCOMPASS_LIB_NO_PROTECTION
eBLOCKCOMPASS_WIZ_NO_PROTECTION = _MicroWinExecInterface.eBLOCKCOMPASS_WIZ_NO_PROTECTION
eBLOCKCOMPASS_SYS_NO_PROTECTION = _MicroWinExecInterface.eBLOCKCOMPASS_SYS_NO_PROTECTION
eBLOCKCOMPASS_USER_WRITE_PROTECTION = _MicroWinExecInterface.eBLOCKCOMPASS_USER_WRITE_PROTECTION
eBLOCKCOMPASS_LIB_WRITE_PROTECTION = _MicroWinExecInterface.eBLOCKCOMPASS_LIB_WRITE_PROTECTION
eBLOCKCOMPASS_WIZ_WRITE_PROTECTION = _MicroWinExecInterface.eBLOCKCOMPASS_WIZ_WRITE_PROTECTION
eBLOCKCOMPASS_SYS_WRITE_PROTECTION = _MicroWinExecInterface.eBLOCKCOMPASS_SYS_WRITE_PROTECTION
eBLOCKCOMPASS_USER_READ_WRITE_PROTECTION = _MicroWinExecInterface.eBLOCKCOMPASS_USER_READ_WRITE_PROTECTION
eBLOCKCOMPASS_LIB_READ_WRITE_PROTECTION = _MicroWinExecInterface.eBLOCKCOMPASS_LIB_READ_WRITE_PROTECTION
eBLOCKCOMPASS_WIZ_READ_WRITE_PROTECTION = _MicroWinExecInterface.eBLOCKCOMPASS_WIZ_READ_WRITE_PROTECTION
eBLOCKCOMPASS_SYS_READ_WRITE_PROTECTION = _MicroWinExecInterface.eBLOCKCOMPASS_SYS_READ_WRITE_PROTECTION
eBLOCKCOMPASS_ABS_NO_PROTECTION = _MicroWinExecInterface.eBLOCKCOMPASS_ABS_NO_PROTECTION
eBLOCKCOMPASS_ABS_WRITE_PROTECTION = _MicroWinExecInterface.eBLOCKCOMPASS_ABS_WRITE_PROTECTION
eBLOCKCOMPASS_ABS_READ_WRITE_PROTECTION = _MicroWinExecInterface.eBLOCKCOMPASS_ABS_READ_WRITE_PROTECTION
eBLOCKCOMPASS_USER_PROTECTION = _MicroWinExecInterface.eBLOCKCOMPASS_USER_PROTECTION
eBLOCKCOMPASS_LIB_PROTECTION = _MicroWinExecInterface.eBLOCKCOMPASS_LIB_PROTECTION
eBLOCKCOMPASS_WIZ_PROTECTION = _MicroWinExecInterface.eBLOCKCOMPASS_WIZ_PROTECTION
eBLOCKCOMPASS_SYS_PROTECTION = _MicroWinExecInterface.eBLOCKCOMPASS_SYS_PROTECTION
class sBLOCKCOMPASS_LITERAL_STRUCT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    type = property(_MicroWinExecInterface.sBLOCKCOMPASS_LITERAL_STRUCT_type_get, _MicroWinExecInterface.sBLOCKCOMPASS_LITERAL_STRUCT_type_set)
    size = property(_MicroWinExecInterface.sBLOCKCOMPASS_LITERAL_STRUCT_size_get, _MicroWinExecInterface.sBLOCKCOMPASS_LITERAL_STRUCT_size_set)
    nBytes = property(_MicroWinExecInterface.sBLOCKCOMPASS_LITERAL_STRUCT_nBytes_get, _MicroWinExecInterface.sBLOCKCOMPASS_LITERAL_STRUCT_nBytes_set)
    pValue = property(_MicroWinExecInterface.sBLOCKCOMPASS_LITERAL_STRUCT_pValue_get, _MicroWinExecInterface.sBLOCKCOMPASS_LITERAL_STRUCT_pValue_set)

    def __init__(self):
        _MicroWinExecInterface.sBLOCKCOMPASS_LITERAL_STRUCT_swiginit(self, _MicroWinExecInterface.new_sBLOCKCOMPASS_LITERAL_STRUCT())
    __swig_destroy__ = _MicroWinExecInterface.delete_sBLOCKCOMPASS_LITERAL_STRUCT

# Register sBLOCKCOMPASS_LITERAL_STRUCT in _MicroWinExecInterface:
_MicroWinExecInterface.sBLOCKCOMPASS_LITERAL_STRUCT_swigregister(sBLOCKCOMPASS_LITERAL_STRUCT)

class sBLOCKCOMPASS_ADDRESS_STRUCT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mode = property(_MicroWinExecInterface.sBLOCKCOMPASS_ADDRESS_STRUCT_mode_get, _MicroWinExecInterface.sBLOCKCOMPASS_ADDRESS_STRUCT_mode_set)
    size = property(_MicroWinExecInterface.sBLOCKCOMPASS_ADDRESS_STRUCT_size_get, _MicroWinExecInterface.sBLOCKCOMPASS_ADDRESS_STRUCT_size_set)
    memoryArea = property(_MicroWinExecInterface.sBLOCKCOMPASS_ADDRESS_STRUCT_memoryArea_get, _MicroWinExecInterface.sBLOCKCOMPASS_ADDRESS_STRUCT_memoryArea_set)
    nOffset = property(_MicroWinExecInterface.sBLOCKCOMPASS_ADDRESS_STRUCT_nOffset_get, _MicroWinExecInterface.sBLOCKCOMPASS_ADDRESS_STRUCT_nOffset_set)

    def __init__(self):
        _MicroWinExecInterface.sBLOCKCOMPASS_ADDRESS_STRUCT_swiginit(self, _MicroWinExecInterface.new_sBLOCKCOMPASS_ADDRESS_STRUCT())
    __swig_destroy__ = _MicroWinExecInterface.delete_sBLOCKCOMPASS_ADDRESS_STRUCT

# Register sBLOCKCOMPASS_ADDRESS_STRUCT in _MicroWinExecInterface:
_MicroWinExecInterface.sBLOCKCOMPASS_ADDRESS_STRUCT_swigregister(sBLOCKCOMPASS_ADDRESS_STRUCT)

class uBLOCK200_OPERAND(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    eOperandType = property(_MicroWinExecInterface.uBLOCK200_OPERAND_eOperandType_get, _MicroWinExecInterface.uBLOCK200_OPERAND_eOperandType_set)
    tagged_union = property(_MicroWinExecInterface.uBLOCK200_OPERAND_tagged_union_get, _MicroWinExecInterface.uBLOCK200_OPERAND_tagged_union_set)

    def __init__(self):
        _MicroWinExecInterface.uBLOCK200_OPERAND_swiginit(self, _MicroWinExecInterface.new_uBLOCK200_OPERAND())
    __swig_destroy__ = _MicroWinExecInterface.delete_uBLOCK200_OPERAND

# Register uBLOCK200_OPERAND in _MicroWinExecInterface:
_MicroWinExecInterface.uBLOCK200_OPERAND_swigregister(uBLOCK200_OPERAND)

class sBLOCKCOMPASS_DB_LINE_INFO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sAddress = property(_MicroWinExecInterface.sBLOCKCOMPASS_DB_LINE_INFO_sAddress_get, _MicroWinExecInterface.sBLOCKCOMPASS_DB_LINE_INFO_sAddress_set)
    eDataRowType = property(_MicroWinExecInterface.sBLOCKCOMPASS_DB_LINE_INFO_eDataRowType_get, _MicroWinExecInterface.sBLOCKCOMPASS_DB_LINE_INFO_eDataRowType_set)

    def __init__(self):
        _MicroWinExecInterface.sBLOCKCOMPASS_DB_LINE_INFO_swiginit(self, _MicroWinExecInterface.new_sBLOCKCOMPASS_DB_LINE_INFO())
    __swig_destroy__ = _MicroWinExecInterface.delete_sBLOCKCOMPASS_DB_LINE_INFO

# Register sBLOCKCOMPASS_DB_LINE_INFO in _MicroWinExecInterface:
_MicroWinExecInterface.sBLOCKCOMPASS_DB_LINE_INFO_swigregister(sBLOCKCOMPASS_DB_LINE_INFO)

class sBLOCKCOMPASS_DB_LINE_ITEM_INFO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sValue = property(_MicroWinExecInterface.sBLOCKCOMPASS_DB_LINE_ITEM_INFO_sValue_get, _MicroWinExecInterface.sBLOCKCOMPASS_DB_LINE_ITEM_INFO_sValue_set)
    bEndofArray = property(_MicroWinExecInterface.sBLOCKCOMPASS_DB_LINE_ITEM_INFO_bEndofArray_get, _MicroWinExecInterface.sBLOCKCOMPASS_DB_LINE_ITEM_INFO_bEndofArray_set)
    bArrayItem = property(_MicroWinExecInterface.sBLOCKCOMPASS_DB_LINE_ITEM_INFO_bArrayItem_get, _MicroWinExecInterface.sBLOCKCOMPASS_DB_LINE_ITEM_INFO_bArrayItem_set)

    def __init__(self):
        _MicroWinExecInterface.sBLOCKCOMPASS_DB_LINE_ITEM_INFO_swiginit(self, _MicroWinExecInterface.new_sBLOCKCOMPASS_DB_LINE_ITEM_INFO())
    __swig_destroy__ = _MicroWinExecInterface.delete_sBLOCKCOMPASS_DB_LINE_ITEM_INFO

# Register sBLOCKCOMPASS_DB_LINE_ITEM_INFO in _MicroWinExecInterface:
_MicroWinExecInterface.sBLOCKCOMPASS_DB_LINE_ITEM_INFO_swigregister(sBLOCKCOMPASS_DB_LINE_ITEM_INFO)

class sBLOCKCOMPASS_SUBPARAM(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    szName = property(_MicroWinExecInterface.sBLOCKCOMPASS_SUBPARAM_szName_get, _MicroWinExecInterface.sBLOCKCOMPASS_SUBPARAM_szName_set)
    nVarType = property(_MicroWinExecInterface.sBLOCKCOMPASS_SUBPARAM_nVarType_get, _MicroWinExecInterface.sBLOCKCOMPASS_SUBPARAM_nVarType_set)
    nDataType = property(_MicroWinExecInterface.sBLOCKCOMPASS_SUBPARAM_nDataType_get, _MicroWinExecInterface.sBLOCKCOMPASS_SUBPARAM_nDataType_set)
    nFormat = property(_MicroWinExecInterface.sBLOCKCOMPASS_SUBPARAM_nFormat_get, _MicroWinExecInterface.sBLOCKCOMPASS_SUBPARAM_nFormat_set)

    def __init__(self):
        _MicroWinExecInterface.sBLOCKCOMPASS_SUBPARAM_swiginit(self, _MicroWinExecInterface.new_sBLOCKCOMPASS_SUBPARAM())
    __swig_destroy__ = _MicroWinExecInterface.delete_sBLOCKCOMPASS_SUBPARAM

# Register sBLOCKCOMPASS_SUBPARAM in _MicroWinExecInterface:
_MicroWinExecInterface.sBLOCKCOMPASS_SUBPARAM_swigregister(sBLOCKCOMPASS_SUBPARAM)

class sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byNodes = property(_MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1_byNodes_get, _MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1_byNodes_set)
    byFixedNodes = property(_MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1_byFixedNodes_get, _MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1_byFixedNodes_set)
    byPG = property(_MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1_byPG_get, _MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1_byPG_set)
    byOP_OS = property(_MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1_byOP_OS_get, _MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1_byOP_OS_set)
    byNodeType = property(_MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1_byNodeType_get, _MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1_byNodeType_set)
    byMediaBU = property(_MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1_byMediaBU_get, _MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1_byMediaBU_set)
    byHSA = property(_MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1_byHSA_get, _MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1_byHSA_set)
    byNodeAddr = property(_MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1_byNodeAddr_get, _MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1_byNodeAddr_set)
    byRetryCount = property(_MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1_byRetryCount_get, _MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1_byRetryCount_set)
    byBaudRate = property(_MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1_byBaudRate_get, _MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1_byBaudRate_set)
    byMediaType = property(_MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1_byMediaType_get, _MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1_byMediaType_set)
    byInRing = property(_MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1_byInRing_get, _MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1_byInRing_set)
    byLsapID = property(_MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1_byLsapID_get, _MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1_byLsapID_set)
    byGUF = property(_MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1_byGUF_get, _MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1_byGUF_set)
    byReserved = property(_MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1_byReserved_get, _MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1_byReserved_set)
    byReadyTime = property(_MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1_byReadyTime_get, _MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1_byReadyTime_set)
    wModFadTime = property(_MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1_wModFadTime_get, _MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1_wModFadTime_set)
    wSlotTime = property(_MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1_wSlotTime_get, _MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1_wSlotTime_set)
    wIdleTime1 = property(_MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1_wIdleTime1_get, _MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1_wIdleTime1_set)
    wIdleTime2 = property(_MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1_wIdleTime2_get, _MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1_wIdleTime2_set)
    wTttrMulitplier = property(_MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1_wTttrMulitplier_get, _MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1_wTttrMulitplier_set)

    def __init__(self):
        _MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1_swiginit(self, _MicroWinExecInterface.new_sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1())
    __swig_destroy__ = _MicroWinExecInterface.delete_sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1

# Register sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1 in _MicroWinExecInterface:
_MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1_swigregister(sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV1)

class sBLOCKCOMPASS_SDBPARAM_RETENTIVERANGE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byRangeNum = property(_MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_RETENTIVERANGE_byRangeNum_get, _MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_RETENTIVERANGE_byRangeNum_set)
    byReserved = property(_MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_RETENTIVERANGE_byReserved_get, _MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_RETENTIVERANGE_byReserved_set)

    def __init__(self):
        _MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_RETENTIVERANGE_swiginit(self, _MicroWinExecInterface.new_sBLOCKCOMPASS_SDBPARAM_RETENTIVERANGE())
    __swig_destroy__ = _MicroWinExecInterface.delete_sBLOCKCOMPASS_SDBPARAM_RETENTIVERANGE

# Register sBLOCKCOMPASS_SDBPARAM_RETENTIVERANGE in _MicroWinExecInterface:
_MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_RETENTIVERANGE_swigregister(sBLOCKCOMPASS_SDBPARAM_RETENTIVERANGE)

class sBLOCKCOMPASS_SDBPARAM_COMMPORT_N(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byPortNum = property(_MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT_N_byPortNum_get, _MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT_N_byPortNum_set)
    byReserved = property(_MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT_N_byReserved_get, _MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT_N_byReserved_set)
    sCommData = property(_MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT_N_sCommData_get, _MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT_N_sCommData_set)

    def __init__(self):
        _MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT_N_swiginit(self, _MicroWinExecInterface.new_sBLOCKCOMPASS_SDBPARAM_COMMPORT_N())
    __swig_destroy__ = _MicroWinExecInterface.delete_sBLOCKCOMPASS_SDBPARAM_COMMPORT_N

# Register sBLOCKCOMPASS_SDBPARAM_COMMPORT_N in _MicroWinExecInterface:
_MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT_N_swigregister(sBLOCKCOMPASS_SDBPARAM_COMMPORT_N)

class sBLOCKCOMPASS_SDBPARAM_INPUT_DELAY(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byI1_0_5Delay = property(_MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_INPUT_DELAY_byI1_0_5Delay_get, _MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_INPUT_DELAY_byI1_0_5Delay_set)
    byI_0_7elay = property(_MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_INPUT_DELAY_byI_0_7elay_get, _MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_INPUT_DELAY_byI_0_7elay_set)

    def __init__(self):
        _MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_INPUT_DELAY_swiginit(self, _MicroWinExecInterface.new_sBLOCKCOMPASS_SDBPARAM_INPUT_DELAY())
    __swig_destroy__ = _MicroWinExecInterface.delete_sBLOCKCOMPASS_SDBPARAM_INPUT_DELAY

# Register sBLOCKCOMPASS_SDBPARAM_INPUT_DELAY in _MicroWinExecInterface:
_MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_INPUT_DELAY_swigregister(sBLOCKCOMPASS_SDBPARAM_INPUT_DELAY)

class sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV0(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byReserved = property(_MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV0_byReserved_get, _MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV0_byReserved_set)
    byNodeAddr = property(_MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV0_byNodeAddr_get, _MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV0_byNodeAddr_set)

    def __init__(self):
        _MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV0_swiginit(self, _MicroWinExecInterface.new_sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV0())
    __swig_destroy__ = _MicroWinExecInterface.delete_sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV0

# Register sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV0 in _MicroWinExecInterface:
_MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV0_swigregister(sBLOCKCOMPASS_SDBPARAM_COMMPORT0_REV0)

class sBLOCKCOMPASS_SDBPARAM_PASSWORD(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byReserved = property(_MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_PASSWORD_byReserved_get, _MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_PASSWORD_byReserved_set)
    byClass = property(_MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_PASSWORD_byClass_get, _MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_PASSWORD_byClass_set)
    aPassword = property(_MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_PASSWORD_aPassword_get, _MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_PASSWORD_aPassword_set)

    def __init__(self):
        _MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_PASSWORD_swiginit(self, _MicroWinExecInterface.new_sBLOCKCOMPASS_SDBPARAM_PASSWORD())
    __swig_destroy__ = _MicroWinExecInterface.delete_sBLOCKCOMPASS_SDBPARAM_PASSWORD

# Register sBLOCKCOMPASS_SDBPARAM_PASSWORD in _MicroWinExecInterface:
_MicroWinExecInterface.sBLOCKCOMPASS_SDBPARAM_PASSWORD_swigregister(sBLOCKCOMPASS_SDBPARAM_PASSWORD)

class sBLOCKCOMPASS_TIMESTAMP(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nYear = property(_MicroWinExecInterface.sBLOCKCOMPASS_TIMESTAMP_nYear_get, _MicroWinExecInterface.sBLOCKCOMPASS_TIMESTAMP_nYear_set)
    nMonth = property(_MicroWinExecInterface.sBLOCKCOMPASS_TIMESTAMP_nMonth_get, _MicroWinExecInterface.sBLOCKCOMPASS_TIMESTAMP_nMonth_set)
    nDOW = property(_MicroWinExecInterface.sBLOCKCOMPASS_TIMESTAMP_nDOW_get, _MicroWinExecInterface.sBLOCKCOMPASS_TIMESTAMP_nDOW_set)
    nDay = property(_MicroWinExecInterface.sBLOCKCOMPASS_TIMESTAMP_nDay_get, _MicroWinExecInterface.sBLOCKCOMPASS_TIMESTAMP_nDay_set)
    nHour = property(_MicroWinExecInterface.sBLOCKCOMPASS_TIMESTAMP_nHour_get, _MicroWinExecInterface.sBLOCKCOMPASS_TIMESTAMP_nHour_set)
    nMin = property(_MicroWinExecInterface.sBLOCKCOMPASS_TIMESTAMP_nMin_get, _MicroWinExecInterface.sBLOCKCOMPASS_TIMESTAMP_nMin_set)
    nSec = property(_MicroWinExecInterface.sBLOCKCOMPASS_TIMESTAMP_nSec_get, _MicroWinExecInterface.sBLOCKCOMPASS_TIMESTAMP_nSec_set)
    nMilliSec = property(_MicroWinExecInterface.sBLOCKCOMPASS_TIMESTAMP_nMilliSec_get, _MicroWinExecInterface.sBLOCKCOMPASS_TIMESTAMP_nMilliSec_set)

    def __init__(self):
        _MicroWinExecInterface.sBLOCKCOMPASS_TIMESTAMP_swiginit(self, _MicroWinExecInterface.new_sBLOCKCOMPASS_TIMESTAMP())
    __swig_destroy__ = _MicroWinExecInterface.delete_sBLOCKCOMPASS_TIMESTAMP

# Register sBLOCKCOMPASS_TIMESTAMP in _MicroWinExecInterface:
_MicroWinExecInterface.sBLOCKCOMPASS_TIMESTAMP_swigregister(sBLOCKCOMPASS_TIMESTAMP)

class sBLOCKCOMPASS_SYSTEMTIME(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    wYear = property(_MicroWinExecInterface.sBLOCKCOMPASS_SYSTEMTIME_wYear_get, _MicroWinExecInterface.sBLOCKCOMPASS_SYSTEMTIME_wYear_set)
    wMonth = property(_MicroWinExecInterface.sBLOCKCOMPASS_SYSTEMTIME_wMonth_get, _MicroWinExecInterface.sBLOCKCOMPASS_SYSTEMTIME_wMonth_set)
    wDayOfWeek = property(_MicroWinExecInterface.sBLOCKCOMPASS_SYSTEMTIME_wDayOfWeek_get, _MicroWinExecInterface.sBLOCKCOMPASS_SYSTEMTIME_wDayOfWeek_set)
    wDay = property(_MicroWinExecInterface.sBLOCKCOMPASS_SYSTEMTIME_wDay_get, _MicroWinExecInterface.sBLOCKCOMPASS_SYSTEMTIME_wDay_set)
    wHour = property(_MicroWinExecInterface.sBLOCKCOMPASS_SYSTEMTIME_wHour_get, _MicroWinExecInterface.sBLOCKCOMPASS_SYSTEMTIME_wHour_set)
    wMinute = property(_MicroWinExecInterface.sBLOCKCOMPASS_SYSTEMTIME_wMinute_get, _MicroWinExecInterface.sBLOCKCOMPASS_SYSTEMTIME_wMinute_set)
    wSecond = property(_MicroWinExecInterface.sBLOCKCOMPASS_SYSTEMTIME_wSecond_get, _MicroWinExecInterface.sBLOCKCOMPASS_SYSTEMTIME_wSecond_set)
    wMilliseconds = property(_MicroWinExecInterface.sBLOCKCOMPASS_SYSTEMTIME_wMilliseconds_get, _MicroWinExecInterface.sBLOCKCOMPASS_SYSTEMTIME_wMilliseconds_set)

    def __init__(self):
        _MicroWinExecInterface.sBLOCKCOMPASS_SYSTEMTIME_swiginit(self, _MicroWinExecInterface.new_sBLOCKCOMPASS_SYSTEMTIME())
    __swig_destroy__ = _MicroWinExecInterface.delete_sBLOCKCOMPASS_SYSTEMTIME

# Register sBLOCKCOMPASS_SYSTEMTIME in _MicroWinExecInterface:
_MicroWinExecInterface.sBLOCKCOMPASS_SYSTEMTIME_swigregister(sBLOCKCOMPASS_SYSTEMTIME)

class sBLOCKCOMPASS_INST_INFO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ePouType = property(_MicroWinExecInterface.sBLOCKCOMPASS_INST_INFO_ePouType_get, _MicroWinExecInterface.sBLOCKCOMPASS_INST_INFO_ePouType_set)
    nPouNumber = property(_MicroWinExecInterface.sBLOCKCOMPASS_INST_INFO_nPouNumber_get, _MicroWinExecInterface.sBLOCKCOMPASS_INST_INFO_nPouNumber_set)
    nNetwork = property(_MicroWinExecInterface.sBLOCKCOMPASS_INST_INFO_nNetwork_get, _MicroWinExecInterface.sBLOCKCOMPASS_INST_INFO_nNetwork_set)
    nNetworlInstOffset = property(_MicroWinExecInterface.sBLOCKCOMPASS_INST_INFO_nNetworlInstOffset_get, _MicroWinExecInterface.sBLOCKCOMPASS_INST_INFO_nNetworlInstOffset_set)
    nPouInstOffset = property(_MicroWinExecInterface.sBLOCKCOMPASS_INST_INFO_nPouInstOffset_get, _MicroWinExecInterface.sBLOCKCOMPASS_INST_INFO_nPouInstOffset_set)
    nProgramInstOffset = property(_MicroWinExecInterface.sBLOCKCOMPASS_INST_INFO_nProgramInstOffset_get, _MicroWinExecInterface.sBLOCKCOMPASS_INST_INFO_nProgramInstOffset_set)
    nByteOffset = property(_MicroWinExecInterface.sBLOCKCOMPASS_INST_INFO_nByteOffset_get, _MicroWinExecInterface.sBLOCKCOMPASS_INST_INFO_nByteOffset_set)

    def __init__(self):
        _MicroWinExecInterface.sBLOCKCOMPASS_INST_INFO_swiginit(self, _MicroWinExecInterface.new_sBLOCKCOMPASS_INST_INFO())
    __swig_destroy__ = _MicroWinExecInterface.delete_sBLOCKCOMPASS_INST_INFO

# Register sBLOCKCOMPASS_INST_INFO in _MicroWinExecInterface:
_MicroWinExecInterface.sBLOCKCOMPASS_INST_INFO_swigregister(sBLOCKCOMPASS_INST_INFO)

class sGPB200_CPU_BLOCK_INFO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dwSize = property(_MicroWinExecInterface.sGPB200_CPU_BLOCK_INFO_dwSize_get, _MicroWinExecInterface.sGPB200_CPU_BLOCK_INFO_dwSize_set)
    sCreatedTime = property(_MicroWinExecInterface.sGPB200_CPU_BLOCK_INFO_sCreatedTime_get, _MicroWinExecInterface.sGPB200_CPU_BLOCK_INFO_sCreatedTime_set)
    sModifiedTime = property(_MicroWinExecInterface.sGPB200_CPU_BLOCK_INFO_sModifiedTime_get, _MicroWinExecInterface.sGPB200_CPU_BLOCK_INFO_sModifiedTime_set)

    def __init__(self):
        _MicroWinExecInterface.sGPB200_CPU_BLOCK_INFO_swiginit(self, _MicroWinExecInterface.new_sGPB200_CPU_BLOCK_INFO())
    __swig_destroy__ = _MicroWinExecInterface.delete_sGPB200_CPU_BLOCK_INFO

# Register sGPB200_CPU_BLOCK_INFO in _MicroWinExecInterface:
_MicroWinExecInterface.sGPB200_CPU_BLOCK_INFO_swigregister(sGPB200_CPU_BLOCK_INFO)

class sGPB200_RECIPE_INFO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byaName = property(_MicroWinExecInterface.sGPB200_RECIPE_INFO_byaName_get, _MicroWinExecInterface.sGPB200_RECIPE_INFO_byaName_set)
    dwSize = property(_MicroWinExecInterface.sGPB200_RECIPE_INFO_dwSize_get, _MicroWinExecInterface.sGPB200_RECIPE_INFO_dwSize_set)
    dwDataSetSize = property(_MicroWinExecInterface.sGPB200_RECIPE_INFO_dwDataSetSize_get, _MicroWinExecInterface.sGPB200_RECIPE_INFO_dwDataSetSize_set)
    dwDataSetCount = property(_MicroWinExecInterface.sGPB200_RECIPE_INFO_dwDataSetCount_get, _MicroWinExecInterface.sGPB200_RECIPE_INFO_dwDataSetCount_set)
    sCreatedTime = property(_MicroWinExecInterface.sGPB200_RECIPE_INFO_sCreatedTime_get, _MicroWinExecInterface.sGPB200_RECIPE_INFO_sCreatedTime_set)
    sModifiedTime = property(_MicroWinExecInterface.sGPB200_RECIPE_INFO_sModifiedTime_get, _MicroWinExecInterface.sGPB200_RECIPE_INFO_sModifiedTime_set)

    def __init__(self):
        _MicroWinExecInterface.sGPB200_RECIPE_INFO_swiginit(self, _MicroWinExecInterface.new_sGPB200_RECIPE_INFO())
    __swig_destroy__ = _MicroWinExecInterface.delete_sGPB200_RECIPE_INFO

# Register sGPB200_RECIPE_INFO in _MicroWinExecInterface:
_MicroWinExecInterface.sGPB200_RECIPE_INFO_swigregister(sGPB200_RECIPE_INFO)

class sGPB200_USER_FILE_INFO(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    byaName = property(_MicroWinExecInterface.sGPB200_USER_FILE_INFO_byaName_get, _MicroWinExecInterface.sGPB200_USER_FILE_INFO_byaName_set)
    dwSize = property(_MicroWinExecInterface.sGPB200_USER_FILE_INFO_dwSize_get, _MicroWinExecInterface.sGPB200_USER_FILE_INFO_dwSize_set)
    dwCompressedSize = property(_MicroWinExecInterface.sGPB200_USER_FILE_INFO_dwCompressedSize_get, _MicroWinExecInterface.sGPB200_USER_FILE_INFO_dwCompressedSize_set)
    dwArea3Offset = property(_MicroWinExecInterface.sGPB200_USER_FILE_INFO_dwArea3Offset_get, _MicroWinExecInterface.sGPB200_USER_FILE_INFO_dwArea3Offset_set)
    sCreatedTime = property(_MicroWinExecInterface.sGPB200_USER_FILE_INFO_sCreatedTime_get, _MicroWinExecInterface.sGPB200_USER_FILE_INFO_sCreatedTime_set)
    sModifiedTime = property(_MicroWinExecInterface.sGPB200_USER_FILE_INFO_sModifiedTime_get, _MicroWinExecInterface.sGPB200_USER_FILE_INFO_sModifiedTime_set)

    def __init__(self):
        _MicroWinExecInterface.sGPB200_USER_FILE_INFO_swiginit(self, _MicroWinExecInterface.new_sGPB200_USER_FILE_INFO())
    __swig_destroy__ = _MicroWinExecInterface.delete_sGPB200_USER_FILE_INFO

# Register sGPB200_USER_FILE_INFO in _MicroWinExecInterface:
_MicroWinExecInterface.sGPB200_USER_FILE_INFO_swigregister(sGPB200_USER_FILE_INFO)

class CByteArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MicroWinExecInterface.CByteArray_swiginit(self, _MicroWinExecInterface.new_CByteArray())

    def GetSize(self):
        return _MicroWinExecInterface.CByteArray_GetSize(self)

    def GetCount(self):
        return _MicroWinExecInterface.CByteArray_GetCount(self)

    def IsEmpty(self):
        return _MicroWinExecInterface.CByteArray_IsEmpty(self)

    def GetUpperBound(self):
        return _MicroWinExecInterface.CByteArray_GetUpperBound(self)

    def SetSize(self, nNewSize, nGrowBy=-1):
        return _MicroWinExecInterface.CByteArray_SetSize(self, nNewSize, nGrowBy)

    def FreeExtra(self):
        return _MicroWinExecInterface.CByteArray_FreeExtra(self)

    def RemoveAll(self):
        return _MicroWinExecInterface.CByteArray_RemoveAll(self)

    def GetAt(self, nIndex):
        return _MicroWinExecInterface.CByteArray_GetAt(self, nIndex)

    def SetAt(self, nIndex, newElement):
        return _MicroWinExecInterface.CByteArray_SetAt(self, nIndex, newElement)

    def ElementAt(self, nIndex):
        return _MicroWinExecInterface.CByteArray_ElementAt(self, nIndex)

    def GetData(self, *args):
        return _MicroWinExecInterface.CByteArray_GetData(self, *args)

    def SetAtGrow(self, nIndex, newElement):
        return _MicroWinExecInterface.CByteArray_SetAtGrow(self, nIndex, newElement)

    def Add(self, newElement):
        return _MicroWinExecInterface.CByteArray_Add(self, newElement)

    def Append(self, src):
        return _MicroWinExecInterface.CByteArray_Append(self, src)

    def Copy(self, src):
        return _MicroWinExecInterface.CByteArray_Copy(self, src)

    def RemoveAt(self, nIndex, nCount=1):
        return _MicroWinExecInterface.CByteArray_RemoveAt(self, nIndex, nCount)

    def InsertAt(self, *args):
        return _MicroWinExecInterface.CByteArray_InsertAt(self, *args)
    __swig_destroy__ = _MicroWinExecInterface.delete_CByteArray

    def Serialize(self, arg2):
        return _MicroWinExecInterface.CByteArray_Serialize(self, arg2)

# Register CByteArray in _MicroWinExecInterface:
_MicroWinExecInterface.CByteArray_swigregister(CByteArray)

class CWordArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MicroWinExecInterface.CWordArray_swiginit(self, _MicroWinExecInterface.new_CWordArray())

    def GetSize(self):
        return _MicroWinExecInterface.CWordArray_GetSize(self)

    def GetCount(self):
        return _MicroWinExecInterface.CWordArray_GetCount(self)

    def IsEmpty(self):
        return _MicroWinExecInterface.CWordArray_IsEmpty(self)

    def GetUpperBound(self):
        return _MicroWinExecInterface.CWordArray_GetUpperBound(self)

    def SetSize(self, nNewSize, nGrowBy=-1):
        return _MicroWinExecInterface.CWordArray_SetSize(self, nNewSize, nGrowBy)

    def FreeExtra(self):
        return _MicroWinExecInterface.CWordArray_FreeExtra(self)

    def RemoveAll(self):
        return _MicroWinExecInterface.CWordArray_RemoveAll(self)

    def GetAt(self, nIndex):
        return _MicroWinExecInterface.CWordArray_GetAt(self, nIndex)

    def SetAt(self, nIndex, newElement):
        return _MicroWinExecInterface.CWordArray_SetAt(self, nIndex, newElement)

    def ElementAt(self, nIndex):
        return _MicroWinExecInterface.CWordArray_ElementAt(self, nIndex)

    def GetData(self, *args):
        return _MicroWinExecInterface.CWordArray_GetData(self, *args)

    def SetAtGrow(self, nIndex, newElement):
        return _MicroWinExecInterface.CWordArray_SetAtGrow(self, nIndex, newElement)

    def Add(self, newElement):
        return _MicroWinExecInterface.CWordArray_Add(self, newElement)

    def Append(self, src):
        return _MicroWinExecInterface.CWordArray_Append(self, src)

    def Copy(self, src):
        return _MicroWinExecInterface.CWordArray_Copy(self, src)

    def RemoveAt(self, nIndex, nCount=1):
        return _MicroWinExecInterface.CWordArray_RemoveAt(self, nIndex, nCount)

    def InsertAt(self, *args):
        return _MicroWinExecInterface.CWordArray_InsertAt(self, *args)
    __swig_destroy__ = _MicroWinExecInterface.delete_CWordArray

    def Serialize(self, arg2):
        return _MicroWinExecInterface.CWordArray_Serialize(self, arg2)

# Register CWordArray in _MicroWinExecInterface:
_MicroWinExecInterface.CWordArray_swigregister(CWordArray)

class CDWordArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MicroWinExecInterface.CDWordArray_swiginit(self, _MicroWinExecInterface.new_CDWordArray())

    def GetSize(self):
        return _MicroWinExecInterface.CDWordArray_GetSize(self)

    def GetCount(self):
        return _MicroWinExecInterface.CDWordArray_GetCount(self)

    def IsEmpty(self):
        return _MicroWinExecInterface.CDWordArray_IsEmpty(self)

    def GetUpperBound(self):
        return _MicroWinExecInterface.CDWordArray_GetUpperBound(self)

    def SetSize(self, nNewSize, nGrowBy=-1):
        return _MicroWinExecInterface.CDWordArray_SetSize(self, nNewSize, nGrowBy)

    def FreeExtra(self):
        return _MicroWinExecInterface.CDWordArray_FreeExtra(self)

    def RemoveAll(self):
        return _MicroWinExecInterface.CDWordArray_RemoveAll(self)

    def GetAt(self, nIndex):
        return _MicroWinExecInterface.CDWordArray_GetAt(self, nIndex)

    def SetAt(self, nIndex, newElement):
        return _MicroWinExecInterface.CDWordArray_SetAt(self, nIndex, newElement)

    def ElementAt(self, nIndex):
        return _MicroWinExecInterface.CDWordArray_ElementAt(self, nIndex)

    def GetData(self, *args):
        return _MicroWinExecInterface.CDWordArray_GetData(self, *args)

    def SetAtGrow(self, nIndex, newElement):
        return _MicroWinExecInterface.CDWordArray_SetAtGrow(self, nIndex, newElement)

    def Add(self, newElement):
        return _MicroWinExecInterface.CDWordArray_Add(self, newElement)

    def Append(self, src):
        return _MicroWinExecInterface.CDWordArray_Append(self, src)

    def Copy(self, src):
        return _MicroWinExecInterface.CDWordArray_Copy(self, src)

    def RemoveAt(self, nIndex, nCount=1):
        return _MicroWinExecInterface.CDWordArray_RemoveAt(self, nIndex, nCount)

    def InsertAt(self, *args):
        return _MicroWinExecInterface.CDWordArray_InsertAt(self, *args)
    __swig_destroy__ = _MicroWinExecInterface.delete_CDWordArray

    def Serialize(self, arg2):
        return _MicroWinExecInterface.CDWordArray_Serialize(self, arg2)

# Register CDWordArray in _MicroWinExecInterface:
_MicroWinExecInterface.CDWordArray_swigregister(CDWordArray)

class CUIntArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MicroWinExecInterface.CUIntArray_swiginit(self, _MicroWinExecInterface.new_CUIntArray())

    def GetSize(self):
        return _MicroWinExecInterface.CUIntArray_GetSize(self)

    def GetCount(self):
        return _MicroWinExecInterface.CUIntArray_GetCount(self)

    def IsEmpty(self):
        return _MicroWinExecInterface.CUIntArray_IsEmpty(self)

    def GetUpperBound(self):
        return _MicroWinExecInterface.CUIntArray_GetUpperBound(self)

    def SetSize(self, nNewSize, nGrowBy=-1):
        return _MicroWinExecInterface.CUIntArray_SetSize(self, nNewSize, nGrowBy)

    def FreeExtra(self):
        return _MicroWinExecInterface.CUIntArray_FreeExtra(self)

    def RemoveAll(self):
        return _MicroWinExecInterface.CUIntArray_RemoveAll(self)

    def GetAt(self, nIndex):
        return _MicroWinExecInterface.CUIntArray_GetAt(self, nIndex)

    def SetAt(self, nIndex, newElement):
        return _MicroWinExecInterface.CUIntArray_SetAt(self, nIndex, newElement)

    def ElementAt(self, nIndex):
        return _MicroWinExecInterface.CUIntArray_ElementAt(self, nIndex)

    def GetData(self, *args):
        return _MicroWinExecInterface.CUIntArray_GetData(self, *args)

    def SetAtGrow(self, nIndex, newElement):
        return _MicroWinExecInterface.CUIntArray_SetAtGrow(self, nIndex, newElement)

    def Add(self, newElement):
        return _MicroWinExecInterface.CUIntArray_Add(self, newElement)

    def Append(self, src):
        return _MicroWinExecInterface.CUIntArray_Append(self, src)

    def Copy(self, src):
        return _MicroWinExecInterface.CUIntArray_Copy(self, src)

    def RemoveAt(self, nIndex, nCount=1):
        return _MicroWinExecInterface.CUIntArray_RemoveAt(self, nIndex, nCount)

    def InsertAt(self, *args):
        return _MicroWinExecInterface.CUIntArray_InsertAt(self, *args)
    __swig_destroy__ = _MicroWinExecInterface.delete_CUIntArray

# Register CUIntArray in _MicroWinExecInterface:
_MicroWinExecInterface.CUIntArray_swigregister(CUIntArray)

class CPtrArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MicroWinExecInterface.CPtrArray_swiginit(self, _MicroWinExecInterface.new_CPtrArray())

    def GetSize(self):
        return _MicroWinExecInterface.CPtrArray_GetSize(self)

    def GetCount(self):
        return _MicroWinExecInterface.CPtrArray_GetCount(self)

    def IsEmpty(self):
        return _MicroWinExecInterface.CPtrArray_IsEmpty(self)

    def GetUpperBound(self):
        return _MicroWinExecInterface.CPtrArray_GetUpperBound(self)

    def SetSize(self, nNewSize, nGrowBy=-1):
        return _MicroWinExecInterface.CPtrArray_SetSize(self, nNewSize, nGrowBy)

    def FreeExtra(self):
        return _MicroWinExecInterface.CPtrArray_FreeExtra(self)

    def RemoveAll(self):
        return _MicroWinExecInterface.CPtrArray_RemoveAll(self)

    def GetAt(self, nIndex):
        return _MicroWinExecInterface.CPtrArray_GetAt(self, nIndex)

    def SetAt(self, nIndex, newElement):
        return _MicroWinExecInterface.CPtrArray_SetAt(self, nIndex, newElement)

    def ElementAt(self, nIndex):
        return _MicroWinExecInterface.CPtrArray_ElementAt(self, nIndex)

    def GetData(self, *args):
        return _MicroWinExecInterface.CPtrArray_GetData(self, *args)

    def SetAtGrow(self, nIndex, newElement):
        return _MicroWinExecInterface.CPtrArray_SetAtGrow(self, nIndex, newElement)

    def Add(self, newElement):
        return _MicroWinExecInterface.CPtrArray_Add(self, newElement)

    def Append(self, src):
        return _MicroWinExecInterface.CPtrArray_Append(self, src)

    def Copy(self, src):
        return _MicroWinExecInterface.CPtrArray_Copy(self, src)

    def RemoveAt(self, nIndex, nCount=1):
        return _MicroWinExecInterface.CPtrArray_RemoveAt(self, nIndex, nCount)

    def InsertAt(self, *args):
        return _MicroWinExecInterface.CPtrArray_InsertAt(self, *args)
    __swig_destroy__ = _MicroWinExecInterface.delete_CPtrArray

# Register CPtrArray in _MicroWinExecInterface:
_MicroWinExecInterface.CPtrArray_swigregister(CPtrArray)

class CObArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MicroWinExecInterface.CObArray_swiginit(self, _MicroWinExecInterface.new_CObArray())

    def GetSize(self):
        return _MicroWinExecInterface.CObArray_GetSize(self)

    def GetCount(self):
        return _MicroWinExecInterface.CObArray_GetCount(self)

    def IsEmpty(self):
        return _MicroWinExecInterface.CObArray_IsEmpty(self)

    def GetUpperBound(self):
        return _MicroWinExecInterface.CObArray_GetUpperBound(self)

    def SetSize(self, nNewSize, nGrowBy=-1):
        return _MicroWinExecInterface.CObArray_SetSize(self, nNewSize, nGrowBy)

    def FreeExtra(self):
        return _MicroWinExecInterface.CObArray_FreeExtra(self)

    def RemoveAll(self):
        return _MicroWinExecInterface.CObArray_RemoveAll(self)

    def GetAt(self, nIndex):
        return _MicroWinExecInterface.CObArray_GetAt(self, nIndex)

    def SetAt(self, nIndex, newElement):
        return _MicroWinExecInterface.CObArray_SetAt(self, nIndex, newElement)

    def ElementAt(self, nIndex):
        return _MicroWinExecInterface.CObArray_ElementAt(self, nIndex)

    def GetData(self, *args):
        return _MicroWinExecInterface.CObArray_GetData(self, *args)

    def SetAtGrow(self, nIndex, newElement):
        return _MicroWinExecInterface.CObArray_SetAtGrow(self, nIndex, newElement)

    def Add(self, newElement):
        return _MicroWinExecInterface.CObArray_Add(self, newElement)

    def Append(self, src):
        return _MicroWinExecInterface.CObArray_Append(self, src)

    def Copy(self, src):
        return _MicroWinExecInterface.CObArray_Copy(self, src)

    def RemoveAt(self, nIndex, nCount=1):
        return _MicroWinExecInterface.CObArray_RemoveAt(self, nIndex, nCount)

    def InsertAt(self, *args):
        return _MicroWinExecInterface.CObArray_InsertAt(self, *args)
    __swig_destroy__ = _MicroWinExecInterface.delete_CObArray

    def Serialize(self, arg2):
        return _MicroWinExecInterface.CObArray_Serialize(self, arg2)

# Register CObArray in _MicroWinExecInterface:
_MicroWinExecInterface.CObArray_swigregister(CObArray)

class CStringArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MicroWinExecInterface.CStringArray_swiginit(self, _MicroWinExecInterface.new_CStringArray())

    def GetSize(self):
        return _MicroWinExecInterface.CStringArray_GetSize(self)

    def GetCount(self):
        return _MicroWinExecInterface.CStringArray_GetCount(self)

    def IsEmpty(self):
        return _MicroWinExecInterface.CStringArray_IsEmpty(self)

    def GetUpperBound(self):
        return _MicroWinExecInterface.CStringArray_GetUpperBound(self)

    def SetSize(self, nNewSize, nGrowBy=-1):
        return _MicroWinExecInterface.CStringArray_SetSize(self, nNewSize, nGrowBy)

    def FreeExtra(self):
        return _MicroWinExecInterface.CStringArray_FreeExtra(self)

    def RemoveAll(self):
        return _MicroWinExecInterface.CStringArray_RemoveAll(self)

    def GetAt(self, nIndex):
        return _MicroWinExecInterface.CStringArray_GetAt(self, nIndex)

    def SetAt(self, *args):
        return _MicroWinExecInterface.CStringArray_SetAt(self, *args)

    def ElementAt(self, nIndex):
        return _MicroWinExecInterface.CStringArray_ElementAt(self, nIndex)

    def GetData(self, *args):
        return _MicroWinExecInterface.CStringArray_GetData(self, *args)

    def SetAtGrow(self, *args):
        return _MicroWinExecInterface.CStringArray_SetAtGrow(self, *args)

    def Add(self, *args):
        return _MicroWinExecInterface.CStringArray_Add(self, *args)

    def Append(self, src):
        return _MicroWinExecInterface.CStringArray_Append(self, src)

    def Copy(self, src):
        return _MicroWinExecInterface.CStringArray_Copy(self, src)

    def RemoveAt(self, nIndex, nCount=1):
        return _MicroWinExecInterface.CStringArray_RemoveAt(self, nIndex, nCount)

    def InsertAt(self, *args):
        return _MicroWinExecInterface.CStringArray_InsertAt(self, *args)
    __swig_destroy__ = _MicroWinExecInterface.delete_CStringArray

    def Serialize(self, arg2):
        return _MicroWinExecInterface.CStringArray_Serialize(self, arg2)

# Register CStringArray in _MicroWinExecInterface:
_MicroWinExecInterface.CStringArray_swigregister(CStringArray)

class CPtrList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nBlockSize=10):
        _MicroWinExecInterface.CPtrList_swiginit(self, _MicroWinExecInterface.new_CPtrList(nBlockSize))

    def GetCount(self):
        return _MicroWinExecInterface.CPtrList_GetCount(self)

    def GetSize(self):
        return _MicroWinExecInterface.CPtrList_GetSize(self)

    def IsEmpty(self):
        return _MicroWinExecInterface.CPtrList_IsEmpty(self)

    def GetHead(self, *args):
        return _MicroWinExecInterface.CPtrList_GetHead(self, *args)

    def GetTail(self, *args):
        return _MicroWinExecInterface.CPtrList_GetTail(self, *args)

    def RemoveHead(self):
        return _MicroWinExecInterface.CPtrList_RemoveHead(self)

    def RemoveTail(self):
        return _MicroWinExecInterface.CPtrList_RemoveTail(self)

    def AddHead(self, *args):
        return _MicroWinExecInterface.CPtrList_AddHead(self, *args)

    def AddTail(self, *args):
        return _MicroWinExecInterface.CPtrList_AddTail(self, *args)

    def RemoveAll(self):
        return _MicroWinExecInterface.CPtrList_RemoveAll(self)

    def GetHeadPosition(self):
        return _MicroWinExecInterface.CPtrList_GetHeadPosition(self)

    def GetTailPosition(self):
        return _MicroWinExecInterface.CPtrList_GetTailPosition(self)

    def GetNext(self, *args):
        return _MicroWinExecInterface.CPtrList_GetNext(self, *args)

    def GetPrev(self, *args):
        return _MicroWinExecInterface.CPtrList_GetPrev(self, *args)

    def GetAt(self, *args):
        return _MicroWinExecInterface.CPtrList_GetAt(self, *args)

    def SetAt(self, pos, newElement):
        return _MicroWinExecInterface.CPtrList_SetAt(self, pos, newElement)

    def RemoveAt(self, position):
        return _MicroWinExecInterface.CPtrList_RemoveAt(self, position)

    def InsertBefore(self, position, newElement):
        return _MicroWinExecInterface.CPtrList_InsertBefore(self, position, newElement)

    def InsertAfter(self, position, newElement):
        return _MicroWinExecInterface.CPtrList_InsertAfter(self, position, newElement)

    def Find(self, searchValue, startAfter=None):
        return _MicroWinExecInterface.CPtrList_Find(self, searchValue, startAfter)

    def FindIndex(self, nIndex):
        return _MicroWinExecInterface.CPtrList_FindIndex(self, nIndex)
    __swig_destroy__ = _MicroWinExecInterface.delete_CPtrList

# Register CPtrList in _MicroWinExecInterface:
_MicroWinExecInterface.CPtrList_swigregister(CPtrList)

class CObList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nBlockSize=10):
        _MicroWinExecInterface.CObList_swiginit(self, _MicroWinExecInterface.new_CObList(nBlockSize))

    def GetCount(self):
        return _MicroWinExecInterface.CObList_GetCount(self)

    def GetSize(self):
        return _MicroWinExecInterface.CObList_GetSize(self)

    def IsEmpty(self):
        return _MicroWinExecInterface.CObList_IsEmpty(self)

    def GetHead(self, *args):
        return _MicroWinExecInterface.CObList_GetHead(self, *args)

    def GetTail(self, *args):
        return _MicroWinExecInterface.CObList_GetTail(self, *args)

    def RemoveHead(self):
        return _MicroWinExecInterface.CObList_RemoveHead(self)

    def RemoveTail(self):
        return _MicroWinExecInterface.CObList_RemoveTail(self)

    def AddHead(self, *args):
        return _MicroWinExecInterface.CObList_AddHead(self, *args)

    def AddTail(self, *args):
        return _MicroWinExecInterface.CObList_AddTail(self, *args)

    def RemoveAll(self):
        return _MicroWinExecInterface.CObList_RemoveAll(self)

    def GetHeadPosition(self):
        return _MicroWinExecInterface.CObList_GetHeadPosition(self)

    def GetTailPosition(self):
        return _MicroWinExecInterface.CObList_GetTailPosition(self)

    def GetNext(self, *args):
        return _MicroWinExecInterface.CObList_GetNext(self, *args)

    def GetPrev(self, *args):
        return _MicroWinExecInterface.CObList_GetPrev(self, *args)

    def GetAt(self, *args):
        return _MicroWinExecInterface.CObList_GetAt(self, *args)

    def SetAt(self, pos, newElement):
        return _MicroWinExecInterface.CObList_SetAt(self, pos, newElement)

    def RemoveAt(self, position):
        return _MicroWinExecInterface.CObList_RemoveAt(self, position)

    def InsertBefore(self, position, newElement):
        return _MicroWinExecInterface.CObList_InsertBefore(self, position, newElement)

    def InsertAfter(self, position, newElement):
        return _MicroWinExecInterface.CObList_InsertAfter(self, position, newElement)

    def Find(self, searchValue, startAfter=None):
        return _MicroWinExecInterface.CObList_Find(self, searchValue, startAfter)

    def FindIndex(self, nIndex):
        return _MicroWinExecInterface.CObList_FindIndex(self, nIndex)
    __swig_destroy__ = _MicroWinExecInterface.delete_CObList

    def Serialize(self, arg2):
        return _MicroWinExecInterface.CObList_Serialize(self, arg2)

# Register CObList in _MicroWinExecInterface:
_MicroWinExecInterface.CObList_swigregister(CObList)

class CStringList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nBlockSize=10):
        _MicroWinExecInterface.CStringList_swiginit(self, _MicroWinExecInterface.new_CStringList(nBlockSize))

    def GetCount(self):
        return _MicroWinExecInterface.CStringList_GetCount(self)

    def GetSize(self):
        return _MicroWinExecInterface.CStringList_GetSize(self)

    def IsEmpty(self):
        return _MicroWinExecInterface.CStringList_IsEmpty(self)

    def GetHead(self, *args):
        return _MicroWinExecInterface.CStringList_GetHead(self, *args)

    def GetTail(self, *args):
        return _MicroWinExecInterface.CStringList_GetTail(self, *args)

    def RemoveHead(self):
        return _MicroWinExecInterface.CStringList_RemoveHead(self)

    def RemoveTail(self):
        return _MicroWinExecInterface.CStringList_RemoveTail(self)

    def AddHead(self, *args):
        return _MicroWinExecInterface.CStringList_AddHead(self, *args)

    def AddTail(self, *args):
        return _MicroWinExecInterface.CStringList_AddTail(self, *args)

    def RemoveAll(self):
        return _MicroWinExecInterface.CStringList_RemoveAll(self)

    def GetHeadPosition(self):
        return _MicroWinExecInterface.CStringList_GetHeadPosition(self)

    def GetTailPosition(self):
        return _MicroWinExecInterface.CStringList_GetTailPosition(self)

    def GetNext(self, *args):
        return _MicroWinExecInterface.CStringList_GetNext(self, *args)

    def GetPrev(self, *args):
        return _MicroWinExecInterface.CStringList_GetPrev(self, *args)

    def GetAt(self, *args):
        return _MicroWinExecInterface.CStringList_GetAt(self, *args)

    def SetAt(self, *args):
        return _MicroWinExecInterface.CStringList_SetAt(self, *args)

    def RemoveAt(self, position):
        return _MicroWinExecInterface.CStringList_RemoveAt(self, position)

    def InsertBefore(self, *args):
        return _MicroWinExecInterface.CStringList_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        return _MicroWinExecInterface.CStringList_InsertAfter(self, *args)

    def Find(self, searchValue, startAfter=None):
        return _MicroWinExecInterface.CStringList_Find(self, searchValue, startAfter)

    def FindIndex(self, nIndex):
        return _MicroWinExecInterface.CStringList_FindIndex(self, nIndex)
    __swig_destroy__ = _MicroWinExecInterface.delete_CStringList

    def Serialize(self, arg2):
        return _MicroWinExecInterface.CStringList_Serialize(self, arg2)

# Register CStringList in _MicroWinExecInterface:
_MicroWinExecInterface.CStringList_swigregister(CStringList)

DIALOG_CLEARCPU = _MicroWinExecInterface.DIALOG_CLEARCPU
DIALOG_COMPARE = _MicroWinExecInterface.DIALOG_COMPARE
DIALOG_DOWNLOAD = _MicroWinExecInterface.DIALOG_DOWNLOAD
DIALOG_ENTER_PASSWORD = _MicroWinExecInterface.DIALOG_ENTER_PASSWORD
DIALOG_MULTIPLE_SCANS = _MicroWinExecInterface.DIALOG_MULTIPLE_SCANS
DIALOG_TIME_OF_DAY = _MicroWinExecInterface.DIALOG_TIME_OF_DAY
DIALOG_UPLOAD = _MicroWinExecInterface.DIALOG_UPLOAD
DIALOG_FIND_REPLACE = _MicroWinExecInterface.DIALOG_FIND_REPLACE
DIALOG_XREF = _MicroWinExecInterface.DIALOG_XREF
MAX_DIALOG = _MicroWinExecInterface.MAX_DIALOG
class BLOCK_SELECT_DLG_OPTIONS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MicroWinExecInterface.BLOCK_SELECT_DLG_OPTIONS_swiginit(self, _MicroWinExecInterface.new_BLOCK_SELECT_DLG_OPTIONS(*args))
    cNetInfo = property(_MicroWinExecInterface.BLOCK_SELECT_DLG_OPTIONS_cNetInfo_get, _MicroWinExecInterface.BLOCK_SELECT_DLG_OPTIONS_cNetInfo_set)
    strDeviceType = property(_MicroWinExecInterface.BLOCK_SELECT_DLG_OPTIONS_strDeviceType_get, _MicroWinExecInterface.BLOCK_SELECT_DLG_OPTIONS_strDeviceType_set)
    ProgramCodeBlock = property(_MicroWinExecInterface.BLOCK_SELECT_DLG_OPTIONS_ProgramCodeBlock_get, _MicroWinExecInterface.BLOCK_SELECT_DLG_OPTIONS_ProgramCodeBlock_set)
    enableProgramBlockChoice = property(_MicroWinExecInterface.BLOCK_SELECT_DLG_OPTIONS_enableProgramBlockChoice_get, _MicroWinExecInterface.BLOCK_SELECT_DLG_OPTIONS_enableProgramBlockChoice_set)
    DataBlock = property(_MicroWinExecInterface.BLOCK_SELECT_DLG_OPTIONS_DataBlock_get, _MicroWinExecInterface.BLOCK_SELECT_DLG_OPTIONS_DataBlock_set)
    enableDataBlockChoice = property(_MicroWinExecInterface.BLOCK_SELECT_DLG_OPTIONS_enableDataBlockChoice_get, _MicroWinExecInterface.BLOCK_SELECT_DLG_OPTIONS_enableDataBlockChoice_set)
    SystemDataBlock = property(_MicroWinExecInterface.BLOCK_SELECT_DLG_OPTIONS_SystemDataBlock_get, _MicroWinExecInterface.BLOCK_SELECT_DLG_OPTIONS_SystemDataBlock_set)
    enableSystemDataBlockChoice = property(_MicroWinExecInterface.BLOCK_SELECT_DLG_OPTIONS_enableSystemDataBlockChoice_get, _MicroWinExecInterface.BLOCK_SELECT_DLG_OPTIONS_enableSystemDataBlockChoice_set)
    bDownloadInRUN = property(_MicroWinExecInterface.BLOCK_SELECT_DLG_OPTIONS_bDownloadInRUN_get, _MicroWinExecInterface.BLOCK_SELECT_DLG_OPTIONS_bDownloadInRUN_set)
    bEnableDownloadInRUN = property(_MicroWinExecInterface.BLOCK_SELECT_DLG_OPTIONS_bEnableDownloadInRUN_get, _MicroWinExecInterface.BLOCK_SELECT_DLG_OPTIONS_bEnableDownloadInRUN_set)
    __swig_destroy__ = _MicroWinExecInterface.delete_BLOCK_SELECT_DLG_OPTIONS

# Register BLOCK_SELECT_DLG_OPTIONS in _MicroWinExecInterface:
_MicroWinExecInterface.BLOCK_SELECT_DLG_OPTIONS_swigregister(BLOCK_SELECT_DLG_OPTIONS)

class COMPARE_DLG_OPTIONS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MicroWinExecInterface.COMPARE_DLG_OPTIONS_swiginit(self, _MicroWinExecInterface.new_COMPARE_DLG_OPTIONS(*args))
    cNetInfo = property(_MicroWinExecInterface.COMPARE_DLG_OPTIONS_cNetInfo_get, _MicroWinExecInterface.COMPARE_DLG_OPTIONS_cNetInfo_set)
    strDeviceType = property(_MicroWinExecInterface.COMPARE_DLG_OPTIONS_strDeviceType_get, _MicroWinExecInterface.COMPARE_DLG_OPTIONS_strDeviceType_set)
    ProgramCodeBlock = property(_MicroWinExecInterface.COMPARE_DLG_OPTIONS_ProgramCodeBlock_get, _MicroWinExecInterface.COMPARE_DLG_OPTIONS_ProgramCodeBlock_set)
    DataBlock = property(_MicroWinExecInterface.COMPARE_DLG_OPTIONS_DataBlock_get, _MicroWinExecInterface.COMPARE_DLG_OPTIONS_DataBlock_set)
    SystemDataBlock = property(_MicroWinExecInterface.COMPARE_DLG_OPTIONS_SystemDataBlock_get, _MicroWinExecInterface.COMPARE_DLG_OPTIONS_SystemDataBlock_set)
    Recipes = property(_MicroWinExecInterface.COMPARE_DLG_OPTIONS_Recipes_get, _MicroWinExecInterface.COMPARE_DLG_OPTIONS_Recipes_set)
    DataLogs = property(_MicroWinExecInterface.COMPARE_DLG_OPTIONS_DataLogs_get, _MicroWinExecInterface.COMPARE_DLG_OPTIONS_DataLogs_set)
    __swig_destroy__ = _MicroWinExecInterface.delete_COMPARE_DLG_OPTIONS

# Register COMPARE_DLG_OPTIONS in _MicroWinExecInterface:
_MicroWinExecInterface.COMPARE_DLG_OPTIONS_swigregister(COMPARE_DLG_OPTIONS)

class COMPARE_RESULTS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cObResults = property(_MicroWinExecInterface.COMPARE_RESULTS_cObResults_get)
    cDbResults = property(_MicroWinExecInterface.COMPARE_RESULTS_cDbResults_get)
    cSdbResults = property(_MicroWinExecInterface.COMPARE_RESULTS_cSdbResults_get)
    cRecipesResults = property(_MicroWinExecInterface.COMPARE_RESULTS_cRecipesResults_get)
    cDataLogsResults = property(_MicroWinExecInterface.COMPARE_RESULTS_cDataLogsResults_get)

    def __init__(self):
        _MicroWinExecInterface.COMPARE_RESULTS_swiginit(self, _MicroWinExecInterface.new_COMPARE_RESULTS())
    __swig_destroy__ = _MicroWinExecInterface.delete_COMPARE_RESULTS

# Register COMPARE_RESULTS in _MicroWinExecInterface:
_MicroWinExecInterface.COMPARE_RESULTS_swigregister(COMPARE_RESULTS)

class ENTER_PASSWORD_DLG_OPTIONS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Password = property(_MicroWinExecInterface.ENTER_PASSWORD_DLG_OPTIONS_Password_get, _MicroWinExecInterface.ENTER_PASSWORD_DLG_OPTIONS_Password_set)

    def __init__(self):
        _MicroWinExecInterface.ENTER_PASSWORD_DLG_OPTIONS_swiginit(self, _MicroWinExecInterface.new_ENTER_PASSWORD_DLG_OPTIONS())
    __swig_destroy__ = _MicroWinExecInterface.delete_ENTER_PASSWORD_DLG_OPTIONS

# Register ENTER_PASSWORD_DLG_OPTIONS in _MicroWinExecInterface:
_MicroWinExecInterface.ENTER_PASSWORD_DLG_OPTIONS_swigregister(ENTER_PASSWORD_DLG_OPTIONS)

class MULTIPLE_SCANS_DLG_OPTIONS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _MicroWinExecInterface.MULTIPLE_SCANS_DLG_OPTIONS_swiginit(self, _MicroWinExecInterface.new_MULTIPLE_SCANS_DLG_OPTIONS())
    NumScans = property(_MicroWinExecInterface.MULTIPLE_SCANS_DLG_OPTIONS_NumScans_get, _MicroWinExecInterface.MULTIPLE_SCANS_DLG_OPTIONS_NumScans_set)
    __swig_destroy__ = _MicroWinExecInterface.delete_MULTIPLE_SCANS_DLG_OPTIONS

# Register MULTIPLE_SCANS_DLG_OPTIONS in _MicroWinExecInterface:
_MicroWinExecInterface.MULTIPLE_SCANS_DLG_OPTIONS_swigregister(MULTIPLE_SCANS_DLG_OPTIONS)

class TIME_OF_DAY_DLG_OPTIONS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MicroWinExecInterface.TIME_OF_DAY_DLG_OPTIONS_swiginit(self, _MicroWinExecInterface.new_TIME_OF_DAY_DLG_OPTIONS(*args))
    cNetInfo = property(_MicroWinExecInterface.TIME_OF_DAY_DLG_OPTIONS_cNetInfo_get, _MicroWinExecInterface.TIME_OF_DAY_DLG_OPTIONS_cNetInfo_set)
    strDeviceType = property(_MicroWinExecInterface.TIME_OF_DAY_DLG_OPTIONS_strDeviceType_get, _MicroWinExecInterface.TIME_OF_DAY_DLG_OPTIONS_strDeviceType_set)
    format24 = property(_MicroWinExecInterface.TIME_OF_DAY_DLG_OPTIONS_format24_get, _MicroWinExecInterface.TIME_OF_DAY_DLG_OPTIONS_format24_set)
    format12 = property(_MicroWinExecInterface.TIME_OF_DAY_DLG_OPTIONS_format12_get, _MicroWinExecInterface.TIME_OF_DAY_DLG_OPTIONS_format12_set)
    __swig_destroy__ = _MicroWinExecInterface.delete_TIME_OF_DAY_DLG_OPTIONS

# Register TIME_OF_DAY_DLG_OPTIONS in _MicroWinExecInterface:
_MicroWinExecInterface.TIME_OF_DAY_DLG_OPTIONS_swigregister(TIME_OF_DAY_DLG_OPTIONS)


def malloc(nbytes):
    return _MicroWinExecInterface.malloc(nbytes)

def free(arg1):
    return _MicroWinExecInterface.free(arg1)

def test_InitEnv(strErrMsg):
    return _MicroWinExecInterface.test_InitEnv(strErrMsg)

def test_GetMicroWinVersion(rRevisionType, rMajVer, MinVer, rSP, rHF, rIncNo, rBldNo):
    return _MicroWinExecInterface.test_GetMicroWinVersion(rRevisionType, rMajVer, MinVer, rSP, rHF, rIncNo, rBldNo)

def test_CreateSession(ipAddress, subNetMask, errorMsg):
    return _MicroWinExecInterface.test_CreateSession(ipAddress, subNetMask, errorMsg)

def test_OpenConnection(destNetworkInfo, accessPoint, eBaudRate, bEthernet):
    return _MicroWinExecInterface.test_OpenConnection(destNetworkInfo, accessPoint, eBaudRate, bEthernet)

def GRID_OpenPOU(pouId, netNumber):
    return _MicroWinExecInterface.GRID_OpenPOU(pouId, netNumber)

def GRID_GetHelpId(pouId, netNumber, row, col, rHelpId):
    return _MicroWinExecInterface.GRID_GetHelpId(pouId, netNumber, row, col, rHelpId)

def GRID_CloseCurrentNetwork():
    return _MicroWinExecInterface.GRID_CloseCurrentNetwork()

def GRID_GetNetworkDimensions(pouId, netNumber, pNumRows, pNumCols, pPrintCols):
    return _MicroWinExecInterface.GRID_GetNetworkDimensions(pouId, netNumber, pNumRows, pNumCols, pPrintCols)

def GRID_GetPOUDimensions(pouId, pNumCols):
    return _MicroWinExecInterface.GRID_GetPOUDimensions(pouId, pNumCols)

def GRID_InsertRow(pouId, netNumber, row, col):
    return _MicroWinExecInterface.GRID_InsertRow(pouId, netNumber, row, col)

def GRID_DeleteRow(pouId, netNumber, row, col):
    return _MicroWinExecInterface.GRID_DeleteRow(pouId, netNumber, row, col)

def GRID_InsertColumn(pouId, netNumber, row, col):
    return _MicroWinExecInterface.GRID_InsertColumn(pouId, netNumber, row, col)

def GRID_DeleteColumn(pouId, netNumber, row, col):
    return _MicroWinExecInterface.GRID_DeleteColumn(pouId, netNumber, row, col)

def GRID_SizeCursor(arg1, arg2, arg3, arg4):
    return _MicroWinExecInterface.GRID_SizeCursor(arg1, arg2, arg3, arg4)

def GRID_SizeVisibleRectangle(pouId, netNumber, cellLoc, pVisibleRect):
    return _MicroWinExecInterface.GRID_SizeVisibleRectangle(pouId, netNumber, cellLoc, pVisibleRect)

def GRID_GetElement(*args):
    return _MicroWinExecInterface.GRID_GetElement(*args)

def GRID_CanDropInstruction(arg1, arg2, arg3, arg4, arg5, arg6, arg7):
    return _MicroWinExecInterface.GRID_CanDropInstruction(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

def GRID_SetElementInst(pouId, netNumber, opLoc, instID, instNumber, editMode, arg7, arg8):
    return _MicroWinExecInterface.GRID_SetElementInst(pouId, netNumber, opLoc, instID, instNumber, editMode, arg7, arg8)

def GRID_CutSelection(selection, newCursorLocation):
    return _MicroWinExecInterface.GRID_CutSelection(selection, newCursorLocation)

def GRID_CopySelection(selection):
    return _MicroWinExecInterface.GRID_CopySelection(selection)

def GRID_SetSubbranch(pouId, netNumber, cLoc, pCursorLoc, pVisibleRect):
    return _MicroWinExecInterface.GRID_SetSubbranch(pouId, netNumber, cLoc, pCursorLoc, pVisibleRect)

def GRID_SetVertical(pouId, netNumber, cLoc, setVert, arg5, arg6):
    return _MicroWinExecInterface.GRID_SetVertical(pouId, netNumber, cLoc, setVert, arg5, arg6)

def GRID_DeleteVertical(pouId, netNumber, cLoc, delVert):
    return _MicroWinExecInterface.GRID_DeleteVertical(pouId, netNumber, cLoc, delVert)

def GRID_CanChangeVertical(pouId, netNumber, cLoc, pCanInsertVertical, pCanDeleteVertical):
    return _MicroWinExecInterface.GRID_CanChangeVertical(pouId, netNumber, cLoc, pCanInsertVertical, pCanDeleteVertical)

def GRID_GetClosestElement(pouId, rect, pNet, pCellLoc):
    return _MicroWinExecInterface.GRID_GetClosestElement(pouId, rect, pNet, pCellLoc)

def GRID_GetNextElementLoc(pouId, rect, curNet, curCellLoc, pNextNet, pNextCellLoc):
    return _MicroWinExecInterface.GRID_GetNextElementLoc(pouId, rect, curNet, curCellLoc, pNextNet, pNextCellLoc)

def GRID_DeleteSelection(selection, newCursorLocation):
    return _MicroWinExecInterface.GRID_DeleteSelection(selection, newCursorLocation)

def GRID_CanSetSubbranch(pouId, netNumber, cLoc, pCanSetSubbranch):
    return _MicroWinExecInterface.GRID_CanSetSubbranch(pouId, netNumber, cLoc, pCanSetSubbranch)

def GRID_PasteSelection(selection, editMode, pCursorLoc, pVisibleRect):
    return _MicroWinExecInterface.GRID_PasteSelection(selection, editMode, pCursorLoc, pVisibleRect)

def GRID_DragDrop(pPreviousSelection, bDeletePrevious, selection, editMode, pCursorLoc, pVisibleRect):
    return _MicroWinExecInterface.GRID_DragDrop(pPreviousSelection, bDeletePrevious, selection, editMode, pCursorLoc, pVisibleRect)

def GRID_IsOperand(pouId, netNumber, opLoc, pIsParam):
    return _MicroWinExecInterface.GRID_IsOperand(pouId, netNumber, opLoc, pIsParam)

def GRID_GetOperand(pouId, netNumber, opLoc, rElem):
    return _MicroWinExecInterface.GRID_GetOperand(pouId, netNumber, opLoc, rElem)

def GRID_SetOperand(pouId, netNumber, opLoc, pOperand):
    return _MicroWinExecInterface.GRID_SetOperand(pouId, netNumber, opLoc, pOperand)

def GRID_GetClosestOperand(pouId, rect, pNet, pOpLoc):
    return _MicroWinExecInterface.GRID_GetClosestOperand(pouId, rect, pNet, pOpLoc)

def GRID_GetClosestInstOperand(pouId, curNet, curCellLoc, pOpLoc):
    return _MicroWinExecInterface.GRID_GetClosestInstOperand(pouId, curNet, curCellLoc, pOpLoc)

def GRID_GetNextOperandLoc(pouId, rect, curNet, curOpLoc, pNextNet, pNextOpLoc):
    return _MicroWinExecInterface.GRID_GetNextOperandLoc(pouId, rect, curNet, curOpLoc, pNextNet, pNextOpLoc)

def GRID_GetNextInstOperandLoc(pouId, netNumber, curOpLoc, pNextOpLoc):
    return _MicroWinExecInterface.GRID_GetNextInstOperandLoc(pouId, netNumber, curOpLoc, pNextOpLoc)

def GRID_GetOperandFlags(pouId, netNumber, opLoc, pOpFlags):
    return _MicroWinExecInterface.GRID_GetOperandFlags(pouId, netNumber, opLoc, pOpFlags)

def GRID_GetOperandDataType(pouId, netNumber, opLoc, rDataType, memArea):
    return _MicroWinExecInterface.GRID_GetOperandDataType(pouId, netNumber, opLoc, rDataType, memArea)

def GRID_WriteOperand(pouId, netNumber, opLoc, strValue):
    return _MicroWinExecInterface.GRID_WriteOperand(pouId, netNumber, opLoc, strValue)

def GRID_ForceOperand(pouId, netNumber, opLoc, strValue):
    return _MicroWinExecInterface.GRID_ForceOperand(pouId, netNumber, opLoc, strValue)

def GRID_UnforceOperand(pouId, netNumber, opLoc):
    return _MicroWinExecInterface.GRID_UnforceOperand(pouId, netNumber, opLoc)

def GRID_IsTriggerPaused(pbTriggered):
    return _MicroWinExecInterface.GRID_IsTriggerPaused(pbTriggered)

def GRID_PauseTrigger(bPause):
    return _MicroWinExecInterface.GRID_PauseTrigger(bPause)

def GRID_IsHotSpot(pouId, netNumber, rHotSpot, rValid):
    return _MicroWinExecInterface.GRID_IsHotSpot(pouId, netNumber, rHotSpot, rValid)

def GRID_CanConnectHotSpots(pouId, netNumber, rStart, rEnd, rValid):
    return _MicroWinExecInterface.GRID_CanConnectHotSpots(pouId, netNumber, rStart, rEnd, rValid)

def GRID_ConnectHotSpots(pouId, netNumber, rStart, rEnd):
    return _MicroWinExecInterface.GRID_ConnectHotSpots(pouId, netNumber, rStart, rEnd)

def POU_GetVersion(rPouId, strVersion):
    return _MicroWinExecInterface.POU_GetVersion(rPouId, strVersion)

def POU_SetVersion(rPouId, strVersion):
    return _MicroWinExecInterface.POU_SetVersion(rPouId, strVersion)

def POU_GenerateDependencyList(rPouId):
    return _MicroWinExecInterface.POU_GenerateDependencyList(rPouId)

def POU_GetNumDependencies(rPouId, rnNumDepend):
    return _MicroWinExecInterface.POU_GetNumDependencies(rPouId, rnNumDepend)

def POU_GetDependencyAt(rPouId, nIndex, rRefPouId, strName):
    return _MicroWinExecInterface.POU_GetDependencyAt(rPouId, nIndex, rRefPouId, strName)

def POU_CompileNetwork(rPouId, wNetIdx, rErrorCount, rNetSize, rReLoad, rNetLang):
    return _MicroWinExecInterface.POU_CompileNetwork(rPouId, wNetIdx, rErrorCount, rNetSize, rReLoad, rNetLang)

def POU_CompilePou(rPouId, wErrorCount, rBlockSize, bReLoad):
    return _MicroWinExecInterface.POU_CompilePou(rPouId, wErrorCount, rBlockSize, bReLoad)

def POU_CompilePous(rErrorCount, rSize, bReLoad):
    return _MicroWinExecInterface.POU_CompilePous(rErrorCount, rSize, bReLoad)

def POU_PostCompile(wErrorCount):
    return _MicroWinExecInterface.POU_PostCompile(wErrorCount)

def POU_ReverseCompileNetwork(rPouId, wNetIdx):
    return _MicroWinExecInterface.POU_ReverseCompileNetwork(rPouId, wNetIdx)

def POU_ReverseCompilePou(rPouId):
    return _MicroWinExecInterface.POU_ReverseCompilePou(rPouId)

def POU_ReverseCompilePous():
    return _MicroWinExecInterface.POU_ReverseCompilePous()

def POU_IsExecutionStatusOn(rState):
    return _MicroWinExecInterface.POU_IsExecutionStatusOn(rState)

def POU_IsPLCInRunMode(rPLCMode):
    return _MicroWinExecInterface.POU_IsPLCInRunMode(rPLCMode)

def POU_PrepPouForEditor(rPouId, rEditorType):
    return _MicroWinExecInterface.POU_PrepPouForEditor(rPouId, rEditorType)

def POU_PrepPousForEditor(rEditorType):
    return _MicroWinExecInterface.POU_PrepPousForEditor(rEditorType)

def POU_GetComment(rPouId, rComment):
    return _MicroWinExecInterface.POU_GetComment(rPouId, rComment)

def POU_SetComment(rPouId, rComment):
    return _MicroWinExecInterface.POU_SetComment(rPouId, rComment)

def POU_IsPasteAvailable(rIsAvailable, eType):
    return _MicroWinExecInterface.POU_IsPasteAvailable(rIsAvailable, eType)

def POU_GetNetCnt(rPouId, wCnt):
    return _MicroWinExecInterface.POU_GetNetCnt(rPouId, wCnt)

def POU_IsValidNet(rPouId, wNetIdx, bValid):
    return _MicroWinExecInterface.POU_IsValidNet(rPouId, wNetIdx, bValid)

def POU_GetLastNet(rPouId, rNetIdx):
    return _MicroWinExecInterface.POU_GetLastNet(rPouId, rNetIdx)

def POU_GetNetTitle(rPouId, wNetIdx, rTitle):
    return _MicroWinExecInterface.POU_GetNetTitle(rPouId, wNetIdx, rTitle)

def POU_SetNetTitle(rPouId, wNetIdx, rTitle):
    return _MicroWinExecInterface.POU_SetNetTitle(rPouId, wNetIdx, rTitle)

def POU_GetNetComment(rPouId, wNetIdx, rComment):
    return _MicroWinExecInterface.POU_GetNetComment(rPouId, wNetIdx, rComment)

def POU_SetNetComment(rPouId, wNetIdx, rComment):
    return _MicroWinExecInterface.POU_SetNetComment(rPouId, wNetIdx, rComment)

def POU_InsNet(rPouId, wNetIdx, wCnt):
    return _MicroWinExecInterface.POU_InsNet(rPouId, wNetIdx, wCnt)

def POU_DelNet(rPouId, wNetIdx, wCnt):
    return _MicroWinExecInterface.POU_DelNet(rPouId, wNetIdx, wCnt)

def POU_CutNet(rPouId, wNetIdx, wCnt):
    return _MicroWinExecInterface.POU_CutNet(rPouId, wNetIdx, wCnt)

def POU_CopyNet(rPouId, wNetIdx, wCnt):
    return _MicroWinExecInterface.POU_CopyNet(rPouId, wNetIdx, wCnt)

def POU_PasteNet(rPouId, wNetIdx, wCnt):
    return _MicroWinExecInterface.POU_PasteNet(rPouId, wNetIdx, wCnt)

def POU_CreateChart(rPouId, wStartNet, wEndNet, rChtId):
    return _MicroWinExecInterface.POU_CreateChart(rPouId, wStartNet, wEndNet, rChtId)

def POU_GetSITRowCnt(rPouId, wNetIdx, rCnt):
    return _MicroWinExecInterface.POU_GetSITRowCnt(rPouId, wNetIdx, rCnt)

def POU_GetSITRow(rPouId, wNetIdx, wRow, rElement):
    return _MicroWinExecInterface.POU_GetSITRow(rPouId, wNetIdx, wRow, rElement)

def POU_GetSITRowDataTypeMask(rPouId, wNetIdx, wRow, rMask):
    return _MicroWinExecInterface.POU_GetSITRowDataTypeMask(rPouId, wNetIdx, wRow, rMask)

def POU_GetVarTblHeight(rPouId, rHeight):
    return _MicroWinExecInterface.POU_GetVarTblHeight(rPouId, rHeight)

def POU_SetVarTblHeight(rPouId, nHeight):
    return _MicroWinExecInterface.POU_SetVarTblHeight(rPouId, nHeight)

def POU_IsStatusOn(bStatusOn):
    return _MicroWinExecInterface.POU_IsStatusOn(bStatusOn)

def POU_ColorStatus():
    return _MicroWinExecInterface.POU_ColorStatus()

def POU_SetStatusRegion(wndHandle, pouId, rRect):
    return _MicroWinExecInterface.POU_SetStatusRegion(wndHandle, pouId, rRect)

def POU_StatusOn(*args):
    return _MicroWinExecInterface.POU_StatusOn(*args)

def POU_StatusOff():
    return _MicroWinExecInterface.POU_StatusOff()

def POU_SetViewReady(bReady):
    return _MicroWinExecInterface.POU_SetViewReady(bReady)

def POU_SetProgramEditing(bEditing):
    return _MicroWinExecInterface.POU_SetProgramEditing(bEditing)

def POU_IsProgramEditing(bEditing):
    return _MicroWinExecInterface.POU_IsProgramEditing(bEditing)

def DB_Compile(sDbId, pBlockSize, pErrorCount):
    return _MicroWinExecInterface.DB_Compile(sDbId, pBlockSize, pErrorCount)

def DB_IsPasteAvailable(rIsAvailable, eType):
    return _MicroWinExecInterface.DB_IsPasteAvailable(rIsAvailable, eType)

def FBD_GetClosestInstTick(pouId, netNumber, curCell, pNextTickLoc, pNextTickAlign):
    return _MicroWinExecInterface.FBD_GetClosestInstTick(pouId, netNumber, curCell, pNextTickLoc, pNextTickAlign)

def FBD_GetNextInstTick(pouId, netNumber, tickCell, tickAlign, pNextTickCell, pNextTickAlign):
    return _MicroWinExecInterface.FBD_GetNextInstTick(pouId, netNumber, tickCell, tickAlign, pNextTickCell, pNextTickAlign)

def FBD_IsModifiableTick(pouId, netNumber, spineCell, eTickAlign, pIsModifiableTick):
    return _MicroWinExecInterface.FBD_IsModifiableTick(pouId, netNumber, spineCell, eTickAlign, pIsModifiableTick)

def FBD_ToggleTick(pouId, netNumber, cellLoc, eTickType, tickAlign):
    return _MicroWinExecInterface.FBD_ToggleTick(pouId, netNumber, cellLoc, eTickType, tickAlign)

def FBD_AddInputParameter(pouId, netNumber, cellLoc, pCursorLoc, pVisibleRect):
    return _MicroWinExecInterface.FBD_AddInputParameter(pouId, netNumber, cellLoc, pCursorLoc, pVisibleRect)

def FBD_RemoveInputParameter(pouId, netNumber, cellLoc, pCursorLoc, pVisibleRect):
    return _MicroWinExecInterface.FBD_RemoveInputParameter(pouId, netNumber, cellLoc, pCursorLoc, pVisibleRect)

def FBD_CanAddRemoveInputParameter(pouId, netNumber, cellLoc, bCanAdd, bCanRemove):
    return _MicroWinExecInterface.FBD_CanAddRemoveInputParameter(pouId, netNumber, cellLoc, bCanAdd, bCanRemove)

def FBD_CanToggleTick(pouId, netNumber, cellLoc, eTickAlign, pCanNegate, pCanImmediate):
    return _MicroWinExecInterface.FBD_CanToggleTick(pouId, netNumber, cellLoc, eTickAlign, pCanNegate, pCanImmediate)

def PRJ_StampCompile(eBlockType, nBlockNumber):
    return _MicroWinExecInterface.PRJ_StampCompile(eBlockType, nBlockNumber)

def PRJ_NeedsCompile(eBlockType, nBlockNumber, bNeedsCompile):
    return _MicroWinExecInterface.PRJ_NeedsCompile(eBlockType, nBlockNumber, bNeedsCompile)

def PRJ_SetAccessPoint(strAccess):
    return _MicroWinExecInterface.PRJ_SetAccessPoint(strAccess)

def PRJ_GetAccessPoint(strAccess):
    return _MicroWinExecInterface.PRJ_GetAccessPoint(strAccess)

def PRJ_GetCommCompassHostGUID(rgCommCompassHost):
    return _MicroWinExecInterface.PRJ_GetCommCompassHostGUID(rgCommCompassHost)

def PRJ_InitNewMwProject():
    return _MicroWinExecInterface.PRJ_InitNewMwProject()

def PRJ_New(pProjectPath, pEntryPoint, hMWinProject, rstrType, rstrVersion):
    return _MicroWinExecInterface.PRJ_New(pProjectPath, pEntryPoint, hMWinProject, rstrType, rstrVersion)

def PRJ_Close(hMWinProject):
    return _MicroWinExecInterface.PRJ_Close(hMWinProject)

def PRJ_ValidateProjectFile(strFileName, strPassword):
    return _MicroWinExecInterface.PRJ_ValidateProjectFile(strFileName, strPassword)

def PRJ_Open(strFileName, strPassword, strEntryPoint, hMWinProject):
    return _MicroWinExecInterface.PRJ_Open(strFileName, strPassword, strEntryPoint, hMWinProject)

def PRJ_Save():
    return _MicroWinExecInterface.PRJ_Save()

def PRJ_SaveAs(pProjectPath):
    return _MicroWinExecInterface.PRJ_SaveAs(pProjectPath)

def PRJ_GetCurrentProject(hMWinProject):
    return _MicroWinExecInterface.PRJ_GetCurrentProject(hMWinProject)

def PRJ_SetCurrentProject(hMWinProject):
    return _MicroWinExecInterface.PRJ_SetCurrentProject(hMWinProject)

def PRJ_IsPLCPasswordProtected(rUploadRestricted):
    return _MicroWinExecInterface.PRJ_IsPLCPasswordProtected(rUploadRestricted)

def PRJ_IsPLCUploadRestricted(rUploadRestricted):
    return _MicroWinExecInterface.PRJ_IsPLCUploadRestricted(rUploadRestricted)

def PRJ_GetName(strPrjName):
    return _MicroWinExecInterface.PRJ_GetName(strPrjName)

def PRJ_SetName(strPrjName):
    return _MicroWinExecInterface.PRJ_SetName(strPrjName)

def PRJ_SetPassword(strPassword, bIsSha512):
    return _MicroWinExecInterface.PRJ_SetPassword(strPassword, bIsSha512)

def PRJ_ConvertPassword(strPassword, bIsSha512):
    return _MicroWinExecInterface.PRJ_ConvertPassword(strPassword, bIsSha512)

def PRJ_IsProtected(rProtected):
    return _MicroWinExecInterface.PRJ_IsProtected(rProtected)

def PRJ_IsOpen(pOpen):
    return _MicroWinExecInterface.PRJ_IsOpen(pOpen)

def PRJ_GetProgrammingMode(pMode):
    return _MicroWinExecInterface.PRJ_GetProgrammingMode(pMode)

def PRJ_GetLanguage(rLang):
    return _MicroWinExecInterface.PRJ_GetLanguage(rLang)

def PRJ_SetLanguage(eLang):
    return _MicroWinExecInterface.PRJ_SetLanguage(eLang)

def PRJ_GetEditor(pEditorType):
    return _MicroWinExecInterface.PRJ_GetEditor(pEditorType)

def PRJ_SetEditor(EditorType):
    return _MicroWinExecInterface.PRJ_SetEditor(EditorType)

def PRJ_GetAddressMode(eAddressMode):
    return _MicroWinExecInterface.PRJ_GetAddressMode(eAddressMode)

def PRJ_SetAddressMode(eAddressMode):
    return _MicroWinExecInterface.PRJ_SetAddressMode(eAddressMode)

def PRJ_UnforceAll():
    return _MicroWinExecInterface.PRJ_UnforceAll()

def PRJ_GetPrintProperties(pPrintProperties):
    return _MicroWinExecInterface.PRJ_GetPrintProperties(pPrintProperties)

def PRJ_SetPrintProperties(printProperties):
    return _MicroWinExecInterface.PRJ_SetPrintProperties(printProperties)

def PRJ_GetLadPrintOptions(pOptions):
    return _MicroWinExecInterface.PRJ_GetLadPrintOptions(pOptions)

def PRJ_SetLadPrintOptions(Options):
    return _MicroWinExecInterface.PRJ_SetLadPrintOptions(Options)

def PRJ_GetFBDPrintOptions(pOptions):
    return _MicroWinExecInterface.PRJ_GetFBDPrintOptions(pOptions)

def PRJ_SetFBDPrintOptions(Options):
    return _MicroWinExecInterface.PRJ_SetFBDPrintOptions(Options)

def PRJ_GetSTLPrintOptions(pOptions):
    return _MicroWinExecInterface.PRJ_GetSTLPrintOptions(pOptions)

def PRJ_SetSTLPrintOptions(Options):
    return _MicroWinExecInterface.PRJ_SetSTLPrintOptions(Options)

def PRJ_GetSymPrintOptions(pOptions):
    return _MicroWinExecInterface.PRJ_GetSymPrintOptions(pOptions)

def PRJ_SetSymPrintOptions(Options):
    return _MicroWinExecInterface.PRJ_SetSymPrintOptions(Options)

def PRJ_GetChtPrintOptions(pOptions):
    return _MicroWinExecInterface.PRJ_GetChtPrintOptions(pOptions)

def PRJ_SetChtPrintOptions(Options):
    return _MicroWinExecInterface.PRJ_SetChtPrintOptions(Options)

def PRJ_GetDBPrintOptions(pOptions):
    return _MicroWinExecInterface.PRJ_GetDBPrintOptions(pOptions)

def PRJ_SetDBPrintOptions(Options):
    return _MicroWinExecInterface.PRJ_SetDBPrintOptions(Options)

def PRJ_GetRemoteAddress(rcInfo):
    return _MicroWinExecInterface.PRJ_GetRemoteAddress(rcInfo)

def PRJ_SetRemoteAddress(*args):
    return _MicroWinExecInterface.PRJ_SetRemoteAddress(*args)

def PRJ_GetBaudRate(pBaudRate):
    return _MicroWinExecInterface.PRJ_GetBaudRate(pBaudRate)

def PRJ_SetBaudRate(rate):
    return _MicroWinExecInterface.PRJ_SetBaudRate(rate)

def PRJ_GetSystemBlockData(rData):
    return _MicroWinExecInterface.PRJ_GetSystemBlockData(rData)

def PRJ_SetSystemBlockData(rData):
    return _MicroWinExecInterface.PRJ_SetSystemBlockData(rData)

def PRJ_GetPNBlockData(rData):
    return _MicroWinExecInterface.PRJ_GetPNBlockData(rData)

def PRJ_SetPNBlockData(rData):
    return _MicroWinExecInterface.PRJ_SetPNBlockData(rData)

def PRJ_IsCompactCPU(rSupported):
    return _MicroWinExecInterface.PRJ_IsCompactCPU(rSupported)

def PRJ_GetCommEntryPoint(pEntryPoint, pEntryLen):
    return _MicroWinExecInterface.PRJ_GetCommEntryPoint(pEntryPoint, pEntryLen)

def PRJ_SetCommEntryPoint(pEntryPoint):
    return _MicroWinExecInterface.PRJ_SetCommEntryPoint(pEntryPoint)

def PRJ_IsDefaultName(pIsDefault):
    return _MicroWinExecInterface.PRJ_IsDefaultName(pIsDefault)

def PRJ_SetDefaultName(bDefault):
    return _MicroWinExecInterface.PRJ_SetDefaultName(bDefault)

def PRJ_IsDirty(pIsDirty):
    return _MicroWinExecInterface.PRJ_IsDirty(pIsDirty)

def PRJ_SetDirty(isDirty):
    return _MicroWinExecInterface.PRJ_SetDirty(isDirty)

def PRJ_SetTimeStampLock(bLocked):
    return _MicroWinExecInterface.PRJ_SetTimeStampLock(bLocked)

def PRJ_DrawPanel(nID, pDC):
    return _MicroWinExecInterface.PRJ_DrawPanel(nID, pDC)

def PRJ_Import(pImportFilePath, pwErrorCount):
    return _MicroWinExecInterface.PRJ_Import(pImportFilePath, pwErrorCount)

def PRJ_Export(sPouId, pExportFilePath):
    return _MicroWinExecInterface.PRJ_Export(sPouId, pExportFilePath)

def PRJ_SwitchToSymbols():
    return _MicroWinExecInterface.PRJ_SwitchToSymbols()

def PRJ_SwitchToValues():
    return _MicroWinExecInterface.PRJ_SwitchToValues()

def PRJ_GetStatusOperandMode(pStatusMode):
    return _MicroWinExecInterface.PRJ_GetStatusOperandMode(pStatusMode)

def PRJ_SetStatusOperandMode(statusMode):
    return _MicroWinExecInterface.PRJ_SetStatusOperandMode(statusMode)

def PRJ_ValidateSystemBlock(pErrorCount, pWarningCount):
    return _MicroWinExecInterface.PRJ_ValidateSystemBlock(pErrorCount, pWarningCount)

def PRJ_IsAuthorized(pAuthorized):
    return _MicroWinExecInterface.PRJ_IsAuthorized(pAuthorized)

def PRJ_InRunModeEdit(pRME):
    return _MicroWinExecInterface.PRJ_InRunModeEdit(pRME)

def PRJ_HasPLCModeChanged(pChanged):
    return _MicroWinExecInterface.PRJ_HasPLCModeChanged(pChanged)

def PRJ_SetRunModeEdit(bRME):
    return _MicroWinExecInterface.PRJ_SetRunModeEdit(bRME)

def PRJ_IsRunModeEditSupported(pRME):
    return _MicroWinExecInterface.PRJ_IsRunModeEditSupported(pRME)

def PRJ_ComparePrjToPlcTimeStamps(pMatch):
    return _MicroWinExecInterface.PRJ_ComparePrjToPlcTimeStamps(pMatch)

def PRJ_CompareDBPrjToPlcTimeStamps(pMatch):
    return _MicroWinExecInterface.PRJ_CompareDBPrjToPlcTimeStamps(pMatch)

def PRJ_GetPrjTimeStamps(pCreateTime, pModTime):
    return _MicroWinExecInterface.PRJ_GetPrjTimeStamps(pCreateTime, pModTime)

def PRJ_GetPrjComparedTimeStamps(pCreateTime, pModTime):
    return _MicroWinExecInterface.PRJ_GetPrjComparedTimeStamps(pCreateTime, pModTime)

def PRJ_ExecuteCompare(rOptions, pResults, bCheckPouOrder, bIgnoreTimestamps):
    return _MicroWinExecInterface.PRJ_ExecuteCompare(rOptions, pResults, bCheckPouOrder, bIgnoreTimestamps)

def PRJ_GetCPUOnlyDeviceIDs(rstrType, rstrVer):
    return _MicroWinExecInterface.PRJ_GetCPUOnlyDeviceIDs(rstrType, rstrVer)

def PRJ_GetDeviceIDs(rstrType, rstrVer):
    return _MicroWinExecInterface.PRJ_GetDeviceIDs(rstrType, rstrVer)

def PRJ_SetDeviceIDs(rstrType, rstrVer):
    return _MicroWinExecInterface.PRJ_SetDeviceIDs(rstrType, rstrVer)

def PRJ_Download(eBlockType, hMainWnd=0):
    return _MicroWinExecInterface.PRJ_Download(eBlockType, hMainWnd)

def PRJ_Upload(eBlockType):
    return _MicroWinExecInterface.PRJ_Upload(eBlockType)

def PRJ_UploadPNSDB(nPNsdbData):
    return _MicroWinExecInterface.PRJ_UploadPNSDB(nPNsdbData)

def PRJ_ClearPLC(eBlockType):
    return _MicroWinExecInterface.PRJ_ClearPLC(eBlockType)

def PRJ_PreCheckDownload(*args):
    return _MicroWinExecInterface.PRJ_PreCheckDownload(*args)

def PRJ_StartStatusBar():
    return _MicroWinExecInterface.PRJ_StartStatusBar()

def PRJ_StopStatusBar():
    return _MicroWinExecInterface.PRJ_StopStatusBar()

def PRJ_StartNICDiscovery():
    return _MicroWinExecInterface.PRJ_StartNICDiscovery()

def PRJ_IsMemoryCardSupported(rIsSupported):
    return _MicroWinExecInterface.PRJ_IsMemoryCardSupported(rIsSupported)

def PRJ_IsProfinetSupported(rIsSupported):
    return _MicroWinExecInterface.PRJ_IsProfinetSupported(rIsSupported)

def PRJ_IsProfinetIDeviceSupported(rIsSupported):
    return _MicroWinExecInterface.PRJ_IsProfinetIDeviceSupported(rIsSupported)

def PRJ_IsProfinetControllerSupported(rIsSupported):
    return _MicroWinExecInterface.PRJ_IsProfinetControllerSupported(rIsSupported)

def PRJ_IsMotionABSSupported(rIsSupported):
    return _MicroWinExecInterface.PRJ_IsMotionABSSupported(rIsSupported)

def PRJ_IsPTOPWMSupported(rIsSupported):
    return _MicroWinExecInterface.PRJ_IsPTOPWMSupported(rIsSupported)

def PRJ_IsNetworkSupported(rIsSupported):
    return _MicroWinExecInterface.PRJ_IsNetworkSupported(rIsSupported)

def PRJ_IsDataLogSupported(rIsSupported):
    return _MicroWinExecInterface.PRJ_IsDataLogSupported(rIsSupported)

def PRJ_IsDataLogConfigured(rIsConfigured):
    return _MicroWinExecInterface.PRJ_IsDataLogConfigured(rIsConfigured)

def PRJ_SaveBlocksToDisk(eBlockTypes, strPath):
    return _MicroWinExecInterface.PRJ_SaveBlocksToDisk(eBlockTypes, strPath)

def PRJ_CreateValidationFile(eBlock, strPath, hashKey):
    return _MicroWinExecInterface.PRJ_CreateValidationFile(eBlock, strPath, hashKey)

def PRJ_CreateUserLibrary():
    return _MicroWinExecInterface.PRJ_CreateUserLibrary()

def PRJ_ReloadInstructionLibs():
    return _MicroWinExecInterface.PRJ_ReloadInstructionLibs()

def PRJ_LoadInstructionLibs():
    return _MicroWinExecInterface.PRJ_LoadInstructionLibs()

def PRJ_ValidateUserLibrary(*args):
    return _MicroWinExecInterface.PRJ_ValidateUserLibrary(*args)

def PRJ_VersionCheckLibraryUsage(rGuid, strResult, bReportAndFix):
    return _MicroWinExecInterface.PRJ_VersionCheckLibraryUsage(rGuid, strResult, bReportAndFix)

def PRJ_GetNumLibsInUse(rCount):
    return _MicroWinExecInterface.PRJ_GetNumLibsInUse(rCount)

def PRJ_GetLibInUseAt(nIdx, rGuid):
    return _MicroWinExecInterface.PRJ_GetLibInUseAt(nIdx, rGuid)

def PRJ_AddPNDevice(strGSDFullPathName, nDapModuleIDstr, dapModuleIdentNumber, deviceNumber):
    return _MicroWinExecInterface.PRJ_AddPNDevice(strGSDFullPathName, nDapModuleIDstr, dapModuleIdentNumber, deviceNumber)

def PRJ_AddPNModule(deviceNumber, slotNum, moduleIDstr, moduleIdentNumber):
    return _MicroWinExecInterface.PRJ_AddPNModule(deviceNumber, slotNum, moduleIDstr, moduleIdentNumber)

def PRJ_AddPNSubModule(deviceId, slotNum, subslotNubmer, submoduleIDstr, submoduleIdentNumber):
    return _MicroWinExecInterface.PRJ_AddPNSubModule(deviceId, slotNum, subslotNubmer, submoduleIDstr, submoduleIdentNumber)

def PRJ_AddPNTransferAreaSubModule(deviceId, slotNum, subslotNubmer, submoduleIDstr, submoduleIdentNumber, ioType, address, length):
    return _MicroWinExecInterface.PRJ_AddPNTransferAreaSubModule(deviceId, slotNum, subslotNubmer, submoduleIDstr, submoduleIdentNumber, ioType, address, length)

def PRJ_SetPLCPDEVProperties(plcRole, isFixedIP, plcIP, subNetMask, startupTime, plcName, strType, strVer, paraDisallowed=True):
    return _MicroWinExecInterface.PRJ_SetPLCPDEVProperties(plcRole, isFixedIP, plcIP, subNetMask, startupTime, plcName, strType, strVer, paraDisallowed)

def PRJ_SetPNDeviceProperties(deviceNumber, isIPFixed, deviceIP, deviceUpdateTime, watchdog, deviceName, paraDisallowed=False):
    return _MicroWinExecInterface.PRJ_SetPNDeviceProperties(deviceNumber, isIPFixed, deviceIP, deviceUpdateTime, watchdog, deviceName, paraDisallowed)

def PRJ_SetPNLogicAddress(deviceId, slotNum, subSlotNum, submoduleIDstr, submoduleIdentNumber, startIaddr, startQaddr):
    return _MicroWinExecInterface.PRJ_SetPNLogicAddress(deviceId, slotNum, subSlotNum, submoduleIDstr, submoduleIdentNumber, startIaddr, startQaddr)

def PRJ_SetPortProperty(deviceId, slotNum, subSlotNum, submoduleIDstr, submoduleIdentNumber, m_bPortActive, m_MAUType, m_bIsMonitored, m_bAutoNegotiated, m_bEndOfDCPEnabled, m_bEndOfPTPEnabled):
    return _MicroWinExecInterface.PRJ_SetPortProperty(deviceId, slotNum, subSlotNum, submoduleIDstr, submoduleIdentNumber, m_bPortActive, m_MAUType, m_bIsMonitored, m_bAutoNegotiated, m_bEndOfDCPEnabled, m_bEndOfPTPEnabled)

def PRJ_SetModuleParameter(deviceId, slotNum, subSlotNum, submoduleIDstr, submoduleIdentNumber, parameterRecordDataItemIndex, textId, value):
    return _MicroWinExecInterface.PRJ_SetModuleParameter(deviceId, slotNum, subSlotNum, submoduleIDstr, submoduleIdentNumber, parameterRecordDataItemIndex, textId, value)

def PRJ_AddTransferAreaToIDevice(subslotNubmer, ioType, address, length):
    return _MicroWinExecInterface.PRJ_AddTransferAreaToIDevice(subslotNubmer, ioType, address, length)

def PRJ_SetSubmoduleIMData(deviceId, slotNum, subSlotNum, submoduleIDstr, submoduleIdentNumber, im1RecordFunction, im1RecordLocation, im2Record, im3Record):
    return _MicroWinExecInterface.PRJ_SetSubmoduleIMData(deviceId, slotNum, subSlotNum, submoduleIDstr, submoduleIdentNumber, im1RecordFunction, im1RecordLocation, im2Record, im3Record)

def COM_GetAccessPointData(pAPData):
    return _MicroWinExecInterface.COM_GetAccessPointData(pAPData)

def COM_SetAccessPoint(pAPData):
    return _MicroWinExecInterface.COM_SetAccessPoint(pAPData)

def COM_SetAccessPointByName(pAccessPointName):
    return _MicroWinExecInterface.COM_SetAccessPointByName(pAccessPointName)

def COM_ConnectDCP(rstrAP, rstrNIC, rDCPItem):
    return _MicroWinExecInterface.COM_ConnectDCP(rstrAP, rstrNIC, rDCPItem)

def COM_ConnectUSB(rstrAP, rstrNIC, rDCPItem):
    return _MicroWinExecInterface.COM_ConnectUSB(rstrAP, rstrNIC, rDCPItem)

def COM_GetDeviceInformation(rcInfo):
    return _MicroWinExecInterface.COM_GetDeviceInformation(rcInfo)

def COM_GetDeviceIdentities(bAutoBaud, bNewDeviceList, paData, pnNumberOfDevices):
    return _MicroWinExecInterface.COM_GetDeviceIdentities(bAutoBaud, bNewDeviceList, paData, pnNumberOfDevices)

def COM_GetActualCPUOnlyDevice(rcInfo, rstrType, rstrVersion):
    return _MicroWinExecInterface.COM_GetActualCPUOnlyDevice(rcInfo, rstrType, rstrVersion)

def COM_GetAllTypesAndVersions(bCpuOnly, raTypesAndVersions, ePlcTypeFilter=ePLC_Filter_None):
    return _MicroWinExecInterface.COM_GetAllTypesAndVersions(bCpuOnly, raTypesAndVersions, ePlcTypeFilter)

def COM_CloseAllDevices(*args):
    return _MicroWinExecInterface.COM_CloseAllDevices(*args)

def COM_Advise(lCBHandle):
    return _MicroWinExecInterface.COM_Advise(lCBHandle)

def COM_UnAdvise(lUpdHandle):
    return _MicroWinExecInterface.COM_UnAdvise(lUpdHandle)

def COM_GetAbortHandle(dwProcessID, plAbortHandle):
    return _MicroWinExecInterface.COM_GetAbortHandle(dwProcessID, plAbortHandle)

def COM_SendPoll(rcInfo):
    return _MicroWinExecInterface.COM_SendPoll(rcInfo)

def COM_SetDSTStatus(rcInfo, psDSTStatus):
    return _MicroWinExecInterface.COM_SetDSTStatus(rcInfo, psDSTStatus)

def COM_GetDSTStatus(rcInfo, psDSTStatus):
    return _MicroWinExecInterface.COM_GetDSTStatus(rcInfo, psDSTStatus)

def COM_GetMCSize(rcInfo, psData):
    return _MicroWinExecInterface.COM_GetMCSize(rcInfo, psData)

def COM_GetEventLog(nFwMajorVersion, nFwMinorVersion, rcInfo, ppEventLog, rnNumLogs):
    return _MicroWinExecInterface.COM_GetEventLog(nFwMajorVersion, nFwMinorVersion, rcInfo, ppEventLog, rnNumLogs)

def COM_Directory1(rcInfo, rnNumofOBs, rnNumofDBs, rnNumofSDBs):
    return _MicroWinExecInterface.COM_Directory1(rcInfo, rnNumofOBs, rnNumofDBs, rnNumofSDBs)

def COM_Directory2(rcInfo, eBlockType, paData, rnNumberOfBlocks):
    return _MicroWinExecInterface.COM_Directory2(rcInfo, eBlockType, paData, rnNumberOfBlocks)

def COM_Directory3(rcInfo, eBlockType, nBlockNumber, eBlockStatus, rsData):
    return _MicroWinExecInterface.COM_Directory3(rcInfo, eBlockType, nBlockNumber, eBlockStatus, rsData)

def COM_UpdateFW(pBinary, nBytes):
    return _MicroWinExecInterface.COM_UpdateFW(pBinary, nBytes)

def COM_SetDefaultLocale(lLocaleID):
    return _MicroWinExecInterface.COM_SetDefaultLocale(lLocaleID)

def COM_RunPGPCInterface():
    return _MicroWinExecInterface.COM_RunPGPCInterface()

def COM_IsEventLogSupported(rcInfo, rbIsSupported):
    return _MicroWinExecInterface.COM_IsEventLogSupported(rcInfo, rbIsSupported)

def COM_IsAutoTuneSupported(rcInfo, rbIsSupported):
    return _MicroWinExecInterface.COM_IsAutoTuneSupported(rcInfo, rbIsSupported)

def COM_IsConnected(rbIsConnected):
    return _MicroWinExecInterface.COM_IsConnected(rbIsConnected)

def COM_GetTotalMotionAxis(rCount):
    return _MicroWinExecInterface.COM_GetTotalMotionAxis(rCount)

def COM_CloseCurrConnection():
    return _MicroWinExecInterface.COM_CloseCurrConnection()

def COM_GetVMemoryLimits(rSize):
    return _MicroWinExecInterface.COM_GetVMemoryLimits(rSize)

def COM_DisconnectAddress(rcInfo):
    return _MicroWinExecInterface.COM_DisconnectAddress(rcInfo)

def COM_IsAutoBaudPossible(rbIsAutoBaudPossible):
    return _MicroWinExecInterface.COM_IsAutoBaudPossible(rbIsAutoBaudPossible)

def COM_GetPNSupport(strType, strVer, isPNContrlSupport, isPNIDevSupport):
    return _MicroWinExecInterface.COM_GetPNSupport(strType, strVer, isPNContrlSupport, isPNIDevSupport)

def COM_GetRemoteAddress(rcInfo):
    return _MicroWinExecInterface.COM_GetRemoteAddress(rcInfo)

def COM_SetRemoteAddress(rcInfo):
    return _MicroWinExecInterface.COM_SetRemoteAddress(rcInfo)

def COM_CacheActualDevObj():
    return _MicroWinExecInterface.COM_CacheActualDevObj()

def COM_ReleaseActualDevObj():
    return _MicroWinExecInterface.COM_ReleaseActualDevObj()

def COM_PowerUpReset():
    return _MicroWinExecInterface.COM_PowerUpReset()

def COM_ProgramMC(rcInfo, rsMCData):
    return _MicroWinExecInterface.COM_ProgramMC(rcInfo, rsMCData)

def COM_CreateDataBlockFromRAM():
    return _MicroWinExecInterface.COM_CreateDataBlockFromRAM()

def COM_GetNonFatalError(*args):
    return _MicroWinExecInterface.COM_GetNonFatalError(*args)

def COM_GetModuleInformation(eModuleType, dwStartIn, dwStartOut, pIn, pOut):
    return _MicroWinExecInterface.COM_GetModuleInformation(eModuleType, dwStartIn, dwStartOut, pIn, pOut)

def COM_GetConnectedPLCPort(pPLCPort):
    return _MicroWinExecInterface.COM_GetConnectedPLCPort(pPLCPort)

def COM_GetStatusInfo(pFatalError, pNonFatalError, pMode):
    return _MicroWinExecInterface.COM_GetStatusInfo(pFatalError, pNonFatalError, pMode)

def COM_GetOpMode(pMode):
    return _MicroWinExecInterface.COM_GetOpMode(pMode)

def COM_SetOpMode(Mode):
    return _MicroWinExecInterface.COM_SetOpMode(Mode)

def COM_GetScanTimes(pScanTimes):
    return _MicroWinExecInterface.COM_GetScanTimes(pScanTimes)

def COM_ExecuteScans(*args):
    return _MicroWinExecInterface.COM_ExecuteScans(*args)

def COM_LogDownloadCompileError(errCode):
    return _MicroWinExecInterface.COM_LogDownloadCompileError(errCode)

def COM_DataRead(rcInfo, asMemory, nElements):
    return _MicroWinExecInterface.COM_DataRead(rcInfo, asMemory, nElements)

def COM_Write(rcInfo, asMemory, nElements):
    return _MicroWinExecInterface.COM_Write(rcInfo, asMemory, nElements)

def COM_DebugWrite(rcInfo, asMemory, nElements):
    return _MicroWinExecInterface.COM_DebugWrite(rcInfo, asMemory, nElements)

def COM_Force(rcInfo, asMemory, nElements):
    return _MicroWinExecInterface.COM_Force(rcInfo, asMemory, nElements)

def COM_ResetScanTimes():
    return _MicroWinExecInterface.COM_ResetScanTimes()

def COM_Authorize(password):
    return _MicroWinExecInterface.COM_Authorize(password)

def COM_DeAuthorize():
    return _MicroWinExecInterface.COM_DeAuthorize()

def COM_GetTimeDate(pTimeDate):
    return _MicroWinExecInterface.COM_GetTimeDate(pTimeDate)

def COM_SetTimeDate(pTimeDate):
    return _MicroWinExecInterface.COM_SetTimeDate(pTimeDate)

def COM_ValidPLC_InRunMode():
    return _MicroWinExecInterface.COM_ValidPLC_InRunMode()

def COM_GetDownloadProgress(pCurrent, pComplete):
    return _MicroWinExecInterface.COM_GetDownloadProgress(pCurrent, pComplete)

def COM_GetRMEInformation(rcInfo, rcRMEInfo):
    return _MicroWinExecInterface.COM_GetRMEInformation(rcInfo, rcRMEInfo)

def COM_GetPlcTimeStamps(pCreateTime, pModTime):
    return _MicroWinExecInterface.COM_GetPlcTimeStamps(pCreateTime, pModTime)

def COM_StartComData(rdwThreadID):
    return _MicroWinExecInterface.COM_StartComData(rdwThreadID)

def COM_StopComData():
    return _MicroWinExecInterface.COM_StopComData()

def COM_SaveFaultInformation(strPath):
    return _MicroWinExecInterface.COM_SaveFaultInformation(strPath)

def SYM_GetNumberRows(rSymId, rNumRows):
    return _MicroWinExecInterface.SYM_GetNumberRows(rSymId, rNumRows)

def SYM_InsertRow(rSymId, Idx, count):
    return _MicroWinExecInterface.SYM_InsertRow(rSymId, Idx, count)

def SYM_DeleteRow(rSymId, Idx, count):
    return _MicroWinExecInterface.SYM_DeleteRow(rSymId, Idx, count)

def SYM_IncrementRow(rSymId, Idx, count):
    return _MicroWinExecInterface.SYM_IncrementRow(rSymId, Idx, count)

def SYM_GetRow(rSymId, Idx, rElement):
    return _MicroWinExecInterface.SYM_GetRow(rSymId, Idx, rElement)

def SYM_SetRow(rSymId, Idx, rElement):
    return _MicroWinExecInterface.SYM_SetRow(rSymId, Idx, rElement)

def SYM_ValSym(rType, rElement):
    return _MicroWinExecInterface.SYM_ValSym(rType, rElement)

def SYM_SetName(rSymId, Idx, rName):
    return _MicroWinExecInterface.SYM_SetName(rSymId, Idx, rName)

def SYM_SetValue(rSymId, Idx, rValue):
    return _MicroWinExecInterface.SYM_SetValue(rSymId, Idx, rValue)

def SYM_SetDataType(rSymId, Idx, rDataType):
    return _MicroWinExecInterface.SYM_SetDataType(rSymId, Idx, rDataType)

def SYM_SetComment(rSymId, Idx, rComment):
    return _MicroWinExecInterface.SYM_SetComment(rSymId, Idx, rComment)

def SYM_Sort(rSymId, sOrder):
    return _MicroWinExecInterface.SYM_Sort(rSymId, sOrder)

def SYM_GetTypesForRow(rSymId, wRow, strTypes):
    return _MicroWinExecInterface.SYM_GetTypesForRow(rSymId, wRow, strTypes)

def SYM_IsPasteAvailable(pPasteAvailable):
    return _MicroWinExecInterface.SYM_IsPasteAvailable(pPasteAvailable)

def SYM_CutRect(rSymId, rRect):
    return _MicroWinExecInterface.SYM_CutRect(rSymId, rRect)

def SYM_DeleteRect(rSymId, rRect):
    return _MicroWinExecInterface.SYM_DeleteRect(rSymId, rRect)

def SYM_CopyRect(rSymId, rRect):
    return _MicroWinExecInterface.SYM_CopyRect(rSymId, rRect)

def SYM_PasteRect(rSymId, rRect, rNumPasted):
    return _MicroWinExecInterface.SYM_PasteRect(rSymId, rRect, rNumPasted)

def SYM_IsDuplicate(rSymId, wIdx, rName, rAddress):
    return _MicroWinExecInterface.SYM_IsDuplicate(rSymId, wIdx, rName, rAddress)

def SYM_GetNamesFromType(sMask, memArea, rSymbolList):
    return _MicroWinExecInterface.SYM_GetNamesFromType(sMask, memArea, rSymbolList)

def SYM_GetSymbol(rSymbolName, rElement):
    return _MicroWinExecInterface.SYM_GetSymbol(rSymbolName, rElement)

def SYM_IsUndoAvailable(rSymId, rIsAvailable):
    return _MicroWinExecInterface.SYM_IsUndoAvailable(rSymId, rIsAvailable)

def SYM_Undo(rSymId, rRect, rUndoOption):
    return _MicroWinExecInterface.SYM_Undo(rSymId, rRect, rUndoOption)

def SYM_FlushUndo(rSymId):
    return _MicroWinExecInterface.SYM_FlushUndo(rSymId)

def SYM_ValidAddress(rAddress):
    return _MicroWinExecInterface.SYM_ValidAddress(rAddress)

def SYM_InsertSymbol(rSymId, rElement):
    return _MicroWinExecInterface.SYM_InsertSymbol(rSymId, rElement)

def SYM_FindSymbol(rName, rSymId, rRow):
    return _MicroWinExecInterface.SYM_FindSymbol(rName, rSymId, rRow)

def SYM_SetFindOptions(findOptions, rCurLoc):
    return _MicroWinExecInterface.SYM_SetFindOptions(findOptions, rCurLoc)

def SYM_Find(rFoundLoc):
    return _MicroWinExecInterface.SYM_Find(rFoundLoc)

def SYM_Replace(rFoundLoc):
    return _MicroWinExecInterface.SYM_Replace(rFoundLoc)

def SYM_ReplaceAll(rItemsReplaced):
    return _MicroWinExecInterface.SYM_ReplaceAll(rItemsReplaced)

def SYM_ImportBinarySymTable(rFilePath, rSymId):
    return _MicroWinExecInterface.SYM_ImportBinarySymTable(rFilePath, rSymId)

def SYM_AllocateLibraryAddresses(rGuid, rAdr):
    return _MicroWinExecInterface.SYM_AllocateLibraryAddresses(rGuid, rAdr)

def SYM_EmptyLibraryAddresses(rGuid):
    return _MicroWinExecInterface.SYM_EmptyLibraryAddresses(rGuid)

def SYM_IsInsertAvailable(eType, rInsertAvailable):
    return _MicroWinExecInterface.SYM_IsInsertAvailable(eType, rInsertAvailable)

def SYM_SaveSymbolTable(rSymId):
    return _MicroWinExecInterface.SYM_SaveSymbolTable(rSymId)

def SYM_LoadSymbolTable(rSymId):
    return _MicroWinExecInterface.SYM_LoadSymbolTable(rSymId)

def SYM_LoadSystemTable(rSymId):
    return _MicroWinExecInterface.SYM_LoadSystemTable(rSymId)

def SYM_CreateUndefinedSymbolTable(rSymId):
    return _MicroWinExecInterface.SYM_CreateUndefinedSymbolTable(rSymId)

def SYM_CreateS7200SymbolTable(rSymId):
    return _MicroWinExecInterface.SYM_CreateS7200SymbolTable(rSymId)

def SYM_CreateIOSymbolTable(rSymId):
    return _MicroWinExecInterface.SYM_CreateIOSymbolTable(rSymId)

def DLG_GetDialogOptions(dialogId, pBufSize, pOptionsBuf):
    return _MicroWinExecInterface.DLG_GetDialogOptions(dialogId, pBufSize, pOptionsBuf)

def DLG_SetDialogOptions(pAccessPoint, dialogId, pOptionsBuf):
    return _MicroWinExecInterface.DLG_SetDialogOptions(pAccessPoint, dialogId, pOptionsBuf)

def VAR_GetNumberRows(rPouId, rNumRows):
    return _MicroWinExecInterface.VAR_GetNumberRows(rPouId, rNumRows)

def VAR_GetRow(rPouId, wRow, rElement):
    return _MicroWinExecInterface.VAR_GetRow(rPouId, wRow, rElement)

def VAR_InsertRow(rPouId, wRow):
    return _MicroWinExecInterface.VAR_InsertRow(rPouId, wRow)

def VAR_InsertRowBelow(rPouId, wRow):
    return _MicroWinExecInterface.VAR_InsertRowBelow(rPouId, wRow)

def VAR_DeleteRow(rPouId, wRow):
    return _MicroWinExecInterface.VAR_DeleteRow(rPouId, wRow)

def VAR_SetName(rPouId, wRow, Name):
    return _MicroWinExecInterface.VAR_SetName(rPouId, wRow, Name)

def VAR_SetDataType(rPouId, wRow, DataType):
    return _MicroWinExecInterface.VAR_SetDataType(rPouId, wRow, DataType)

def VAR_SetComment(rPouId, wRow, Comment):
    return _MicroWinExecInterface.VAR_SetComment(rPouId, wRow, Comment)

def VAR_GetDataTypes(rPouId, wRow, rDataType):
    return _MicroWinExecInterface.VAR_GetDataTypes(rPouId, wRow, rDataType)

def VAR_CutRect(rPouId, rRect):
    return _MicroWinExecInterface.VAR_CutRect(rPouId, rRect)

def VAR_CopyRect(rPouId, rRect):
    return _MicroWinExecInterface.VAR_CopyRect(rPouId, rRect)

def VAR_PasteRect(rPouId, rRect):
    return _MicroWinExecInterface.VAR_PasteRect(rPouId, rRect)

def VAR_DeleteRect(rPouId, rRect):
    return _MicroWinExecInterface.VAR_DeleteRect(rPouId, rRect)

def VAR_IsUndoAvailable(rPouId, rIsAvailable):
    return _MicroWinExecInterface.VAR_IsUndoAvailable(rPouId, rIsAvailable)

def VAR_Undo(rPouId, rRect, rUndoOption):
    return _MicroWinExecInterface.VAR_Undo(rPouId, rRect, rUndoOption)

def VAR_FlushUndo(rPouId):
    return _MicroWinExecInterface.VAR_FlushUndo(rPouId)

def VAR_SetFindOptions(findOptions, rCurLoc):
    return _MicroWinExecInterface.VAR_SetFindOptions(findOptions, rCurLoc)

def VAR_Find(rCurLoc):
    return _MicroWinExecInterface.VAR_Find(rCurLoc)

def VAR_Replace(rCurLoc):
    return _MicroWinExecInterface.VAR_Replace(rCurLoc)

def VAR_ReplaceAll(rItemsReplaced):
    return _MicroWinExecInterface.VAR_ReplaceAll(rItemsReplaced)

def CHT_StoreStatus():
    return _MicroWinExecInterface.CHT_StoreStatus()

def CHT_IsModified(rChtId, rDirty):
    return _MicroWinExecInterface.CHT_IsModified(rChtId, rDirty)

def CHT_GetNumberRows(rChtId, rNumRows):
    return _MicroWinExecInterface.CHT_GetNumberRows(rChtId, rNumRows)

def CHT_GetRow(rChtId, rowIndex, rElement, eRefreshType):
    return _MicroWinExecInterface.CHT_GetRow(rChtId, rowIndex, rElement, eRefreshType)

def CHT_SetTrendRow(rChtId, rowIndex, rElement):
    return _MicroWinExecInterface.CHT_SetTrendRow(rChtId, rowIndex, rElement)

def CHT_SetAddress(rChtId, wRow, rAddress):
    return _MicroWinExecInterface.CHT_SetAddress(rChtId, wRow, rAddress)

def CHT_SetFormat(rChtId, wRow, rFormat):
    return _MicroWinExecInterface.CHT_SetFormat(rChtId, wRow, rFormat)

def CHT_SetWrite(rChtId, wRow, rWrite):
    return _MicroWinExecInterface.CHT_SetWrite(rChtId, wRow, rWrite)

def CHT_SetTimeBase(rChtId, wRow, rTbase):
    return _MicroWinExecInterface.CHT_SetTimeBase(rChtId, wRow, rTbase)

def CHT_GetRowHeight(rChtId, wRow, rRowHeight):
    return _MicroWinExecInterface.CHT_GetRowHeight(rChtId, wRow, rRowHeight)

def CHT_SetRowHeight(rChtId, wRow, rRowHeight):
    return _MicroWinExecInterface.CHT_SetRowHeight(rChtId, wRow, rRowHeight)

def CHT_SetActiveRow(rChtId, wRow, rActive):
    return _MicroWinExecInterface.CHT_SetActiveRow(rChtId, wRow, rActive)

def CHT_SetLockRange(rChtId, wRow, rLockRange):
    return _MicroWinExecInterface.CHT_SetLockRange(rChtId, wRow, rLockRange)

def CHT_IncrementAddress(rChtId, rowIndex):
    return _MicroWinExecInterface.CHT_IncrementAddress(rChtId, rowIndex)

def CHT_IncrementFormat(rChtId, rowIndex):
    return _MicroWinExecInterface.CHT_IncrementFormat(rChtId, rowIndex)

def CHT_InsertRow(rChtId, rowIndex, count):
    return _MicroWinExecInterface.CHT_InsertRow(rChtId, rowIndex, count)

def CHT_DeleteRect(rChtId, rRect):
    return _MicroWinExecInterface.CHT_DeleteRect(rChtId, rRect)

def CHT_Sort(rChtId, sRowIndex, eRowIndex, sOrder):
    return _MicroWinExecInterface.CHT_Sort(rChtId, sRowIndex, eRowIndex, sOrder)

def CHT_CutRect(rChtId, rRect):
    return _MicroWinExecInterface.CHT_CutRect(rChtId, rRect)

def CHT_CopyRect(rChtId, rRect):
    return _MicroWinExecInterface.CHT_CopyRect(rChtId, rRect)

def CHT_PasteRect(rChtId, rRect, rNumPasted):
    return _MicroWinExecInterface.CHT_PasteRect(rChtId, rRect, rNumPasted)

def CHT_GetFormatTypes(rChtId, wRow, rAdrFormats):
    return _MicroWinExecInterface.CHT_GetFormatTypes(rChtId, wRow, rAdrFormats)

def CHT_GetDataTypeMask(rChtId, wRow, rMask):
    return _MicroWinExecInterface.CHT_GetDataTypeMask(rChtId, wRow, rMask)

def CHT_IsPasteAvailable(pPasteAvailable):
    return _MicroWinExecInterface.CHT_IsPasteAvailable(pPasteAvailable)

def CHT_PauseChart(Pause):
    return _MicroWinExecInterface.CHT_PauseChart(Pause)

def CHT_StatusOn(wndHandle, rChtId, wRow, eRow):
    return _MicroWinExecInterface.CHT_StatusOn(wndHandle, rChtId, wRow, eRow)

def CHT_StatusOff(wndHandle):
    return _MicroWinExecInterface.CHT_StatusOff(wndHandle)

def CHT_SetStatusRectangle(wndHandle, rChtId, sRowIndex, eRowIndex):
    return _MicroWinExecInterface.CHT_SetStatusRectangle(wndHandle, rChtId, sRowIndex, eRowIndex)

def CHT_IsStatusOn(rStatusOn):
    return _MicroWinExecInterface.CHT_IsStatusOn(rStatusOn)

def CHT_SetViewReady(bReady):
    return _MicroWinExecInterface.CHT_SetViewReady(bReady)

def CHT_SetTrendReady(bReady):
    return _MicroWinExecInterface.CHT_SetTrendReady(bReady)

def CHT_WriteOperand(rId, wRow, strValue):
    return _MicroWinExecInterface.CHT_WriteOperand(rId, wRow, strValue)

def CHT_ForceOperand(rId, wRow, strValue):
    return _MicroWinExecInterface.CHT_ForceOperand(rId, wRow, strValue)

def CHT_SetViewType(rChtId, bIsTrend):
    return _MicroWinExecInterface.CHT_SetViewType(rChtId, bIsTrend)

def CHT_GetViewType(rChtId, rIsTrend):
    return _MicroWinExecInterface.CHT_GetViewType(rChtId, rIsTrend)

def CHT_SetPauseTrend(bPause):
    return _MicroWinExecInterface.CHT_SetPauseTrend(bPause)

def CHT_GetPauseTrend(rPause):
    return _MicroWinExecInterface.CHT_GetPauseTrend(rPause)

def CHT_SetTrendTimeBase(rChtId, eTimeBase):
    return _MicroWinExecInterface.CHT_SetTrendTimeBase(rChtId, eTimeBase)

def CHT_GetTrendTimeBase(rChtId, rTimeBase):
    return _MicroWinExecInterface.CHT_GetTrendTimeBase(rChtId, rTimeBase)

def CHT_TrendClear(rId, wRow):
    return _MicroWinExecInterface.CHT_TrendClear(rId, wRow)

def CHT_TrendClearAll(rId):
    return _MicroWinExecInterface.CHT_TrendClearAll(rId)

def CHT_GetTrendDataTypes(rId, wRow, rName, rTypes):
    return _MicroWinExecInterface.CHT_GetTrendDataTypes(rId, wRow, rName, rTypes)

def CHT_TrendIsAddressValid(rId, wRow, rName, bValid):
    return _MicroWinExecInterface.CHT_TrendIsAddressValid(rId, wRow, rName, bValid)

def CHT_TabChange(rId):
    return _MicroWinExecInterface.CHT_TabChange(rId)

def CHT_SingleRead(rChtId):
    return _MicroWinExecInterface.CHT_SingleRead(rChtId)

def CHT_Write(rChtId):
    return _MicroWinExecInterface.CHT_Write(rChtId)

def CHT_ReadAllForced(rChtId):
    return _MicroWinExecInterface.CHT_ReadAllForced(rChtId)

def CHT_Force(rChtId, rowIndex, eForceType):
    return _MicroWinExecInterface.CHT_Force(rChtId, rowIndex, eForceType)

def CHT_Unforce(rChtId, rowIndex):
    return _MicroWinExecInterface.CHT_Unforce(rChtId, rowIndex)

def CHT_CanForceUnforce(rChtId, rowIndex, rCanForceUnforce):
    return _MicroWinExecInterface.CHT_CanForceUnforce(rChtId, rowIndex, rCanForceUnforce)

def CHT_IsUndoAvailable(rChtId, rIsAvailable):
    return _MicroWinExecInterface.CHT_IsUndoAvailable(rChtId, rIsAvailable)

def CHT_Undo(rChtId, rRect, rUndoOption):
    return _MicroWinExecInterface.CHT_Undo(rChtId, rRect, rUndoOption)

def CHT_FlushUndo(rChtId):
    return _MicroWinExecInterface.CHT_FlushUndo(rChtId)

def CHT_SetFindOptions(rFindOptions, rCurLoc):
    return _MicroWinExecInterface.CHT_SetFindOptions(rFindOptions, rCurLoc)

def CHT_Find(rFoundLoc):
    return _MicroWinExecInterface.CHT_Find(rFoundLoc)

def CHT_Replace(rFoundLoc):
    return _MicroWinExecInterface.CHT_Replace(rFoundLoc)

def CHT_ReplaceAll(rItemsReplaced):
    return _MicroWinExecInterface.CHT_ReplaceAll(rItemsReplaced)

def TXT_GetLineCount(rPouId, wNet, nCnt):
    return _MicroWinExecInterface.TXT_GetLineCount(rPouId, wNet, nCnt)

def TXT_GetLineLength(rPouId, wNet, nLine, nLen):
    return _MicroWinExecInterface.TXT_GetLineLength(rPouId, wNet, nLine, nLen)

def TXT_DebugProperties(nCommand, rPouId, wNet, nLine, nCol):
    return _MicroWinExecInterface.TXT_DebugProperties(nCommand, rPouId, wNet, nLine, nCol)

def TXT_FormatLine(rPouId, wNet, nLine):
    return _MicroWinExecInterface.TXT_FormatLine(rPouId, wNet, nLine)

def TXT_GetLines(*args):
    return _MicroWinExecInterface.TXT_GetLines(*args)

def TXT_GetBlock(rPouId, wNet, nTopLine, nTopCol, nBotLine, nBotCol, rBlock):
    return _MicroWinExecInterface.TXT_GetBlock(rPouId, wNet, nTopLine, nTopCol, nBotLine, nBotCol, rBlock)

def TXT_InsBlock(rPouId, wNet, nTopLine, nTopCol, rBotLine, rBotCol, rBlock):
    return _MicroWinExecInterface.TXT_InsBlock(rPouId, wNet, nTopLine, nTopCol, rBotLine, rBotCol, rBlock)

def TXT_RepBlock(rPouId, wNet, nTopLine, nTopCol, rBotLine, rBotCol, rBlock):
    return _MicroWinExecInterface.TXT_RepBlock(rPouId, wNet, nTopLine, nTopCol, rBotLine, rBotCol, rBlock)

def TXT_DelBlock(rPouId, wNet, nTopLine, nTopCol, nBotLine, nBotCol):
    return _MicroWinExecInterface.TXT_DelBlock(rPouId, wNet, nTopLine, nTopCol, nBotLine, nBotCol)

def TXT_GetHelpId(rPouId, wNetwork, nLine, nCol, rHelpId):
    return _MicroWinExecInterface.TXT_GetHelpId(rPouId, wNetwork, nLine, nCol, rHelpId)

def TXT_GetOperandDataType(rPouId, wNet, nLine, nCol, rFilterMask):
    return _MicroWinExecInterface.TXT_GetOperandDataType(rPouId, wNet, nLine, nCol, rFilterMask)

def TXT_IsOperand(rPouId, wNet, nLine, nCol, rIsParam):
    return _MicroWinExecInterface.TXT_IsOperand(rPouId, wNet, nLine, nCol, rIsParam)

def TXT_TxtGetInstID(rPouId, wNet, nLine, nCol, rInstID):
    return _MicroWinExecInterface.TXT_TxtGetInstID(rPouId, wNet, nLine, nCol, rInstID)

def TXT_GetOperandFlags(rPouId, wNet, nLine, nCol, rOpFlags):
    return _MicroWinExecInterface.TXT_GetOperandFlags(rPouId, wNet, nLine, nCol, rOpFlags)

def TXT_GetOperand(rPouId, wNet, nLine, nCol, rElem):
    return _MicroWinExecInterface.TXT_GetOperand(rPouId, wNet, nLine, nCol, rElem)

def TXT_WriteOperand(rPouId, wNet, nLine, nCol, strValue):
    return _MicroWinExecInterface.TXT_WriteOperand(rPouId, wNet, nLine, nCol, strValue)

def TXT_ForceOperand(rPouId, wNet, nLine, nCol, strValue):
    return _MicroWinExecInterface.TXT_ForceOperand(rPouId, wNet, nLine, nCol, strValue)

def TXT_UnforceOperand(rPouId, wNet, nLine, nCol):
    return _MicroWinExecInterface.TXT_UnforceOperand(rPouId, wNet, nLine, nCol)

def TXT_IsOperandForced(rPouId, wNet, nLine, nCol, rForced, rCanBeForced):
    return _MicroWinExecInterface.TXT_IsOperandForced(rPouId, wNet, nLine, nCol, rForced, rCanBeForced)

def TXT_IsWriteValid(rPouId, wNet, nLine, nCol, rIsWriteValid):
    return _MicroWinExecInterface.TXT_IsWriteValid(rPouId, wNet, nLine, nCol, rIsWriteValid)

def TXT_IncrementAddress(rPouId, wNet, nLine, nCol, rSuccess, rLine, rCol, strIncAddr):
    return _MicroWinExecInterface.TXT_IncrementAddress(rPouId, wNet, nLine, nCol, rSuccess, rLine, rCol, strIncAddr)

def XREF_IsXrefCurrent(rCurrent):
    return _MicroWinExecInterface.XREF_IsXrefCurrent(rCurrent)

def XREF_OffsetsAreCurrent(rCurrent):
    return _MicroWinExecInterface.XREF_OffsetsAreCurrent(rCurrent)

def XREF_GetNumberReferences(rNumRefs):
    return _MicroWinExecInterface.XREF_GetNumberReferences(rNumRefs)

def XREF_GetReference(refNum, rRef):
    return _MicroWinExecInterface.XREF_GetReference(refNum, rRef)

def XREF_GetJumpPathForReference(refNum, rPath):
    return _MicroWinExecInterface.XREF_GetJumpPathForReference(refNum, rPath)

def XREF_Clear():
    return _MicroWinExecInterface.XREF_Clear()

def XREF_SetTimeStamp():
    return _MicroWinExecInterface.XREF_SetTimeStamp()

def XREF_GetTimeStamp(rTime):
    return _MicroWinExecInterface.XREF_GetTimeStamp(rTime)

def XREF_VarifyLibMemoryOverLop(totalErrors):
    return _MicroWinExecInterface.XREF_VarifyLibMemoryOverLop(totalErrors)

def XREF_GetNumberByteUsageRows(rNumRows, rowSize):
    return _MicroWinExecInterface.XREF_GetNumberByteUsageRows(rNumRows, rowSize)

def XREF_GetByteUsageRow(rowNum, rElement, rFlags, rowSize):
    return _MicroWinExecInterface.XREF_GetByteUsageRow(rowNum, rElement, rFlags, rowSize)

def XREF_GetNumberBitUsageRows(rNumRows, rowSize):
    return _MicroWinExecInterface.XREF_GetNumberBitUsageRows(rNumRows, rowSize)

def XREF_GetBitUsageRow(rowNum, rElement, rFlags, rowSize):
    return _MicroWinExecInterface.XREF_GetBitUsageRow(rowNum, rElement, rFlags, rowSize)

def XREF_GetNumberEdgeRows(rNumRows, rowSize):
    return _MicroWinExecInterface.XREF_GetNumberEdgeRows(rNumRows, rowSize)

def XREF_GetEdgeUsageRow(rowNum, rElement, rFlags, rowSize):
    return _MicroWinExecInterface.XREF_GetEdgeUsageRow(rowNum, rElement, rFlags, rowSize)

def XREF_SetFindOptions(rFindOptions, rCurLoc):
    return _MicroWinExecInterface.XREF_SetFindOptions(rFindOptions, rCurLoc)

def XREF_XREF_Find(rCurLoc):
    return _MicroWinExecInterface.XREF_XREF_Find(rCurLoc)

def XREF_BYTE_Find(rCurLoc):
    return _MicroWinExecInterface.XREF_BYTE_Find(rCurLoc)

def XREF_BIT_Find(rCurLoc):
    return _MicroWinExecInterface.XREF_BIT_Find(rCurLoc)

def XREF_Edge_Find(rCurLoc):
    return _MicroWinExecInterface.XREF_Edge_Find(rCurLoc)

def SYS_GetSigProfilePath(ppszPathName, nMaxSize):
    return _MicroWinExecInterface.SYS_GetSigProfilePath(ppszPathName, nMaxSize)

def SYS_GetDevProfilePath(ppszPathName, nMaxSize):
    return _MicroWinExecInterface.SYS_GetDevProfilePath(ppszPathName, nMaxSize)

def SYS_SetMnemonic(eNewMnemonic):
    return _MicroWinExecInterface.SYS_SetMnemonic(eNewMnemonic)

def SYS_CreateCOMServers(rstrAccessPoint):
    return _MicroWinExecInterface.SYS_CreateCOMServers(rstrAccessPoint)

def SYS_ReleaseCOMServers():
    return _MicroWinExecInterface.SYS_ReleaseCOMServers()

def SYS_GetDataTypes(sDataTypeMask, rDataTypeArray, rMask):
    return _MicroWinExecInterface.SYS_GetDataTypes(sDataTypeMask, rDataTypeArray, rMask)

def SYS_GetNumFormatTypes(pNumFormats):
    return _MicroWinExecInterface.SYS_GetNumFormatTypes(pNumFormats)

def SYS_GetFormatType(wIdx, pFormatType, wLen):
    return _MicroWinExecInterface.SYS_GetFormatType(wIdx, pFormatType, wLen)

def SYS_GetPlcCommData(pCommData):
    return _MicroWinExecInterface.SYS_GetPlcCommData(pCommData)

def SYS_IsOperandValidRange(sOperand):
    return _MicroWinExecInterface.SYS_IsOperandValidRange(sOperand)

def SYS_SetMainWindowHandle(wndHandle):
    return _MicroWinExecInterface.SYS_SetMainWindowHandle(wndHandle)

def SYS_CtrlF11DebugEvent():
    return _MicroWinExecInterface.SYS_CtrlF11DebugEvent()

def WIZ_GetNumWizardConfigsOfType(eType, rCount):
    return _MicroWinExecInterface.WIZ_GetNumWizardConfigsOfType(eType, rCount)

def WIZ_GenerateUniquePOUName(strName):
    return _MicroWinExecInterface.WIZ_GenerateUniquePOUName(strName)

def WIZ_GenerateUniqueSymbolicName(strName):
    return _MicroWinExecInterface.WIZ_GenerateUniqueSymbolicName(strName)

def WIZ_IsValidOperand(strOp, instId, opNumber, pType):
    return _MicroWinExecInterface.WIZ_IsValidOperand(strOp, instId, opNumber, pType)

def WIZ_GetAddressDetailsFromOpString(strOperand, rMemArea, rOpSize, rnOffset):
    return _MicroWinExecInterface.WIZ_GetAddressDetailsFromOpString(strOperand, rMemArea, rOpSize, rnOffset)

def WIZ_GetOpStringFromAddressDetails(memArea, opSize, nOffset, strOperand):
    return _MicroWinExecInterface.WIZ_GetOpStringFromAddressDetails(memArea, opSize, nOffset, strOperand)

def WIZ_GetWizardContainer(pWizList):
    return _MicroWinExecInterface.WIZ_GetWizardContainer(pWizList)

def WIZ_ValidateAndConvertSymbol(*args):
    return _MicroWinExecInterface.WIZ_ValidateAndConvertSymbol(*args)

def WIZ_ValidateStringAsLiteral(eTargetType, strOp, rsLit, rbIsIllegal):
    return _MicroWinExecInterface.WIZ_ValidateStringAsLiteral(eTargetType, strOp, rsLit, rbIsIllegal)

def WIZ_ValidateStringAsDataType(strOp, reDataType):
    return _MicroWinExecInterface.WIZ_ValidateStringAsDataType(strOp, reDataType)

def WIZ_BuildLiteralString(sLit, rstrOp):
    return _MicroWinExecInterface.WIZ_BuildLiteralString(sLit, rstrOp)

def WIZ_BuildDataTypeString(eType, rstrOp):
    return _MicroWinExecInterface.WIZ_BuildDataTypeString(eType, rstrOp)

def WIZ_MotionGetConfiguration(rData):
    return _MicroWinExecInterface.WIZ_MotionGetConfiguration(rData)

def WIZ_MotionSetConfiguration(rData):
    return _MicroWinExecInterface.WIZ_MotionSetConfiguration(rData)

def WIZ_MotionComplete(bSilentMode):
    return _MicroWinExecInterface.WIZ_MotionComplete(bSilentMode)

def WIZ_MotionRemoveExistingMotionConfiguration(rData):
    return _MicroWinExecInterface.WIZ_MotionRemoveExistingMotionConfiguration(rData)

def WIZ_PNGetConfiguration(rData):
    return _MicroWinExecInterface.WIZ_PNGetConfiguration(rData)

def WIZ_PNSetConfiguration(rData):
    return _MicroWinExecInterface.WIZ_PNSetConfiguration(rData)

def WIZ_PNConfigurationComplete(isShowMsgBox):
    return _MicroWinExecInterface.WIZ_PNConfigurationComplete(isShowMsgBox)

def WIZ_PNConfigurationValidation(rData, targetErrorObject):
    return _MicroWinExecInterface.WIZ_PNConfigurationValidation(rData, targetErrorObject)

def WIZ_PNConfigurationValidationAutoTest(targetErrorObject):
    return _MicroWinExecInterface.WIZ_PNConfigurationValidationAutoTest(targetErrorObject)

def WIZ_PNConfigurationClear():
    return _MicroWinExecInterface.WIZ_PNConfigurationClear()

def WIZ_PIDGetConfiguration(rData):
    return _MicroWinExecInterface.WIZ_PIDGetConfiguration(rData)

def WIZ_PIDSetConfiguration(rData):
    return _MicroWinExecInterface.WIZ_PIDSetConfiguration(rData)

def WIZ_PIDComplete():
    return _MicroWinExecInterface.WIZ_PIDComplete()

def WIZ_HSCGetConfiguration(rData):
    return _MicroWinExecInterface.WIZ_HSCGetConfiguration(rData)

def WIZ_HSCSetConfiguration(rData):
    return _MicroWinExecInterface.WIZ_HSCSetConfiguration(rData)

def WIZ_HSCComplete():
    return _MicroWinExecInterface.WIZ_HSCComplete()

def WIZ_PWMGetConfiguration(rData):
    return _MicroWinExecInterface.WIZ_PWMGetConfiguration(rData)

def WIZ_PWMSetConfiguration(rData):
    return _MicroWinExecInterface.WIZ_PWMSetConfiguration(rData)

def WIZ_PWMComplete():
    return _MicroWinExecInterface.WIZ_PWMComplete()

def WIZ_NetworkGetConfiguration(rData):
    return _MicroWinExecInterface.WIZ_NetworkGetConfiguration(rData)

def WIZ_NetworkSetConfiguration(rData):
    return _MicroWinExecInterface.WIZ_NetworkSetConfiguration(rData)

def WIZ_NetworkComplete():
    return _MicroWinExecInterface.WIZ_NetworkComplete()

def WIZ_HMIGetConfiguration(rData):
    return _MicroWinExecInterface.WIZ_HMIGetConfiguration(rData)

def WIZ_HMISetConfiguration(rData):
    return _MicroWinExecInterface.WIZ_HMISetConfiguration(rData)

def WIZ_HMIComplete():
    return _MicroWinExecInterface.WIZ_HMIComplete()

def WIZ_DataLogGetConfiguration(rData):
    return _MicroWinExecInterface.WIZ_DataLogGetConfiguration(rData)

def WIZ_DataLogSetConfiguration(rData):
    return _MicroWinExecInterface.WIZ_DataLogSetConfiguration(rData)

def WIZ_DataLogComplete():
    return _MicroWinExecInterface.WIZ_DataLogComplete()

def WIZ_DataLogUpload(rOptions, strFolder):
    return _MicroWinExecInterface.WIZ_DataLogUpload(rOptions, strFolder)

def WIZ_DataLogGetUploadOptions(rOptions):
    return _MicroWinExecInterface.WIZ_DataLogGetUploadOptions(rOptions)

def WIZ_IsVMemoryUseWithinDeviceLimit(startingOffset, size, isWithinLimit):
    return _MicroWinExecInterface.WIZ_IsVMemoryUseWithinDeviceLimit(startingOffset, size, isWithinLimit)

def WIZ_FindNextUnusedMemoryRegion(memArea, opSize, nSize, nBeginSearchAt, rnStartOffest):
    return _MicroWinExecInterface.WIZ_FindNextUnusedMemoryRegion(memArea, opSize, nSize, nBeginSearchAt, rnStartOffest)

def DEV_GetLadMemWords(rnSize):
    return _MicroWinExecInterface.DEV_GetLadMemWords(rnSize)

def DEV_GetNumPorts(rnPorts):
    return _MicroWinExecInterface.DEV_GetNumPorts(rnPorts)

def DEV_GetNumHSCs(rnHSCs):
    return _MicroWinExecInterface.DEV_GetNumHSCs(rnHSCs)

def DEV_GetNumHSCModes(nHSCNumber, rnHSCMode):
    return _MicroWinExecInterface.DEV_GetNumHSCModes(nHSCNumber, rnHSCMode)

def DEV_IsHSCSupported(nHSCNum, rbIsSupported):
    return _MicroWinExecInterface.DEV_IsHSCSupported(nHSCNum, rbIsSupported)

def DEV_IsHSCModeSupported(nHSCNum, nMode, rbIsSupported):
    return _MicroWinExecInterface.DEV_IsHSCModeSupported(nHSCNum, nMode, rbIsSupported)

def DEV_GetTotalPIDs(rnSize):
    return _MicroWinExecInterface.DEV_GetTotalPIDs(rnSize)

def DEV_GetVMemBytes(rnSize):
    return _MicroWinExecInterface.DEV_GetVMemBytes(rnSize)

def DEV_GetQMemBytes(rnSize):
    return _MicroWinExecInterface.DEV_GetQMemBytes(rnSize)

def DEV_GetIMemBytes(rnSize):
    return _MicroWinExecInterface.DEV_GetIMemBytes(rnSize)

def DEV_GetAIMemBytes(rnSize):
    return _MicroWinExecInterface.DEV_GetAIMemBytes(rnSize)

def DEV_GetAQMemBytes(rnSize):
    return _MicroWinExecInterface.DEV_GetAQMemBytes(rnSize)

def DEV_GetNumDataLogsAndMaxRecordSize(rnCount, rnSize):
    return _MicroWinExecInterface.DEV_GetNumDataLogsAndMaxRecordSize(rnCount, rnSize)

def DEV_GetNumRecipes(rnSize):
    return _MicroWinExecInterface.DEV_GetNumRecipes(rnSize)

def DEV_GetLinearPTOClockSpeed(rnSpeed):
    return _MicroWinExecInterface.DEV_GetLinearPTOClockSpeed(rnSpeed)

def DEV_GetOnBoardAIMemBytes(rnSize):
    return _MicroWinExecInterface.DEV_GetOnBoardAIMemBytes(rnSize)

def DEV_GetOnBoardAQMemBytes(rnSize):
    return _MicroWinExecInterface.DEV_GetOnBoardAQMemBytes(rnSize)

def DEV_GetNumRetentiveMemBytes(rnSize):
    return _MicroWinExecInterface.DEV_GetNumRetentiveMemBytes(rnSize)

def DEV_GetMaxSubroutines(rnSize):
    return _MicroWinExecInterface.DEV_GetMaxSubroutines(rnSize)

def DEV_GetMaxInterruptRoutines(rnSize):
    return _MicroWinExecInterface.DEV_GetMaxInterruptRoutines(rnSize)

def DEV_IsAutoTuneSupported(rbIsAutoTune):
    return _MicroWinExecInterface.DEV_IsAutoTuneSupported(rbIsAutoTune)

def DEV_IsExecutionStatusSupported(rbIsSupported):
    return _MicroWinExecInterface.DEV_IsExecutionStatusSupported(rbIsSupported)

def DEV_IsSTLStatusSupported(rbIsSupported):
    return _MicroWinExecInterface.DEV_IsSTLStatusSupported(rbIsSupported)

def DEV_IsResetScanSupported(rbIsSupported):
    return _MicroWinExecInterface.DEV_IsResetScanSupported(rbIsSupported)

def DEV_IsWriteAnyModeSupported(rbIsSupported):
    return _MicroWinExecInterface.DEV_IsWriteAnyModeSupported(rbIsSupported)

def DEV_IsForceSupported(rbIsSupported):
    return _MicroWinExecInterface.DEV_IsForceSupported(rbIsSupported)

def DEV_IsMultipleScanSupported(rbIsSupported):
    return _MicroWinExecInterface.DEV_IsMultipleScanSupported(rbIsSupported)

def DEV_IsPowerupResetSupported(rbIsSupported):
    return _MicroWinExecInterface.DEV_IsPowerupResetSupported(rbIsSupported)

def DEV_IsReadTODSupported(rbIsSupported):
    return _MicroWinExecInterface.DEV_IsReadTODSupported(rbIsSupported)

def DEV_IsWriteTODSupported(rbIsSupported):
    return _MicroWinExecInterface.DEV_IsWriteTODSupported(rbIsSupported)

def DEV_IsReadVarSupported(rbIsSupported):
    return _MicroWinExecInterface.DEV_IsReadVarSupported(rbIsSupported)

def DEV_IsWriteVarSupported(rbIsSupported):
    return _MicroWinExecInterface.DEV_IsWriteVarSupported(rbIsSupported)

def DEV_IsWriteMCSupported(rbIsSupported):
    return _MicroWinExecInterface.DEV_IsWriteMCSupported(rbIsSupported)

def DEV_IsStartSupported(rbIsSupported):
    return _MicroWinExecInterface.DEV_IsStartSupported(rbIsSupported)

def DEV_IsStopSupported(rbIsSupported):
    return _MicroWinExecInterface.DEV_IsStopSupported(rbIsSupported)

def DEV_IsUploadSupported(rbIsSupported):
    return _MicroWinExecInterface.DEV_IsUploadSupported(rbIsSupported)

def DEV_IsDownloadSupported(rbIsSupported):
    return _MicroWinExecInterface.DEV_IsDownloadSupported(rbIsSupported)

def DEV_IsDataBlockSupported(rbIsSupported):
    return _MicroWinExecInterface.DEV_IsDataBlockSupported(rbIsSupported)

def DEV_IsLinearPTOSupported(rbIsSupported):
    return _MicroWinExecInterface.DEV_IsLinearPTOSupported(rbIsSupported)

def DEV_IsDSTSupported(rbIsSupported):
    return _MicroWinExecInterface.DEV_IsDSTSupported(rbIsSupported)

def TAB_Insert(rType, rId):
    return _MicroWinExecInterface.TAB_Insert(rType, rId)

def TAB_Delete(rId):
    return _MicroWinExecInterface.TAB_Delete(rId)

def TAB_Move(rOld, rNew):
    return _MicroWinExecInterface.TAB_Move(rOld, rNew)

def TAB_CheckForChanges(rId, rChanges):
    return _MicroWinExecInterface.TAB_CheckForChanges(rId, rChanges)

def TAB_GetCount(rType, rNumber):
    return _MicroWinExecInterface.TAB_GetCount(rType, rNumber)

def TAB_GetOffset(rId, rOffset, eType):
    return _MicroWinExecInterface.TAB_GetOffset(rId, rOffset, eType)

def TAB_GetId(rType, wIdx, rId):
    return _MicroWinExecInterface.TAB_GetId(rType, wIdx, rId)

def TAB_GetName(rId, rName):
    return _MicroWinExecInterface.TAB_GetName(rId, rName)

def TAB_SetName(rId, rName):
    return _MicroWinExecInterface.TAB_SetName(rId, rName)

def TAB_IsNameUnique(rType, rName):
    return _MicroWinExecInterface.TAB_IsNameUnique(rType, rName)

def TAB_SetVisible(rPouId, bVisible):
    return _MicroWinExecInterface.TAB_SetVisible(rPouId, bVisible)

def TAB_CanInsert(eType, rInsert):
    return _MicroWinExecInterface.TAB_CanInsert(eType, rInsert)

def TAB_CanDelete(rId, rDelete):
    return _MicroWinExecInterface.TAB_CanDelete(rId, rDelete)

def TAB_CanCut(rId, rCut):
    return _MicroWinExecInterface.TAB_CanCut(rId, rCut)

def TAB_CanCopy(rId, rCopy):
    return _MicroWinExecInterface.TAB_CanCopy(rId, rCopy)

def TAB_CanRename(rId, rRename):
    return _MicroWinExecInterface.TAB_CanRename(rId, rRename)

def TAB_CanExport(rId, rExport):
    return _MicroWinExecInterface.TAB_CanExport(rId, rExport)

def TAB_CanShowProperties(rId, rProperties):
    return _MicroWinExecInterface.TAB_CanShowProperties(rId, rProperties)

def TAB_Cut(rId):
    return _MicroWinExecInterface.TAB_Cut(rId)

def TAB_Copy(rId):
    return _MicroWinExecInterface.TAB_Copy(rId)

def TAB_Paste(rId):
    return _MicroWinExecInterface.TAB_Paste(rId)

def TAB_Undo(rPath, eEvent):
    return _MicroWinExecInterface.TAB_Undo(rPath, eEvent)

def TAB_IsPasteAvailable(rType, rAvailable):
    return _MicroWinExecInterface.TAB_IsPasteAvailable(rType, rAvailable)

def TAB_IsUndoAvailable(rId, rAvailable):
    return _MicroWinExecInterface.TAB_IsUndoAvailable(rId, rAvailable)

def TAB_GetPasteType(rType):
    return _MicroWinExecInterface.TAB_GetPasteType(rType)

def TAB_SetFindOptions(rType, sFindOptions, curLoc):
    return _MicroWinExecInterface.TAB_SetFindOptions(rType, sFindOptions, curLoc)

def TAB_Find(rType, rFoundLoc):
    return _MicroWinExecInterface.TAB_Find(rType, rFoundLoc)

def TAB_Replace(rType, rFoundLoc):
    return _MicroWinExecInterface.TAB_Replace(rType, rFoundLoc)

def TAB_ReplaceAll(rType, rItemsReplaced):
    return _MicroWinExecInterface.TAB_ReplaceAll(rType, rItemsReplaced)

def TAB_GetDisplayProtection(rPouId, rStyle):
    return _MicroWinExecInterface.TAB_GetDisplayProtection(rPouId, rStyle)

def test_GetDisplayProtection(rId, rStyle):
    return _MicroWinExecInterface.test_GetDisplayProtection(rId, rStyle)

def TAB_SetDisplayProtection(rPouId, rPassword, rStyle):
    return _MicroWinExecInterface.TAB_SetDisplayProtection(rPouId, rPassword, rStyle)

def TAB_AuthorizePassword(rPouId, rPassword, bPermanent, bIsSha512):
    return _MicroWinExecInterface.TAB_AuthorizePassword(rPouId, rPassword, bPermanent, bIsSha512)

def TAB_ConvertPassword(rPouId, rPassword, bIsSha512):
    return _MicroWinExecInterface.TAB_ConvertPassword(rPouId, rPassword, bIsSha512)

def TAB_DeauthorizePassword(rPouId):
    return _MicroWinExecInterface.TAB_DeauthorizePassword(rPouId)

def TAB_GetProtectionInfo(rPouId, rInfo):
    return _MicroWinExecInterface.TAB_GetProtectionInfo(rPouId, rInfo)

def TAB_GetProtectionCategory(rPouId, rStyle):
    return _MicroWinExecInterface.TAB_GetProtectionCategory(rPouId, rStyle)

def TAB_GetProperties(rPouId, rOBJProps):
    return _MicroWinExecInterface.TAB_GetProperties(rPouId, rOBJProps)

def TAB_SetProperties(rPouId, rOBJProps):
    return _MicroWinExecInterface.TAB_SetProperties(rPouId, rOBJProps)

def TAB_SetBookmark(rPouId, rNetNumber, rLine, rState):
    return _MicroWinExecInterface.TAB_SetBookmark(rPouId, rNetNumber, rLine, rState)

def TAB_GetBookmark(rPouId, rNetNumber, rLine, rState):
    return _MicroWinExecInterface.TAB_GetBookmark(rPouId, rNetNumber, rLine, rState)

def TAB_FindNextBookmark(rPouId, rNetNumber, rLine, rFound):
    return _MicroWinExecInterface.TAB_FindNextBookmark(rPouId, rNetNumber, rLine, rFound)

def TAB_FindPrevBookmark(rPouId, rNetNumber, rLine, rFound):
    return _MicroWinExecInterface.TAB_FindPrevBookmark(rPouId, rNetNumber, rLine, rFound)

def TAB_DeleteAllBookmarks(rPouId):
    return _MicroWinExecInterface.TAB_DeleteAllBookmarks(rPouId)

def TREE_GetCnt(dwHandle, nCnt):
    return _MicroWinExecInterface.TREE_GetCnt(dwHandle, nCnt)

def TREE_GetAt(dwHandle, nIdx, dwLeaf):
    return _MicroWinExecInterface.TREE_GetAt(dwHandle, nIdx, dwLeaf)

def TREE_GetRoot(dwHandle):
    return _MicroWinExecInterface.TREE_GetRoot(dwHandle)

def TREE_GetInstRoot(dwHandle):
    return _MicroWinExecInterface.TREE_GetInstRoot(dwHandle)

def TREE_GetProjRoot(dwHandle):
    return _MicroWinExecInterface.TREE_GetProjRoot(dwHandle)

def TREE_GetHandle(sID, rHandle):
    return _MicroWinExecInterface.TREE_GetHandle(sID, rHandle)

def TREE_GetName(*args):
    return _MicroWinExecInterface.TREE_GetName(*args)

def TREE_GetToolTip(dwHandle, strTitle, strDescription):
    return _MicroWinExecInterface.TREE_GetToolTip(dwHandle, strTitle, strDescription)

def TREE_GetType(dwHandle, eType):
    return _MicroWinExecInterface.TREE_GetType(dwHandle, eType)

def TREE_GetGUID(dwHandle, sGUID):
    return _MicroWinExecInterface.TREE_GetGUID(dwHandle, sGUID)

def TREE_GetID(dwHandle, rId):
    return _MicroWinExecInterface.TREE_GetID(dwHandle, rId)

def TREE_GetHelpId(dwHandle, rId):
    return _MicroWinExecInterface.TREE_GetHelpId(dwHandle, rId)

def TREE_GetInstructionTooltip(wInstId, wSubId, strTitle, strDescription):
    return _MicroWinExecInterface.TREE_GetInstructionTooltip(wInstId, wSubId, strTitle, strDescription)

def TREE_CanAddFav(dwHandle, bCan):
    return _MicroWinExecInterface.TREE_CanAddFav(dwHandle, bCan)

def TREE_AddFav(dwHandle):
    return _MicroWinExecInterface.TREE_AddFav(dwHandle)

def TREE_DelFav(dwHandle):
    return _MicroWinExecInterface.TREE_DelFav(dwHandle)


